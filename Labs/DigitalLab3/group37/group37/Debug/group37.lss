
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000146  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004a5  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000277  00000000  00000000  000006f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000423  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00000d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a7  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061f  00000000  00000000  000011a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  88:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <timer0_init>:
	UDR0 = data;
 }

 //Initializes the timer
 void timer0_init() {
	TCCR0B |= (1<<CS00)|(1<<CS02); //Prescaler of 1024
  90:	85 b5       	in	r24, 0x25	; 37
  92:	85 60       	ori	r24, 0x05	; 5
  94:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0; //Initialize timer0
  96:	16 bc       	out	0x26, r1	; 38
  98:	08 95       	ret

0000009a <main>:
#define F_CPU 16000000UL

volatile uint8_t counter = 0; //Counter for the number of times the TCNT0 compares correctly

int main(void) {	
	timer0_init();
  9a:	0e 94 48 00 	call	0x90	; 0x90 <timer0_init>
	DDRB |= (1<<PORTB5);
  9e:	25 9a       	sbi	0x04, 5	; 4

	while (1) {	
		
		if(TCNT0>=156) {
  a0:	86 b5       	in	r24, 0x26	; 38
  a2:	8c 39       	cpi	r24, 0x9C	; 156
  a4:	e8 f3       	brcs	.-6      	; 0xa0 <main+0x6>
			TCNT0 = 0;
  a6:	16 bc       	out	0x26, r1	; 38
			if (counter == 100) {
  a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ac:	84 36       	cpi	r24, 0x64	; 100
  ae:	31 f0       	breq	.+12     	; 0xbc <main+0x22>
				counter = 0;
				PORTB ^= (1<<5);
				break;
			} else {
				counter++;
  b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  ba:	f2 cf       	rjmp	.-28     	; 0xa0 <main+0x6>
	while (1) {	
		
		if(TCNT0>=156) {
			TCNT0 = 0;
			if (counter == 100) {
				counter = 0;
  bc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				PORTB ^= (1<<5);
  c0:	95 b1       	in	r25, 0x05	; 5
  c2:	80 e2       	ldi	r24, 0x20	; 32
  c4:	89 27       	eor	r24, r25
  c6:	85 b9       	out	0x05, r24	; 5
				counter++;
			}	
		}
	}
	return 0;
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	08 95       	ret

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
