
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000054c  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000300  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d8  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00000fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000301  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000668  00000000  00000000  0000147d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_11>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  8e:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <timer1_init>:
	UDR0 = data;
 }

 //Initializes the timer
 void timer1_init() {
	OCR1A = 0x3D09;
  96:	89 e0       	ldi	r24, 0x09	; 9
  98:	9d e3       	ldi	r25, 0x3D	; 61
  9a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  9e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= (1<<CS12)|(1<<CS10)|(1<<WGM12); //Prescaler of 1024
  a2:	e1 e8       	ldi	r30, 0x81	; 129
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	8d 60       	ori	r24, 0x0D	; 13
  aa:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);	
  ac:	ef e6       	ldi	r30, 0x6F	; 111
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <main>:
#include <avr/interrupt.h>

volatile uint16_t countCheck = 1; 

int main(void) {
	sei();	
  b8:	78 94       	sei
	timer1_init();
  ba:	0e 94 4b 00 	call	0x96	; 0x96 <timer1_init>
	DDRB |= (1<<5);
  be:	25 9a       	sbi	0x04, 5	; 4
	DDRB &= ~(1<<7);
  c0:	27 98       	cbi	0x04, 7	; 4
	
	PORTB &= ~(1<<5);
  c2:	2d 98       	cbi	0x05, 5	; 5
		} else {
			if (countCheck == 1) {
				countCheck = 2;
				OCR1A = 0x7C6A; // Set timer to count to 2 seconds
			} else {
				countCheck = 1;
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	50 e0       	ldi	r21, 0x00	; 0
				OCR1A = 0x3D08; // Set timer to count to 1 second
  c8:	e8 e8       	ldi	r30, 0x88	; 136
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	28 e0       	ldi	r18, 0x08	; 8
  ce:	3d e3       	ldi	r19, 0x3D	; 61
	while (1) {	
		if (PINB & (1<<PORTB7)) {
			
		} else {
			if (countCheck == 1) {
				countCheck = 2;
  d0:	a2 e0       	ldi	r26, 0x02	; 2
  d2:	b0 e0       	ldi	r27, 0x00	; 0
				OCR1A = 0x7C6A; // Set timer to count to 2 seconds
  d4:	6a e6       	ldi	r22, 0x6A	; 106
  d6:	7c e7       	ldi	r23, 0x7C	; 124
	DDRB &= ~(1<<7);
	
	PORTB &= ~(1<<5);

	while (1) {	
		if (PINB & (1<<PORTB7)) {
  d8:	1f 99       	sbic	0x03, 7	; 3
  da:	fe cf       	rjmp	.-4      	; 0xd8 <main+0x20>
			
		} else {
			if (countCheck == 1) {
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	39 f4       	brne	.+14     	; 0xf6 <main+0x3e>
				countCheck = 2;
  e8:	b0 93 01 01 	sts	0x0101, r27	; 0x800101 <__data_start+0x1>
  ec:	a0 93 00 01 	sts	0x0100, r26	; 0x800100 <__data_start>
				OCR1A = 0x7C6A; // Set timer to count to 2 seconds
  f0:	71 83       	std	Z+1, r23	; 0x01
  f2:	60 83       	st	Z, r22
  f4:	06 c0       	rjmp	.+12     	; 0x102 <main+0x4a>
			} else {
				countCheck = 1;
  f6:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_start+0x1>
  fa:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
				OCR1A = 0x3D08; // Set timer to count to 1 second
  fe:	31 83       	std	Z+1, r19	; 0x01
 100:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	91 ee       	ldi	r25, 0xE1	; 225
 106:	c4 e0       	ldi	r28, 0x04	; 4
 108:	81 50       	subi	r24, 0x01	; 1
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	c0 40       	sbci	r28, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x50>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x5a>
 112:	00 00       	nop
 114:	e1 cf       	rjmp	.-62     	; 0xd8 <main+0x20>

00000116 <__vector_11>:
		*/
	}
	return 0;
}

ISR (TIMER1_COMPA_vect) {
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	PORTB ^= (1<<5);
 124:	95 b1       	in	r25, 0x05	; 5
 126:	80 e2       	ldi	r24, 0x20	; 32
 128:	89 27       	eor	r24, r25
 12a:	85 b9       	out	0x05, r24	; 5
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
