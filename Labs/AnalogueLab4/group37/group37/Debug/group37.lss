
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000348  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000245  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000311  00000000  00000000  00000805  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00000b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000261  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001eb  00000000  00000000  00000e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  78:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <uart_init>:
 unsigned int find_decimal(float data) {
	if (data < 10) { return 0; }
	if (data < 100) { return 1; }
	if (data < 1000) { return 2; }
	return 3;
 }
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  8a:	e1 ec       	ldi	r30, 0xC1	; 193
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 60       	ori	r24, 0x08	; 8
  92:	80 83       	st	Z, r24
  94:	e2 ec       	ldi	r30, 0xC2	; 194
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	86 60       	ori	r24, 0x06	; 6
  9c:	80 83       	st	Z, r24
  9e:	08 95       	ret

000000a0 <uart_transmit>:
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	99 23       	and	r25, r25
  a8:	e9 f3       	breq	.-6      	; 0xa4 <uart_transmit+0x4>
  aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ae:	08 95       	ret

000000b0 <wololo>:

 //Converts our parameters into the value to send
 unsigned int wololo(uint8_t input, uint8_t position, uint8_t decimal) {
	unsigned int output = input;
  b0:	90 e0       	ldi	r25, 0x00	; 0
	if (decimal == 1) { output += 16; }
  b2:	41 30       	cpi	r20, 0x01	; 1
  b4:	09 f4       	brne	.+2      	; 0xb8 <wololo+0x8>
  b6:	40 96       	adiw	r24, 0x10	; 16
	if (position == 0) { output += 96; }
  b8:	61 11       	cpse	r22, r1
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <wololo+0x12>
  bc:	80 5a       	subi	r24, 0xA0	; 160
  be:	9f 4f       	sbci	r25, 0xFF	; 255
  c0:	08 95       	ret
	if (position == 1) { output += 64; }
  c2:	61 30       	cpi	r22, 0x01	; 1
  c4:	19 f4       	brne	.+6      	; 0xcc <wololo+0x1c>
  c6:	80 5c       	subi	r24, 0xC0	; 192
  c8:	9f 4f       	sbci	r25, 0xFF	; 255
  ca:	08 95       	ret
	if (position == 2) { output += 32; }
  cc:	62 30       	cpi	r22, 0x02	; 2
  ce:	09 f4       	brne	.+2      	; 0xd2 <wololo+0x22>
  d0:	80 96       	adiw	r24, 0x20	; 32
	return output;
  d2:	08 95       	ret

000000d4 <main>:
#include <avr/io.h>
#include "prototypes37.h"
#define F_CPU 16000000UL
#include <util/delay.h>

int main(void) {
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	00 d0       	rcall	.+0      	; 0xda <main+0x6>
  da:	00 d0       	rcall	.+0      	; 0xdc <main+0x8>
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
	uart_init();	
  e0:	0e 94 40 00 	call	0x80	; 0x80 <uart_init>
  e4:	ce 01       	movw	r24, r28
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	7c 01       	movw	r14, r24
  ea:	6e 01       	movw	r12, r28
  ec:	95 e0       	ldi	r25, 0x05	; 5
  ee:	c9 0e       	add	r12, r25
  f0:	d1 1c       	adc	r13, r1
  f2:	87 01       	movw	r16, r14
  f4:	60 2f       	mov	r22, r16
  f6:	6e 19       	sub	r22, r14
	unsigned int dataInt = 6969;
	uint8_t dataArray[4];
	uint8_t index = 0;
		
	for (int i=0;i<4;i++) {
		dataArray[i] = wololo(dataInt%10, i, 0);
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	89 e0       	ldi	r24, 0x09	; 9
  fc:	0e 94 58 00 	call	0xb0	; 0xb0 <wololo>
 100:	f8 01       	movw	r30, r16
 102:	81 93       	st	Z+, r24
 104:	8f 01       	movw	r16, r30
	uart_init();	
	unsigned int dataInt = 6969;
	uint8_t dataArray[4];
	uint8_t index = 0;
		
	for (int i=0;i<4;i++) {
 106:	ec 15       	cp	r30, r12
 108:	fd 05       	cpc	r31, r13
 10a:	a1 f7       	brne	.-24     	; 0xf4 <main+0x20>
 10c:	14 c0       	rjmp	.+40     	; 0x136 <main+0x62>
		dataArray[i] = wololo(dataInt%10, i, 0);
	}
	while (1) {
		uint8_t data = dataArray[index];	//Get the integer to send	
 10e:	e1 e0       	ldi	r30, 0x01	; 1
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	ec 0f       	add	r30, r28
 114:	fd 1f       	adc	r31, r29
 116:	e1 0f       	add	r30, r17
 118:	f1 1d       	adc	r31, r1
		uart_transmit(data);
 11a:	80 81       	ld	r24, Z
 11c:	0e 94 50 00 	call	0xa0	; 0xa0 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	9f e1       	ldi	r25, 0x1F	; 31
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x50>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x56>
 12a:	00 00       	nop
		_delay_ms(2);	//Small time delay so that no apparent flicker on seven segment displays
		index++;
 12c:	1f 5f       	subi	r17, 0xFF	; 255
		//Select next integer to send
		if (index == 4) {
 12e:	14 30       	cpi	r17, 0x04	; 4
 130:	71 f7       	brne	.-36     	; 0x10e <main+0x3a>
			index = 0;
 132:	10 2f       	mov	r17, r16
 134:	ec cf       	rjmp	.-40     	; 0x10e <main+0x3a>
	for (int i=0;i<4;i++) {
		dataArray[i] = wololo(dataInt%10, i, 0);
	}
	while (1) {
		uint8_t data = dataArray[index];	//Get the integer to send	
		uart_transmit(data);
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	0e 94 50 00 	call	0xa0	; 0xa0 <uart_transmit>
 13c:	ef e3       	ldi	r30, 0x3F	; 63
 13e:	ff e1       	ldi	r31, 0x1F	; 31
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x6c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x72>
 146:	00 00       	nop
		_delay_ms(2);	//Small time delay so that no apparent flicker on seven segment displays
		index++;
 148:	11 e0       	ldi	r17, 0x01	; 1
		//Select next integer to send
		if (index == 4) {
			index = 0;
 14a:	00 e0       	ldi	r16, 0x00	; 0
 14c:	e0 cf       	rjmp	.-64     	; 0x10e <main+0x3a>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
