
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c38  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000cac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a9  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003bc  00000000  00000000  0000155d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000565  00000000  00000000  00001919  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00001e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000337  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000845  00000000  00000000  00002337  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00002b7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <pow+0x56>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a1 30       	cpi	r26, 0x01	; 1
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 37 01 	call	0x26e	; 0x26e <main>
 10a:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <uart_init>:
 unsigned int adc_read_1() {
	ADCSRA |= (1<<ADSC); //Start conversion
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
	unsigned int adcRead = ADC;
	return adcRead;
 }
 112:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 116:	87 e6       	ldi	r24, 0x67	; 103
 118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 11c:	e1 ec       	ldi	r30, 0xC1	; 193
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 60       	ori	r24, 0x08	; 8
 124:	80 83       	st	Z, r24
 126:	e2 ec       	ldi	r30, 0xC2	; 194
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	86 60       	ori	r24, 0x06	; 6
 12e:	80 83       	st	Z, r24
 130:	08 95       	ret

00000132 <uart_transmit>:
 132:	e0 ec       	ldi	r30, 0xC0	; 192
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 81       	ld	r25, Z
 138:	99 23       	and	r25, r25
 13a:	e9 f3       	breq	.-6      	; 0x136 <uart_transmit+0x4>
 13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 140:	08 95       	ret

00000142 <timer0_init>:
 142:	85 b5       	in	r24, 0x25	; 37
 144:	85 60       	ori	r24, 0x05	; 5
 146:	85 bd       	out	0x25, r24	; 37
 148:	16 bc       	out	0x26, r1	; 38
 14a:	08 95       	ret

0000014c <find_decimal>:
 14c:	cf 92       	push	r12
 14e:	df 92       	push	r13
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	6b 01       	movw	r12, r22
 156:	7c 01       	movw	r14, r24
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e2       	ldi	r20, 0x20	; 32
 15e:	51 e4       	ldi	r21, 0x41	; 65
 160:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__cmpsf2>
 164:	88 23       	and	r24, r24
 166:	04 f1       	brlt	.+64     	; 0x1a8 <find_decimal+0x5c>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	48 ec       	ldi	r20, 0xC8	; 200
 16e:	52 e4       	ldi	r21, 0x42	; 66
 170:	c7 01       	movw	r24, r14
 172:	b6 01       	movw	r22, r12
 174:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__cmpsf2>
 178:	88 23       	and	r24, r24
 17a:	cc f0       	brlt	.+50     	; 0x1ae <find_decimal+0x62>
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	4a e7       	ldi	r20, 0x7A	; 122
 182:	54 e4       	ldi	r21, 0x44	; 68
 184:	c7 01       	movw	r24, r14
 186:	b6 01       	movw	r22, r12
 188:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__cmpsf2>
 18c:	08 2e       	mov	r0, r24
 18e:	00 0c       	add	r0, r0
 190:	99 0b       	sbc	r25, r25
 192:	88 27       	eor	r24, r24
 194:	99 0f       	add	r25, r25
 196:	88 1f       	adc	r24, r24
 198:	99 27       	eor	r25, r25
 19a:	23 e0       	ldi	r18, 0x03	; 3
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	a9 01       	movw	r20, r18
 1a0:	48 1b       	sub	r20, r24
 1a2:	59 0b       	sbc	r21, r25
 1a4:	ca 01       	movw	r24, r20
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <find_decimal+0x66>
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <find_decimal+0x66>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <wololo>:
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <wololo+0x8>
 1c2:	40 96       	adiw	r24, 0x10	; 16
 1c4:	61 11       	cpse	r22, r1
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <wololo+0x12>
 1c8:	80 5a       	subi	r24, 0xA0	; 160
 1ca:	9f 4f       	sbci	r25, 0xFF	; 255
 1cc:	08 95       	ret
 1ce:	61 30       	cpi	r22, 0x01	; 1
 1d0:	19 f4       	brne	.+6      	; 0x1d8 <wololo+0x1c>
 1d2:	80 5c       	subi	r24, 0xC0	; 192
 1d4:	9f 4f       	sbci	r25, 0xFF	; 255
 1d6:	08 95       	ret
 1d8:	62 30       	cpi	r22, 0x02	; 2
 1da:	09 f4       	brne	.+2      	; 0x1de <wololo+0x22>
 1dc:	80 96       	adiw	r24, 0x20	; 32
 1de:	08 95       	ret

000001e0 <adc_init>:
 1e0:	17 b8       	out	0x07, r1	; 7
 1e2:	ea e7       	ldi	r30, 0x7A	; 122
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	87 68       	ori	r24, 0x87	; 135
 1ea:	80 83       	st	Z, r24
 1ec:	ec e7       	ldi	r30, 0x7C	; 124
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	80 64       	ori	r24, 0x40	; 64
 1f4:	80 83       	st	Z, r24
 1f6:	08 95       	ret

000001f8 <adc_read_2>:

 //Reads from C0 and C2 alternately
 void adc_read_2(unsigned int* adcValue1, unsigned int* adcValue2) {
 1f8:	dc 01       	movw	r26, r24
	ADMUX &= ~(1<<MUX1);
 1fa:	ec e7       	ldi	r30, 0x7C	; 124
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	90 81       	ld	r25, Z
 200:	9d 7f       	andi	r25, 0xFD	; 253
 202:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC); //Start conversion
 204:	ea e7       	ldi	r30, 0x7A	; 122
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	90 81       	ld	r25, Z
 20a:	90 64       	ori	r25, 0x40	; 64
 20c:	90 83       	st	Z, r25
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
 20e:	90 81       	ld	r25, Z
 210:	94 ff       	sbrs	r25, 4
 212:	fd cf       	rjmp	.-6      	; 0x20e <adc_read_2+0x16>
	(*adcValue1) = ADC;
 214:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 218:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 21c:	8d 93       	st	X+, r24
 21e:	9c 93       	st	X, r25
	ADMUX |= (1<<MUX1);
 220:	ec e7       	ldi	r30, 0x7C	; 124
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	82 60       	ori	r24, 0x02	; 2
 228:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start conversion
 22a:	ea e7       	ldi	r30, 0x7A	; 122
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 64       	ori	r24, 0x40	; 64
 232:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
 234:	80 81       	ld	r24, Z
 236:	84 ff       	sbrs	r24, 4
 238:	fd cf       	rjmp	.-6      	; 0x234 <adc_read_2+0x3c>
	(*adcValue2) = ADC;
 23a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 23e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 242:	fb 01       	movw	r30, r22
 244:	91 83       	std	Z+1, r25	; 0x01
 246:	80 83       	st	Z, r24
 248:	08 95       	ret

0000024a <adc_calculation>:
 }

 //Converts an ADC integer into the actual voltage measured by the ADC pin
 float adc_calculation(unsigned int adcValue) {
	float calculatedValue;
	calculatedValue = ((float)adcValue / 1023) * 5;
 24a:	bc 01       	movw	r22, r24
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 28 03 	call	0x650	; 0x650 <__floatunsisf>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 ec       	ldi	r19, 0xC0	; 192
 258:	4f e7       	ldi	r20, 0x7F	; 127
 25a:	54 e4       	ldi	r21, 0x44	; 68
 25c:	0e 94 80 02 	call	0x500	; 0x500 <__divsf3>
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 ea       	ldi	r20, 0xA0	; 160
 266:	50 e4       	ldi	r21, 0x40	; 64
 268:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__mulsf3>
	return calculatedValue; 
 }
 26c:	08 95       	ret

0000026e <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

volatile uint8_t counter = 0; //Counter for the number of times the TCNT0 compares correctly

int main(void) {
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	29 97       	sbiw	r28, 0x09	; 9
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	de bf       	out	0x3e, r29	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	cd bf       	out	0x3d, r28	; 61
	float voltage[20] = { 1.65, 2.03, 2.38, 2.65, 2.81, 2.85, 2.76, 2.55, 2.25, 1.89, 1.50, 1.12, 0.81, 0.578, 0.46, 0.47, 0.61, 0.851, 1.15, 1.56 };
	float current[20] = { 1.81, 2.12, 2.38, 2.56, 2.64, 2.62, 2.50, 2.29, 2.01, 1.69, 1.36, 1.07, 0.84, 0.69, 0.65, 0.71, 0.87, 1.11, 1.41 };
	float power = calcPower(&voltage, &current);
	*/

	adc_init();
 282:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <adc_init>
	uart_init();	
 286:	0e 94 89 00 	call	0x112	; 0x112 <uart_init>
	timer0_init();
 28a:	0e 94 a1 00 	call	0x142	; 0x142 <timer0_init>
	float floatArray[4] = { 1234, 1235, 1236, 1237 }; //Array of values to send
	unsigned int floatIndex = 0;
 28e:	81 2c       	mov	r8, r1
 290:	91 2c       	mov	r9, r1
		}

		//Pre-wololo calculations and conversions
		dataFloat = roundf(dataFloat * 1000) / 1000;
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
 292:	0f 2e       	mov	r0, r31
 294:	f3 e0       	ldi	r31, 0x03	; 3
 296:	6f 2e       	mov	r6, r31
 298:	71 2c       	mov	r7, r1
 29a:	f0 2d       	mov	r31, r0
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
			if ((decimalPos == i) && ((3-decimalPos) > 0)) {
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
 29c:	21 2c       	mov	r2, r1
 29e:	32 2c       	mov	r3, r2
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
			if ((decimalPos == i) && ((3-decimalPos) > 0)) {
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	29 87       	std	Y+9, r18	; 0x09
		uint8_t index = 0;
		
		//Reading from the ADC and calculating
		unsigned int adcValue1;
		unsigned int adcValue2;
		adc_read_2(&adcValue1, &adcValue2);
 2a4:	be 01       	movw	r22, r28
 2a6:	6b 5f       	subi	r22, 0xFB	; 251
 2a8:	7f 4f       	sbci	r23, 0xFF	; 255
 2aa:	ce 01       	movw	r24, r28
 2ac:	07 96       	adiw	r24, 0x07	; 7
 2ae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <adc_read_2>
		if (floatIndex%2 == 0) {
 2b2:	80 fc       	sbrc	r8, 0
 2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <main+0x52>
			dataFloat = adc_calculation(adcValue1);
 2b6:	8f 81       	ldd	r24, Y+7	; 0x07
 2b8:	98 85       	ldd	r25, Y+8	; 0x08
 2ba:	0e 94 25 01 	call	0x24a	; 0x24a <adc_calculation>
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <main+0x5a>
		} else {
			dataFloat = adc_calculation(adcValue2);
 2c0:	8d 81       	ldd	r24, Y+5	; 0x05
 2c2:	9e 81       	ldd	r25, Y+6	; 0x06
 2c4:	0e 94 25 01 	call	0x24a	; 0x24a <adc_calculation>
		}

		//Pre-wololo calculations and conversions
		dataFloat = roundf(dataFloat * 1000) / 1000;
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	4a e7       	ldi	r20, 0x7A	; 122
 2ce:	54 e4       	ldi	r21, 0x44	; 68
 2d0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__mulsf3>
 2d4:	0e 94 97 04 	call	0x92e	; 0x92e <round>
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	4a e7       	ldi	r20, 0x7A	; 122
 2de:	54 e4       	ldi	r21, 0x44	; 68
 2e0:	0e 94 80 02 	call	0x500	; 0x500 <__divsf3>
 2e4:	6b 01       	movw	r12, r22
 2e6:	7c 01       	movw	r14, r24
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
 2e8:	0e 94 a6 00 	call	0x14c	; 0x14c <find_decimal>
 2ec:	5c 01       	movw	r10, r24
 2ee:	bb 24       	eor	r11, r11
		unsigned int dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
 2f0:	23 01       	movw	r4, r6
 2f2:	4a 18       	sub	r4, r10
 2f4:	5b 08       	sbc	r5, r11
 2f6:	b2 01       	movw	r22, r4
 2f8:	05 2c       	mov	r0, r5
 2fa:	00 0c       	add	r0, r0
 2fc:	88 0b       	sbc	r24, r24
 2fe:	99 0b       	sbc	r25, r25
 300:	0e 94 2a 03 	call	0x654	; 0x654 <__floatsisf>
 304:	9b 01       	movw	r18, r22
 306:	ac 01       	movw	r20, r24
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	80 e2       	ldi	r24, 0x20	; 32
 30e:	91 e4       	ldi	r25, 0x41	; 65
 310:	0e 94 47 04 	call	0x88e	; 0x88e <pow>
 314:	a7 01       	movw	r20, r14
 316:	96 01       	movw	r18, r12
 318:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__mulsf3>
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	5f e3       	ldi	r21, 0x3F	; 63
 324:	0e 94 0f 02 	call	0x41e	; 0x41e <__addsf3>
 328:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__fixsfsi>
 32c:	7b 01       	movw	r14, r22
 32e:	ce 01       	movw	r24, r28
 330:	05 96       	adiw	r24, 0x05	; 5
 332:	6c 01       	movw	r12, r24
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
 334:	83 01       	movw	r16, r6
			if ((decimalPos == i) && ((3-decimalPos) > 0)) {
 336:	0a 15       	cp	r16, r10
 338:	1b 05       	cpc	r17, r11
 33a:	31 f4       	brne	.+12     	; 0x348 <main+0xda>
 33c:	49 85       	ldd	r20, Y+9	; 0x09
 33e:	14 14       	cp	r1, r4
 340:	15 04       	cpc	r1, r5
 342:	1c f0       	brlt	.+6      	; 0x34a <main+0xdc>
 344:	43 2d       	mov	r20, r3
 346:	01 c0       	rjmp	.+2      	; 0x34a <main+0xdc>
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
 348:	43 2d       	mov	r20, r3
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
 34a:	97 01       	movw	r18, r14
 34c:	ad ec       	ldi	r26, 0xCD	; 205
 34e:	bc ec       	ldi	r27, 0xCC	; 204
 350:	0e 94 0b 06 	call	0xc16	; 0xc16 <__umulhisi3>
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	96 95       	lsr	r25
 35a:	87 95       	ror	r24
 35c:	96 95       	lsr	r25
 35e:	87 95       	ror	r24
 360:	9c 01       	movw	r18, r24
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	82 0f       	add	r24, r18
 374:	93 1f       	adc	r25, r19
 376:	60 2f       	mov	r22, r16
 378:	ee 2d       	mov	r30, r14
 37a:	e8 1b       	sub	r30, r24
 37c:	8e 2f       	mov	r24, r30
 37e:	0e 94 de 00 	call	0x1bc	; 0x1bc <wololo>
 382:	f6 01       	movw	r30, r12
 384:	82 93       	st	-Z, r24
 386:	6f 01       	movw	r12, r30
			dataInt = dataInt/10;
 388:	97 01       	movw	r18, r14
 38a:	ad ec       	ldi	r26, 0xCD	; 205
 38c:	bc ec       	ldi	r27, 0xCC	; 204
 38e:	0e 94 0b 06 	call	0xc16	; 0xc16 <__umulhisi3>
 392:	7c 01       	movw	r14, r24
 394:	f6 94       	lsr	r15
 396:	e7 94       	ror	r14
 398:	f6 94       	lsr	r15
 39a:	e7 94       	ror	r14
 39c:	f6 94       	lsr	r15
 39e:	e7 94       	ror	r14
		dataFloat = roundf(dataFloat * 1000) / 1000;
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
 3a0:	01 50       	subi	r16, 0x01	; 1
 3a2:	11 09       	sbc	r17, r1
 3a4:	40 f6       	brcc	.-112    	; 0x336 <main+0xc8>
 3a6:	2f c0       	rjmp	.+94     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
			dataInt = dataInt/10;
		}

		//Transmits data until we get TCNT0 = 191 twenty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
 3a8:	e1 e0       	ldi	r30, 0x01	; 1
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	ec 0f       	add	r30, r28
 3ae:	fd 1f       	adc	r31, r29
 3b0:	e1 0f       	add	r30, r17
 3b2:	f1 1d       	adc	r31, r1
			uart_transmit(data);
 3b4:	80 81       	ld	r24, Z
 3b6:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ba:	8f ed       	ldi	r24, 0xDF	; 223
 3bc:	9e e2       	ldi	r25, 0x2E	; 46
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <main+0x150>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x156>
 3c4:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
 3c6:	1f 5f       	subi	r17, 0xFF	; 255
			//Select next integer to send
			if (index == 4) {
 3c8:	14 30       	cpi	r17, 0x04	; 4
 3ca:	09 f4       	brne	.+2      	; 0x3ce <main+0x160>
				index = 0;
 3cc:	13 2d       	mov	r17, r3
			}
			//Polling mechanism
			if(TCNT0>=211) {
 3ce:	86 b5       	in	r24, 0x26	; 38
 3d0:	83 3d       	cpi	r24, 0xD3	; 211
 3d2:	50 f3       	brcs	.-44     	; 0x3a8 <main+0x13a>
				TCNT0 = 0;
 3d4:	16 bc       	out	0x26, r1	; 38
				if (counter == 50) {
 3d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3da:	82 33       	cpi	r24, 0x32	; 50
 3dc:	39 f4       	brne	.+14     	; 0x3ec <main+0x17e>
					counter = 0;
 3de:	20 92 00 01 	sts	0x0100, r2	; 0x800100 <_edata>
					counter++;
				}
			}
		}
		//Select next float to send
		if (floatIndex == 3) { 
 3e2:	93 e0       	ldi	r25, 0x03	; 3
 3e4:	89 16       	cp	r8, r25
 3e6:	91 04       	cpc	r9, r1
 3e8:	39 f4       	brne	.+14     	; 0x3f8 <main+0x18a>
 3ea:	0a c0       	rjmp	.+20     	; 0x400 <__FUSE_REGION_LENGTH__>
				TCNT0 = 0;
				if (counter == 50) {
					counter = 0;
					break;
				} else {
					counter++;
 3ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3f6:	d8 cf       	rjmp	.-80     	; 0x3a8 <main+0x13a>
		}
		//Select next float to send
		if (floatIndex == 3) { 
			floatIndex = 0;
		} else {
			floatIndex++;
 3f8:	ef ef       	ldi	r30, 0xFF	; 255
 3fa:	8e 1a       	sub	r8, r30
 3fc:	9e 0a       	sbc	r9, r30
 3fe:	52 cf       	rjmp	.-348    	; 0x2a4 <main+0x36>
				}
			}
		}
		//Select next float to send
		if (floatIndex == 3) { 
			floatIndex = 0;
 400:	81 2c       	mov	r8, r1
 402:	91 2c       	mov	r9, r1
		} else {
			floatIndex++;
		}
	}
 404:	4f cf       	rjmp	.-354    	; 0x2a4 <main+0x36>
		}

		//Transmits data until we get TCNT0 = 191 twenty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
			uart_transmit(data);
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
 40c:	8f ed       	ldi	r24, 0xDF	; 223
 40e:	9e e2       	ldi	r25, 0x2E	; 46
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
 416:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
 418:	11 e0       	ldi	r17, 0x01	; 1
 41a:	d9 cf       	rjmp	.-78     	; 0x3ce <main+0x160>

0000041c <__subsf3>:
 41c:	50 58       	subi	r21, 0x80	; 128

0000041e <__addsf3>:
 41e:	bb 27       	eor	r27, r27
 420:	aa 27       	eor	r26, r26
 422:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3x>
 426:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_round>
 42a:	0e 94 92 03 	call	0x724	; 0x724 <__fp_pscA>
 42e:	38 f0       	brcs	.+14     	; 0x43e <__addsf3+0x20>
 430:	0e 94 99 03 	call	0x732	; 0x732 <__fp_pscB>
 434:	20 f0       	brcs	.+8      	; 0x43e <__addsf3+0x20>
 436:	39 f4       	brne	.+14     	; 0x446 <__addsf3+0x28>
 438:	9f 3f       	cpi	r25, 0xFF	; 255
 43a:	19 f4       	brne	.+6      	; 0x442 <__addsf3+0x24>
 43c:	26 f4       	brtc	.+8      	; 0x446 <__addsf3+0x28>
 43e:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_nan>
 442:	0e f4       	brtc	.+2      	; 0x446 <__addsf3+0x28>
 444:	e0 95       	com	r30
 446:	e7 fb       	bst	r30, 7
 448:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_inf>

0000044c <__addsf3x>:
 44c:	e9 2f       	mov	r30, r25
 44e:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_split3>
 452:	58 f3       	brcs	.-42     	; 0x42a <__addsf3+0xc>
 454:	ba 17       	cp	r27, r26
 456:	62 07       	cpc	r22, r18
 458:	73 07       	cpc	r23, r19
 45a:	84 07       	cpc	r24, r20
 45c:	95 07       	cpc	r25, r21
 45e:	20 f0       	brcs	.+8      	; 0x468 <__addsf3x+0x1c>
 460:	79 f4       	brne	.+30     	; 0x480 <__addsf3x+0x34>
 462:	a6 f5       	brtc	.+104    	; 0x4cc <__addsf3x+0x80>
 464:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_zero>
 468:	0e f4       	brtc	.+2      	; 0x46c <__addsf3x+0x20>
 46a:	e0 95       	com	r30
 46c:	0b 2e       	mov	r0, r27
 46e:	ba 2f       	mov	r27, r26
 470:	a0 2d       	mov	r26, r0
 472:	0b 01       	movw	r0, r22
 474:	b9 01       	movw	r22, r18
 476:	90 01       	movw	r18, r0
 478:	0c 01       	movw	r0, r24
 47a:	ca 01       	movw	r24, r20
 47c:	a0 01       	movw	r20, r0
 47e:	11 24       	eor	r1, r1
 480:	ff 27       	eor	r31, r31
 482:	59 1b       	sub	r21, r25
 484:	99 f0       	breq	.+38     	; 0x4ac <__addsf3x+0x60>
 486:	59 3f       	cpi	r21, 0xF9	; 249
 488:	50 f4       	brcc	.+20     	; 0x49e <__addsf3x+0x52>
 48a:	50 3e       	cpi	r21, 0xE0	; 224
 48c:	68 f1       	brcs	.+90     	; 0x4e8 <__addsf3x+0x9c>
 48e:	1a 16       	cp	r1, r26
 490:	f0 40       	sbci	r31, 0x00	; 0
 492:	a2 2f       	mov	r26, r18
 494:	23 2f       	mov	r18, r19
 496:	34 2f       	mov	r19, r20
 498:	44 27       	eor	r20, r20
 49a:	58 5f       	subi	r21, 0xF8	; 248
 49c:	f3 cf       	rjmp	.-26     	; 0x484 <__addsf3x+0x38>
 49e:	46 95       	lsr	r20
 4a0:	37 95       	ror	r19
 4a2:	27 95       	ror	r18
 4a4:	a7 95       	ror	r26
 4a6:	f0 40       	sbci	r31, 0x00	; 0
 4a8:	53 95       	inc	r21
 4aa:	c9 f7       	brne	.-14     	; 0x49e <__addsf3x+0x52>
 4ac:	7e f4       	brtc	.+30     	; 0x4cc <__addsf3x+0x80>
 4ae:	1f 16       	cp	r1, r31
 4b0:	ba 0b       	sbc	r27, r26
 4b2:	62 0b       	sbc	r22, r18
 4b4:	73 0b       	sbc	r23, r19
 4b6:	84 0b       	sbc	r24, r20
 4b8:	ba f0       	brmi	.+46     	; 0x4e8 <__addsf3x+0x9c>
 4ba:	91 50       	subi	r25, 0x01	; 1
 4bc:	a1 f0       	breq	.+40     	; 0x4e6 <__addsf3x+0x9a>
 4be:	ff 0f       	add	r31, r31
 4c0:	bb 1f       	adc	r27, r27
 4c2:	66 1f       	adc	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	88 1f       	adc	r24, r24
 4c8:	c2 f7       	brpl	.-16     	; 0x4ba <__addsf3x+0x6e>
 4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <__addsf3x+0x9c>
 4cc:	ba 0f       	add	r27, r26
 4ce:	62 1f       	adc	r22, r18
 4d0:	73 1f       	adc	r23, r19
 4d2:	84 1f       	adc	r24, r20
 4d4:	48 f4       	brcc	.+18     	; 0x4e8 <__addsf3x+0x9c>
 4d6:	87 95       	ror	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b7 95       	ror	r27
 4de:	f7 95       	ror	r31
 4e0:	9e 3f       	cpi	r25, 0xFE	; 254
 4e2:	08 f0       	brcs	.+2      	; 0x4e6 <__addsf3x+0x9a>
 4e4:	b0 cf       	rjmp	.-160    	; 0x446 <__addsf3+0x28>
 4e6:	93 95       	inc	r25
 4e8:	88 0f       	add	r24, r24
 4ea:	08 f0       	brcs	.+2      	; 0x4ee <__addsf3x+0xa2>
 4ec:	99 27       	eor	r25, r25
 4ee:	ee 0f       	add	r30, r30
 4f0:	97 95       	ror	r25
 4f2:	87 95       	ror	r24
 4f4:	08 95       	ret

000004f6 <__cmpsf2>:
 4f6:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_cmp>
 4fa:	08 f4       	brcc	.+2      	; 0x4fe <__cmpsf2+0x8>
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	08 95       	ret

00000500 <__divsf3>:
 500:	0e 94 94 02 	call	0x528	; 0x528 <__divsf3x>
 504:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_round>
 508:	0e 94 99 03 	call	0x732	; 0x732 <__fp_pscB>
 50c:	58 f0       	brcs	.+22     	; 0x524 <__divsf3+0x24>
 50e:	0e 94 92 03 	call	0x724	; 0x724 <__fp_pscA>
 512:	40 f0       	brcs	.+16     	; 0x524 <__divsf3+0x24>
 514:	29 f4       	brne	.+10     	; 0x520 <__divsf3+0x20>
 516:	5f 3f       	cpi	r21, 0xFF	; 255
 518:	29 f0       	breq	.+10     	; 0x524 <__divsf3+0x24>
 51a:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_inf>
 51e:	51 11       	cpse	r21, r1
 520:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_szero>
 524:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_nan>

00000528 <__divsf3x>:
 528:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_split3>
 52c:	68 f3       	brcs	.-38     	; 0x508 <__divsf3+0x8>

0000052e <__divsf3_pse>:
 52e:	99 23       	and	r25, r25
 530:	b1 f3       	breq	.-20     	; 0x51e <__divsf3+0x1e>
 532:	55 23       	and	r21, r21
 534:	91 f3       	breq	.-28     	; 0x51a <__divsf3+0x1a>
 536:	95 1b       	sub	r25, r21
 538:	55 0b       	sbc	r21, r21
 53a:	bb 27       	eor	r27, r27
 53c:	aa 27       	eor	r26, r26
 53e:	62 17       	cp	r22, r18
 540:	73 07       	cpc	r23, r19
 542:	84 07       	cpc	r24, r20
 544:	38 f0       	brcs	.+14     	; 0x554 <__divsf3_pse+0x26>
 546:	9f 5f       	subi	r25, 0xFF	; 255
 548:	5f 4f       	sbci	r21, 0xFF	; 255
 54a:	22 0f       	add	r18, r18
 54c:	33 1f       	adc	r19, r19
 54e:	44 1f       	adc	r20, r20
 550:	aa 1f       	adc	r26, r26
 552:	a9 f3       	breq	.-22     	; 0x53e <__divsf3_pse+0x10>
 554:	35 d0       	rcall	.+106    	; 0x5c0 <__divsf3_pse+0x92>
 556:	0e 2e       	mov	r0, r30
 558:	3a f0       	brmi	.+14     	; 0x568 <__divsf3_pse+0x3a>
 55a:	e0 e8       	ldi	r30, 0x80	; 128
 55c:	32 d0       	rcall	.+100    	; 0x5c2 <__divsf3_pse+0x94>
 55e:	91 50       	subi	r25, 0x01	; 1
 560:	50 40       	sbci	r21, 0x00	; 0
 562:	e6 95       	lsr	r30
 564:	00 1c       	adc	r0, r0
 566:	ca f7       	brpl	.-14     	; 0x55a <__divsf3_pse+0x2c>
 568:	2b d0       	rcall	.+86     	; 0x5c0 <__divsf3_pse+0x92>
 56a:	fe 2f       	mov	r31, r30
 56c:	29 d0       	rcall	.+82     	; 0x5c0 <__divsf3_pse+0x92>
 56e:	66 0f       	add	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	88 1f       	adc	r24, r24
 574:	bb 1f       	adc	r27, r27
 576:	26 17       	cp	r18, r22
 578:	37 07       	cpc	r19, r23
 57a:	48 07       	cpc	r20, r24
 57c:	ab 07       	cpc	r26, r27
 57e:	b0 e8       	ldi	r27, 0x80	; 128
 580:	09 f0       	breq	.+2      	; 0x584 <__divsf3_pse+0x56>
 582:	bb 0b       	sbc	r27, r27
 584:	80 2d       	mov	r24, r0
 586:	bf 01       	movw	r22, r30
 588:	ff 27       	eor	r31, r31
 58a:	93 58       	subi	r25, 0x83	; 131
 58c:	5f 4f       	sbci	r21, 0xFF	; 255
 58e:	3a f0       	brmi	.+14     	; 0x59e <__divsf3_pse+0x70>
 590:	9e 3f       	cpi	r25, 0xFE	; 254
 592:	51 05       	cpc	r21, r1
 594:	78 f0       	brcs	.+30     	; 0x5b4 <__divsf3_pse+0x86>
 596:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_inf>
 59a:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_szero>
 59e:	5f 3f       	cpi	r21, 0xFF	; 255
 5a0:	e4 f3       	brlt	.-8      	; 0x59a <__divsf3_pse+0x6c>
 5a2:	98 3e       	cpi	r25, 0xE8	; 232
 5a4:	d4 f3       	brlt	.-12     	; 0x59a <__divsf3_pse+0x6c>
 5a6:	86 95       	lsr	r24
 5a8:	77 95       	ror	r23
 5aa:	67 95       	ror	r22
 5ac:	b7 95       	ror	r27
 5ae:	f7 95       	ror	r31
 5b0:	9f 5f       	subi	r25, 0xFF	; 255
 5b2:	c9 f7       	brne	.-14     	; 0x5a6 <__divsf3_pse+0x78>
 5b4:	88 0f       	add	r24, r24
 5b6:	91 1d       	adc	r25, r1
 5b8:	96 95       	lsr	r25
 5ba:	87 95       	ror	r24
 5bc:	97 f9       	bld	r25, 7
 5be:	08 95       	ret
 5c0:	e1 e0       	ldi	r30, 0x01	; 1
 5c2:	66 0f       	add	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	bb 1f       	adc	r27, r27
 5ca:	62 17       	cp	r22, r18
 5cc:	73 07       	cpc	r23, r19
 5ce:	84 07       	cpc	r24, r20
 5d0:	ba 07       	cpc	r27, r26
 5d2:	20 f0       	brcs	.+8      	; 0x5dc <__divsf3_pse+0xae>
 5d4:	62 1b       	sub	r22, r18
 5d6:	73 0b       	sbc	r23, r19
 5d8:	84 0b       	sbc	r24, r20
 5da:	ba 0b       	sbc	r27, r26
 5dc:	ee 1f       	adc	r30, r30
 5de:	88 f7       	brcc	.-30     	; 0x5c2 <__divsf3_pse+0x94>
 5e0:	e0 95       	com	r30
 5e2:	08 95       	ret

000005e4 <__fixsfsi>:
 5e4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fixunssfsi>
 5e8:	68 94       	set
 5ea:	b1 11       	cpse	r27, r1
 5ec:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_szero>
 5f0:	08 95       	ret

000005f2 <__fixunssfsi>:
 5f2:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_splitA>
 5f6:	88 f0       	brcs	.+34     	; 0x61a <__fixunssfsi+0x28>
 5f8:	9f 57       	subi	r25, 0x7F	; 127
 5fa:	98 f0       	brcs	.+38     	; 0x622 <__fixunssfsi+0x30>
 5fc:	b9 2f       	mov	r27, r25
 5fe:	99 27       	eor	r25, r25
 600:	b7 51       	subi	r27, 0x17	; 23
 602:	b0 f0       	brcs	.+44     	; 0x630 <__fixunssfsi+0x3e>
 604:	e1 f0       	breq	.+56     	; 0x63e <__fixunssfsi+0x4c>
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	88 1f       	adc	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	1a f0       	brmi	.+6      	; 0x616 <__fixunssfsi+0x24>
 610:	ba 95       	dec	r27
 612:	c9 f7       	brne	.-14     	; 0x606 <__fixunssfsi+0x14>
 614:	14 c0       	rjmp	.+40     	; 0x63e <__fixunssfsi+0x4c>
 616:	b1 30       	cpi	r27, 0x01	; 1
 618:	91 f0       	breq	.+36     	; 0x63e <__fixunssfsi+0x4c>
 61a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fp_zero>
 61e:	b1 e0       	ldi	r27, 0x01	; 1
 620:	08 95       	ret
 622:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_zero>
 626:	67 2f       	mov	r22, r23
 628:	78 2f       	mov	r23, r24
 62a:	88 27       	eor	r24, r24
 62c:	b8 5f       	subi	r27, 0xF8	; 248
 62e:	39 f0       	breq	.+14     	; 0x63e <__fixunssfsi+0x4c>
 630:	b9 3f       	cpi	r27, 0xF9	; 249
 632:	cc f3       	brlt	.-14     	; 0x626 <__fixunssfsi+0x34>
 634:	86 95       	lsr	r24
 636:	77 95       	ror	r23
 638:	67 95       	ror	r22
 63a:	b3 95       	inc	r27
 63c:	d9 f7       	brne	.-10     	; 0x634 <__fixunssfsi+0x42>
 63e:	3e f4       	brtc	.+14     	; 0x64e <__fixunssfsi+0x5c>
 640:	90 95       	com	r25
 642:	80 95       	com	r24
 644:	70 95       	com	r23
 646:	61 95       	neg	r22
 648:	7f 4f       	sbci	r23, 0xFF	; 255
 64a:	8f 4f       	sbci	r24, 0xFF	; 255
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	08 95       	ret

00000650 <__floatunsisf>:
 650:	e8 94       	clt
 652:	09 c0       	rjmp	.+18     	; 0x666 <__floatsisf+0x12>

00000654 <__floatsisf>:
 654:	97 fb       	bst	r25, 7
 656:	3e f4       	brtc	.+14     	; 0x666 <__floatsisf+0x12>
 658:	90 95       	com	r25
 65a:	80 95       	com	r24
 65c:	70 95       	com	r23
 65e:	61 95       	neg	r22
 660:	7f 4f       	sbci	r23, 0xFF	; 255
 662:	8f 4f       	sbci	r24, 0xFF	; 255
 664:	9f 4f       	sbci	r25, 0xFF	; 255
 666:	99 23       	and	r25, r25
 668:	a9 f0       	breq	.+42     	; 0x694 <__floatsisf+0x40>
 66a:	f9 2f       	mov	r31, r25
 66c:	96 e9       	ldi	r25, 0x96	; 150
 66e:	bb 27       	eor	r27, r27
 670:	93 95       	inc	r25
 672:	f6 95       	lsr	r31
 674:	87 95       	ror	r24
 676:	77 95       	ror	r23
 678:	67 95       	ror	r22
 67a:	b7 95       	ror	r27
 67c:	f1 11       	cpse	r31, r1
 67e:	f8 cf       	rjmp	.-16     	; 0x670 <__floatsisf+0x1c>
 680:	fa f4       	brpl	.+62     	; 0x6c0 <__floatsisf+0x6c>
 682:	bb 0f       	add	r27, r27
 684:	11 f4       	brne	.+4      	; 0x68a <__floatsisf+0x36>
 686:	60 ff       	sbrs	r22, 0
 688:	1b c0       	rjmp	.+54     	; 0x6c0 <__floatsisf+0x6c>
 68a:	6f 5f       	subi	r22, 0xFF	; 255
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	16 c0       	rjmp	.+44     	; 0x6c0 <__floatsisf+0x6c>
 694:	88 23       	and	r24, r24
 696:	11 f0       	breq	.+4      	; 0x69c <__floatsisf+0x48>
 698:	96 e9       	ldi	r25, 0x96	; 150
 69a:	11 c0       	rjmp	.+34     	; 0x6be <__floatsisf+0x6a>
 69c:	77 23       	and	r23, r23
 69e:	21 f0       	breq	.+8      	; 0x6a8 <__floatsisf+0x54>
 6a0:	9e e8       	ldi	r25, 0x8E	; 142
 6a2:	87 2f       	mov	r24, r23
 6a4:	76 2f       	mov	r23, r22
 6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <__floatsisf+0x5e>
 6a8:	66 23       	and	r22, r22
 6aa:	71 f0       	breq	.+28     	; 0x6c8 <__floatsisf+0x74>
 6ac:	96 e8       	ldi	r25, 0x86	; 134
 6ae:	86 2f       	mov	r24, r22
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	2a f0       	brmi	.+10     	; 0x6c0 <__floatsisf+0x6c>
 6b6:	9a 95       	dec	r25
 6b8:	66 0f       	add	r22, r22
 6ba:	77 1f       	adc	r23, r23
 6bc:	88 1f       	adc	r24, r24
 6be:	da f7       	brpl	.-10     	; 0x6b6 <__floatsisf+0x62>
 6c0:	88 0f       	add	r24, r24
 6c2:	96 95       	lsr	r25
 6c4:	87 95       	ror	r24
 6c6:	97 f9       	bld	r25, 7
 6c8:	08 95       	ret

000006ca <__fp_cmp>:
 6ca:	99 0f       	add	r25, r25
 6cc:	00 08       	sbc	r0, r0
 6ce:	55 0f       	add	r21, r21
 6d0:	aa 0b       	sbc	r26, r26
 6d2:	e0 e8       	ldi	r30, 0x80	; 128
 6d4:	fe ef       	ldi	r31, 0xFE	; 254
 6d6:	16 16       	cp	r1, r22
 6d8:	17 06       	cpc	r1, r23
 6da:	e8 07       	cpc	r30, r24
 6dc:	f9 07       	cpc	r31, r25
 6de:	c0 f0       	brcs	.+48     	; 0x710 <__fp_cmp+0x46>
 6e0:	12 16       	cp	r1, r18
 6e2:	13 06       	cpc	r1, r19
 6e4:	e4 07       	cpc	r30, r20
 6e6:	f5 07       	cpc	r31, r21
 6e8:	98 f0       	brcs	.+38     	; 0x710 <__fp_cmp+0x46>
 6ea:	62 1b       	sub	r22, r18
 6ec:	73 0b       	sbc	r23, r19
 6ee:	84 0b       	sbc	r24, r20
 6f0:	95 0b       	sbc	r25, r21
 6f2:	39 f4       	brne	.+14     	; 0x702 <__fp_cmp+0x38>
 6f4:	0a 26       	eor	r0, r26
 6f6:	61 f0       	breq	.+24     	; 0x710 <__fp_cmp+0x46>
 6f8:	23 2b       	or	r18, r19
 6fa:	24 2b       	or	r18, r20
 6fc:	25 2b       	or	r18, r21
 6fe:	21 f4       	brne	.+8      	; 0x708 <__fp_cmp+0x3e>
 700:	08 95       	ret
 702:	0a 26       	eor	r0, r26
 704:	09 f4       	brne	.+2      	; 0x708 <__fp_cmp+0x3e>
 706:	a1 40       	sbci	r26, 0x01	; 1
 708:	a6 95       	lsr	r26
 70a:	8f ef       	ldi	r24, 0xFF	; 255
 70c:	81 1d       	adc	r24, r1
 70e:	81 1d       	adc	r24, r1
 710:	08 95       	ret

00000712 <__fp_inf>:
 712:	97 f9       	bld	r25, 7
 714:	9f 67       	ori	r25, 0x7F	; 127
 716:	80 e8       	ldi	r24, 0x80	; 128
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	60 e0       	ldi	r22, 0x00	; 0
 71c:	08 95       	ret

0000071e <__fp_nan>:
 71e:	9f ef       	ldi	r25, 0xFF	; 255
 720:	80 ec       	ldi	r24, 0xC0	; 192
 722:	08 95       	ret

00000724 <__fp_pscA>:
 724:	00 24       	eor	r0, r0
 726:	0a 94       	dec	r0
 728:	16 16       	cp	r1, r22
 72a:	17 06       	cpc	r1, r23
 72c:	18 06       	cpc	r1, r24
 72e:	09 06       	cpc	r0, r25
 730:	08 95       	ret

00000732 <__fp_pscB>:
 732:	00 24       	eor	r0, r0
 734:	0a 94       	dec	r0
 736:	12 16       	cp	r1, r18
 738:	13 06       	cpc	r1, r19
 73a:	14 06       	cpc	r1, r20
 73c:	05 06       	cpc	r0, r21
 73e:	08 95       	ret

00000740 <__fp_round>:
 740:	09 2e       	mov	r0, r25
 742:	03 94       	inc	r0
 744:	00 0c       	add	r0, r0
 746:	11 f4       	brne	.+4      	; 0x74c <__fp_round+0xc>
 748:	88 23       	and	r24, r24
 74a:	52 f0       	brmi	.+20     	; 0x760 <__fp_round+0x20>
 74c:	bb 0f       	add	r27, r27
 74e:	40 f4       	brcc	.+16     	; 0x760 <__fp_round+0x20>
 750:	bf 2b       	or	r27, r31
 752:	11 f4       	brne	.+4      	; 0x758 <__fp_round+0x18>
 754:	60 ff       	sbrs	r22, 0
 756:	04 c0       	rjmp	.+8      	; 0x760 <__fp_round+0x20>
 758:	6f 5f       	subi	r22, 0xFF	; 255
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	8f 4f       	sbci	r24, 0xFF	; 255
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	08 95       	ret

00000762 <__fp_split3>:
 762:	57 fd       	sbrc	r21, 7
 764:	90 58       	subi	r25, 0x80	; 128
 766:	44 0f       	add	r20, r20
 768:	55 1f       	adc	r21, r21
 76a:	59 f0       	breq	.+22     	; 0x782 <__fp_splitA+0x10>
 76c:	5f 3f       	cpi	r21, 0xFF	; 255
 76e:	71 f0       	breq	.+28     	; 0x78c <__fp_splitA+0x1a>
 770:	47 95       	ror	r20

00000772 <__fp_splitA>:
 772:	88 0f       	add	r24, r24
 774:	97 fb       	bst	r25, 7
 776:	99 1f       	adc	r25, r25
 778:	61 f0       	breq	.+24     	; 0x792 <__fp_splitA+0x20>
 77a:	9f 3f       	cpi	r25, 0xFF	; 255
 77c:	79 f0       	breq	.+30     	; 0x79c <__fp_splitA+0x2a>
 77e:	87 95       	ror	r24
 780:	08 95       	ret
 782:	12 16       	cp	r1, r18
 784:	13 06       	cpc	r1, r19
 786:	14 06       	cpc	r1, r20
 788:	55 1f       	adc	r21, r21
 78a:	f2 cf       	rjmp	.-28     	; 0x770 <__fp_split3+0xe>
 78c:	46 95       	lsr	r20
 78e:	f1 df       	rcall	.-30     	; 0x772 <__fp_splitA>
 790:	08 c0       	rjmp	.+16     	; 0x7a2 <__fp_splitA+0x30>
 792:	16 16       	cp	r1, r22
 794:	17 06       	cpc	r1, r23
 796:	18 06       	cpc	r1, r24
 798:	99 1f       	adc	r25, r25
 79a:	f1 cf       	rjmp	.-30     	; 0x77e <__fp_splitA+0xc>
 79c:	86 95       	lsr	r24
 79e:	71 05       	cpc	r23, r1
 7a0:	61 05       	cpc	r22, r1
 7a2:	08 94       	sec
 7a4:	08 95       	ret

000007a6 <__fp_zero>:
 7a6:	e8 94       	clt

000007a8 <__fp_szero>:
 7a8:	bb 27       	eor	r27, r27
 7aa:	66 27       	eor	r22, r22
 7ac:	77 27       	eor	r23, r23
 7ae:	cb 01       	movw	r24, r22
 7b0:	97 f9       	bld	r25, 7
 7b2:	08 95       	ret

000007b4 <__mulsf3>:
 7b4:	0e 94 ed 03 	call	0x7da	; 0x7da <__mulsf3x>
 7b8:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_round>
 7bc:	0e 94 92 03 	call	0x724	; 0x724 <__fp_pscA>
 7c0:	38 f0       	brcs	.+14     	; 0x7d0 <__mulsf3+0x1c>
 7c2:	0e 94 99 03 	call	0x732	; 0x732 <__fp_pscB>
 7c6:	20 f0       	brcs	.+8      	; 0x7d0 <__mulsf3+0x1c>
 7c8:	95 23       	and	r25, r21
 7ca:	11 f0       	breq	.+4      	; 0x7d0 <__mulsf3+0x1c>
 7cc:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_inf>
 7d0:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_nan>
 7d4:	11 24       	eor	r1, r1
 7d6:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_szero>

000007da <__mulsf3x>:
 7da:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_split3>
 7de:	70 f3       	brcs	.-36     	; 0x7bc <__mulsf3+0x8>

000007e0 <__mulsf3_pse>:
 7e0:	95 9f       	mul	r25, r21
 7e2:	c1 f3       	breq	.-16     	; 0x7d4 <__mulsf3+0x20>
 7e4:	95 0f       	add	r25, r21
 7e6:	50 e0       	ldi	r21, 0x00	; 0
 7e8:	55 1f       	adc	r21, r21
 7ea:	62 9f       	mul	r22, r18
 7ec:	f0 01       	movw	r30, r0
 7ee:	72 9f       	mul	r23, r18
 7f0:	bb 27       	eor	r27, r27
 7f2:	f0 0d       	add	r31, r0
 7f4:	b1 1d       	adc	r27, r1
 7f6:	63 9f       	mul	r22, r19
 7f8:	aa 27       	eor	r26, r26
 7fa:	f0 0d       	add	r31, r0
 7fc:	b1 1d       	adc	r27, r1
 7fe:	aa 1f       	adc	r26, r26
 800:	64 9f       	mul	r22, r20
 802:	66 27       	eor	r22, r22
 804:	b0 0d       	add	r27, r0
 806:	a1 1d       	adc	r26, r1
 808:	66 1f       	adc	r22, r22
 80a:	82 9f       	mul	r24, r18
 80c:	22 27       	eor	r18, r18
 80e:	b0 0d       	add	r27, r0
 810:	a1 1d       	adc	r26, r1
 812:	62 1f       	adc	r22, r18
 814:	73 9f       	mul	r23, r19
 816:	b0 0d       	add	r27, r0
 818:	a1 1d       	adc	r26, r1
 81a:	62 1f       	adc	r22, r18
 81c:	83 9f       	mul	r24, r19
 81e:	a0 0d       	add	r26, r0
 820:	61 1d       	adc	r22, r1
 822:	22 1f       	adc	r18, r18
 824:	74 9f       	mul	r23, r20
 826:	33 27       	eor	r19, r19
 828:	a0 0d       	add	r26, r0
 82a:	61 1d       	adc	r22, r1
 82c:	23 1f       	adc	r18, r19
 82e:	84 9f       	mul	r24, r20
 830:	60 0d       	add	r22, r0
 832:	21 1d       	adc	r18, r1
 834:	82 2f       	mov	r24, r18
 836:	76 2f       	mov	r23, r22
 838:	6a 2f       	mov	r22, r26
 83a:	11 24       	eor	r1, r1
 83c:	9f 57       	subi	r25, 0x7F	; 127
 83e:	50 40       	sbci	r21, 0x00	; 0
 840:	9a f0       	brmi	.+38     	; 0x868 <__mulsf3_pse+0x88>
 842:	f1 f0       	breq	.+60     	; 0x880 <__mulsf3_pse+0xa0>
 844:	88 23       	and	r24, r24
 846:	4a f0       	brmi	.+18     	; 0x85a <__mulsf3_pse+0x7a>
 848:	ee 0f       	add	r30, r30
 84a:	ff 1f       	adc	r31, r31
 84c:	bb 1f       	adc	r27, r27
 84e:	66 1f       	adc	r22, r22
 850:	77 1f       	adc	r23, r23
 852:	88 1f       	adc	r24, r24
 854:	91 50       	subi	r25, 0x01	; 1
 856:	50 40       	sbci	r21, 0x00	; 0
 858:	a9 f7       	brne	.-22     	; 0x844 <__mulsf3_pse+0x64>
 85a:	9e 3f       	cpi	r25, 0xFE	; 254
 85c:	51 05       	cpc	r21, r1
 85e:	80 f0       	brcs	.+32     	; 0x880 <__mulsf3_pse+0xa0>
 860:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_inf>
 864:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_szero>
 868:	5f 3f       	cpi	r21, 0xFF	; 255
 86a:	e4 f3       	brlt	.-8      	; 0x864 <__mulsf3_pse+0x84>
 86c:	98 3e       	cpi	r25, 0xE8	; 232
 86e:	d4 f3       	brlt	.-12     	; 0x864 <__mulsf3_pse+0x84>
 870:	86 95       	lsr	r24
 872:	77 95       	ror	r23
 874:	67 95       	ror	r22
 876:	b7 95       	ror	r27
 878:	f7 95       	ror	r31
 87a:	e7 95       	ror	r30
 87c:	9f 5f       	subi	r25, 0xFF	; 255
 87e:	c1 f7       	brne	.-16     	; 0x870 <__mulsf3_pse+0x90>
 880:	fe 2b       	or	r31, r30
 882:	88 0f       	add	r24, r24
 884:	91 1d       	adc	r25, r1
 886:	96 95       	lsr	r25
 888:	87 95       	ror	r24
 88a:	97 f9       	bld	r25, 7
 88c:	08 95       	ret

0000088e <pow>:
 88e:	fa 01       	movw	r30, r20
 890:	ee 0f       	add	r30, r30
 892:	ff 1f       	adc	r31, r31
 894:	30 96       	adiw	r30, 0x00	; 0
 896:	21 05       	cpc	r18, r1
 898:	31 05       	cpc	r19, r1
 89a:	a1 f1       	breq	.+104    	; 0x904 <__stack+0x5>
 89c:	61 15       	cp	r22, r1
 89e:	71 05       	cpc	r23, r1
 8a0:	61 f4       	brne	.+24     	; 0x8ba <pow+0x2c>
 8a2:	80 38       	cpi	r24, 0x80	; 128
 8a4:	bf e3       	ldi	r27, 0x3F	; 63
 8a6:	9b 07       	cpc	r25, r27
 8a8:	49 f1       	breq	.+82     	; 0x8fc <pow+0x6e>
 8aa:	68 94       	set
 8ac:	90 38       	cpi	r25, 0x80	; 128
 8ae:	81 05       	cpc	r24, r1
 8b0:	61 f0       	breq	.+24     	; 0x8ca <pow+0x3c>
 8b2:	80 38       	cpi	r24, 0x80	; 128
 8b4:	bf ef       	ldi	r27, 0xFF	; 255
 8b6:	9b 07       	cpc	r25, r27
 8b8:	41 f0       	breq	.+16     	; 0x8ca <pow+0x3c>
 8ba:	99 23       	and	r25, r25
 8bc:	4a f5       	brpl	.+82     	; 0x910 <__stack+0x11>
 8be:	ff 3f       	cpi	r31, 0xFF	; 255
 8c0:	e1 05       	cpc	r30, r1
 8c2:	31 05       	cpc	r19, r1
 8c4:	21 05       	cpc	r18, r1
 8c6:	19 f1       	breq	.+70     	; 0x90e <__stack+0xf>
 8c8:	e8 94       	clt
 8ca:	08 94       	sec
 8cc:	e7 95       	ror	r30
 8ce:	d9 01       	movw	r26, r18
 8d0:	aa 23       	and	r26, r26
 8d2:	29 f4       	brne	.+10     	; 0x8de <pow+0x50>
 8d4:	ab 2f       	mov	r26, r27
 8d6:	be 2f       	mov	r27, r30
 8d8:	f8 5f       	subi	r31, 0xF8	; 248
 8da:	d0 f3       	brcs	.-12     	; 0x8d0 <pow+0x42>
 8dc:	10 c0       	rjmp	.+32     	; 0x8fe <pow+0x70>
 8de:	ff 5f       	subi	r31, 0xFF	; 255
 8e0:	70 f4       	brcc	.+28     	; 0x8fe <pow+0x70>
 8e2:	a6 95       	lsr	r26
 8e4:	e0 f7       	brcc	.-8      	; 0x8de <pow+0x50>
 8e6:	f7 39       	cpi	r31, 0x97	; 151
 8e8:	50 f0       	brcs	.+20     	; 0x8fe <pow+0x70>
 8ea:	19 f0       	breq	.+6      	; 0x8f2 <pow+0x64>
 8ec:	ff 3a       	cpi	r31, 0xAF	; 175
 8ee:	38 f4       	brcc	.+14     	; 0x8fe <pow+0x70>
 8f0:	9f 77       	andi	r25, 0x7F	; 127
 8f2:	9f 93       	push	r25
 8f4:	0d d0       	rcall	.+26     	; 0x910 <__stack+0x11>
 8f6:	0f 90       	pop	r0
 8f8:	07 fc       	sbrc	r0, 7
 8fa:	90 58       	subi	r25, 0x80	; 128
 8fc:	08 95       	ret
 8fe:	46 f0       	brts	.+16     	; 0x910 <__stack+0x11>
 900:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_nan>
 904:	60 e0       	ldi	r22, 0x00	; 0
 906:	70 e0       	ldi	r23, 0x00	; 0
 908:	80 e8       	ldi	r24, 0x80	; 128
 90a:	9f e3       	ldi	r25, 0x3F	; 63
 90c:	08 95       	ret
 90e:	4f e7       	ldi	r20, 0x7F	; 127
 910:	9f 77       	andi	r25, 0x7F	; 127
 912:	5f 93       	push	r21
 914:	4f 93       	push	r20
 916:	3f 93       	push	r19
 918:	2f 93       	push	r18
 91a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <log>
 91e:	2f 91       	pop	r18
 920:	3f 91       	pop	r19
 922:	4f 91       	pop	r20
 924:	5f 91       	pop	r21
 926:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__mulsf3>
 92a:	0c 94 c3 04 	jmp	0x986	; 0x986 <exp>

0000092e <round>:
 92e:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_splitA>
 932:	e8 f0       	brcs	.+58     	; 0x96e <round+0x40>
 934:	9e 37       	cpi	r25, 0x7E	; 126
 936:	e8 f0       	brcs	.+58     	; 0x972 <round+0x44>
 938:	96 39       	cpi	r25, 0x96	; 150
 93a:	b8 f4       	brcc	.+46     	; 0x96a <round+0x3c>
 93c:	9e 38       	cpi	r25, 0x8E	; 142
 93e:	48 f4       	brcc	.+18     	; 0x952 <round+0x24>
 940:	67 2f       	mov	r22, r23
 942:	78 2f       	mov	r23, r24
 944:	88 27       	eor	r24, r24
 946:	98 5f       	subi	r25, 0xF8	; 248
 948:	f9 cf       	rjmp	.-14     	; 0x93c <round+0xe>
 94a:	86 95       	lsr	r24
 94c:	77 95       	ror	r23
 94e:	67 95       	ror	r22
 950:	93 95       	inc	r25
 952:	95 39       	cpi	r25, 0x95	; 149
 954:	d0 f3       	brcs	.-12     	; 0x94a <round+0x1c>
 956:	b6 2f       	mov	r27, r22
 958:	b1 70       	andi	r27, 0x01	; 1
 95a:	6b 0f       	add	r22, r27
 95c:	71 1d       	adc	r23, r1
 95e:	81 1d       	adc	r24, r1
 960:	20 f4       	brcc	.+8      	; 0x96a <round+0x3c>
 962:	87 95       	ror	r24
 964:	77 95       	ror	r23
 966:	67 95       	ror	r22
 968:	93 95       	inc	r25
 96a:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__fp_mintl>
 96e:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__fp_mpack>
 972:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_szero>
 976:	29 f4       	brne	.+10     	; 0x982 <round+0x54>
 978:	16 f0       	brts	.+4      	; 0x97e <round+0x50>
 97a:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_inf>
 97e:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_zero>
 982:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_nan>

00000986 <exp>:
 986:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_splitA>
 98a:	a8 f3       	brcs	.-22     	; 0x976 <round+0x48>
 98c:	96 38       	cpi	r25, 0x86	; 134
 98e:	a0 f7       	brcc	.-24     	; 0x978 <round+0x4a>
 990:	07 f8       	bld	r0, 7
 992:	0f 92       	push	r0
 994:	e8 94       	clt
 996:	2b e3       	ldi	r18, 0x3B	; 59
 998:	3a ea       	ldi	r19, 0xAA	; 170
 99a:	48 eb       	ldi	r20, 0xB8	; 184
 99c:	5f e7       	ldi	r21, 0x7F	; 127
 99e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__mulsf3_pse>
 9a2:	0f 92       	push	r0
 9a4:	0f 92       	push	r0
 9a6:	0f 92       	push	r0
 9a8:	4d b7       	in	r20, 0x3d	; 61
 9aa:	5e b7       	in	r21, 0x3e	; 62
 9ac:	0f 92       	push	r0
 9ae:	0e 94 d7 05 	call	0xbae	; 0xbae <modf>
 9b2:	e8 e6       	ldi	r30, 0x68	; 104
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__fp_powser>
 9ba:	4f 91       	pop	r20
 9bc:	5f 91       	pop	r21
 9be:	ef 91       	pop	r30
 9c0:	ff 91       	pop	r31
 9c2:	e5 95       	asr	r30
 9c4:	ee 1f       	adc	r30, r30
 9c6:	ff 1f       	adc	r31, r31
 9c8:	49 f0       	breq	.+18     	; 0x9dc <exp+0x56>
 9ca:	fe 57       	subi	r31, 0x7E	; 126
 9cc:	e0 68       	ori	r30, 0x80	; 128
 9ce:	44 27       	eor	r20, r20
 9d0:	ee 0f       	add	r30, r30
 9d2:	44 1f       	adc	r20, r20
 9d4:	fa 95       	dec	r31
 9d6:	e1 f7       	brne	.-8      	; 0x9d0 <exp+0x4a>
 9d8:	41 95       	neg	r20
 9da:	55 0b       	sbc	r21, r21
 9dc:	0e 94 51 05 	call	0xaa2	; 0xaa2 <ldexp>
 9e0:	0f 90       	pop	r0
 9e2:	07 fe       	sbrs	r0, 7
 9e4:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <inverse>
 9e8:	08 95       	ret

000009ea <__fp_mintl>:
 9ea:	88 23       	and	r24, r24
 9ec:	71 f4       	brne	.+28     	; 0xa0a <__fp_mintl+0x20>
 9ee:	77 23       	and	r23, r23
 9f0:	21 f0       	breq	.+8      	; 0x9fa <__fp_mintl+0x10>
 9f2:	98 50       	subi	r25, 0x08	; 8
 9f4:	87 2b       	or	r24, r23
 9f6:	76 2f       	mov	r23, r22
 9f8:	07 c0       	rjmp	.+14     	; 0xa08 <__fp_mintl+0x1e>
 9fa:	66 23       	and	r22, r22
 9fc:	11 f4       	brne	.+4      	; 0xa02 <__fp_mintl+0x18>
 9fe:	99 27       	eor	r25, r25
 a00:	0d c0       	rjmp	.+26     	; 0xa1c <__fp_mintl+0x32>
 a02:	90 51       	subi	r25, 0x10	; 16
 a04:	86 2b       	or	r24, r22
 a06:	70 e0       	ldi	r23, 0x00	; 0
 a08:	60 e0       	ldi	r22, 0x00	; 0
 a0a:	2a f0       	brmi	.+10     	; 0xa16 <__fp_mintl+0x2c>
 a0c:	9a 95       	dec	r25
 a0e:	66 0f       	add	r22, r22
 a10:	77 1f       	adc	r23, r23
 a12:	88 1f       	adc	r24, r24
 a14:	da f7       	brpl	.-10     	; 0xa0c <__fp_mintl+0x22>
 a16:	88 0f       	add	r24, r24
 a18:	96 95       	lsr	r25
 a1a:	87 95       	ror	r24
 a1c:	97 f9       	bld	r25, 7
 a1e:	08 95       	ret

00000a20 <__fp_mpack>:
 a20:	9f 3f       	cpi	r25, 0xFF	; 255
 a22:	31 f0       	breq	.+12     	; 0xa30 <__fp_mpack_finite+0xc>

00000a24 <__fp_mpack_finite>:
 a24:	91 50       	subi	r25, 0x01	; 1
 a26:	20 f4       	brcc	.+8      	; 0xa30 <__fp_mpack_finite+0xc>
 a28:	87 95       	ror	r24
 a2a:	77 95       	ror	r23
 a2c:	67 95       	ror	r22
 a2e:	b7 95       	ror	r27
 a30:	88 0f       	add	r24, r24
 a32:	91 1d       	adc	r25, r1
 a34:	96 95       	lsr	r25
 a36:	87 95       	ror	r24
 a38:	97 f9       	bld	r25, 7
 a3a:	08 95       	ret

00000a3c <__fp_powser>:
 a3c:	df 93       	push	r29
 a3e:	cf 93       	push	r28
 a40:	1f 93       	push	r17
 a42:	0f 93       	push	r16
 a44:	ff 92       	push	r15
 a46:	ef 92       	push	r14
 a48:	df 92       	push	r13
 a4a:	7b 01       	movw	r14, r22
 a4c:	8c 01       	movw	r16, r24
 a4e:	68 94       	set
 a50:	06 c0       	rjmp	.+12     	; 0xa5e <__fp_powser+0x22>
 a52:	da 2e       	mov	r13, r26
 a54:	ef 01       	movw	r28, r30
 a56:	0e 94 ed 03 	call	0x7da	; 0x7da <__mulsf3x>
 a5a:	fe 01       	movw	r30, r28
 a5c:	e8 94       	clt
 a5e:	a5 91       	lpm	r26, Z+
 a60:	25 91       	lpm	r18, Z+
 a62:	35 91       	lpm	r19, Z+
 a64:	45 91       	lpm	r20, Z+
 a66:	55 91       	lpm	r21, Z+
 a68:	a6 f3       	brts	.-24     	; 0xa52 <__fp_powser+0x16>
 a6a:	ef 01       	movw	r28, r30
 a6c:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3x>
 a70:	fe 01       	movw	r30, r28
 a72:	97 01       	movw	r18, r14
 a74:	a8 01       	movw	r20, r16
 a76:	da 94       	dec	r13
 a78:	69 f7       	brne	.-38     	; 0xa54 <__fp_powser+0x18>
 a7a:	df 90       	pop	r13
 a7c:	ef 90       	pop	r14
 a7e:	ff 90       	pop	r15
 a80:	0f 91       	pop	r16
 a82:	1f 91       	pop	r17
 a84:	cf 91       	pop	r28
 a86:	df 91       	pop	r29
 a88:	08 95       	ret

00000a8a <inverse>:
 a8a:	9b 01       	movw	r18, r22
 a8c:	ac 01       	movw	r20, r24
 a8e:	60 e0       	ldi	r22, 0x00	; 0
 a90:	70 e0       	ldi	r23, 0x00	; 0
 a92:	80 e8       	ldi	r24, 0x80	; 128
 a94:	9f e3       	ldi	r25, 0x3F	; 63
 a96:	0c 94 80 02 	jmp	0x500	; 0x500 <__divsf3>
 a9a:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_inf>
 a9e:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__fp_mpack>

00000aa2 <ldexp>:
 aa2:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_splitA>
 aa6:	d8 f3       	brcs	.-10     	; 0xa9e <inverse+0x14>
 aa8:	99 23       	and	r25, r25
 aaa:	c9 f3       	breq	.-14     	; 0xa9e <inverse+0x14>
 aac:	94 0f       	add	r25, r20
 aae:	51 1d       	adc	r21, r1
 ab0:	a3 f3       	brvs	.-24     	; 0xa9a <inverse+0x10>
 ab2:	91 50       	subi	r25, 0x01	; 1
 ab4:	50 40       	sbci	r21, 0x00	; 0
 ab6:	94 f0       	brlt	.+36     	; 0xadc <ldexp+0x3a>
 ab8:	59 f0       	breq	.+22     	; 0xad0 <ldexp+0x2e>
 aba:	88 23       	and	r24, r24
 abc:	32 f0       	brmi	.+12     	; 0xaca <ldexp+0x28>
 abe:	66 0f       	add	r22, r22
 ac0:	77 1f       	adc	r23, r23
 ac2:	88 1f       	adc	r24, r24
 ac4:	91 50       	subi	r25, 0x01	; 1
 ac6:	50 40       	sbci	r21, 0x00	; 0
 ac8:	c1 f7       	brne	.-16     	; 0xaba <ldexp+0x18>
 aca:	9e 3f       	cpi	r25, 0xFE	; 254
 acc:	51 05       	cpc	r21, r1
 ace:	2c f7       	brge	.-54     	; 0xa9a <inverse+0x10>
 ad0:	88 0f       	add	r24, r24
 ad2:	91 1d       	adc	r25, r1
 ad4:	96 95       	lsr	r25
 ad6:	87 95       	ror	r24
 ad8:	97 f9       	bld	r25, 7
 ada:	08 95       	ret
 adc:	5f 3f       	cpi	r21, 0xFF	; 255
 ade:	ac f0       	brlt	.+42     	; 0xb0a <ldexp+0x68>
 ae0:	98 3e       	cpi	r25, 0xE8	; 232
 ae2:	9c f0       	brlt	.+38     	; 0xb0a <ldexp+0x68>
 ae4:	bb 27       	eor	r27, r27
 ae6:	86 95       	lsr	r24
 ae8:	77 95       	ror	r23
 aea:	67 95       	ror	r22
 aec:	b7 95       	ror	r27
 aee:	08 f4       	brcc	.+2      	; 0xaf2 <ldexp+0x50>
 af0:	b1 60       	ori	r27, 0x01	; 1
 af2:	93 95       	inc	r25
 af4:	c1 f7       	brne	.-16     	; 0xae6 <ldexp+0x44>
 af6:	bb 0f       	add	r27, r27
 af8:	58 f7       	brcc	.-42     	; 0xad0 <ldexp+0x2e>
 afa:	11 f4       	brne	.+4      	; 0xb00 <ldexp+0x5e>
 afc:	60 ff       	sbrs	r22, 0
 afe:	e8 cf       	rjmp	.-48     	; 0xad0 <ldexp+0x2e>
 b00:	6f 5f       	subi	r22, 0xFF	; 255
 b02:	7f 4f       	sbci	r23, 0xFF	; 255
 b04:	8f 4f       	sbci	r24, 0xFF	; 255
 b06:	9f 4f       	sbci	r25, 0xFF	; 255
 b08:	e3 cf       	rjmp	.-58     	; 0xad0 <ldexp+0x2e>
 b0a:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_szero>
 b0e:	16 f0       	brts	.+4      	; 0xb14 <ldexp+0x72>
 b10:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__fp_mpack>
 b14:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_nan>
 b18:	68 94       	set
 b1a:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_inf>

00000b1e <log>:
 b1e:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_splitA>
 b22:	a8 f3       	brcs	.-22     	; 0xb0e <ldexp+0x6c>
 b24:	99 23       	and	r25, r25
 b26:	c1 f3       	breq	.-16     	; 0xb18 <ldexp+0x76>
 b28:	ae f3       	brts	.-22     	; 0xb14 <ldexp+0x72>
 b2a:	df 93       	push	r29
 b2c:	cf 93       	push	r28
 b2e:	1f 93       	push	r17
 b30:	0f 93       	push	r16
 b32:	ff 92       	push	r15
 b34:	c9 2f       	mov	r28, r25
 b36:	dd 27       	eor	r29, r29
 b38:	88 23       	and	r24, r24
 b3a:	2a f0       	brmi	.+10     	; 0xb46 <log+0x28>
 b3c:	21 97       	sbiw	r28, 0x01	; 1
 b3e:	66 0f       	add	r22, r22
 b40:	77 1f       	adc	r23, r23
 b42:	88 1f       	adc	r24, r24
 b44:	da f7       	brpl	.-10     	; 0xb3c <log+0x1e>
 b46:	20 e0       	ldi	r18, 0x00	; 0
 b48:	30 e0       	ldi	r19, 0x00	; 0
 b4a:	40 e8       	ldi	r20, 0x80	; 128
 b4c:	5f eb       	ldi	r21, 0xBF	; 191
 b4e:	9f e3       	ldi	r25, 0x3F	; 63
 b50:	88 39       	cpi	r24, 0x98	; 152
 b52:	20 f0       	brcs	.+8      	; 0xb5c <log+0x3e>
 b54:	80 3e       	cpi	r24, 0xE0	; 224
 b56:	38 f0       	brcs	.+14     	; 0xb66 <log+0x48>
 b58:	21 96       	adiw	r28, 0x01	; 1
 b5a:	8f 77       	andi	r24, 0x7F	; 127
 b5c:	0e 94 0f 02 	call	0x41e	; 0x41e <__addsf3>
 b60:	e0 e9       	ldi	r30, 0x90	; 144
 b62:	f0 e0       	ldi	r31, 0x00	; 0
 b64:	04 c0       	rjmp	.+8      	; 0xb6e <log+0x50>
 b66:	0e 94 0f 02 	call	0x41e	; 0x41e <__addsf3>
 b6a:	ed eb       	ldi	r30, 0xBD	; 189
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__fp_powser>
 b72:	8b 01       	movw	r16, r22
 b74:	be 01       	movw	r22, r28
 b76:	ec 01       	movw	r28, r24
 b78:	fb 2e       	mov	r15, r27
 b7a:	6f 57       	subi	r22, 0x7F	; 127
 b7c:	71 09       	sbc	r23, r1
 b7e:	75 95       	asr	r23
 b80:	77 1f       	adc	r23, r23
 b82:	88 0b       	sbc	r24, r24
 b84:	99 0b       	sbc	r25, r25
 b86:	0e 94 2a 03 	call	0x654	; 0x654 <__floatsisf>
 b8a:	28 e1       	ldi	r18, 0x18	; 24
 b8c:	32 e7       	ldi	r19, 0x72	; 114
 b8e:	41 e3       	ldi	r20, 0x31	; 49
 b90:	5f e3       	ldi	r21, 0x3F	; 63
 b92:	0e 94 ed 03 	call	0x7da	; 0x7da <__mulsf3x>
 b96:	af 2d       	mov	r26, r15
 b98:	98 01       	movw	r18, r16
 b9a:	ae 01       	movw	r20, r28
 b9c:	ff 90       	pop	r15
 b9e:	0f 91       	pop	r16
 ba0:	1f 91       	pop	r17
 ba2:	cf 91       	pop	r28
 ba4:	df 91       	pop	r29
 ba6:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3x>
 baa:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_round>

00000bae <modf>:
 bae:	fa 01       	movw	r30, r20
 bb0:	dc 01       	movw	r26, r24
 bb2:	aa 0f       	add	r26, r26
 bb4:	bb 1f       	adc	r27, r27
 bb6:	9b 01       	movw	r18, r22
 bb8:	ac 01       	movw	r20, r24
 bba:	bf 57       	subi	r27, 0x7F	; 127
 bbc:	28 f4       	brcc	.+10     	; 0xbc8 <modf+0x1a>
 bbe:	22 27       	eor	r18, r18
 bc0:	33 27       	eor	r19, r19
 bc2:	44 27       	eor	r20, r20
 bc4:	50 78       	andi	r21, 0x80	; 128
 bc6:	20 c0       	rjmp	.+64     	; 0xc08 <modf+0x5a>
 bc8:	b7 51       	subi	r27, 0x17	; 23
 bca:	90 f4       	brcc	.+36     	; 0xbf0 <modf+0x42>
 bcc:	ab 2f       	mov	r26, r27
 bce:	00 24       	eor	r0, r0
 bd0:	46 95       	lsr	r20
 bd2:	37 95       	ror	r19
 bd4:	27 95       	ror	r18
 bd6:	01 1c       	adc	r0, r1
 bd8:	a3 95       	inc	r26
 bda:	d2 f3       	brmi	.-12     	; 0xbd0 <modf+0x22>
 bdc:	00 20       	and	r0, r0
 bde:	71 f0       	breq	.+28     	; 0xbfc <modf+0x4e>
 be0:	22 0f       	add	r18, r18
 be2:	33 1f       	adc	r19, r19
 be4:	44 1f       	adc	r20, r20
 be6:	b3 95       	inc	r27
 be8:	da f3       	brmi	.-10     	; 0xbe0 <modf+0x32>
 bea:	0e d0       	rcall	.+28     	; 0xc08 <modf+0x5a>
 bec:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__subsf3>
 bf0:	61 30       	cpi	r22, 0x01	; 1
 bf2:	71 05       	cpc	r23, r1
 bf4:	a0 e8       	ldi	r26, 0x80	; 128
 bf6:	8a 07       	cpc	r24, r26
 bf8:	b9 46       	sbci	r27, 0x69	; 105
 bfa:	30 f4       	brcc	.+12     	; 0xc08 <modf+0x5a>
 bfc:	9b 01       	movw	r18, r22
 bfe:	ac 01       	movw	r20, r24
 c00:	66 27       	eor	r22, r22
 c02:	77 27       	eor	r23, r23
 c04:	88 27       	eor	r24, r24
 c06:	90 78       	andi	r25, 0x80	; 128
 c08:	30 96       	adiw	r30, 0x00	; 0
 c0a:	21 f0       	breq	.+8      	; 0xc14 <modf+0x66>
 c0c:	20 83       	st	Z, r18
 c0e:	31 83       	std	Z+1, r19	; 0x01
 c10:	42 83       	std	Z+2, r20	; 0x02
 c12:	53 83       	std	Z+3, r21	; 0x03
 c14:	08 95       	ret

00000c16 <__umulhisi3>:
 c16:	a2 9f       	mul	r26, r18
 c18:	b0 01       	movw	r22, r0
 c1a:	b3 9f       	mul	r27, r19
 c1c:	c0 01       	movw	r24, r0
 c1e:	a3 9f       	mul	r26, r19
 c20:	70 0d       	add	r23, r0
 c22:	81 1d       	adc	r24, r1
 c24:	11 24       	eor	r1, r1
 c26:	91 1d       	adc	r25, r1
 c28:	b2 9f       	mul	r27, r18
 c2a:	70 0d       	add	r23, r0
 c2c:	81 1d       	adc	r24, r1
 c2e:	11 24       	eor	r1, r1
 c30:	91 1d       	adc	r25, r1
 c32:	08 95       	ret

00000c34 <_exit>:
 c34:	f8 94       	cli

00000c36 <__stop_program>:
 c36:	ff cf       	rjmp	.-2      	; 0xc36 <__stop_program>
