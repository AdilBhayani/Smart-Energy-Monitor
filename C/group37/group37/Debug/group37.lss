
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000d2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d9  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003bc  00000000  00000000  00001611  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000559  00000000  00000000  000019cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00001f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000321  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007fb  00000000  00000000  000023c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00002bc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__mulsf3_pse+0x82>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a1 30       	cpi	r26, 0x01	; 1
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
 10a:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <uart_init>:
 unsigned int adc_read_1() {
	ADCSRA |= (1<<ADSC); //Start conversion
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
	unsigned int adcRead = ADC;
	return adcRead;
 }
 112:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 116:	87 e6       	ldi	r24, 0x67	; 103
 118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 11c:	e1 ec       	ldi	r30, 0xC1	; 193
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 60       	ori	r24, 0x08	; 8
 124:	80 83       	st	Z, r24
 126:	e2 ec       	ldi	r30, 0xC2	; 194
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	86 60       	ori	r24, 0x06	; 6
 12e:	80 83       	st	Z, r24
 130:	08 95       	ret

00000132 <uart_transmit>:
 132:	e0 ec       	ldi	r30, 0xC0	; 192
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 81       	ld	r25, Z
 138:	99 23       	and	r25, r25
 13a:	e9 f3       	breq	.-6      	; 0x136 <uart_transmit+0x4>
 13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 140:	08 95       	ret

00000142 <timer0_init>:
 142:	85 b5       	in	r24, 0x25	; 37
 144:	85 60       	ori	r24, 0x05	; 5
 146:	85 bd       	out	0x25, r24	; 37
 148:	16 bc       	out	0x26, r1	; 38
 14a:	08 95       	ret

0000014c <find_decimal>:
 14c:	cf 92       	push	r12
 14e:	df 92       	push	r13
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	6b 01       	movw	r12, r22
 156:	7c 01       	movw	r14, r24
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e2       	ldi	r20, 0x20	; 32
 15e:	51 e4       	ldi	r21, 0x41	; 65
 160:	0e 94 bc 02 	call	0x578	; 0x578 <__cmpsf2>
 164:	88 23       	and	r24, r24
 166:	04 f1       	brlt	.+64     	; 0x1a8 <find_decimal+0x5c>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	48 ec       	ldi	r20, 0xC8	; 200
 16e:	52 e4       	ldi	r21, 0x42	; 66
 170:	c7 01       	movw	r24, r14
 172:	b6 01       	movw	r22, r12
 174:	0e 94 bc 02 	call	0x578	; 0x578 <__cmpsf2>
 178:	88 23       	and	r24, r24
 17a:	cc f0       	brlt	.+50     	; 0x1ae <find_decimal+0x62>
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	4a e7       	ldi	r20, 0x7A	; 122
 182:	54 e4       	ldi	r21, 0x44	; 68
 184:	c7 01       	movw	r24, r14
 186:	b6 01       	movw	r22, r12
 188:	0e 94 bc 02 	call	0x578	; 0x578 <__cmpsf2>
 18c:	08 2e       	mov	r0, r24
 18e:	00 0c       	add	r0, r0
 190:	99 0b       	sbc	r25, r25
 192:	88 27       	eor	r24, r24
 194:	99 0f       	add	r25, r25
 196:	88 1f       	adc	r24, r24
 198:	99 27       	eor	r25, r25
 19a:	23 e0       	ldi	r18, 0x03	; 3
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	a9 01       	movw	r20, r18
 1a0:	48 1b       	sub	r20, r24
 1a2:	59 0b       	sbc	r21, r25
 1a4:	ca 01       	movw	r24, r20
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <find_decimal+0x66>
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <find_decimal+0x66>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <wololo>:
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <wololo+0x8>
 1c2:	40 96       	adiw	r24, 0x10	; 16
 1c4:	61 11       	cpse	r22, r1
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <wololo+0x12>
 1c8:	80 5a       	subi	r24, 0xA0	; 160
 1ca:	9f 4f       	sbci	r25, 0xFF	; 255
 1cc:	08 95       	ret
 1ce:	61 30       	cpi	r22, 0x01	; 1
 1d0:	19 f4       	brne	.+6      	; 0x1d8 <wololo+0x1c>
 1d2:	80 5c       	subi	r24, 0xC0	; 192
 1d4:	9f 4f       	sbci	r25, 0xFF	; 255
 1d6:	08 95       	ret
 1d8:	62 30       	cpi	r22, 0x02	; 2
 1da:	09 f4       	brne	.+2      	; 0x1de <wololo+0x22>
 1dc:	80 96       	adiw	r24, 0x20	; 32
 1de:	08 95       	ret

000001e0 <adc_init>:
 1e0:	17 b8       	out	0x07, r1	; 7
 1e2:	ea e7       	ldi	r30, 0x7A	; 122
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	87 68       	ori	r24, 0x87	; 135
 1ea:	80 83       	st	Z, r24
 1ec:	ec e7       	ldi	r30, 0x7C	; 124
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	80 64       	ori	r24, 0x40	; 64
 1f4:	80 83       	st	Z, r24
 1f6:	08 95       	ret

000001f8 <adc_read_2>:

 //Reads from C0 and C2 alternately
 void adc_read_2(unsigned int* adcValue1, unsigned int* adcValue2) {
 1f8:	dc 01       	movw	r26, r24
	ADMUX &= ~(1<<MUX1);
 1fa:	ec e7       	ldi	r30, 0x7C	; 124
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	90 81       	ld	r25, Z
 200:	9d 7f       	andi	r25, 0xFD	; 253
 202:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADSC); //Start conversion
 204:	ea e7       	ldi	r30, 0x7A	; 122
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	90 81       	ld	r25, Z
 20a:	90 64       	ori	r25, 0x40	; 64
 20c:	90 83       	st	Z, r25
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
 20e:	90 81       	ld	r25, Z
 210:	94 ff       	sbrs	r25, 4
 212:	fd cf       	rjmp	.-6      	; 0x20e <adc_read_2+0x16>
	(*adcValue1) = ADC;
 214:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 218:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 21c:	8d 93       	st	X+, r24
 21e:	9c 93       	st	X, r25
	ADMUX |= (1<<MUX1);
 220:	ec e7       	ldi	r30, 0x7C	; 124
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	82 60       	ori	r24, 0x02	; 2
 228:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start conversion
 22a:	ea e7       	ldi	r30, 0x7A	; 122
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 64       	ori	r24, 0x40	; 64
 232:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
 234:	80 81       	ld	r24, Z
 236:	84 ff       	sbrs	r24, 4
 238:	fd cf       	rjmp	.-6      	; 0x234 <adc_read_2+0x3c>
	(*adcValue2) = ADC;
 23a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 23e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 242:	fb 01       	movw	r30, r22
 244:	91 83       	std	Z+1, r25	; 0x01
 246:	80 83       	st	Z, r24
 248:	08 95       	ret

0000024a <adc_calculation>:
 }

 //Converts an ADC integer into the actual voltage measured by the ADC pin
 float adc_calculation(unsigned int adcValue) {
	float calculatedValue;
	calculatedValue = ((float)adcValue / 1023) * 5;
 24a:	bc 01       	movw	r22, r24
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__floatunsisf>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 ec       	ldi	r19, 0xC0	; 192
 258:	4f e7       	ldi	r20, 0x7F	; 127
 25a:	54 e4       	ldi	r21, 0x44	; 68
 25c:	0e 94 c1 02 	call	0x582	; 0x582 <__divsf3>
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	40 ea       	ldi	r20, 0xA0	; 160
 266:	50 e4       	ldi	r21, 0x40	; 64
 268:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
	return calculatedValue; 
 }
 26c:	08 95       	ret

0000026e <voltage_real>:
 /*
 This function figures out what the actual voltage being measured was based on reversing the process 
 that the signal went through. Option 0 for voltage, 1 for regular current, 2 for high gain current
 */
 signed int voltage_real(unsigned int adcValue, unsigned int option) {
	if (option == 0) {
 26e:	61 15       	cp	r22, r1
 270:	71 05       	cpc	r23, r1
 272:	b1 f4       	brne	.+44     	; 0x2a0 <voltage_real+0x32>
		return -(adcValue - 1.7) * 98;
 274:	bc 01       	movw	r22, r24
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__floatunsisf>
 27e:	2a e9       	ldi	r18, 0x9A	; 154
 280:	39 e9       	ldi	r19, 0x99	; 153
 282:	49 ed       	ldi	r20, 0xD9	; 217
 284:	5f e3       	ldi	r21, 0x3F	; 63
 286:	0e 94 4f 02 	call	0x49e	; 0x49e <__subsf3>
 28a:	90 58       	subi	r25, 0x80	; 128
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	44 ec       	ldi	r20, 0xC4	; 196
 292:	52 e4       	ldi	r21, 0x42	; 66
 294:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 298:	0e 94 33 03 	call	0x666	; 0x666 <__fixsfsi>
 29c:	cb 01       	movw	r24, r22
 29e:	08 95       	ret
	} else if (option == 1) {
 2a0:	61 30       	cpi	r22, 0x01	; 1
 2a2:	71 05       	cpc	r23, r1
 2a4:	b1 f4       	brne	.+44     	; 0x2d2 <voltage_real+0x64>
		return -(adcValue - 1.63) / 5.7;
 2a6:	bc 01       	movw	r22, r24
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__floatunsisf>
 2b0:	27 ed       	ldi	r18, 0xD7	; 215
 2b2:	33 ea       	ldi	r19, 0xA3	; 163
 2b4:	40 ed       	ldi	r20, 0xD0	; 208
 2b6:	5f e3       	ldi	r21, 0x3F	; 63
 2b8:	0e 94 4f 02 	call	0x49e	; 0x49e <__subsf3>
 2bc:	90 58       	subi	r25, 0x80	; 128
 2be:	26 e6       	ldi	r18, 0x66	; 102
 2c0:	36 e6       	ldi	r19, 0x66	; 102
 2c2:	46 eb       	ldi	r20, 0xB6	; 182
 2c4:	50 e4       	ldi	r21, 0x40	; 64
 2c6:	0e 94 c1 02 	call	0x582	; 0x582 <__divsf3>
 2ca:	0e 94 33 03 	call	0x666	; 0x666 <__fixsfsi>
 2ce:	cb 01       	movw	r24, r22
 2d0:	08 95       	ret
	} else {
		return -(adcValue - 1.64) / 32.93;
 2d2:	bc 01       	movw	r22, r24
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__floatunsisf>
 2dc:	25 e8       	ldi	r18, 0x85	; 133
 2de:	3b ee       	ldi	r19, 0xEB	; 235
 2e0:	41 ed       	ldi	r20, 0xD1	; 209
 2e2:	5f e3       	ldi	r21, 0x3F	; 63
 2e4:	0e 94 4f 02 	call	0x49e	; 0x49e <__subsf3>
 2e8:	90 58       	subi	r25, 0x80	; 128
 2ea:	22 e5       	ldi	r18, 0x52	; 82
 2ec:	38 eb       	ldi	r19, 0xB8	; 184
 2ee:	43 e0       	ldi	r20, 0x03	; 3
 2f0:	52 e4       	ldi	r21, 0x42	; 66
 2f2:	0e 94 c1 02 	call	0x582	; 0x582 <__divsf3>
 2f6:	0e 94 33 03 	call	0x666	; 0x666 <__fixsfsi>
 2fa:	cb 01       	movw	r24, r22
	}
 2fc:	08 95       	ret

000002fe <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

volatile uint8_t counter = 0; //Counter for the number of times the TCNT0 compares correctly

int main(void) {
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	28 97       	sbiw	r28, 0x08	; 8
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61
	adc_init();
 312:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <adc_init>
	uart_init();	
 316:	0e 94 89 00 	call	0x112	; 0x112 <uart_init>
	timer0_init();
 31a:	0e 94 a1 00 	call	0x142	; 0x142 <timer0_init>
		float dataFloat = adc_calculation(adcValue1);
		
		//float dataFloat = 6969;
		dataFloat = roundf(dataFloat * 1000) / 1000;
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
 31e:	0f 2e       	mov	r0, r31
 320:	f3 e0       	ldi	r31, 0x03	; 3
 322:	8f 2e       	mov	r8, r31
 324:	91 2c       	mov	r9, r1
 326:	f0 2d       	mov	r31, r0
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
			if ((decimalPos == i) && ((3-decimalPos) > 0)) {
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
 328:	31 2c       	mov	r3, r1
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
			if ((decimalPos == i) && ((3-decimalPos) > 0)) {
 32a:	44 24       	eor	r4, r4
 32c:	43 94       	inc	r4
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
 32e:	53 2c       	mov	r5, r3
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
			if ((decimalPos == i) && ((3-decimalPos) > 0)) {
 330:	24 2c       	mov	r2, r4
		//Reading from the ADC, calculating and converting
		unsigned int adcValue1;
		unsigned int adcValue2;
		signed int voltage;
		signed int current;
		adc_read_2(&adcValue1, &adcValue2);
 332:	be 01       	movw	r22, r28
 334:	6b 5f       	subi	r22, 0xFB	; 251
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	ce 01       	movw	r24, r28
 33a:	07 96       	adiw	r24, 0x07	; 7
 33c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <adc_read_2>
		voltage = voltage_real(adcValue1, 0);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	8f 81       	ldd	r24, Y+7	; 0x07
 346:	98 85       	ldd	r25, Y+8	; 0x08
 348:	0e 94 37 01 	call	0x26e	; 0x26e <voltage_real>
		current = voltage_real(adcValue2, 0);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	8d 81       	ldd	r24, Y+5	; 0x05
 352:	9e 81       	ldd	r25, Y+6	; 0x06
 354:	0e 94 37 01 	call	0x26e	; 0x26e <voltage_real>
		float dataFloat = adc_calculation(adcValue1);
 358:	8f 81       	ldd	r24, Y+7	; 0x07
 35a:	98 85       	ldd	r25, Y+8	; 0x08
 35c:	0e 94 25 01 	call	0x24a	; 0x24a <adc_calculation>
		
		//float dataFloat = 6969;
		dataFloat = roundf(dataFloat * 1000) / 1000;
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	4a e7       	ldi	r20, 0x7A	; 122
 366:	54 e4       	ldi	r21, 0x44	; 68
 368:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 36c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <round>
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	4a e7       	ldi	r20, 0x7A	; 122
 376:	54 e4       	ldi	r21, 0x44	; 68
 378:	0e 94 c1 02 	call	0x582	; 0x582 <__divsf3>
 37c:	6b 01       	movw	r12, r22
 37e:	7c 01       	movw	r14, r24
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
 380:	0e 94 a6 00 	call	0x14c	; 0x14c <find_decimal>
 384:	5c 01       	movw	r10, r24
 386:	bb 24       	eor	r11, r11
		unsigned int dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
 388:	34 01       	movw	r6, r8
 38a:	6a 18       	sub	r6, r10
 38c:	7b 08       	sbc	r7, r11
 38e:	b3 01       	movw	r22, r6
 390:	07 2c       	mov	r0, r7
 392:	00 0c       	add	r0, r0
 394:	88 0b       	sbc	r24, r24
 396:	99 0b       	sbc	r25, r25
 398:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__floatsisf>
 39c:	9b 01       	movw	r18, r22
 39e:	ac 01       	movw	r20, r24
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	80 e2       	ldi	r24, 0x20	; 32
 3a6:	91 e4       	ldi	r25, 0x41	; 65
 3a8:	0e 94 88 04 	call	0x910	; 0x910 <pow>
 3ac:	a7 01       	movw	r20, r14
 3ae:	96 01       	movw	r18, r12
 3b0:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	5f e3       	ldi	r21, 0x3F	; 63
 3bc:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__addsf3>
 3c0:	0e 94 33 03 	call	0x666	; 0x666 <__fixsfsi>
 3c4:	7b 01       	movw	r14, r22
 3c6:	ce 01       	movw	r24, r28
 3c8:	05 96       	adiw	r24, 0x05	; 5
 3ca:	6c 01       	movw	r12, r24
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
 3cc:	84 01       	movw	r16, r8
			if ((decimalPos == i) && ((3-decimalPos) > 0)) {
 3ce:	0a 15       	cp	r16, r10
 3d0:	1b 05       	cpc	r17, r11
 3d2:	31 f4       	brne	.+12     	; 0x3e0 <main+0xe2>
 3d4:	42 2d       	mov	r20, r2
 3d6:	16 14       	cp	r1, r6
 3d8:	17 04       	cpc	r1, r7
 3da:	1c f0       	brlt	.+6      	; 0x3e2 <main+0xe4>
 3dc:	45 2d       	mov	r20, r5
 3de:	01 c0       	rjmp	.+2      	; 0x3e2 <main+0xe4>
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
 3e0:	45 2d       	mov	r20, r5
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
 3e2:	97 01       	movw	r18, r14
 3e4:	ad ec       	ldi	r26, 0xCD	; 205
 3e6:	bc ec       	ldi	r27, 0xCC	; 204
 3e8:	0e 94 4c 06 	call	0xc98	; 0xc98 <__umulhisi3>
 3ec:	96 95       	lsr	r25
 3ee:	87 95       	ror	r24
 3f0:	96 95       	lsr	r25
 3f2:	87 95       	ror	r24
 3f4:	96 95       	lsr	r25
 3f6:	87 95       	ror	r24
 3f8:	9c 01       	movw	r18, r24
 3fa:	22 0f       	add	r18, r18
 3fc:	33 1f       	adc	r19, r19
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	82 0f       	add	r24, r18
 40c:	93 1f       	adc	r25, r19
 40e:	60 2f       	mov	r22, r16
 410:	ee 2d       	mov	r30, r14
 412:	e8 1b       	sub	r30, r24
 414:	8e 2f       	mov	r24, r30
 416:	0e 94 de 00 	call	0x1bc	; 0x1bc <wololo>
 41a:	f6 01       	movw	r30, r12
 41c:	82 93       	st	-Z, r24
 41e:	6f 01       	movw	r12, r30
			dataInt = dataInt/10;
 420:	97 01       	movw	r18, r14
 422:	ad ec       	ldi	r26, 0xCD	; 205
 424:	bc ec       	ldi	r27, 0xCC	; 204
 426:	0e 94 4c 06 	call	0xc98	; 0xc98 <__umulhisi3>
 42a:	7c 01       	movw	r14, r24
 42c:	f6 94       	lsr	r15
 42e:	e7 94       	ror	r14
 430:	f6 94       	lsr	r15
 432:	e7 94       	ror	r14
 434:	f6 94       	lsr	r15
 436:	e7 94       	ror	r14
		dataFloat = roundf(dataFloat * 1000) / 1000;
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
 438:	01 50       	subi	r16, 0x01	; 1
 43a:	11 09       	sbc	r17, r1
 43c:	40 f6       	brcc	.-112    	; 0x3ce <main+0xd0>
 43e:	24 c0       	rjmp	.+72     	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
			dataInt = dataInt/10;
		}

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
 440:	e1 e0       	ldi	r30, 0x01	; 1
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	ec 0f       	add	r30, r28
 446:	fd 1f       	adc	r31, r29
 448:	e1 0f       	add	r30, r17
 44a:	f1 1d       	adc	r31, r1
			uart_transmit(data);
 44c:	80 81       	ld	r24, Z
 44e:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 452:	8f ed       	ldi	r24, 0xDF	; 223
 454:	9e e2       	ldi	r25, 0x2E	; 46
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 45c:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
 45e:	1f 5f       	subi	r17, 0xFF	; 255
			//Select next integer to send
			if (index == 4) {
 460:	14 30       	cpi	r17, 0x04	; 4
 462:	09 f4       	brne	.+2      	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
				index = 0;
 464:	15 2d       	mov	r17, r5
			}
			//Polling mechanism
			if(TCNT0>=156) {
 466:	86 b5       	in	r24, 0x26	; 38
 468:	8c 39       	cpi	r24, 0x9C	; 156
 46a:	50 f3       	brcs	.-44     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
				TCNT0 = 0;
 46c:	16 bc       	out	0x26, r1	; 38
				if (counter == 50) {
 46e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 472:	82 33       	cpi	r24, 0x32	; 50
 474:	19 f4       	brne	.+6      	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
					counter = 0;
 476:	30 92 00 01 	sts	0x0100, r3	; 0x800100 <_edata>
				} else {
					counter++;
				}
			}
		}
	}
 47a:	5b cf       	rjmp	.-330    	; 0x332 <main+0x34>
				TCNT0 = 0;
				if (counter == 50) {
					counter = 0;
					break;
				} else {
					counter++;
 47c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 480:	8f 5f       	subi	r24, 0xFF	; 255
 482:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 486:	dc cf       	rjmp	.-72     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
		}

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
			uart_transmit(data);
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
 48e:	ef ed       	ldi	r30, 0xDF	; 223
 490:	fe e2       	ldi	r31, 0x2E	; 46
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
 496:	00 c0       	rjmp	.+0      	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
 498:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
 49a:	14 2d       	mov	r17, r4
 49c:	e4 cf       	rjmp	.-56     	; 0x466 <__FUSE_REGION_LENGTH__+0x66>

0000049e <__subsf3>:
 49e:	50 58       	subi	r21, 0x80	; 128

000004a0 <__addsf3>:
 4a0:	bb 27       	eor	r27, r27
 4a2:	aa 27       	eor	r26, r26
 4a4:	0e 94 67 02 	call	0x4ce	; 0x4ce <__addsf3x>
 4a8:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_round>
 4ac:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fp_pscA>
 4b0:	38 f0       	brcs	.+14     	; 0x4c0 <__addsf3+0x20>
 4b2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fp_pscB>
 4b6:	20 f0       	brcs	.+8      	; 0x4c0 <__addsf3+0x20>
 4b8:	39 f4       	brne	.+14     	; 0x4c8 <__addsf3+0x28>
 4ba:	9f 3f       	cpi	r25, 0xFF	; 255
 4bc:	19 f4       	brne	.+6      	; 0x4c4 <__addsf3+0x24>
 4be:	26 f4       	brtc	.+8      	; 0x4c8 <__addsf3+0x28>
 4c0:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_nan>
 4c4:	0e f4       	brtc	.+2      	; 0x4c8 <__addsf3+0x28>
 4c6:	e0 95       	com	r30
 4c8:	e7 fb       	bst	r30, 7
 4ca:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_inf>

000004ce <__addsf3x>:
 4ce:	e9 2f       	mov	r30, r25
 4d0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__fp_split3>
 4d4:	58 f3       	brcs	.-42     	; 0x4ac <__addsf3+0xc>
 4d6:	ba 17       	cp	r27, r26
 4d8:	62 07       	cpc	r22, r18
 4da:	73 07       	cpc	r23, r19
 4dc:	84 07       	cpc	r24, r20
 4de:	95 07       	cpc	r25, r21
 4e0:	20 f0       	brcs	.+8      	; 0x4ea <__addsf3x+0x1c>
 4e2:	79 f4       	brne	.+30     	; 0x502 <__addsf3x+0x34>
 4e4:	a6 f5       	brtc	.+104    	; 0x54e <__addsf3x+0x80>
 4e6:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_zero>
 4ea:	0e f4       	brtc	.+2      	; 0x4ee <__addsf3x+0x20>
 4ec:	e0 95       	com	r30
 4ee:	0b 2e       	mov	r0, r27
 4f0:	ba 2f       	mov	r27, r26
 4f2:	a0 2d       	mov	r26, r0
 4f4:	0b 01       	movw	r0, r22
 4f6:	b9 01       	movw	r22, r18
 4f8:	90 01       	movw	r18, r0
 4fa:	0c 01       	movw	r0, r24
 4fc:	ca 01       	movw	r24, r20
 4fe:	a0 01       	movw	r20, r0
 500:	11 24       	eor	r1, r1
 502:	ff 27       	eor	r31, r31
 504:	59 1b       	sub	r21, r25
 506:	99 f0       	breq	.+38     	; 0x52e <__addsf3x+0x60>
 508:	59 3f       	cpi	r21, 0xF9	; 249
 50a:	50 f4       	brcc	.+20     	; 0x520 <__addsf3x+0x52>
 50c:	50 3e       	cpi	r21, 0xE0	; 224
 50e:	68 f1       	brcs	.+90     	; 0x56a <__addsf3x+0x9c>
 510:	1a 16       	cp	r1, r26
 512:	f0 40       	sbci	r31, 0x00	; 0
 514:	a2 2f       	mov	r26, r18
 516:	23 2f       	mov	r18, r19
 518:	34 2f       	mov	r19, r20
 51a:	44 27       	eor	r20, r20
 51c:	58 5f       	subi	r21, 0xF8	; 248
 51e:	f3 cf       	rjmp	.-26     	; 0x506 <__addsf3x+0x38>
 520:	46 95       	lsr	r20
 522:	37 95       	ror	r19
 524:	27 95       	ror	r18
 526:	a7 95       	ror	r26
 528:	f0 40       	sbci	r31, 0x00	; 0
 52a:	53 95       	inc	r21
 52c:	c9 f7       	brne	.-14     	; 0x520 <__addsf3x+0x52>
 52e:	7e f4       	brtc	.+30     	; 0x54e <__addsf3x+0x80>
 530:	1f 16       	cp	r1, r31
 532:	ba 0b       	sbc	r27, r26
 534:	62 0b       	sbc	r22, r18
 536:	73 0b       	sbc	r23, r19
 538:	84 0b       	sbc	r24, r20
 53a:	ba f0       	brmi	.+46     	; 0x56a <__addsf3x+0x9c>
 53c:	91 50       	subi	r25, 0x01	; 1
 53e:	a1 f0       	breq	.+40     	; 0x568 <__addsf3x+0x9a>
 540:	ff 0f       	add	r31, r31
 542:	bb 1f       	adc	r27, r27
 544:	66 1f       	adc	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	88 1f       	adc	r24, r24
 54a:	c2 f7       	brpl	.-16     	; 0x53c <__addsf3x+0x6e>
 54c:	0e c0       	rjmp	.+28     	; 0x56a <__addsf3x+0x9c>
 54e:	ba 0f       	add	r27, r26
 550:	62 1f       	adc	r22, r18
 552:	73 1f       	adc	r23, r19
 554:	84 1f       	adc	r24, r20
 556:	48 f4       	brcc	.+18     	; 0x56a <__addsf3x+0x9c>
 558:	87 95       	ror	r24
 55a:	77 95       	ror	r23
 55c:	67 95       	ror	r22
 55e:	b7 95       	ror	r27
 560:	f7 95       	ror	r31
 562:	9e 3f       	cpi	r25, 0xFE	; 254
 564:	08 f0       	brcs	.+2      	; 0x568 <__addsf3x+0x9a>
 566:	b0 cf       	rjmp	.-160    	; 0x4c8 <__addsf3+0x28>
 568:	93 95       	inc	r25
 56a:	88 0f       	add	r24, r24
 56c:	08 f0       	brcs	.+2      	; 0x570 <__addsf3x+0xa2>
 56e:	99 27       	eor	r25, r25
 570:	ee 0f       	add	r30, r30
 572:	97 95       	ror	r25
 574:	87 95       	ror	r24
 576:	08 95       	ret

00000578 <__cmpsf2>:
 578:	0e 94 a6 03 	call	0x74c	; 0x74c <__fp_cmp>
 57c:	08 f4       	brcc	.+2      	; 0x580 <__cmpsf2+0x8>
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	08 95       	ret

00000582 <__divsf3>:
 582:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__divsf3x>
 586:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_round>
 58a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fp_pscB>
 58e:	58 f0       	brcs	.+22     	; 0x5a6 <__divsf3+0x24>
 590:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fp_pscA>
 594:	40 f0       	brcs	.+16     	; 0x5a6 <__divsf3+0x24>
 596:	29 f4       	brne	.+10     	; 0x5a2 <__divsf3+0x20>
 598:	5f 3f       	cpi	r21, 0xFF	; 255
 59a:	29 f0       	breq	.+10     	; 0x5a6 <__divsf3+0x24>
 59c:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_inf>
 5a0:	51 11       	cpse	r21, r1
 5a2:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_szero>
 5a6:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_nan>

000005aa <__divsf3x>:
 5aa:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__fp_split3>
 5ae:	68 f3       	brcs	.-38     	; 0x58a <__divsf3+0x8>

000005b0 <__divsf3_pse>:
 5b0:	99 23       	and	r25, r25
 5b2:	b1 f3       	breq	.-20     	; 0x5a0 <__divsf3+0x1e>
 5b4:	55 23       	and	r21, r21
 5b6:	91 f3       	breq	.-28     	; 0x59c <__divsf3+0x1a>
 5b8:	95 1b       	sub	r25, r21
 5ba:	55 0b       	sbc	r21, r21
 5bc:	bb 27       	eor	r27, r27
 5be:	aa 27       	eor	r26, r26
 5c0:	62 17       	cp	r22, r18
 5c2:	73 07       	cpc	r23, r19
 5c4:	84 07       	cpc	r24, r20
 5c6:	38 f0       	brcs	.+14     	; 0x5d6 <__divsf3_pse+0x26>
 5c8:	9f 5f       	subi	r25, 0xFF	; 255
 5ca:	5f 4f       	sbci	r21, 0xFF	; 255
 5cc:	22 0f       	add	r18, r18
 5ce:	33 1f       	adc	r19, r19
 5d0:	44 1f       	adc	r20, r20
 5d2:	aa 1f       	adc	r26, r26
 5d4:	a9 f3       	breq	.-22     	; 0x5c0 <__divsf3_pse+0x10>
 5d6:	35 d0       	rcall	.+106    	; 0x642 <__divsf3_pse+0x92>
 5d8:	0e 2e       	mov	r0, r30
 5da:	3a f0       	brmi	.+14     	; 0x5ea <__divsf3_pse+0x3a>
 5dc:	e0 e8       	ldi	r30, 0x80	; 128
 5de:	32 d0       	rcall	.+100    	; 0x644 <__divsf3_pse+0x94>
 5e0:	91 50       	subi	r25, 0x01	; 1
 5e2:	50 40       	sbci	r21, 0x00	; 0
 5e4:	e6 95       	lsr	r30
 5e6:	00 1c       	adc	r0, r0
 5e8:	ca f7       	brpl	.-14     	; 0x5dc <__divsf3_pse+0x2c>
 5ea:	2b d0       	rcall	.+86     	; 0x642 <__divsf3_pse+0x92>
 5ec:	fe 2f       	mov	r31, r30
 5ee:	29 d0       	rcall	.+82     	; 0x642 <__divsf3_pse+0x92>
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	88 1f       	adc	r24, r24
 5f6:	bb 1f       	adc	r27, r27
 5f8:	26 17       	cp	r18, r22
 5fa:	37 07       	cpc	r19, r23
 5fc:	48 07       	cpc	r20, r24
 5fe:	ab 07       	cpc	r26, r27
 600:	b0 e8       	ldi	r27, 0x80	; 128
 602:	09 f0       	breq	.+2      	; 0x606 <__divsf3_pse+0x56>
 604:	bb 0b       	sbc	r27, r27
 606:	80 2d       	mov	r24, r0
 608:	bf 01       	movw	r22, r30
 60a:	ff 27       	eor	r31, r31
 60c:	93 58       	subi	r25, 0x83	; 131
 60e:	5f 4f       	sbci	r21, 0xFF	; 255
 610:	3a f0       	brmi	.+14     	; 0x620 <__divsf3_pse+0x70>
 612:	9e 3f       	cpi	r25, 0xFE	; 254
 614:	51 05       	cpc	r21, r1
 616:	78 f0       	brcs	.+30     	; 0x636 <__divsf3_pse+0x86>
 618:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_inf>
 61c:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_szero>
 620:	5f 3f       	cpi	r21, 0xFF	; 255
 622:	e4 f3       	brlt	.-8      	; 0x61c <__divsf3_pse+0x6c>
 624:	98 3e       	cpi	r25, 0xE8	; 232
 626:	d4 f3       	brlt	.-12     	; 0x61c <__divsf3_pse+0x6c>
 628:	86 95       	lsr	r24
 62a:	77 95       	ror	r23
 62c:	67 95       	ror	r22
 62e:	b7 95       	ror	r27
 630:	f7 95       	ror	r31
 632:	9f 5f       	subi	r25, 0xFF	; 255
 634:	c9 f7       	brne	.-14     	; 0x628 <__divsf3_pse+0x78>
 636:	88 0f       	add	r24, r24
 638:	91 1d       	adc	r25, r1
 63a:	96 95       	lsr	r25
 63c:	87 95       	ror	r24
 63e:	97 f9       	bld	r25, 7
 640:	08 95       	ret
 642:	e1 e0       	ldi	r30, 0x01	; 1
 644:	66 0f       	add	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	88 1f       	adc	r24, r24
 64a:	bb 1f       	adc	r27, r27
 64c:	62 17       	cp	r22, r18
 64e:	73 07       	cpc	r23, r19
 650:	84 07       	cpc	r24, r20
 652:	ba 07       	cpc	r27, r26
 654:	20 f0       	brcs	.+8      	; 0x65e <__divsf3_pse+0xae>
 656:	62 1b       	sub	r22, r18
 658:	73 0b       	sbc	r23, r19
 65a:	84 0b       	sbc	r24, r20
 65c:	ba 0b       	sbc	r27, r26
 65e:	ee 1f       	adc	r30, r30
 660:	88 f7       	brcc	.-30     	; 0x644 <__divsf3_pse+0x94>
 662:	e0 95       	com	r30
 664:	08 95       	ret

00000666 <__fixsfsi>:
 666:	0e 94 3a 03 	call	0x674	; 0x674 <__fixunssfsi>
 66a:	68 94       	set
 66c:	b1 11       	cpse	r27, r1
 66e:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_szero>
 672:	08 95       	ret

00000674 <__fixunssfsi>:
 674:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_splitA>
 678:	88 f0       	brcs	.+34     	; 0x69c <__fixunssfsi+0x28>
 67a:	9f 57       	subi	r25, 0x7F	; 127
 67c:	98 f0       	brcs	.+38     	; 0x6a4 <__fixunssfsi+0x30>
 67e:	b9 2f       	mov	r27, r25
 680:	99 27       	eor	r25, r25
 682:	b7 51       	subi	r27, 0x17	; 23
 684:	b0 f0       	brcs	.+44     	; 0x6b2 <__fixunssfsi+0x3e>
 686:	e1 f0       	breq	.+56     	; 0x6c0 <__fixunssfsi+0x4c>
 688:	66 0f       	add	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	88 1f       	adc	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	1a f0       	brmi	.+6      	; 0x698 <__fixunssfsi+0x24>
 692:	ba 95       	dec	r27
 694:	c9 f7       	brne	.-14     	; 0x688 <__fixunssfsi+0x14>
 696:	14 c0       	rjmp	.+40     	; 0x6c0 <__fixunssfsi+0x4c>
 698:	b1 30       	cpi	r27, 0x01	; 1
 69a:	91 f0       	breq	.+36     	; 0x6c0 <__fixunssfsi+0x4c>
 69c:	0e 94 14 04 	call	0x828	; 0x828 <__fp_zero>
 6a0:	b1 e0       	ldi	r27, 0x01	; 1
 6a2:	08 95       	ret
 6a4:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_zero>
 6a8:	67 2f       	mov	r22, r23
 6aa:	78 2f       	mov	r23, r24
 6ac:	88 27       	eor	r24, r24
 6ae:	b8 5f       	subi	r27, 0xF8	; 248
 6b0:	39 f0       	breq	.+14     	; 0x6c0 <__fixunssfsi+0x4c>
 6b2:	b9 3f       	cpi	r27, 0xF9	; 249
 6b4:	cc f3       	brlt	.-14     	; 0x6a8 <__fixunssfsi+0x34>
 6b6:	86 95       	lsr	r24
 6b8:	77 95       	ror	r23
 6ba:	67 95       	ror	r22
 6bc:	b3 95       	inc	r27
 6be:	d9 f7       	brne	.-10     	; 0x6b6 <__fixunssfsi+0x42>
 6c0:	3e f4       	brtc	.+14     	; 0x6d0 <__fixunssfsi+0x5c>
 6c2:	90 95       	com	r25
 6c4:	80 95       	com	r24
 6c6:	70 95       	com	r23
 6c8:	61 95       	neg	r22
 6ca:	7f 4f       	sbci	r23, 0xFF	; 255
 6cc:	8f 4f       	sbci	r24, 0xFF	; 255
 6ce:	9f 4f       	sbci	r25, 0xFF	; 255
 6d0:	08 95       	ret

000006d2 <__floatunsisf>:
 6d2:	e8 94       	clt
 6d4:	09 c0       	rjmp	.+18     	; 0x6e8 <__floatsisf+0x12>

000006d6 <__floatsisf>:
 6d6:	97 fb       	bst	r25, 7
 6d8:	3e f4       	brtc	.+14     	; 0x6e8 <__floatsisf+0x12>
 6da:	90 95       	com	r25
 6dc:	80 95       	com	r24
 6de:	70 95       	com	r23
 6e0:	61 95       	neg	r22
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	8f 4f       	sbci	r24, 0xFF	; 255
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
 6e8:	99 23       	and	r25, r25
 6ea:	a9 f0       	breq	.+42     	; 0x716 <__floatsisf+0x40>
 6ec:	f9 2f       	mov	r31, r25
 6ee:	96 e9       	ldi	r25, 0x96	; 150
 6f0:	bb 27       	eor	r27, r27
 6f2:	93 95       	inc	r25
 6f4:	f6 95       	lsr	r31
 6f6:	87 95       	ror	r24
 6f8:	77 95       	ror	r23
 6fa:	67 95       	ror	r22
 6fc:	b7 95       	ror	r27
 6fe:	f1 11       	cpse	r31, r1
 700:	f8 cf       	rjmp	.-16     	; 0x6f2 <__floatsisf+0x1c>
 702:	fa f4       	brpl	.+62     	; 0x742 <__floatsisf+0x6c>
 704:	bb 0f       	add	r27, r27
 706:	11 f4       	brne	.+4      	; 0x70c <__floatsisf+0x36>
 708:	60 ff       	sbrs	r22, 0
 70a:	1b c0       	rjmp	.+54     	; 0x742 <__floatsisf+0x6c>
 70c:	6f 5f       	subi	r22, 0xFF	; 255
 70e:	7f 4f       	sbci	r23, 0xFF	; 255
 710:	8f 4f       	sbci	r24, 0xFF	; 255
 712:	9f 4f       	sbci	r25, 0xFF	; 255
 714:	16 c0       	rjmp	.+44     	; 0x742 <__floatsisf+0x6c>
 716:	88 23       	and	r24, r24
 718:	11 f0       	breq	.+4      	; 0x71e <__floatsisf+0x48>
 71a:	96 e9       	ldi	r25, 0x96	; 150
 71c:	11 c0       	rjmp	.+34     	; 0x740 <__floatsisf+0x6a>
 71e:	77 23       	and	r23, r23
 720:	21 f0       	breq	.+8      	; 0x72a <__floatsisf+0x54>
 722:	9e e8       	ldi	r25, 0x8E	; 142
 724:	87 2f       	mov	r24, r23
 726:	76 2f       	mov	r23, r22
 728:	05 c0       	rjmp	.+10     	; 0x734 <__floatsisf+0x5e>
 72a:	66 23       	and	r22, r22
 72c:	71 f0       	breq	.+28     	; 0x74a <__floatsisf+0x74>
 72e:	96 e8       	ldi	r25, 0x86	; 134
 730:	86 2f       	mov	r24, r22
 732:	70 e0       	ldi	r23, 0x00	; 0
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	2a f0       	brmi	.+10     	; 0x742 <__floatsisf+0x6c>
 738:	9a 95       	dec	r25
 73a:	66 0f       	add	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	88 1f       	adc	r24, r24
 740:	da f7       	brpl	.-10     	; 0x738 <__floatsisf+0x62>
 742:	88 0f       	add	r24, r24
 744:	96 95       	lsr	r25
 746:	87 95       	ror	r24
 748:	97 f9       	bld	r25, 7
 74a:	08 95       	ret

0000074c <__fp_cmp>:
 74c:	99 0f       	add	r25, r25
 74e:	00 08       	sbc	r0, r0
 750:	55 0f       	add	r21, r21
 752:	aa 0b       	sbc	r26, r26
 754:	e0 e8       	ldi	r30, 0x80	; 128
 756:	fe ef       	ldi	r31, 0xFE	; 254
 758:	16 16       	cp	r1, r22
 75a:	17 06       	cpc	r1, r23
 75c:	e8 07       	cpc	r30, r24
 75e:	f9 07       	cpc	r31, r25
 760:	c0 f0       	brcs	.+48     	; 0x792 <__fp_cmp+0x46>
 762:	12 16       	cp	r1, r18
 764:	13 06       	cpc	r1, r19
 766:	e4 07       	cpc	r30, r20
 768:	f5 07       	cpc	r31, r21
 76a:	98 f0       	brcs	.+38     	; 0x792 <__fp_cmp+0x46>
 76c:	62 1b       	sub	r22, r18
 76e:	73 0b       	sbc	r23, r19
 770:	84 0b       	sbc	r24, r20
 772:	95 0b       	sbc	r25, r21
 774:	39 f4       	brne	.+14     	; 0x784 <__fp_cmp+0x38>
 776:	0a 26       	eor	r0, r26
 778:	61 f0       	breq	.+24     	; 0x792 <__fp_cmp+0x46>
 77a:	23 2b       	or	r18, r19
 77c:	24 2b       	or	r18, r20
 77e:	25 2b       	or	r18, r21
 780:	21 f4       	brne	.+8      	; 0x78a <__fp_cmp+0x3e>
 782:	08 95       	ret
 784:	0a 26       	eor	r0, r26
 786:	09 f4       	brne	.+2      	; 0x78a <__fp_cmp+0x3e>
 788:	a1 40       	sbci	r26, 0x01	; 1
 78a:	a6 95       	lsr	r26
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	81 1d       	adc	r24, r1
 790:	81 1d       	adc	r24, r1
 792:	08 95       	ret

00000794 <__fp_inf>:
 794:	97 f9       	bld	r25, 7
 796:	9f 67       	ori	r25, 0x7F	; 127
 798:	80 e8       	ldi	r24, 0x80	; 128
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	60 e0       	ldi	r22, 0x00	; 0
 79e:	08 95       	ret

000007a0 <__fp_nan>:
 7a0:	9f ef       	ldi	r25, 0xFF	; 255
 7a2:	80 ec       	ldi	r24, 0xC0	; 192
 7a4:	08 95       	ret

000007a6 <__fp_pscA>:
 7a6:	00 24       	eor	r0, r0
 7a8:	0a 94       	dec	r0
 7aa:	16 16       	cp	r1, r22
 7ac:	17 06       	cpc	r1, r23
 7ae:	18 06       	cpc	r1, r24
 7b0:	09 06       	cpc	r0, r25
 7b2:	08 95       	ret

000007b4 <__fp_pscB>:
 7b4:	00 24       	eor	r0, r0
 7b6:	0a 94       	dec	r0
 7b8:	12 16       	cp	r1, r18
 7ba:	13 06       	cpc	r1, r19
 7bc:	14 06       	cpc	r1, r20
 7be:	05 06       	cpc	r0, r21
 7c0:	08 95       	ret

000007c2 <__fp_round>:
 7c2:	09 2e       	mov	r0, r25
 7c4:	03 94       	inc	r0
 7c6:	00 0c       	add	r0, r0
 7c8:	11 f4       	brne	.+4      	; 0x7ce <__fp_round+0xc>
 7ca:	88 23       	and	r24, r24
 7cc:	52 f0       	brmi	.+20     	; 0x7e2 <__fp_round+0x20>
 7ce:	bb 0f       	add	r27, r27
 7d0:	40 f4       	brcc	.+16     	; 0x7e2 <__fp_round+0x20>
 7d2:	bf 2b       	or	r27, r31
 7d4:	11 f4       	brne	.+4      	; 0x7da <__fp_round+0x18>
 7d6:	60 ff       	sbrs	r22, 0
 7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <__fp_round+0x20>
 7da:	6f 5f       	subi	r22, 0xFF	; 255
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	8f 4f       	sbci	r24, 0xFF	; 255
 7e0:	9f 4f       	sbci	r25, 0xFF	; 255
 7e2:	08 95       	ret

000007e4 <__fp_split3>:
 7e4:	57 fd       	sbrc	r21, 7
 7e6:	90 58       	subi	r25, 0x80	; 128
 7e8:	44 0f       	add	r20, r20
 7ea:	55 1f       	adc	r21, r21
 7ec:	59 f0       	breq	.+22     	; 0x804 <__fp_splitA+0x10>
 7ee:	5f 3f       	cpi	r21, 0xFF	; 255
 7f0:	71 f0       	breq	.+28     	; 0x80e <__fp_splitA+0x1a>
 7f2:	47 95       	ror	r20

000007f4 <__fp_splitA>:
 7f4:	88 0f       	add	r24, r24
 7f6:	97 fb       	bst	r25, 7
 7f8:	99 1f       	adc	r25, r25
 7fa:	61 f0       	breq	.+24     	; 0x814 <__fp_splitA+0x20>
 7fc:	9f 3f       	cpi	r25, 0xFF	; 255
 7fe:	79 f0       	breq	.+30     	; 0x81e <__fp_splitA+0x2a>
 800:	87 95       	ror	r24
 802:	08 95       	ret
 804:	12 16       	cp	r1, r18
 806:	13 06       	cpc	r1, r19
 808:	14 06       	cpc	r1, r20
 80a:	55 1f       	adc	r21, r21
 80c:	f2 cf       	rjmp	.-28     	; 0x7f2 <__fp_split3+0xe>
 80e:	46 95       	lsr	r20
 810:	f1 df       	rcall	.-30     	; 0x7f4 <__fp_splitA>
 812:	08 c0       	rjmp	.+16     	; 0x824 <__fp_splitA+0x30>
 814:	16 16       	cp	r1, r22
 816:	17 06       	cpc	r1, r23
 818:	18 06       	cpc	r1, r24
 81a:	99 1f       	adc	r25, r25
 81c:	f1 cf       	rjmp	.-30     	; 0x800 <__fp_splitA+0xc>
 81e:	86 95       	lsr	r24
 820:	71 05       	cpc	r23, r1
 822:	61 05       	cpc	r22, r1
 824:	08 94       	sec
 826:	08 95       	ret

00000828 <__fp_zero>:
 828:	e8 94       	clt

0000082a <__fp_szero>:
 82a:	bb 27       	eor	r27, r27
 82c:	66 27       	eor	r22, r22
 82e:	77 27       	eor	r23, r23
 830:	cb 01       	movw	r24, r22
 832:	97 f9       	bld	r25, 7
 834:	08 95       	ret

00000836 <__mulsf3>:
 836:	0e 94 2e 04 	call	0x85c	; 0x85c <__mulsf3x>
 83a:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_round>
 83e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fp_pscA>
 842:	38 f0       	brcs	.+14     	; 0x852 <__mulsf3+0x1c>
 844:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fp_pscB>
 848:	20 f0       	brcs	.+8      	; 0x852 <__mulsf3+0x1c>
 84a:	95 23       	and	r25, r21
 84c:	11 f0       	breq	.+4      	; 0x852 <__mulsf3+0x1c>
 84e:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_inf>
 852:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_nan>
 856:	11 24       	eor	r1, r1
 858:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_szero>

0000085c <__mulsf3x>:
 85c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__fp_split3>
 860:	70 f3       	brcs	.-36     	; 0x83e <__mulsf3+0x8>

00000862 <__mulsf3_pse>:
 862:	95 9f       	mul	r25, r21
 864:	c1 f3       	breq	.-16     	; 0x856 <__mulsf3+0x20>
 866:	95 0f       	add	r25, r21
 868:	50 e0       	ldi	r21, 0x00	; 0
 86a:	55 1f       	adc	r21, r21
 86c:	62 9f       	mul	r22, r18
 86e:	f0 01       	movw	r30, r0
 870:	72 9f       	mul	r23, r18
 872:	bb 27       	eor	r27, r27
 874:	f0 0d       	add	r31, r0
 876:	b1 1d       	adc	r27, r1
 878:	63 9f       	mul	r22, r19
 87a:	aa 27       	eor	r26, r26
 87c:	f0 0d       	add	r31, r0
 87e:	b1 1d       	adc	r27, r1
 880:	aa 1f       	adc	r26, r26
 882:	64 9f       	mul	r22, r20
 884:	66 27       	eor	r22, r22
 886:	b0 0d       	add	r27, r0
 888:	a1 1d       	adc	r26, r1
 88a:	66 1f       	adc	r22, r22
 88c:	82 9f       	mul	r24, r18
 88e:	22 27       	eor	r18, r18
 890:	b0 0d       	add	r27, r0
 892:	a1 1d       	adc	r26, r1
 894:	62 1f       	adc	r22, r18
 896:	73 9f       	mul	r23, r19
 898:	b0 0d       	add	r27, r0
 89a:	a1 1d       	adc	r26, r1
 89c:	62 1f       	adc	r22, r18
 89e:	83 9f       	mul	r24, r19
 8a0:	a0 0d       	add	r26, r0
 8a2:	61 1d       	adc	r22, r1
 8a4:	22 1f       	adc	r18, r18
 8a6:	74 9f       	mul	r23, r20
 8a8:	33 27       	eor	r19, r19
 8aa:	a0 0d       	add	r26, r0
 8ac:	61 1d       	adc	r22, r1
 8ae:	23 1f       	adc	r18, r19
 8b0:	84 9f       	mul	r24, r20
 8b2:	60 0d       	add	r22, r0
 8b4:	21 1d       	adc	r18, r1
 8b6:	82 2f       	mov	r24, r18
 8b8:	76 2f       	mov	r23, r22
 8ba:	6a 2f       	mov	r22, r26
 8bc:	11 24       	eor	r1, r1
 8be:	9f 57       	subi	r25, 0x7F	; 127
 8c0:	50 40       	sbci	r21, 0x00	; 0
 8c2:	9a f0       	brmi	.+38     	; 0x8ea <__mulsf3_pse+0x88>
 8c4:	f1 f0       	breq	.+60     	; 0x902 <__stack+0x3>
 8c6:	88 23       	and	r24, r24
 8c8:	4a f0       	brmi	.+18     	; 0x8dc <__mulsf3_pse+0x7a>
 8ca:	ee 0f       	add	r30, r30
 8cc:	ff 1f       	adc	r31, r31
 8ce:	bb 1f       	adc	r27, r27
 8d0:	66 1f       	adc	r22, r22
 8d2:	77 1f       	adc	r23, r23
 8d4:	88 1f       	adc	r24, r24
 8d6:	91 50       	subi	r25, 0x01	; 1
 8d8:	50 40       	sbci	r21, 0x00	; 0
 8da:	a9 f7       	brne	.-22     	; 0x8c6 <__mulsf3_pse+0x64>
 8dc:	9e 3f       	cpi	r25, 0xFE	; 254
 8de:	51 05       	cpc	r21, r1
 8e0:	80 f0       	brcs	.+32     	; 0x902 <__stack+0x3>
 8e2:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_inf>
 8e6:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_szero>
 8ea:	5f 3f       	cpi	r21, 0xFF	; 255
 8ec:	e4 f3       	brlt	.-8      	; 0x8e6 <__mulsf3_pse+0x84>
 8ee:	98 3e       	cpi	r25, 0xE8	; 232
 8f0:	d4 f3       	brlt	.-12     	; 0x8e6 <__mulsf3_pse+0x84>
 8f2:	86 95       	lsr	r24
 8f4:	77 95       	ror	r23
 8f6:	67 95       	ror	r22
 8f8:	b7 95       	ror	r27
 8fa:	f7 95       	ror	r31
 8fc:	e7 95       	ror	r30
 8fe:	9f 5f       	subi	r25, 0xFF	; 255
 900:	c1 f7       	brne	.-16     	; 0x8f2 <__mulsf3_pse+0x90>
 902:	fe 2b       	or	r31, r30
 904:	88 0f       	add	r24, r24
 906:	91 1d       	adc	r25, r1
 908:	96 95       	lsr	r25
 90a:	87 95       	ror	r24
 90c:	97 f9       	bld	r25, 7
 90e:	08 95       	ret

00000910 <pow>:
 910:	fa 01       	movw	r30, r20
 912:	ee 0f       	add	r30, r30
 914:	ff 1f       	adc	r31, r31
 916:	30 96       	adiw	r30, 0x00	; 0
 918:	21 05       	cpc	r18, r1
 91a:	31 05       	cpc	r19, r1
 91c:	a1 f1       	breq	.+104    	; 0x986 <pow+0x76>
 91e:	61 15       	cp	r22, r1
 920:	71 05       	cpc	r23, r1
 922:	61 f4       	brne	.+24     	; 0x93c <pow+0x2c>
 924:	80 38       	cpi	r24, 0x80	; 128
 926:	bf e3       	ldi	r27, 0x3F	; 63
 928:	9b 07       	cpc	r25, r27
 92a:	49 f1       	breq	.+82     	; 0x97e <pow+0x6e>
 92c:	68 94       	set
 92e:	90 38       	cpi	r25, 0x80	; 128
 930:	81 05       	cpc	r24, r1
 932:	61 f0       	breq	.+24     	; 0x94c <pow+0x3c>
 934:	80 38       	cpi	r24, 0x80	; 128
 936:	bf ef       	ldi	r27, 0xFF	; 255
 938:	9b 07       	cpc	r25, r27
 93a:	41 f0       	breq	.+16     	; 0x94c <pow+0x3c>
 93c:	99 23       	and	r25, r25
 93e:	4a f5       	brpl	.+82     	; 0x992 <pow+0x82>
 940:	ff 3f       	cpi	r31, 0xFF	; 255
 942:	e1 05       	cpc	r30, r1
 944:	31 05       	cpc	r19, r1
 946:	21 05       	cpc	r18, r1
 948:	19 f1       	breq	.+70     	; 0x990 <pow+0x80>
 94a:	e8 94       	clt
 94c:	08 94       	sec
 94e:	e7 95       	ror	r30
 950:	d9 01       	movw	r26, r18
 952:	aa 23       	and	r26, r26
 954:	29 f4       	brne	.+10     	; 0x960 <pow+0x50>
 956:	ab 2f       	mov	r26, r27
 958:	be 2f       	mov	r27, r30
 95a:	f8 5f       	subi	r31, 0xF8	; 248
 95c:	d0 f3       	brcs	.-12     	; 0x952 <pow+0x42>
 95e:	10 c0       	rjmp	.+32     	; 0x980 <pow+0x70>
 960:	ff 5f       	subi	r31, 0xFF	; 255
 962:	70 f4       	brcc	.+28     	; 0x980 <pow+0x70>
 964:	a6 95       	lsr	r26
 966:	e0 f7       	brcc	.-8      	; 0x960 <pow+0x50>
 968:	f7 39       	cpi	r31, 0x97	; 151
 96a:	50 f0       	brcs	.+20     	; 0x980 <pow+0x70>
 96c:	19 f0       	breq	.+6      	; 0x974 <pow+0x64>
 96e:	ff 3a       	cpi	r31, 0xAF	; 175
 970:	38 f4       	brcc	.+14     	; 0x980 <pow+0x70>
 972:	9f 77       	andi	r25, 0x7F	; 127
 974:	9f 93       	push	r25
 976:	0d d0       	rcall	.+26     	; 0x992 <pow+0x82>
 978:	0f 90       	pop	r0
 97a:	07 fc       	sbrc	r0, 7
 97c:	90 58       	subi	r25, 0x80	; 128
 97e:	08 95       	ret
 980:	46 f0       	brts	.+16     	; 0x992 <pow+0x82>
 982:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_nan>
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	70 e0       	ldi	r23, 0x00	; 0
 98a:	80 e8       	ldi	r24, 0x80	; 128
 98c:	9f e3       	ldi	r25, 0x3F	; 63
 98e:	08 95       	ret
 990:	4f e7       	ldi	r20, 0x7F	; 127
 992:	9f 77       	andi	r25, 0x7F	; 127
 994:	5f 93       	push	r21
 996:	4f 93       	push	r20
 998:	3f 93       	push	r19
 99a:	2f 93       	push	r18
 99c:	0e 94 d0 05 	call	0xba0	; 0xba0 <log>
 9a0:	2f 91       	pop	r18
 9a2:	3f 91       	pop	r19
 9a4:	4f 91       	pop	r20
 9a6:	5f 91       	pop	r21
 9a8:	0e 94 1b 04 	call	0x836	; 0x836 <__mulsf3>
 9ac:	0c 94 04 05 	jmp	0xa08	; 0xa08 <exp>

000009b0 <round>:
 9b0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_splitA>
 9b4:	e8 f0       	brcs	.+58     	; 0x9f0 <round+0x40>
 9b6:	9e 37       	cpi	r25, 0x7E	; 126
 9b8:	e8 f0       	brcs	.+58     	; 0x9f4 <round+0x44>
 9ba:	96 39       	cpi	r25, 0x96	; 150
 9bc:	b8 f4       	brcc	.+46     	; 0x9ec <round+0x3c>
 9be:	9e 38       	cpi	r25, 0x8E	; 142
 9c0:	48 f4       	brcc	.+18     	; 0x9d4 <round+0x24>
 9c2:	67 2f       	mov	r22, r23
 9c4:	78 2f       	mov	r23, r24
 9c6:	88 27       	eor	r24, r24
 9c8:	98 5f       	subi	r25, 0xF8	; 248
 9ca:	f9 cf       	rjmp	.-14     	; 0x9be <round+0xe>
 9cc:	86 95       	lsr	r24
 9ce:	77 95       	ror	r23
 9d0:	67 95       	ror	r22
 9d2:	93 95       	inc	r25
 9d4:	95 39       	cpi	r25, 0x95	; 149
 9d6:	d0 f3       	brcs	.-12     	; 0x9cc <round+0x1c>
 9d8:	b6 2f       	mov	r27, r22
 9da:	b1 70       	andi	r27, 0x01	; 1
 9dc:	6b 0f       	add	r22, r27
 9de:	71 1d       	adc	r23, r1
 9e0:	81 1d       	adc	r24, r1
 9e2:	20 f4       	brcc	.+8      	; 0x9ec <round+0x3c>
 9e4:	87 95       	ror	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	93 95       	inc	r25
 9ec:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__fp_mintl>
 9f0:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__fp_mpack>
 9f4:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_szero>
 9f8:	29 f4       	brne	.+10     	; 0xa04 <round+0x54>
 9fa:	16 f0       	brts	.+4      	; 0xa00 <round+0x50>
 9fc:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_inf>
 a00:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_zero>
 a04:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_nan>

00000a08 <exp>:
 a08:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_splitA>
 a0c:	a8 f3       	brcs	.-22     	; 0x9f8 <round+0x48>
 a0e:	96 38       	cpi	r25, 0x86	; 134
 a10:	a0 f7       	brcc	.-24     	; 0x9fa <round+0x4a>
 a12:	07 f8       	bld	r0, 7
 a14:	0f 92       	push	r0
 a16:	e8 94       	clt
 a18:	2b e3       	ldi	r18, 0x3B	; 59
 a1a:	3a ea       	ldi	r19, 0xAA	; 170
 a1c:	48 eb       	ldi	r20, 0xB8	; 184
 a1e:	5f e7       	ldi	r21, 0x7F	; 127
 a20:	0e 94 31 04 	call	0x862	; 0x862 <__mulsf3_pse>
 a24:	0f 92       	push	r0
 a26:	0f 92       	push	r0
 a28:	0f 92       	push	r0
 a2a:	4d b7       	in	r20, 0x3d	; 61
 a2c:	5e b7       	in	r21, 0x3e	; 62
 a2e:	0f 92       	push	r0
 a30:	0e 94 18 06 	call	0xc30	; 0xc30 <modf>
 a34:	e8 e6       	ldi	r30, 0x68	; 104
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_powser>
 a3c:	4f 91       	pop	r20
 a3e:	5f 91       	pop	r21
 a40:	ef 91       	pop	r30
 a42:	ff 91       	pop	r31
 a44:	e5 95       	asr	r30
 a46:	ee 1f       	adc	r30, r30
 a48:	ff 1f       	adc	r31, r31
 a4a:	49 f0       	breq	.+18     	; 0xa5e <exp+0x56>
 a4c:	fe 57       	subi	r31, 0x7E	; 126
 a4e:	e0 68       	ori	r30, 0x80	; 128
 a50:	44 27       	eor	r20, r20
 a52:	ee 0f       	add	r30, r30
 a54:	44 1f       	adc	r20, r20
 a56:	fa 95       	dec	r31
 a58:	e1 f7       	brne	.-8      	; 0xa52 <exp+0x4a>
 a5a:	41 95       	neg	r20
 a5c:	55 0b       	sbc	r21, r21
 a5e:	0e 94 92 05 	call	0xb24	; 0xb24 <ldexp>
 a62:	0f 90       	pop	r0
 a64:	07 fe       	sbrs	r0, 7
 a66:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <inverse>
 a6a:	08 95       	ret

00000a6c <__fp_mintl>:
 a6c:	88 23       	and	r24, r24
 a6e:	71 f4       	brne	.+28     	; 0xa8c <__fp_mintl+0x20>
 a70:	77 23       	and	r23, r23
 a72:	21 f0       	breq	.+8      	; 0xa7c <__fp_mintl+0x10>
 a74:	98 50       	subi	r25, 0x08	; 8
 a76:	87 2b       	or	r24, r23
 a78:	76 2f       	mov	r23, r22
 a7a:	07 c0       	rjmp	.+14     	; 0xa8a <__fp_mintl+0x1e>
 a7c:	66 23       	and	r22, r22
 a7e:	11 f4       	brne	.+4      	; 0xa84 <__fp_mintl+0x18>
 a80:	99 27       	eor	r25, r25
 a82:	0d c0       	rjmp	.+26     	; 0xa9e <__fp_mintl+0x32>
 a84:	90 51       	subi	r25, 0x10	; 16
 a86:	86 2b       	or	r24, r22
 a88:	70 e0       	ldi	r23, 0x00	; 0
 a8a:	60 e0       	ldi	r22, 0x00	; 0
 a8c:	2a f0       	brmi	.+10     	; 0xa98 <__fp_mintl+0x2c>
 a8e:	9a 95       	dec	r25
 a90:	66 0f       	add	r22, r22
 a92:	77 1f       	adc	r23, r23
 a94:	88 1f       	adc	r24, r24
 a96:	da f7       	brpl	.-10     	; 0xa8e <__fp_mintl+0x22>
 a98:	88 0f       	add	r24, r24
 a9a:	96 95       	lsr	r25
 a9c:	87 95       	ror	r24
 a9e:	97 f9       	bld	r25, 7
 aa0:	08 95       	ret

00000aa2 <__fp_mpack>:
 aa2:	9f 3f       	cpi	r25, 0xFF	; 255
 aa4:	31 f0       	breq	.+12     	; 0xab2 <__fp_mpack_finite+0xc>

00000aa6 <__fp_mpack_finite>:
 aa6:	91 50       	subi	r25, 0x01	; 1
 aa8:	20 f4       	brcc	.+8      	; 0xab2 <__fp_mpack_finite+0xc>
 aaa:	87 95       	ror	r24
 aac:	77 95       	ror	r23
 aae:	67 95       	ror	r22
 ab0:	b7 95       	ror	r27
 ab2:	88 0f       	add	r24, r24
 ab4:	91 1d       	adc	r25, r1
 ab6:	96 95       	lsr	r25
 ab8:	87 95       	ror	r24
 aba:	97 f9       	bld	r25, 7
 abc:	08 95       	ret

00000abe <__fp_powser>:
 abe:	df 93       	push	r29
 ac0:	cf 93       	push	r28
 ac2:	1f 93       	push	r17
 ac4:	0f 93       	push	r16
 ac6:	ff 92       	push	r15
 ac8:	ef 92       	push	r14
 aca:	df 92       	push	r13
 acc:	7b 01       	movw	r14, r22
 ace:	8c 01       	movw	r16, r24
 ad0:	68 94       	set
 ad2:	06 c0       	rjmp	.+12     	; 0xae0 <__fp_powser+0x22>
 ad4:	da 2e       	mov	r13, r26
 ad6:	ef 01       	movw	r28, r30
 ad8:	0e 94 2e 04 	call	0x85c	; 0x85c <__mulsf3x>
 adc:	fe 01       	movw	r30, r28
 ade:	e8 94       	clt
 ae0:	a5 91       	lpm	r26, Z+
 ae2:	25 91       	lpm	r18, Z+
 ae4:	35 91       	lpm	r19, Z+
 ae6:	45 91       	lpm	r20, Z+
 ae8:	55 91       	lpm	r21, Z+
 aea:	a6 f3       	brts	.-24     	; 0xad4 <__fp_powser+0x16>
 aec:	ef 01       	movw	r28, r30
 aee:	0e 94 67 02 	call	0x4ce	; 0x4ce <__addsf3x>
 af2:	fe 01       	movw	r30, r28
 af4:	97 01       	movw	r18, r14
 af6:	a8 01       	movw	r20, r16
 af8:	da 94       	dec	r13
 afa:	69 f7       	brne	.-38     	; 0xad6 <__fp_powser+0x18>
 afc:	df 90       	pop	r13
 afe:	ef 90       	pop	r14
 b00:	ff 90       	pop	r15
 b02:	0f 91       	pop	r16
 b04:	1f 91       	pop	r17
 b06:	cf 91       	pop	r28
 b08:	df 91       	pop	r29
 b0a:	08 95       	ret

00000b0c <inverse>:
 b0c:	9b 01       	movw	r18, r22
 b0e:	ac 01       	movw	r20, r24
 b10:	60 e0       	ldi	r22, 0x00	; 0
 b12:	70 e0       	ldi	r23, 0x00	; 0
 b14:	80 e8       	ldi	r24, 0x80	; 128
 b16:	9f e3       	ldi	r25, 0x3F	; 63
 b18:	0c 94 c1 02 	jmp	0x582	; 0x582 <__divsf3>
 b1c:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_inf>
 b20:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__fp_mpack>

00000b24 <ldexp>:
 b24:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_splitA>
 b28:	d8 f3       	brcs	.-10     	; 0xb20 <inverse+0x14>
 b2a:	99 23       	and	r25, r25
 b2c:	c9 f3       	breq	.-14     	; 0xb20 <inverse+0x14>
 b2e:	94 0f       	add	r25, r20
 b30:	51 1d       	adc	r21, r1
 b32:	a3 f3       	brvs	.-24     	; 0xb1c <inverse+0x10>
 b34:	91 50       	subi	r25, 0x01	; 1
 b36:	50 40       	sbci	r21, 0x00	; 0
 b38:	94 f0       	brlt	.+36     	; 0xb5e <ldexp+0x3a>
 b3a:	59 f0       	breq	.+22     	; 0xb52 <ldexp+0x2e>
 b3c:	88 23       	and	r24, r24
 b3e:	32 f0       	brmi	.+12     	; 0xb4c <ldexp+0x28>
 b40:	66 0f       	add	r22, r22
 b42:	77 1f       	adc	r23, r23
 b44:	88 1f       	adc	r24, r24
 b46:	91 50       	subi	r25, 0x01	; 1
 b48:	50 40       	sbci	r21, 0x00	; 0
 b4a:	c1 f7       	brne	.-16     	; 0xb3c <ldexp+0x18>
 b4c:	9e 3f       	cpi	r25, 0xFE	; 254
 b4e:	51 05       	cpc	r21, r1
 b50:	2c f7       	brge	.-54     	; 0xb1c <inverse+0x10>
 b52:	88 0f       	add	r24, r24
 b54:	91 1d       	adc	r25, r1
 b56:	96 95       	lsr	r25
 b58:	87 95       	ror	r24
 b5a:	97 f9       	bld	r25, 7
 b5c:	08 95       	ret
 b5e:	5f 3f       	cpi	r21, 0xFF	; 255
 b60:	ac f0       	brlt	.+42     	; 0xb8c <ldexp+0x68>
 b62:	98 3e       	cpi	r25, 0xE8	; 232
 b64:	9c f0       	brlt	.+38     	; 0xb8c <ldexp+0x68>
 b66:	bb 27       	eor	r27, r27
 b68:	86 95       	lsr	r24
 b6a:	77 95       	ror	r23
 b6c:	67 95       	ror	r22
 b6e:	b7 95       	ror	r27
 b70:	08 f4       	brcc	.+2      	; 0xb74 <ldexp+0x50>
 b72:	b1 60       	ori	r27, 0x01	; 1
 b74:	93 95       	inc	r25
 b76:	c1 f7       	brne	.-16     	; 0xb68 <ldexp+0x44>
 b78:	bb 0f       	add	r27, r27
 b7a:	58 f7       	brcc	.-42     	; 0xb52 <ldexp+0x2e>
 b7c:	11 f4       	brne	.+4      	; 0xb82 <ldexp+0x5e>
 b7e:	60 ff       	sbrs	r22, 0
 b80:	e8 cf       	rjmp	.-48     	; 0xb52 <ldexp+0x2e>
 b82:	6f 5f       	subi	r22, 0xFF	; 255
 b84:	7f 4f       	sbci	r23, 0xFF	; 255
 b86:	8f 4f       	sbci	r24, 0xFF	; 255
 b88:	9f 4f       	sbci	r25, 0xFF	; 255
 b8a:	e3 cf       	rjmp	.-58     	; 0xb52 <ldexp+0x2e>
 b8c:	0c 94 15 04 	jmp	0x82a	; 0x82a <__fp_szero>
 b90:	16 f0       	brts	.+4      	; 0xb96 <ldexp+0x72>
 b92:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__fp_mpack>
 b96:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_nan>
 b9a:	68 94       	set
 b9c:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_inf>

00000ba0 <log>:
 ba0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_splitA>
 ba4:	a8 f3       	brcs	.-22     	; 0xb90 <ldexp+0x6c>
 ba6:	99 23       	and	r25, r25
 ba8:	c1 f3       	breq	.-16     	; 0xb9a <ldexp+0x76>
 baa:	ae f3       	brts	.-22     	; 0xb96 <ldexp+0x72>
 bac:	df 93       	push	r29
 bae:	cf 93       	push	r28
 bb0:	1f 93       	push	r17
 bb2:	0f 93       	push	r16
 bb4:	ff 92       	push	r15
 bb6:	c9 2f       	mov	r28, r25
 bb8:	dd 27       	eor	r29, r29
 bba:	88 23       	and	r24, r24
 bbc:	2a f0       	brmi	.+10     	; 0xbc8 <log+0x28>
 bbe:	21 97       	sbiw	r28, 0x01	; 1
 bc0:	66 0f       	add	r22, r22
 bc2:	77 1f       	adc	r23, r23
 bc4:	88 1f       	adc	r24, r24
 bc6:	da f7       	brpl	.-10     	; 0xbbe <log+0x1e>
 bc8:	20 e0       	ldi	r18, 0x00	; 0
 bca:	30 e0       	ldi	r19, 0x00	; 0
 bcc:	40 e8       	ldi	r20, 0x80	; 128
 bce:	5f eb       	ldi	r21, 0xBF	; 191
 bd0:	9f e3       	ldi	r25, 0x3F	; 63
 bd2:	88 39       	cpi	r24, 0x98	; 152
 bd4:	20 f0       	brcs	.+8      	; 0xbde <log+0x3e>
 bd6:	80 3e       	cpi	r24, 0xE0	; 224
 bd8:	38 f0       	brcs	.+14     	; 0xbe8 <log+0x48>
 bda:	21 96       	adiw	r28, 0x01	; 1
 bdc:	8f 77       	andi	r24, 0x7F	; 127
 bde:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__addsf3>
 be2:	e0 e9       	ldi	r30, 0x90	; 144
 be4:	f0 e0       	ldi	r31, 0x00	; 0
 be6:	04 c0       	rjmp	.+8      	; 0xbf0 <log+0x50>
 be8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__addsf3>
 bec:	ed eb       	ldi	r30, 0xBD	; 189
 bee:	f0 e0       	ldi	r31, 0x00	; 0
 bf0:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_powser>
 bf4:	8b 01       	movw	r16, r22
 bf6:	be 01       	movw	r22, r28
 bf8:	ec 01       	movw	r28, r24
 bfa:	fb 2e       	mov	r15, r27
 bfc:	6f 57       	subi	r22, 0x7F	; 127
 bfe:	71 09       	sbc	r23, r1
 c00:	75 95       	asr	r23
 c02:	77 1f       	adc	r23, r23
 c04:	88 0b       	sbc	r24, r24
 c06:	99 0b       	sbc	r25, r25
 c08:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__floatsisf>
 c0c:	28 e1       	ldi	r18, 0x18	; 24
 c0e:	32 e7       	ldi	r19, 0x72	; 114
 c10:	41 e3       	ldi	r20, 0x31	; 49
 c12:	5f e3       	ldi	r21, 0x3F	; 63
 c14:	0e 94 2e 04 	call	0x85c	; 0x85c <__mulsf3x>
 c18:	af 2d       	mov	r26, r15
 c1a:	98 01       	movw	r18, r16
 c1c:	ae 01       	movw	r20, r28
 c1e:	ff 90       	pop	r15
 c20:	0f 91       	pop	r16
 c22:	1f 91       	pop	r17
 c24:	cf 91       	pop	r28
 c26:	df 91       	pop	r29
 c28:	0e 94 67 02 	call	0x4ce	; 0x4ce <__addsf3x>
 c2c:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_round>

00000c30 <modf>:
 c30:	fa 01       	movw	r30, r20
 c32:	dc 01       	movw	r26, r24
 c34:	aa 0f       	add	r26, r26
 c36:	bb 1f       	adc	r27, r27
 c38:	9b 01       	movw	r18, r22
 c3a:	ac 01       	movw	r20, r24
 c3c:	bf 57       	subi	r27, 0x7F	; 127
 c3e:	28 f4       	brcc	.+10     	; 0xc4a <modf+0x1a>
 c40:	22 27       	eor	r18, r18
 c42:	33 27       	eor	r19, r19
 c44:	44 27       	eor	r20, r20
 c46:	50 78       	andi	r21, 0x80	; 128
 c48:	20 c0       	rjmp	.+64     	; 0xc8a <modf+0x5a>
 c4a:	b7 51       	subi	r27, 0x17	; 23
 c4c:	90 f4       	brcc	.+36     	; 0xc72 <modf+0x42>
 c4e:	ab 2f       	mov	r26, r27
 c50:	00 24       	eor	r0, r0
 c52:	46 95       	lsr	r20
 c54:	37 95       	ror	r19
 c56:	27 95       	ror	r18
 c58:	01 1c       	adc	r0, r1
 c5a:	a3 95       	inc	r26
 c5c:	d2 f3       	brmi	.-12     	; 0xc52 <modf+0x22>
 c5e:	00 20       	and	r0, r0
 c60:	71 f0       	breq	.+28     	; 0xc7e <modf+0x4e>
 c62:	22 0f       	add	r18, r18
 c64:	33 1f       	adc	r19, r19
 c66:	44 1f       	adc	r20, r20
 c68:	b3 95       	inc	r27
 c6a:	da f3       	brmi	.-10     	; 0xc62 <modf+0x32>
 c6c:	0e d0       	rcall	.+28     	; 0xc8a <modf+0x5a>
 c6e:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__subsf3>
 c72:	61 30       	cpi	r22, 0x01	; 1
 c74:	71 05       	cpc	r23, r1
 c76:	a0 e8       	ldi	r26, 0x80	; 128
 c78:	8a 07       	cpc	r24, r26
 c7a:	b9 46       	sbci	r27, 0x69	; 105
 c7c:	30 f4       	brcc	.+12     	; 0xc8a <modf+0x5a>
 c7e:	9b 01       	movw	r18, r22
 c80:	ac 01       	movw	r20, r24
 c82:	66 27       	eor	r22, r22
 c84:	77 27       	eor	r23, r23
 c86:	88 27       	eor	r24, r24
 c88:	90 78       	andi	r25, 0x80	; 128
 c8a:	30 96       	adiw	r30, 0x00	; 0
 c8c:	21 f0       	breq	.+8      	; 0xc96 <modf+0x66>
 c8e:	20 83       	st	Z, r18
 c90:	31 83       	std	Z+1, r19	; 0x01
 c92:	42 83       	std	Z+2, r20	; 0x02
 c94:	53 83       	std	Z+3, r21	; 0x03
 c96:	08 95       	ret

00000c98 <__umulhisi3>:
 c98:	a2 9f       	mul	r26, r18
 c9a:	b0 01       	movw	r22, r0
 c9c:	b3 9f       	mul	r27, r19
 c9e:	c0 01       	movw	r24, r0
 ca0:	a3 9f       	mul	r26, r19
 ca2:	70 0d       	add	r23, r0
 ca4:	81 1d       	adc	r24, r1
 ca6:	11 24       	eor	r1, r1
 ca8:	91 1d       	adc	r25, r1
 caa:	b2 9f       	mul	r27, r18
 cac:	70 0d       	add	r23, r0
 cae:	81 1d       	adc	r24, r1
 cb0:	11 24       	eor	r1, r1
 cb2:	91 1d       	adc	r25, r1
 cb4:	08 95       	ret

00000cb6 <_exit>:
 cb6:	f8 94       	cli

00000cb8 <__stop_program>:
 cb8:	ff cf       	rjmp	.-2      	; 0xcb8 <__stop_program>
