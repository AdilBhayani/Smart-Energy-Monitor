
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000163c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000163c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000166c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd5  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000408  00000000  00000000  00002339  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000810  00000000  00000000  00002741  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00002f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c9  00000000  00000000  000031a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f09  00000000  00000000  00003569  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004472  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_1>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <main+0xe>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
      f6:	21 e0       	ldi	r18, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a2 30       	cpi	r26, 0x02	; 2
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <main>
     10a:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <uart_init>:

 //Approximates a data value based on the two nearest data points
 float linearApproximate(float higher, float lower) {
	float approximation = (higher + lower) / 2;
	return approximation;
 }
     112:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     116:	87 e6       	ldi	r24, 0x67	; 103
     118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     11c:	e1 ec       	ldi	r30, 0xC1	; 193
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	88 60       	ori	r24, 0x08	; 8
     124:	80 83       	st	Z, r24
     126:	e2 ec       	ldi	r30, 0xC2	; 194
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	86 60       	ori	r24, 0x06	; 6
     12e:	80 83       	st	Z, r24
     130:	08 95       	ret

00000132 <uart_transmit>:
     132:	e0 ec       	ldi	r30, 0xC0	; 192
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	90 81       	ld	r25, Z
     138:	99 23       	and	r25, r25
     13a:	e9 f3       	breq	.-6      	; 0x136 <uart_transmit+0x4>
     13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     140:	08 95       	ret

00000142 <timer0_init>:
     142:	85 b5       	in	r24, 0x25	; 37
     144:	85 60       	ori	r24, 0x05	; 5
     146:	85 bd       	out	0x25, r24	; 37
     148:	16 bc       	out	0x26, r1	; 38
     14a:	08 95       	ret

0000014c <int_init>:
     14c:	e9 e6       	ldi	r30, 0x69	; 105
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	83 60       	ori	r24, 0x03	; 3
     154:	80 83       	st	Z, r24
     156:	e8 9a       	sbi	0x1d, 0	; 29
     158:	08 95       	ret

0000015a <find_decimal>:
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	6b 01       	movw	r12, r22
     164:	7c 01       	movw	r14, r24
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e2       	ldi	r20, 0x20	; 32
     16c:	51 e4       	ldi	r21, 0x41	; 65
     16e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__cmpsf2>
     172:	88 23       	and	r24, r24
     174:	b4 f0       	brlt	.+44     	; 0x1a2 <find_decimal+0x48>
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	48 ec       	ldi	r20, 0xC8	; 200
     17c:	52 e4       	ldi	r21, 0x42	; 66
     17e:	c7 01       	movw	r24, r14
     180:	b6 01       	movw	r22, r12
     182:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__cmpsf2>
     186:	08 2e       	mov	r0, r24
     188:	00 0c       	add	r0, r0
     18a:	99 0b       	sbc	r25, r25
     18c:	88 27       	eor	r24, r24
     18e:	99 0f       	add	r25, r25
     190:	88 1f       	adc	r24, r24
     192:	99 27       	eor	r25, r25
     194:	22 e0       	ldi	r18, 0x02	; 2
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	a9 01       	movw	r20, r18
     19a:	48 1b       	sub	r20, r24
     19c:	59 0b       	sbc	r21, r25
     19e:	ca 01       	movw	r24, r20
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <find_decimal+0x4c>
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	ff 90       	pop	r15
     1a8:	ef 90       	pop	r14
     1aa:	df 90       	pop	r13
     1ac:	cf 90       	pop	r12
     1ae:	08 95       	ret

000001b0 <wololo>:
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	41 30       	cpi	r20, 0x01	; 1
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <wololo+0x8>
     1b6:	40 96       	adiw	r24, 0x10	; 16
     1b8:	61 11       	cpse	r22, r1
     1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <wololo+0x12>
     1bc:	80 5a       	subi	r24, 0xA0	; 160
     1be:	9f 4f       	sbci	r25, 0xFF	; 255
     1c0:	08 95       	ret
     1c2:	61 30       	cpi	r22, 0x01	; 1
     1c4:	19 f4       	brne	.+6      	; 0x1cc <wololo+0x1c>
     1c6:	80 5c       	subi	r24, 0xC0	; 192
     1c8:	9f 4f       	sbci	r25, 0xFF	; 255
     1ca:	08 95       	ret
     1cc:	62 30       	cpi	r22, 0x02	; 2
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <wololo+0x22>
     1d0:	80 96       	adiw	r24, 0x20	; 32
     1d2:	08 95       	ret

000001d4 <calcPower>:
     1d4:	4f 92       	push	r4
     1d6:	5f 92       	push	r5
     1d8:	6f 92       	push	r6
     1da:	7f 92       	push	r7
     1dc:	8f 92       	push	r8
     1de:	9f 92       	push	r9
     1e0:	af 92       	push	r10
     1e2:	bf 92       	push	r11
     1e4:	cf 92       	push	r12
     1e6:	df 92       	push	r13
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62
     1f8:	c8 5e       	subi	r28, 0xE8	; 232
     1fa:	d1 09       	sbc	r29, r1
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	de bf       	out	0x3e, r29	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	cd bf       	out	0x3d, r28	; 61
     206:	fe 01       	movw	r30, r28
     208:	31 96       	adiw	r30, 0x01	; 1
     20a:	e6 2e       	mov	r14, r22
     20c:	f7 2e       	mov	r15, r23
     20e:	9e 01       	movw	r18, r28
     210:	27 5d       	subi	r18, 0xD7	; 215
     212:	3f 4f       	sbci	r19, 0xFF	; 255
     214:	89 01       	movw	r16, r18
     216:	dc 01       	movw	r26, r24
     218:	4d 91       	ld	r20, X+
     21a:	5d 91       	ld	r21, X+
     21c:	6d 91       	ld	r22, X+
     21e:	7d 91       	ld	r23, X+
     220:	cd 01       	movw	r24, r26
     222:	41 93       	st	Z+, r20
     224:	51 93       	st	Z+, r21
     226:	61 93       	st	Z+, r22
     228:	71 93       	st	Z+, r23
     22a:	d7 01       	movw	r26, r14
     22c:	4d 91       	ld	r20, X+
     22e:	5d 91       	ld	r21, X+
     230:	6d 91       	ld	r22, X+
     232:	7d 91       	ld	r23, X+
     234:	7d 01       	movw	r14, r26
     236:	d9 01       	movw	r26, r18
     238:	4d 93       	st	X+, r20
     23a:	5d 93       	st	X+, r21
     23c:	6d 93       	st	X+, r22
     23e:	7d 93       	st	X+, r23
     240:	9d 01       	movw	r18, r26
     242:	e0 17       	cp	r30, r16
     244:	f1 07       	cpc	r31, r17
     246:	39 f7       	brne	.-50     	; 0x216 <calcPower+0x42>
     248:	4e 01       	movw	r8, r28
     24a:	bd e9       	ldi	r27, 0x9D	; 157
     24c:	8b 0e       	add	r8, r27
     24e:	91 1c       	adc	r9, r1
     250:	7e 01       	movw	r14, r28
     252:	e1 e5       	ldi	r30, 0x51	; 81
     254:	ee 0e       	add	r14, r30
     256:	f1 1c       	adc	r15, r1
     258:	57 01       	movw	r10, r14
     25a:	64 01       	movw	r12, r8
     25c:	00 e0       	ldi	r16, 0x00	; 0
     25e:	10 e0       	ldi	r17, 0x00	; 0
     260:	38 01       	movw	r6, r16
     262:	00 fd       	sbrc	r16, 0
     264:	61 c0       	rjmp	.+194    	; 0x328 <calcPower+0x154>
     266:	c8 01       	movw	r24, r16
     268:	11 23       	and	r17, r17
     26a:	0c f4       	brge	.+2      	; 0x26e <calcPower+0x9a>
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	95 95       	asr	r25
     270:	87 95       	ror	r24
     272:	fc 01       	movw	r30, r24
     274:	ee 0f       	add	r30, r30
     276:	ff 1f       	adc	r31, r31
     278:	ee 0f       	add	r30, r30
     27a:	ff 1f       	adc	r31, r31
     27c:	21 e0       	ldi	r18, 0x01	; 1
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	2c 0f       	add	r18, r28
     282:	3d 1f       	adc	r19, r29
     284:	e2 0f       	add	r30, r18
     286:	f3 1f       	adc	r31, r19
     288:	40 81       	ld	r20, Z
     28a:	51 81       	ldd	r21, Z+1	; 0x01
     28c:	62 81       	ldd	r22, Z+2	; 0x02
     28e:	73 81       	ldd	r23, Z+3	; 0x03
     290:	d5 01       	movw	r26, r10
     292:	4d 93       	st	X+, r20
     294:	5d 93       	st	X+, r21
     296:	6d 93       	st	X+, r22
     298:	7c 93       	st	X, r23
     29a:	13 97       	sbiw	r26, 0x03	; 3
     29c:	01 15       	cp	r16, r1
     29e:	11 05       	cpc	r17, r1
     2a0:	19 f0       	breq	.+6      	; 0x2a8 <calcPower+0xd4>
     2a2:	02 31       	cpi	r16, 0x12	; 18
     2a4:	11 05       	cpc	r17, r1
     2a6:	a1 f4       	brne	.+40     	; 0x2d0 <calcPower+0xfc>
     2a8:	88 0f       	add	r24, r24
     2aa:	99 1f       	adc	r25, r25
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	e1 e0       	ldi	r30, 0x01	; 1
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	ec 0f       	add	r30, r28
     2b6:	fd 1f       	adc	r31, r29
     2b8:	e8 0f       	add	r30, r24
     2ba:	f9 1f       	adc	r31, r25
     2bc:	80 a5       	ldd	r24, Z+40	; 0x28
     2be:	91 a5       	ldd	r25, Z+41	; 0x29
     2c0:	a2 a5       	ldd	r26, Z+42	; 0x2a
     2c2:	b3 a5       	ldd	r27, Z+43	; 0x2b
     2c4:	f6 01       	movw	r30, r12
     2c6:	80 83       	st	Z, r24
     2c8:	91 83       	std	Z+1, r25	; 0x01
     2ca:	a2 83       	std	Z+2, r26	; 0x02
     2cc:	b3 83       	std	Z+3, r27	; 0x03
     2ce:	7e c0       	rjmp	.+252    	; 0x3cc <calcPower+0x1f8>
     2d0:	dc 01       	movw	r26, r24
     2d2:	11 97       	sbiw	r26, 0x01	; 1
     2d4:	aa 0f       	add	r26, r26
     2d6:	bb 1f       	adc	r27, r27
     2d8:	aa 0f       	add	r26, r26
     2da:	bb 1f       	adc	r27, r27
     2dc:	21 e0       	ldi	r18, 0x01	; 1
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	2c 0f       	add	r18, r28
     2e2:	3d 1f       	adc	r19, r29
     2e4:	a2 0f       	add	r26, r18
     2e6:	b3 1f       	adc	r27, r19
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	f9 01       	movw	r30, r18
     2f2:	e8 0f       	add	r30, r24
     2f4:	f9 1f       	adc	r31, r25
     2f6:	20 a5       	ldd	r18, Z+40	; 0x28
     2f8:	31 a5       	ldd	r19, Z+41	; 0x29
     2fa:	42 a5       	ldd	r20, Z+42	; 0x2a
     2fc:	53 a5       	ldd	r21, Z+43	; 0x2b
     2fe:	98 96       	adiw	r26, 0x28	; 40
     300:	6d 91       	ld	r22, X+
     302:	7d 91       	ld	r23, X+
     304:	8d 91       	ld	r24, X+
     306:	9c 91       	ld	r25, X
     308:	9b 97       	sbiw	r26, 0x2b	; 43
     30a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__addsf3>
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	5f e3       	ldi	r21, 0x3F	; 63
     316:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     31a:	d6 01       	movw	r26, r12
     31c:	6d 93       	st	X+, r22
     31e:	7d 93       	st	X+, r23
     320:	8d 93       	st	X+, r24
     322:	9c 93       	st	X, r25
     324:	13 97       	sbiw	r26, 0x03	; 3
     326:	52 c0       	rjmp	.+164    	; 0x3cc <calcPower+0x1f8>
     328:	98 01       	movw	r18, r16
     32a:	2f 5f       	subi	r18, 0xFF	; 255
     32c:	3f 4f       	sbci	r19, 0xFF	; 255
     32e:	c9 01       	movw	r24, r18
     330:	99 23       	and	r25, r25
     332:	0c f4       	brge	.+2      	; 0x336 <calcPower+0x162>
     334:	01 96       	adiw	r24, 0x01	; 1
     336:	95 95       	asr	r25
     338:	87 95       	ror	r24
     33a:	dc 01       	movw	r26, r24
     33c:	11 97       	sbiw	r26, 0x01	; 1
     33e:	aa 0f       	add	r26, r26
     340:	bb 1f       	adc	r27, r27
     342:	aa 0f       	add	r26, r26
     344:	bb 1f       	adc	r27, r27
     346:	e1 e0       	ldi	r30, 0x01	; 1
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	ec 0f       	add	r30, r28
     34c:	fd 1f       	adc	r31, r29
     34e:	ae 0f       	add	r26, r30
     350:	bf 1f       	adc	r27, r31
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	e1 e0       	ldi	r30, 0x01	; 1
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	ec 0f       	add	r30, r28
     360:	fd 1f       	adc	r31, r29
     362:	e8 0f       	add	r30, r24
     364:	f9 1f       	adc	r31, r25
     366:	20 81       	ld	r18, Z
     368:	31 81       	ldd	r19, Z+1	; 0x01
     36a:	42 81       	ldd	r20, Z+2	; 0x02
     36c:	53 81       	ldd	r21, Z+3	; 0x03
     36e:	6d 91       	ld	r22, X+
     370:	7d 91       	ld	r23, X+
     372:	8d 91       	ld	r24, X+
     374:	9c 91       	ld	r25, X
     376:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__addsf3>
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	40 e0       	ldi	r20, 0x00	; 0
     380:	5f e3       	ldi	r21, 0x3F	; 63
     382:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     386:	d5 01       	movw	r26, r10
     388:	6d 93       	st	X+, r22
     38a:	7d 93       	st	X+, r23
     38c:	8d 93       	st	X+, r24
     38e:	9c 93       	st	X, r25
     390:	13 97       	sbiw	r26, 0x03	; 3
     392:	b1 e0       	ldi	r27, 0x01	; 1
     394:	6b 1a       	sub	r6, r27
     396:	71 08       	sbc	r7, r1
     398:	c3 01       	movw	r24, r6
     39a:	99 23       	and	r25, r25
     39c:	0c f4       	brge	.+2      	; 0x3a0 <calcPower+0x1cc>
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	fc 01       	movw	r30, r24
     3a2:	f5 95       	asr	r31
     3a4:	e7 95       	ror	r30
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	ee 0f       	add	r30, r30
     3ac:	ff 1f       	adc	r31, r31
     3ae:	21 e0       	ldi	r18, 0x01	; 1
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	2c 0f       	add	r18, r28
     3b4:	3d 1f       	adc	r19, r29
     3b6:	e2 0f       	add	r30, r18
     3b8:	f3 1f       	adc	r31, r19
     3ba:	80 a5       	ldd	r24, Z+40	; 0x28
     3bc:	91 a5       	ldd	r25, Z+41	; 0x29
     3be:	a2 a5       	ldd	r26, Z+42	; 0x2a
     3c0:	b3 a5       	ldd	r27, Z+43	; 0x2b
     3c2:	f6 01       	movw	r30, r12
     3c4:	80 83       	st	Z, r24
     3c6:	91 83       	std	Z+1, r25	; 0x01
     3c8:	a2 83       	std	Z+2, r26	; 0x02
     3ca:	b3 83       	std	Z+3, r27	; 0x03
     3cc:	0f 5f       	subi	r16, 0xFF	; 255
     3ce:	1f 4f       	sbci	r17, 0xFF	; 255
     3d0:	f4 e0       	ldi	r31, 0x04	; 4
     3d2:	cf 0e       	add	r12, r31
     3d4:	d1 1c       	adc	r13, r1
     3d6:	24 e0       	ldi	r18, 0x04	; 4
     3d8:	a2 0e       	add	r10, r18
     3da:	b1 1c       	adc	r11, r1
     3dc:	03 31       	cpi	r16, 0x13	; 19
     3de:	11 05       	cpc	r17, r1
     3e0:	09 f0       	breq	.+2      	; 0x3e4 <calcPower+0x210>
     3e2:	3e cf       	rjmp	.-388    	; 0x260 <calcPower+0x8c>
     3e4:	8e 01       	movw	r16, r28
     3e6:	03 56       	subi	r16, 0x63	; 99
     3e8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ea:	41 2c       	mov	r4, r1
     3ec:	51 2c       	mov	r5, r1
     3ee:	32 01       	movw	r6, r4
     3f0:	d7 01       	movw	r26, r14
     3f2:	6d 91       	ld	r22, X+
     3f4:	7d 91       	ld	r23, X+
     3f6:	8d 91       	ld	r24, X+
     3f8:	9d 91       	ld	r25, X+
     3fa:	7d 01       	movw	r14, r26
     3fc:	f4 01       	movw	r30, r8
     3fe:	21 91       	ld	r18, Z+
     400:	31 91       	ld	r19, Z+
     402:	41 91       	ld	r20, Z+
     404:	51 91       	ld	r21, Z+
     406:	4f 01       	movw	r8, r30
     408:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     40c:	9b 01       	movw	r18, r22
     40e:	ac 01       	movw	r20, r24
     410:	c3 01       	movw	r24, r6
     412:	b2 01       	movw	r22, r4
     414:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__addsf3>
     418:	2b 01       	movw	r4, r22
     41a:	3c 01       	movw	r6, r24
     41c:	e0 16       	cp	r14, r16
     41e:	f1 06       	cpc	r15, r17
     420:	39 f7       	brne	.-50     	; 0x3f0 <calcPower+0x21c>
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	48 e9       	ldi	r20, 0x98	; 152
     428:	51 e4       	ldi	r21, 0x41	; 65
     42a:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divsf3>
     42e:	c8 51       	subi	r28, 0x18	; 24
     430:	df 4f       	sbci	r29, 0xFF	; 255
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	bf 90       	pop	r11
     44e:	af 90       	pop	r10
     450:	9f 90       	pop	r9
     452:	8f 90       	pop	r8
     454:	7f 90       	pop	r7
     456:	6f 90       	pop	r6
     458:	5f 90       	pop	r5
     45a:	4f 90       	pop	r4
     45c:	08 95       	ret

0000045e <calcVoltageRMS>:
     45e:	8f 92       	push	r8
     460:	9f 92       	push	r9
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	c4 57       	subi	r28, 0x74	; 116
     47c:	d1 09       	sbc	r29, r1
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	fc 01       	movw	r30, r24
     48a:	de 01       	movw	r26, r28
     48c:	11 96       	adiw	r26, 0x01	; 1
     48e:	88 96       	adiw	r24, 0x28	; 40
     490:	41 91       	ld	r20, Z+
     492:	51 91       	ld	r21, Z+
     494:	61 91       	ld	r22, Z+
     496:	71 91       	ld	r23, Z+
     498:	4d 93       	st	X+, r20
     49a:	5d 93       	st	X+, r21
     49c:	6d 93       	st	X+, r22
     49e:	7d 93       	st	X+, r23
     4a0:	e8 17       	cp	r30, r24
     4a2:	f9 07       	cpc	r31, r25
     4a4:	a9 f7       	brne	.-22     	; 0x490 <calcVoltageRMS+0x32>
     4a6:	7e 01       	movw	r14, r28
     4a8:	29 e2       	ldi	r18, 0x29	; 41
     4aa:	e2 0e       	add	r14, r18
     4ac:	f1 1c       	adc	r15, r1
     4ae:	67 01       	movw	r12, r14
     4b0:	00 e0       	ldi	r16, 0x00	; 0
     4b2:	10 e0       	ldi	r17, 0x00	; 0
     4b4:	00 fd       	sbrc	r16, 0
     4b6:	1b c0       	rjmp	.+54     	; 0x4ee <calcVoltageRMS+0x90>
     4b8:	c8 01       	movw	r24, r16
     4ba:	11 23       	and	r17, r17
     4bc:	0c f4       	brge	.+2      	; 0x4c0 <calcVoltageRMS+0x62>
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	fc 01       	movw	r30, r24
     4c2:	f5 95       	asr	r31
     4c4:	e7 95       	ror	r30
     4c6:	ee 0f       	add	r30, r30
     4c8:	ff 1f       	adc	r31, r31
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	8c 0f       	add	r24, r28
     4d4:	9d 1f       	adc	r25, r29
     4d6:	e8 0f       	add	r30, r24
     4d8:	f9 1f       	adc	r31, r25
     4da:	80 81       	ld	r24, Z
     4dc:	91 81       	ldd	r25, Z+1	; 0x01
     4de:	a2 81       	ldd	r26, Z+2	; 0x02
     4e0:	b3 81       	ldd	r27, Z+3	; 0x03
     4e2:	f6 01       	movw	r30, r12
     4e4:	80 83       	st	Z, r24
     4e6:	91 83       	std	Z+1, r25	; 0x01
     4e8:	a2 83       	std	Z+2, r26	; 0x02
     4ea:	b3 83       	std	Z+3, r27	; 0x03
     4ec:	31 c0       	rjmp	.+98     	; 0x550 <calcVoltageRMS+0xf2>
     4ee:	98 01       	movw	r18, r16
     4f0:	2f 5f       	subi	r18, 0xFF	; 255
     4f2:	3f 4f       	sbci	r19, 0xFF	; 255
     4f4:	c9 01       	movw	r24, r18
     4f6:	99 23       	and	r25, r25
     4f8:	0c f4       	brge	.+2      	; 0x4fc <calcVoltageRMS+0x9e>
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	95 95       	asr	r25
     4fe:	87 95       	ror	r24
     500:	dc 01       	movw	r26, r24
     502:	11 97       	sbiw	r26, 0x01	; 1
     504:	aa 0f       	add	r26, r26
     506:	bb 1f       	adc	r27, r27
     508:	aa 0f       	add	r26, r26
     50a:	bb 1f       	adc	r27, r27
     50c:	21 e0       	ldi	r18, 0x01	; 1
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	2c 0f       	add	r18, r28
     512:	3d 1f       	adc	r19, r29
     514:	a2 0f       	add	r26, r18
     516:	b3 1f       	adc	r27, r19
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	f9 01       	movw	r30, r18
     522:	e8 0f       	add	r30, r24
     524:	f9 1f       	adc	r31, r25
     526:	20 81       	ld	r18, Z
     528:	31 81       	ldd	r19, Z+1	; 0x01
     52a:	42 81       	ldd	r20, Z+2	; 0x02
     52c:	53 81       	ldd	r21, Z+3	; 0x03
     52e:	6d 91       	ld	r22, X+
     530:	7d 91       	ld	r23, X+
     532:	8d 91       	ld	r24, X+
     534:	9c 91       	ld	r25, X
     536:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__addsf3>
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	5f e3       	ldi	r21, 0x3F	; 63
     542:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     546:	f6 01       	movw	r30, r12
     548:	60 83       	st	Z, r22
     54a:	71 83       	std	Z+1, r23	; 0x01
     54c:	82 83       	std	Z+2, r24	; 0x02
     54e:	93 83       	std	Z+3, r25	; 0x03
     550:	0f 5f       	subi	r16, 0xFF	; 255
     552:	1f 4f       	sbci	r17, 0xFF	; 255
     554:	f4 e0       	ldi	r31, 0x04	; 4
     556:	cf 0e       	add	r12, r31
     558:	d1 1c       	adc	r13, r1
     55a:	03 31       	cpi	r16, 0x13	; 19
     55c:	11 05       	cpc	r17, r1
     55e:	09 f0       	breq	.+2      	; 0x562 <calcVoltageRMS+0x104>
     560:	a9 cf       	rjmp	.-174    	; 0x4b4 <calcVoltageRMS+0x56>
     562:	8e 01       	movw	r16, r28
     564:	0b 58       	subi	r16, 0x8B	; 139
     566:	1f 4f       	sbci	r17, 0xFF	; 255
     568:	81 2c       	mov	r8, r1
     56a:	91 2c       	mov	r9, r1
     56c:	54 01       	movw	r10, r8
     56e:	f7 01       	movw	r30, r14
     570:	61 91       	ld	r22, Z+
     572:	71 91       	ld	r23, Z+
     574:	81 91       	ld	r24, Z+
     576:	91 91       	ld	r25, Z+
     578:	7f 01       	movw	r14, r30
     57a:	9b 01       	movw	r18, r22
     57c:	ac 01       	movw	r20, r24
     57e:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     582:	9b 01       	movw	r18, r22
     584:	ac 01       	movw	r20, r24
     586:	c5 01       	movw	r24, r10
     588:	b4 01       	movw	r22, r8
     58a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__addsf3>
     58e:	4b 01       	movw	r8, r22
     590:	5c 01       	movw	r10, r24
     592:	e0 16       	cp	r14, r16
     594:	f1 06       	cpc	r15, r17
     596:	59 f7       	brne	.-42     	; 0x56e <calcVoltageRMS+0x110>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	48 e9       	ldi	r20, 0x98	; 152
     59e:	51 e4       	ldi	r21, 0x41	; 65
     5a0:	c5 01       	movw	r24, r10
     5a2:	b4 01       	movw	r22, r8
     5a4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divsf3>
     5a8:	0e 94 1a 09 	call	0x1234	; 0x1234 <sqrt>
     5ac:	cc 58       	subi	r28, 0x8C	; 140
     5ae:	df 4f       	sbci	r29, 0xFF	; 255
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	df 90       	pop	r13
     5c8:	cf 90       	pop	r12
     5ca:	bf 90       	pop	r11
     5cc:	af 90       	pop	r10
     5ce:	9f 90       	pop	r9
     5d0:	8f 90       	pop	r8
     5d2:	08 95       	ret

000005d4 <calcCurrentRMS>:
     5d4:	8f 92       	push	r8
     5d6:	9f 92       	push	r9
     5d8:	af 92       	push	r10
     5da:	bf 92       	push	r11
     5dc:	cf 92       	push	r12
     5de:	df 92       	push	r13
     5e0:	ef 92       	push	r14
     5e2:	ff 92       	push	r15
     5e4:	0f 93       	push	r16
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	c4 57       	subi	r28, 0x74	; 116
     5f2:	d1 09       	sbc	r29, r1
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	fc 01       	movw	r30, r24
     600:	de 01       	movw	r26, r28
     602:	11 96       	adiw	r26, 0x01	; 1
     604:	88 96       	adiw	r24, 0x28	; 40
     606:	41 91       	ld	r20, Z+
     608:	51 91       	ld	r21, Z+
     60a:	61 91       	ld	r22, Z+
     60c:	71 91       	ld	r23, Z+
     60e:	4d 93       	st	X+, r20
     610:	5d 93       	st	X+, r21
     612:	6d 93       	st	X+, r22
     614:	7d 93       	st	X+, r23
     616:	e8 17       	cp	r30, r24
     618:	f9 07       	cpc	r31, r25
     61a:	a9 f7       	brne	.-22     	; 0x606 <calcCurrentRMS+0x32>
     61c:	7e 01       	movw	r14, r28
     61e:	29 e2       	ldi	r18, 0x29	; 41
     620:	e2 0e       	add	r14, r18
     622:	f1 1c       	adc	r15, r1
     624:	67 01       	movw	r12, r14
     626:	00 e0       	ldi	r16, 0x00	; 0
     628:	10 e0       	ldi	r17, 0x00	; 0
     62a:	00 fd       	sbrc	r16, 0
     62c:	50 c0       	rjmp	.+160    	; 0x6ce <calcCurrentRMS+0xfa>
     62e:	01 15       	cp	r16, r1
     630:	11 05       	cpc	r17, r1
     632:	19 f0       	breq	.+6      	; 0x63a <calcCurrentRMS+0x66>
     634:	02 31       	cpi	r16, 0x12	; 18
     636:	11 05       	cpc	r17, r1
     638:	d9 f4       	brne	.+54     	; 0x670 <calcCurrentRMS+0x9c>
     63a:	c8 01       	movw	r24, r16
     63c:	11 23       	and	r17, r17
     63e:	0c f4       	brge	.+2      	; 0x642 <calcCurrentRMS+0x6e>
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	fc 01       	movw	r30, r24
     644:	f5 95       	asr	r31
     646:	e7 95       	ror	r30
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	ee 0f       	add	r30, r30
     64e:	ff 1f       	adc	r31, r31
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	8c 0f       	add	r24, r28
     656:	9d 1f       	adc	r25, r29
     658:	e8 0f       	add	r30, r24
     65a:	f9 1f       	adc	r31, r25
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	a2 81       	ldd	r26, Z+2	; 0x02
     662:	b3 81       	ldd	r27, Z+3	; 0x03
     664:	f6 01       	movw	r30, r12
     666:	80 83       	st	Z, r24
     668:	91 83       	std	Z+1, r25	; 0x01
     66a:	a2 83       	std	Z+2, r26	; 0x02
     66c:	b3 83       	std	Z+3, r27	; 0x03
     66e:	4c c0       	rjmp	.+152    	; 0x708 <calcCurrentRMS+0x134>
     670:	c8 01       	movw	r24, r16
     672:	11 23       	and	r17, r17
     674:	0c f4       	brge	.+2      	; 0x678 <calcCurrentRMS+0xa4>
     676:	01 96       	adiw	r24, 0x01	; 1
     678:	95 95       	asr	r25
     67a:	87 95       	ror	r24
     67c:	dc 01       	movw	r26, r24
     67e:	11 97       	sbiw	r26, 0x01	; 1
     680:	aa 0f       	add	r26, r26
     682:	bb 1f       	adc	r27, r27
     684:	aa 0f       	add	r26, r26
     686:	bb 1f       	adc	r27, r27
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	2c 0f       	add	r18, r28
     68e:	3d 1f       	adc	r19, r29
     690:	a2 0f       	add	r26, r18
     692:	b3 1f       	adc	r27, r19
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	f9 01       	movw	r30, r18
     69e:	e8 0f       	add	r30, r24
     6a0:	f9 1f       	adc	r31, r25
     6a2:	20 81       	ld	r18, Z
     6a4:	31 81       	ldd	r19, Z+1	; 0x01
     6a6:	42 81       	ldd	r20, Z+2	; 0x02
     6a8:	53 81       	ldd	r21, Z+3	; 0x03
     6aa:	6d 91       	ld	r22, X+
     6ac:	7d 91       	ld	r23, X+
     6ae:	8d 91       	ld	r24, X+
     6b0:	9c 91       	ld	r25, X
     6b2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__addsf3>
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	5f e3       	ldi	r21, 0x3F	; 63
     6be:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     6c2:	f6 01       	movw	r30, r12
     6c4:	60 83       	st	Z, r22
     6c6:	71 83       	std	Z+1, r23	; 0x01
     6c8:	82 83       	std	Z+2, r24	; 0x02
     6ca:	93 83       	std	Z+3, r25	; 0x03
     6cc:	1d c0       	rjmp	.+58     	; 0x708 <calcCurrentRMS+0x134>
     6ce:	98 01       	movw	r18, r16
     6d0:	21 50       	subi	r18, 0x01	; 1
     6d2:	31 09       	sbc	r19, r1
     6d4:	c9 01       	movw	r24, r18
     6d6:	99 23       	and	r25, r25
     6d8:	0c f4       	brge	.+2      	; 0x6dc <calcCurrentRMS+0x108>
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	fc 01       	movw	r30, r24
     6de:	f5 95       	asr	r31
     6e0:	e7 95       	ror	r30
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	21 e0       	ldi	r18, 0x01	; 1
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	2c 0f       	add	r18, r28
     6f0:	3d 1f       	adc	r19, r29
     6f2:	e2 0f       	add	r30, r18
     6f4:	f3 1f       	adc	r31, r19
     6f6:	80 81       	ld	r24, Z
     6f8:	91 81       	ldd	r25, Z+1	; 0x01
     6fa:	a2 81       	ldd	r26, Z+2	; 0x02
     6fc:	b3 81       	ldd	r27, Z+3	; 0x03
     6fe:	f6 01       	movw	r30, r12
     700:	80 83       	st	Z, r24
     702:	91 83       	std	Z+1, r25	; 0x01
     704:	a2 83       	std	Z+2, r26	; 0x02
     706:	b3 83       	std	Z+3, r27	; 0x03
     708:	0f 5f       	subi	r16, 0xFF	; 255
     70a:	1f 4f       	sbci	r17, 0xFF	; 255
     70c:	f4 e0       	ldi	r31, 0x04	; 4
     70e:	cf 0e       	add	r12, r31
     710:	d1 1c       	adc	r13, r1
     712:	03 31       	cpi	r16, 0x13	; 19
     714:	11 05       	cpc	r17, r1
     716:	09 f0       	breq	.+2      	; 0x71a <calcCurrentRMS+0x146>
     718:	88 cf       	rjmp	.-240    	; 0x62a <calcCurrentRMS+0x56>
     71a:	8e 01       	movw	r16, r28
     71c:	0b 58       	subi	r16, 0x8B	; 139
     71e:	1f 4f       	sbci	r17, 0xFF	; 255
     720:	81 2c       	mov	r8, r1
     722:	91 2c       	mov	r9, r1
     724:	54 01       	movw	r10, r8
     726:	f7 01       	movw	r30, r14
     728:	61 91       	ld	r22, Z+
     72a:	71 91       	ld	r23, Z+
     72c:	81 91       	ld	r24, Z+
     72e:	91 91       	ld	r25, Z+
     730:	7f 01       	movw	r14, r30
     732:	9b 01       	movw	r18, r22
     734:	ac 01       	movw	r20, r24
     736:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     73a:	9b 01       	movw	r18, r22
     73c:	ac 01       	movw	r20, r24
     73e:	c5 01       	movw	r24, r10
     740:	b4 01       	movw	r22, r8
     742:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__addsf3>
     746:	4b 01       	movw	r8, r22
     748:	5c 01       	movw	r10, r24
     74a:	e0 16       	cp	r14, r16
     74c:	f1 06       	cpc	r15, r17
     74e:	59 f7       	brne	.-42     	; 0x726 <calcCurrentRMS+0x152>
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	48 e9       	ldi	r20, 0x98	; 152
     756:	51 e4       	ldi	r21, 0x41	; 65
     758:	c5 01       	movw	r24, r10
     75a:	b4 01       	movw	r22, r8
     75c:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divsf3>
     760:	0e 94 1a 09 	call	0x1234	; 0x1234 <sqrt>
     764:	cc 58       	subi	r28, 0x8C	; 140
     766:	df 4f       	sbci	r29, 0xFF	; 255
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	bf 90       	pop	r11
     784:	af 90       	pop	r10
     786:	9f 90       	pop	r9
     788:	8f 90       	pop	r8
     78a:	08 95       	ret

0000078c <adc_init>:

 //Initialises the ADC
 void adc_init() {
	DDRC = 0x00; //Set port c as input
     78c:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADEN); //Set Prescaler to 128 and enable the ADC 
     78e:	ea e7       	ldi	r30, 0x7A	; 122
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	87 68       	ori	r24, 0x87	; 135
     796:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //Set reference voltage to VCC
     798:	ec e7       	ldi	r30, 0x7C	; 124
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	80 64       	ori	r24, 0x40	; 64
     7a0:	80 83       	st	Z, r24
     7a2:	08 95       	ret

000007a4 <adc_read_voltage>:
 }

 //Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_voltage() {
	ADMUX &= ~(1<<MUX0);
     7a4:	ec e7       	ldi	r30, 0x7C	; 124
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	8e 7f       	andi	r24, 0xFE	; 254
     7ac:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX1);
     7ae:	80 81       	ld	r24, Z
     7b0:	8d 7f       	andi	r24, 0xFD	; 253
     7b2:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX2);
     7b4:	80 81       	ld	r24, Z
     7b6:	8b 7f       	andi	r24, 0xFB	; 251
     7b8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start conversion
     7ba:	ea e7       	ldi	r30, 0x7A	; 122
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	80 64       	ori	r24, 0x40	; 64
     7c2:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
     7c4:	80 81       	ld	r24, Z
     7c6:	84 ff       	sbrs	r24, 4
     7c8:	fd cf       	rjmp	.-6      	; 0x7c4 <adc_read_voltage+0x20>
	unsigned int adcRead = ADC;
     7ca:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     7ce:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     7d2:	08 95       	ret

000007d4 <adc_read_current>:

  //Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_current(unsigned int highLow) {
	if (highLow == 1) { //High gain current
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	61 f4       	brne	.+24     	; 0x7f0 <adc_read_current+0x1c>
		ADMUX |= (1<<MUX0);
     7d8:	ec e7       	ldi	r30, 0x7C	; 124
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	81 60       	ori	r24, 0x01	; 1
     7e0:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX1);
     7e2:	80 81       	ld	r24, Z
     7e4:	82 60       	ori	r24, 0x02	; 2
     7e6:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX2);
     7e8:	80 81       	ld	r24, Z
     7ea:	8b 7f       	andi	r24, 0xFB	; 251
     7ec:	80 83       	st	Z, r24
     7ee:	0b c0       	rjmp	.+22     	; 0x806 <adc_read_current+0x32>
	} else { //Low gain current
		ADMUX |= (1<<MUX0);
     7f0:	ec e7       	ldi	r30, 0x7C	; 124
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	81 60       	ori	r24, 0x01	; 1
     7f8:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX1);
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX2);
     800:	80 81       	ld	r24, Z
     802:	84 60       	ori	r24, 0x04	; 4
     804:	80 83       	st	Z, r24
	}
	ADCSRA |= (1<<ADSC); //Start conversion
     806:	ea e7       	ldi	r30, 0x7A	; 122
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	80 64       	ori	r24, 0x40	; 64
     80e:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
     810:	80 81       	ld	r24, Z
     812:	84 ff       	sbrs	r24, 4
     814:	fd cf       	rjmp	.-6      	; 0x810 <adc_read_current+0x3c>
	unsigned int adcRead = ADC;
     816:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     81a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     81e:	08 95       	ret

00000820 <adc_calculation>:

 //Converts an ADC integer into the actual voltage measured by the ADC pin
 float adc_calculation(unsigned int adcValue) {
	float calculatedValue;
	calculatedValue = ((float)adcValue / 1023) * 5; //Digital value to analogue voltage measured
     820:	bc 01       	movw	r22, r24
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 7c 07 	call	0xef8	; 0xef8 <__floatunsisf>
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 ec       	ldi	r19, 0xC0	; 192
     82e:	4f e7       	ldi	r20, 0x7F	; 127
     830:	54 e4       	ldi	r21, 0x44	; 68
     832:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divsf3>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 ea       	ldi	r20, 0xA0	; 160
     83c:	50 e4       	ldi	r21, 0x40	; 64
     83e:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
	return calculatedValue; 
 }
     842:	08 95       	ret

00000844 <voltage_real>:
 This function figures out what the actual voltage being measured was based on reversing the process 
 that the signal went through. Option 0 for voltage, 1 for regular current, 2 for high gain current
 */
 float voltage_real(float adcValue, unsigned int option) {
	float output;
	if (option == 0) {
     844:	41 15       	cp	r20, r1
     846:	51 05       	cpc	r21, r1
     848:	a9 f4       	brne	.+42     	; 0x874 <voltage_real+0x30>
		output = -(adcValue - 1.7) + 0.27; //Remove offset voltage and then invert
     84a:	2a e9       	ldi	r18, 0x9A	; 154
     84c:	39 e9       	ldi	r19, 0x99	; 153
     84e:	49 ed       	ldi	r20, 0xD9	; 217
     850:	5f e3       	ldi	r21, 0x3F	; 63
     852:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__subsf3>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	61 e7       	ldi	r22, 0x71	; 113
     85c:	7d e3       	ldi	r23, 0x3D	; 61
     85e:	8a e8       	ldi	r24, 0x8A	; 138
     860:	9e e3       	ldi	r25, 0x3E	; 62
     862:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__subsf3>
		output = output * 0.98; //Revert to value from before the op amp
     866:	28 e4       	ldi	r18, 0x48	; 72
     868:	31 ee       	ldi	r19, 0xE1	; 225
     86a:	4a e7       	ldi	r20, 0x7A	; 122
     86c:	5f e3       	ldi	r21, 0x3F	; 63
     86e:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     872:	08 95       	ret
	} else if (option == 1) {
     874:	41 30       	cpi	r20, 0x01	; 1
     876:	51 05       	cpc	r21, r1
     878:	d1 f4       	brne	.+52     	; 0x8ae <voltage_real+0x6a>
		output = -(adcValue - 1.64);
     87a:	25 e8       	ldi	r18, 0x85	; 133
     87c:	3b ee       	ldi	r19, 0xEB	; 235
     87e:	41 ed       	ldi	r20, 0xD1	; 209
     880:	5f e3       	ldi	r21, 0x3F	; 63
     882:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__subsf3>
     886:	90 58       	subi	r25, 0x80	; 128
		output = output / 5;
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 ea       	ldi	r20, 0xA0	; 160
     88e:	50 e4       	ldi	r21, 0x40	; 64
     890:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divsf3>
		output = output / 0.30; //Divide by R to get I
     894:	2a e9       	ldi	r18, 0x9A	; 154
     896:	39 e9       	ldi	r19, 0x99	; 153
     898:	49 e9       	ldi	r20, 0x99	; 153
     89a:	5e e3       	ldi	r21, 0x3E	; 62
     89c:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divsf3>
		output = output * 1.08;
     8a0:	21 e7       	ldi	r18, 0x71	; 113
     8a2:	3d e3       	ldi	r19, 0x3D	; 61
     8a4:	4a e8       	ldi	r20, 0x8A	; 138
     8a6:	5f e3       	ldi	r21, 0x3F	; 63
     8a8:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     8ac:	08 95       	ret
	} else {
		output = -(adcValue - 1.64);
     8ae:	25 e8       	ldi	r18, 0x85	; 133
     8b0:	3b ee       	ldi	r19, 0xEB	; 235
     8b2:	41 ed       	ldi	r20, 0xD1	; 209
     8b4:	5f e3       	ldi	r21, 0x3F	; 63
     8b6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__subsf3>
     8ba:	90 58       	subi	r25, 0x80	; 128
		output = output / 12.4;
     8bc:	26 e6       	ldi	r18, 0x66	; 102
     8be:	36 e6       	ldi	r19, 0x66	; 102
     8c0:	46 e4       	ldi	r20, 0x46	; 70
     8c2:	51 e4       	ldi	r21, 0x41	; 65
     8c4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divsf3>
		output = output / 0.30; //Divide by R to get I
     8c8:	2a e9       	ldi	r18, 0x9A	; 154
     8ca:	39 e9       	ldi	r19, 0x99	; 153
     8cc:	49 e9       	ldi	r20, 0x99	; 153
     8ce:	5e e3       	ldi	r21, 0x3E	; 62
     8d0:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divsf3>
	}
	return output;
     8d4:	08 95       	ret

000008d6 <main>:
#include <avr/interrupt.h>

volatile uint8_t counter = 0; //Counter for the number of times the TCNT0 compares correctly
volatile uint8_t flag = 0;

int main(void) {
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	c4 56       	subi	r28, 0x64	; 100
     8e0:	d1 09       	sbc	r29, r1
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
	sei();
     8ec:	78 94       	sei
	adc_init();
     8ee:	0e 94 c6 03 	call	0x78c	; 0x78c <adc_init>
	uart_init();	
     8f2:	0e 94 89 00 	call	0x112	; 0x112 <uart_init>
	timer0_init();
     8f6:	0e 94 a1 00 	call	0x142	; 0x142 <timer0_init>
	int_init();
     8fa:	0e 94 a6 00 	call	0x14c	; 0x14c <int_init>
	uint32_t displayCount = 0;
	uint8_t currentFlag = 1;
     8fe:	99 24       	eor	r9, r9
     900:	93 94       	inc	r9
	sei();
	adc_init();
	uart_init();	
	timer0_init();
	int_init();
	uint32_t displayCount = 0;
     902:	a0 96       	adiw	r28, 0x20	; 32
     904:	1c ae       	std	Y+60, r1	; 0x3c
     906:	1d ae       	std	Y+61, r1	; 0x3d
     908:	1e ae       	std	Y+62, r1	; 0x3e
     90a:	1f ae       	std	Y+63, r1	; 0x3f
     90c:	a0 97       	sbiw	r28, 0x20	; 32
     90e:	a1 2c       	mov	r10, r1
     910:	b1 2c       	mov	r11, r1
				voltageArray[i/2] = voltage;
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); // Regular Current
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
				currentArray[(i-1)/2] = current;
     912:	9e 01       	movw	r18, r28
     914:	2f 5f       	subi	r18, 0xFF	; 255
     916:	3f 4f       	sbci	r19, 0xFF	; 255
     918:	19 01       	movw	r2, r18
     91a:	6b 96       	adiw	r28, 0x1b	; 27
     91c:	2f af       	std	Y+63, r18	; 0x3f
     91e:	6b 97       	sbiw	r28, 0x1b	; 27
     920:	6c 96       	adiw	r28, 0x1c	; 28
     922:	3f ae       	std	Y+63, r3	; 0x3f
     924:	6c 97       	sbiw	r28, 0x1c	; 28
     926:	81 e5       	ldi	r24, 0x51	; 81
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	8c 0f       	add	r24, r28
     92c:	9d 1f       	adc	r25, r29
     92e:	03 96       	adiw	r24, 0x03	; 3
     930:	a4 96       	adiw	r28, 0x24	; 36
     932:	9f af       	std	Y+63, r25	; 0x3f
     934:	8e af       	std	Y+62, r24	; 0x3e
     936:	a4 97       	sbiw	r28, 0x24	; 36
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	a5 96       	adiw	r28, 0x25	; 37
     93c:	9f af       	std	Y+63, r25	; 0x3f
     93e:	a5 97       	sbiw	r28, 0x25	; 37
			}
		}
		
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { dataFloat = calcPower(&voltageArray, &currentArray); } 
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataFloat = dataFloat = calcCurrentRMS(&currentArray); }
		else if (displayCount%10 > 6) { dataFloat = calcVoltageRMS(&voltageArray); }
     940:	66 96       	adiw	r28, 0x16	; 22
     942:	9f ae       	std	Y+63, r9	; 0x3f
     944:	66 97       	sbiw	r28, 0x16	; 22
		uint8_t hasDecimal = 0;
		uint8_t dataArray[4];
		uint8_t index = 0;
		float dataFloat = 0;
		
		flag = 0;
     946:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		while (flag == 0); //Wait for Zero Crossing Detector to signal a rising zero crossing
     94a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     94e:	88 23       	and	r24, r24
     950:	e1 f3       	breq	.-8      	; 0x94a <__stack+0x4b>
     952:	0a 2d       	mov	r16, r10
     954:	1b 2d       	mov	r17, r11
				unsigned int adcValue = adc_read_voltage();
				float adcVoltage = adc_calculation(adcValue);
				float voltage = voltage_real(adcVoltage, 0);
				voltageArray[i/2] = voltage;
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); // Regular Current
     956:	66 96       	adiw	r28, 0x16	; 22
     958:	af ad       	ldd	r26, Y+63	; 0x3f
     95a:	66 97       	sbiw	r28, 0x16	; 22
     95c:	ea 2e       	mov	r14, r26
     95e:	f1 2c       	mov	r15, r1
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
     960:	67 01       	movw	r12, r14
     962:	bf ef       	ldi	r27, 0xFF	; 255
     964:	cb 1a       	sub	r12, r27
     966:	db 0a       	sbc	r13, r27
		
		//Reading from the ADC, calculating and converting
		float voltageArray[10];
		float currentArray[10];
		for (int i=0;i<19;i++) {
			if (i%2 == 0) {
     968:	00 fd       	sbrc	r16, 0
     96a:	1b c0       	rjmp	.+54     	; 0x9a2 <__stack+0xa3>
				unsigned int adcValue = adc_read_voltage();
     96c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <adc_read_voltage>
				float adcVoltage = adc_calculation(adcValue);
     970:	0e 94 10 04 	call	0x820	; 0x820 <adc_calculation>
				float voltage = voltage_real(adcVoltage, 0);
     974:	4a 2d       	mov	r20, r10
     976:	5b 2d       	mov	r21, r11
     978:	0e 94 22 04 	call	0x844	; 0x844 <voltage_real>
				voltageArray[i/2] = voltage;
     97c:	98 01       	movw	r18, r16
     97e:	11 23       	and	r17, r17
     980:	14 f4       	brge	.+4      	; 0x986 <__stack+0x87>
     982:	2f 5f       	subi	r18, 0xFF	; 255
     984:	3f 4f       	sbci	r19, 0xFF	; 255
     986:	f9 01       	movw	r30, r18
     988:	f5 95       	asr	r31
     98a:	e7 95       	ror	r30
     98c:	ee 0f       	add	r30, r30
     98e:	ff 1f       	adc	r31, r31
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	e2 0d       	add	r30, r2
     996:	f3 1d       	adc	r31, r3
     998:	60 a7       	std	Z+40, r22	; 0x28
     99a:	71 a7       	std	Z+41, r23	; 0x29
     99c:	82 a7       	std	Z+42, r24	; 0x2a
     99e:	93 a7       	std	Z+43, r25	; 0x2b
     9a0:	1c c0       	rjmp	.+56     	; 0x9da <__stack+0xdb>
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); // Regular Current
     9a2:	c7 01       	movw	r24, r14
     9a4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <adc_read_current>
				float adcCurrent = adc_calculation(adcValue);
     9a8:	0e 94 10 04 	call	0x820	; 0x820 <adc_calculation>
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
     9ac:	a6 01       	movw	r20, r12
     9ae:	0e 94 22 04 	call	0x844	; 0x844 <voltage_real>
     9b2:	a8 01       	movw	r20, r16
     9b4:	41 50       	subi	r20, 0x01	; 1
     9b6:	51 09       	sbc	r21, r1
				currentArray[(i-1)/2] = current;
     9b8:	9a 01       	movw	r18, r20
     9ba:	12 f4       	brpl	.+4      	; 0x9c0 <__stack+0xc1>
     9bc:	2f 5f       	subi	r18, 0xFF	; 255
     9be:	3f 4f       	sbci	r19, 0xFF	; 255
     9c0:	f9 01       	movw	r30, r18
     9c2:	f5 95       	asr	r31
     9c4:	e7 95       	ror	r30
     9c6:	ee 0f       	add	r30, r30
     9c8:	ff 1f       	adc	r31, r31
     9ca:	ee 0f       	add	r30, r30
     9cc:	ff 1f       	adc	r31, r31
     9ce:	e2 0d       	add	r30, r2
     9d0:	f3 1d       	adc	r31, r3
     9d2:	60 83       	st	Z, r22
     9d4:	71 83       	std	Z+1, r23	; 0x01
     9d6:	82 83       	std	Z+2, r24	; 0x02
     9d8:	93 83       	std	Z+3, r25	; 0x03
		while (flag == 0); //Wait for Zero Crossing Detector to signal a rising zero crossing
		
		//Reading from the ADC, calculating and converting
		float voltageArray[10];
		float currentArray[10];
		for (int i=0;i<19;i++) {
     9da:	0f 5f       	subi	r16, 0xFF	; 255
     9dc:	1f 4f       	sbci	r17, 0xFF	; 255
     9de:	03 31       	cpi	r16, 0x13	; 19
     9e0:	11 05       	cpc	r17, r1
     9e2:	11 f6       	brne	.-124    	; 0x968 <__stack+0x69>
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
				currentArray[(i-1)/2] = current;
			}
		}
		float test = calcCurrentRMS(&currentArray);
     9e4:	6b 96       	adiw	r28, 0x1b	; 27
     9e6:	8f ad       	ldd	r24, Y+63	; 0x3f
     9e8:	6b 97       	sbiw	r28, 0x1b	; 27
     9ea:	6c 96       	adiw	r28, 0x1c	; 28
     9ec:	9f ad       	ldd	r25, Y+63	; 0x3f
     9ee:	6c 97       	sbiw	r28, 0x1c	; 28
     9f0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <calcCurrentRMS>
		if (test > 0.21) {
     9f4:	2d e3       	ldi	r18, 0x3D	; 61
     9f6:	3a e0       	ldi	r19, 0x0A	; 10
     9f8:	47 e5       	ldi	r20, 0x57	; 87
     9fa:	5e e3       	ldi	r21, 0x3E	; 62
     9fc:	0e 94 2e 08 	call	0x105c	; 0x105c <__gesf2>
     a00:	18 16       	cp	r1, r24
     a02:	34 f4       	brge	.+12     	; 0xa10 <__stack+0x111>
			if (currentFlag != 0) {
     a04:	66 96       	adiw	r28, 0x16	; 22
     a06:	ef ad       	ldd	r30, Y+63	; 0x3f
     a08:	66 97       	sbiw	r28, 0x16	; 22
     a0a:	e1 11       	cpse	r30, r1
     a0c:	43 c1       	rjmp	.+646    	; 0xc94 <__stack+0x395>
     a0e:	06 c0       	rjmp	.+12     	; 0xa1c <__stack+0x11d>
				currentFlag = 0;
				continue;
			}
		} else {
			if (currentFlag != 1) {
     a10:	66 96       	adiw	r28, 0x16	; 22
     a12:	ff ad       	ldd	r31, Y+63	; 0x3f
     a14:	66 97       	sbiw	r28, 0x16	; 22
     a16:	f1 30       	cpi	r31, 0x01	; 1
     a18:	09 f0       	breq	.+2      	; 0xa1c <__stack+0x11d>
     a1a:	40 c1       	rjmp	.+640    	; 0xc9c <__stack+0x39d>
				currentFlag = 1;
				continue;
			}
		}
		
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { dataFloat = calcPower(&voltageArray, &currentArray); } 
     a1c:	a0 96       	adiw	r28, 0x20	; 32
     a1e:	6c ad       	ldd	r22, Y+60	; 0x3c
     a20:	7d ad       	ldd	r23, Y+61	; 0x3d
     a22:	8e ad       	ldd	r24, Y+62	; 0x3e
     a24:	9f ad       	ldd	r25, Y+63	; 0x3f
     a26:	a0 97       	sbiw	r28, 0x20	; 32
     a28:	2a e0       	ldi	r18, 0x0A	; 10
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__udivmodsi4>
     a34:	6a 96       	adiw	r28, 0x1a	; 26
     a36:	6c af       	std	Y+60, r22	; 0x3c
     a38:	7d af       	std	Y+61, r23	; 0x3d
     a3a:	8e af       	std	Y+62, r24	; 0x3e
     a3c:	9f af       	std	Y+63, r25	; 0x3f
     a3e:	6a 97       	sbiw	r28, 0x1a	; 26
     a40:	2b 01       	movw	r4, r22
     a42:	3c 01       	movw	r6, r24
     a44:	64 30       	cpi	r22, 0x04	; 4
     a46:	71 05       	cpc	r23, r1
     a48:	81 05       	cpc	r24, r1
     a4a:	91 05       	cpc	r25, r1
     a4c:	78 f4       	brcc	.+30     	; 0xa6c <__stack+0x16d>
     a4e:	6b 96       	adiw	r28, 0x1b	; 27
     a50:	6f ad       	ldd	r22, Y+63	; 0x3f
     a52:	6b 97       	sbiw	r28, 0x1b	; 27
     a54:	6c 96       	adiw	r28, 0x1c	; 28
     a56:	7f ad       	ldd	r23, Y+63	; 0x3f
     a58:	6c 97       	sbiw	r28, 0x1c	; 28
     a5a:	ce 01       	movw	r24, r28
     a5c:	89 96       	adiw	r24, 0x29	; 41
     a5e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <calcPower>
     a62:	b6 2f       	mov	r27, r22
     a64:	a7 2f       	mov	r26, r23
     a66:	f8 2f       	mov	r31, r24
     a68:	e9 2f       	mov	r30, r25
     a6a:	2d c0       	rjmp	.+90     	; 0xac6 <__stack+0x1c7>
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataFloat = dataFloat = calcCurrentRMS(&currentArray); }
     a6c:	6a 96       	adiw	r28, 0x1a	; 26
     a6e:	8c ad       	ldd	r24, Y+60	; 0x3c
     a70:	9d ad       	ldd	r25, Y+61	; 0x3d
     a72:	ae ad       	ldd	r26, Y+62	; 0x3e
     a74:	bf ad       	ldd	r27, Y+63	; 0x3f
     a76:	6a 97       	sbiw	r28, 0x1a	; 26
     a78:	04 97       	sbiw	r24, 0x04	; 4
     a7a:	a1 09       	sbc	r26, r1
     a7c:	b1 09       	sbc	r27, r1
     a7e:	03 97       	sbiw	r24, 0x03	; 3
     a80:	a1 05       	cpc	r26, r1
     a82:	b1 05       	cpc	r27, r1
     a84:	68 f4       	brcc	.+26     	; 0xaa0 <__stack+0x1a1>
     a86:	6b 96       	adiw	r28, 0x1b	; 27
     a88:	8f ad       	ldd	r24, Y+63	; 0x3f
     a8a:	6b 97       	sbiw	r28, 0x1b	; 27
     a8c:	6c 96       	adiw	r28, 0x1c	; 28
     a8e:	9f ad       	ldd	r25, Y+63	; 0x3f
     a90:	6c 97       	sbiw	r28, 0x1c	; 28
     a92:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <calcCurrentRMS>
     a96:	b6 2f       	mov	r27, r22
     a98:	a7 2f       	mov	r26, r23
     a9a:	f8 2f       	mov	r31, r24
     a9c:	e9 2f       	mov	r30, r25
     a9e:	13 c0       	rjmp	.+38     	; 0xac6 <__stack+0x1c7>
		else if (displayCount%10 > 6) { dataFloat = calcVoltageRMS(&voltageArray); }
     aa0:	37 e0       	ldi	r19, 0x07	; 7
     aa2:	43 16       	cp	r4, r19
     aa4:	51 04       	cpc	r5, r1
     aa6:	61 04       	cpc	r6, r1
     aa8:	71 04       	cpc	r7, r1
     aaa:	48 f0       	brcs	.+18     	; 0xabe <__stack+0x1bf>
     aac:	ce 01       	movw	r24, r28
     aae:	89 96       	adiw	r24, 0x29	; 41
     ab0:	0e 94 2f 02 	call	0x45e	; 0x45e <calcVoltageRMS>
     ab4:	b6 2f       	mov	r27, r22
     ab6:	a7 2f       	mov	r26, r23
     ab8:	f8 2f       	mov	r31, r24
     aba:	e9 2f       	mov	r30, r25
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__stack+0x1c7>

	while(1) {
		uint8_t hasDecimal = 0;
		uint8_t dataArray[4];
		uint8_t index = 0;
		float dataFloat = 0;
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	e0 e0       	ldi	r30, 0x00	; 0
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataFloat = dataFloat = calcCurrentRMS(&currentArray); }
		else if (displayCount%10 > 6) { dataFloat = calcVoltageRMS(&voltageArray); }
		
		// if A > 0.21 use low gain

		dataFloat = roundf(dataFloat * 100) / 100;
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	48 ec       	ldi	r20, 0xC8	; 200
     acc:	52 e4       	ldi	r21, 0x42	; 66
     ace:	6b 2f       	mov	r22, r27
     ad0:	7a 2f       	mov	r23, r26
     ad2:	8f 2f       	mov	r24, r31
     ad4:	9e 2f       	mov	r25, r30
     ad6:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     ada:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <round>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	48 ec       	ldi	r20, 0xC8	; 200
     ae4:	52 e4       	ldi	r21, 0x42	; 66
     ae6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__divsf3>
     aea:	6b 01       	movw	r12, r22
     aec:	7c 01       	movw	r14, r24
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
     aee:	0e 94 ad 00 	call	0x15a	; 0x15a <find_decimal>
     af2:	4c 01       	movw	r8, r24
     af4:	99 24       	eor	r9, r9
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	88 19       	sub	r24, r8
     afc:	99 09       	sbc	r25, r9
     afe:	a2 96       	adiw	r28, 0x22	; 34
     b00:	9f af       	std	Y+63, r25	; 0x3f
     b02:	8e af       	std	Y+62, r24	; 0x3e
     b04:	a2 97       	sbiw	r28, 0x22	; 34
     b06:	bc 01       	movw	r22, r24
     b08:	99 0f       	add	r25, r25
     b0a:	88 0b       	sbc	r24, r24
     b0c:	99 0b       	sbc	r25, r25
     b0e:	0e 94 7e 07 	call	0xefc	; 0xefc <__floatsisf>
     b12:	9b 01       	movw	r18, r22
     b14:	ac 01       	movw	r20, r24
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	80 e2       	ldi	r24, 0x20	; 32
     b1c:	91 e4       	ldi	r25, 0x41	; 65
     b1e:	0e 94 a0 08 	call	0x1140	; 0x1140 <pow>
     b22:	a7 01       	movw	r20, r14
     b24:	96 01       	movw	r18, r12
     b26:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	40 e0       	ldi	r20, 0x00	; 0
     b30:	5f e3       	ldi	r21, 0x3F	; 63
     b32:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__addsf3>
     b36:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fixsfsi>
     b3a:	7b 01       	movw	r14, r22
     b3c:	a4 96       	adiw	r28, 0x24	; 36
     b3e:	ce ac       	ldd	r12, Y+62	; 0x3e
     b40:	df ac       	ldd	r13, Y+63	; 0x3f
     b42:	a4 97       	sbiw	r28, 0x24	; 36
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     b44:	02 e0       	ldi	r16, 0x02	; 2
     b46:	10 e0       	ldi	r17, 0x00	; 0
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     b48:	08 15       	cp	r16, r8
     b4a:	19 05       	cpc	r17, r9
     b4c:	61 f4       	brne	.+24     	; 0xb66 <__stack+0x267>
     b4e:	a5 96       	adiw	r28, 0x25	; 37
     b50:	4f ad       	ldd	r20, Y+63	; 0x3f
     b52:	a5 97       	sbiw	r28, 0x25	; 37
     b54:	a2 96       	adiw	r28, 0x22	; 34
     b56:	ae ad       	ldd	r26, Y+62	; 0x3e
     b58:	bf ad       	ldd	r27, Y+63	; 0x3f
     b5a:	a2 97       	sbiw	r28, 0x22	; 34
     b5c:	1a 16       	cp	r1, r26
     b5e:	1b 06       	cpc	r1, r27
     b60:	1c f0       	brlt	.+6      	; 0xb68 <__stack+0x269>
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <__stack+0x269>
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
     b66:	40 e0       	ldi	r20, 0x00	; 0
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
     b68:	97 01       	movw	r18, r14
     b6a:	ad ec       	ldi	r26, 0xCD	; 205
     b6c:	bc ec       	ldi	r27, 0xCC	; 204
     b6e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__umulhisi3>
     b72:	96 95       	lsr	r25
     b74:	87 95       	ror	r24
     b76:	96 95       	lsr	r25
     b78:	87 95       	ror	r24
     b7a:	96 95       	lsr	r25
     b7c:	87 95       	ror	r24
     b7e:	9c 01       	movw	r18, r24
     b80:	22 0f       	add	r18, r18
     b82:	33 1f       	adc	r19, r19
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
     b90:	82 0f       	add	r24, r18
     b92:	93 1f       	adc	r25, r19
     b94:	60 2f       	mov	r22, r16
     b96:	be 2d       	mov	r27, r14
     b98:	b8 1b       	sub	r27, r24
     b9a:	8b 2f       	mov	r24, r27
     b9c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <wololo>
     ba0:	f6 01       	movw	r30, r12
     ba2:	82 93       	st	-Z, r24
     ba4:	6f 01       	movw	r12, r30
			dataInt = dataInt/10;
     ba6:	97 01       	movw	r18, r14
     ba8:	ad ec       	ldi	r26, 0xCD	; 205
     baa:	bc ec       	ldi	r27, 0xCC	; 204
     bac:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__umulhisi3>
     bb0:	7c 01       	movw	r14, r24
     bb2:	f6 94       	lsr	r15
     bb4:	e7 94       	ror	r14
     bb6:	f6 94       	lsr	r15
     bb8:	e7 94       	ror	r14
     bba:	f6 94       	lsr	r15
     bbc:	e7 94       	ror	r14
		dataFloat = roundf(dataFloat * 100) / 100;
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     bbe:	01 50       	subi	r16, 0x01	; 1
     bc0:	11 09       	sbc	r17, r1
     bc2:	10 f6       	brcc	.-124    	; 0xb48 <__stack+0x249>
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
			dataInt = dataInt/10;
		}
		
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { dataArray[3] = 15; }
     bc4:	24 e0       	ldi	r18, 0x04	; 4
     bc6:	42 16       	cp	r4, r18
     bc8:	51 04       	cpc	r5, r1
     bca:	61 04       	cpc	r6, r1
     bcc:	71 04       	cpc	r7, r1
     bce:	28 f4       	brcc	.+10     	; 0xbda <__stack+0x2db>
     bd0:	8f e0       	ldi	r24, 0x0F	; 15
     bd2:	65 96       	adiw	r28, 0x15	; 21
     bd4:	8f af       	std	Y+63, r24	; 0x3f
     bd6:	65 97       	sbiw	r28, 0x15	; 21
     bd8:	1c c0       	rjmp	.+56     	; 0xc12 <__stack+0x313>
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataArray[3] = 13; }
     bda:	6a 96       	adiw	r28, 0x1a	; 26
     bdc:	8c ad       	ldd	r24, Y+60	; 0x3c
     bde:	9d ad       	ldd	r25, Y+61	; 0x3d
     be0:	ae ad       	ldd	r26, Y+62	; 0x3e
     be2:	bf ad       	ldd	r27, Y+63	; 0x3f
     be4:	6a 97       	sbiw	r28, 0x1a	; 26
     be6:	04 97       	sbiw	r24, 0x04	; 4
     be8:	a1 09       	sbc	r26, r1
     bea:	b1 09       	sbc	r27, r1
     bec:	03 97       	sbiw	r24, 0x03	; 3
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	28 f4       	brcc	.+10     	; 0xbfe <__stack+0x2ff>
     bf4:	8d e0       	ldi	r24, 0x0D	; 13
     bf6:	65 96       	adiw	r28, 0x15	; 21
     bf8:	8f af       	std	Y+63, r24	; 0x3f
     bfa:	65 97       	sbiw	r28, 0x15	; 21
     bfc:	0a c0       	rjmp	.+20     	; 0xc12 <__stack+0x313>
		else if (displayCount%10 > 6) { dataArray[3] = 14; }
     bfe:	37 e0       	ldi	r19, 0x07	; 7
     c00:	43 16       	cp	r4, r19
     c02:	51 04       	cpc	r5, r1
     c04:	61 04       	cpc	r6, r1
     c06:	71 04       	cpc	r7, r1
     c08:	20 f0       	brcs	.+8      	; 0xc12 <__stack+0x313>
     c0a:	8e e0       	ldi	r24, 0x0E	; 14
     c0c:	65 96       	adiw	r28, 0x15	; 21
     c0e:	8f af       	std	Y+63, r24	; 0x3f
     c10:	65 97       	sbiw	r28, 0x15	; 21

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
			uart_transmit(data);
     c12:	62 96       	adiw	r28, 0x12	; 18
     c14:	8f ad       	ldd	r24, Y+63	; 0x3f
     c16:	62 97       	sbiw	r28, 0x12	; 18
     c18:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c1c:	af ed       	ldi	r26, 0xDF	; 223
     c1e:	be e2       	ldi	r27, 0x2E	; 46
     c20:	11 97       	sbiw	r26, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <__stack+0x321>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <__stack+0x327>
     c26:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
     c28:	11 e0       	ldi	r17, 0x01	; 1
			//Select next integer to send
			if (index == 4) {
				index = 0;
     c2a:	00 e0       	ldi	r16, 0x00	; 0
     c2c:	13 c0       	rjmp	.+38     	; 0xc54 <__stack+0x355>
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataArray[3] = 13; }
		else if (displayCount%10 > 6) { dataArray[3] = 14; }

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
     c2e:	e1 e5       	ldi	r30, 0x51	; 81
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	ec 0f       	add	r30, r28
     c34:	fd 1f       	adc	r31, r29
     c36:	e1 0f       	add	r30, r17
     c38:	f1 1d       	adc	r31, r1
			uart_transmit(data);
     c3a:	80 81       	ld	r24, Z
     c3c:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
     c40:	ef ed       	ldi	r30, 0xDF	; 223
     c42:	fe e2       	ldi	r31, 0x2E	; 46
     c44:	31 97       	sbiw	r30, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <__stack+0x345>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <__stack+0x34b>
     c4a:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
     c4c:	1f 5f       	subi	r17, 0xFF	; 255
			//Select next integer to send
			if (index == 4) {
     c4e:	14 30       	cpi	r17, 0x04	; 4
     c50:	09 f4       	brne	.+2      	; 0xc54 <__stack+0x355>
				index = 0;
     c52:	10 2f       	mov	r17, r16
			}
			//Polling mechanism
			if(TCNT0>=156) {
     c54:	86 b5       	in	r24, 0x26	; 38
     c56:	8c 39       	cpi	r24, 0x9C	; 156
     c58:	50 f3       	brcs	.-44     	; 0xc2e <__stack+0x32f>
				TCNT0 = 0;
     c5a:	16 bc       	out	0x26, r1	; 38
				if (counter == 50) {
     c5c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
     c60:	82 33       	cpi	r24, 0x32	; 50
     c62:	91 f4       	brne	.+36     	; 0xc88 <__stack+0x389>
					counter = 0;
     c64:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter>
				} else {
					counter++;
				}
			}
		}
		displayCount++;
     c68:	a0 96       	adiw	r28, 0x20	; 32
     c6a:	8c ad       	ldd	r24, Y+60	; 0x3c
     c6c:	9d ad       	ldd	r25, Y+61	; 0x3d
     c6e:	ae ad       	ldd	r26, Y+62	; 0x3e
     c70:	bf ad       	ldd	r27, Y+63	; 0x3f
     c72:	a0 97       	sbiw	r28, 0x20	; 32
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	a1 1d       	adc	r26, r1
     c78:	b1 1d       	adc	r27, r1
     c7a:	a0 96       	adiw	r28, 0x20	; 32
     c7c:	8c af       	std	Y+60, r24	; 0x3c
     c7e:	9d af       	std	Y+61, r25	; 0x3d
     c80:	ae af       	std	Y+62, r26	; 0x3e
     c82:	bf af       	std	Y+63, r27	; 0x3f
     c84:	a0 97       	sbiw	r28, 0x20	; 32
     c86:	5f ce       	rjmp	.-834    	; 0x946 <__stack+0x47>
				TCNT0 = 0;
				if (counter == 50) {
					counter = 0;
					break;
				} else {
					counter++;
     c88:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter>
     c92:	cd cf       	rjmp	.-102    	; 0xc2e <__stack+0x32f>
			}
		}
		float test = calcCurrentRMS(&currentArray);
		if (test > 0.21) {
			if (currentFlag != 0) {
				currentFlag = 0;
     c94:	66 96       	adiw	r28, 0x16	; 22
     c96:	1f ae       	std	Y+63, r1	; 0x3f
     c98:	66 97       	sbiw	r28, 0x16	; 22
     c9a:	55 ce       	rjmp	.-854    	; 0x946 <__stack+0x47>
				continue;
			}
		} else {
			if (currentFlag != 1) {
				currentFlag = 1;
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	66 96       	adiw	r28, 0x16	; 22
     ca0:	9f af       	std	Y+63, r25	; 0x3f
     ca2:	66 97       	sbiw	r28, 0x16	; 22
     ca4:	50 ce       	rjmp	.-864    	; 0x946 <__stack+0x47>

00000ca6 <__vector_1>:
		displayCount++;
	}
	return 0;
}

ISR (INT0_vect) {
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	8f 93       	push	r24
	flag = 1;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     cb8:	8f 91       	pop	r24
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	0f 90       	pop	r0
     cc0:	1f 90       	pop	r1
     cc2:	18 95       	reti

00000cc4 <__subsf3>:
     cc4:	50 58       	subi	r21, 0x80	; 128

00000cc6 <__addsf3>:
     cc6:	bb 27       	eor	r27, r27
     cc8:	aa 27       	eor	r26, r26
     cca:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__addsf3x>
     cce:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_round>
     cd2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_pscA>
     cd6:	38 f0       	brcs	.+14     	; 0xce6 <__addsf3+0x20>
     cd8:	0e 94 ed 07 	call	0xfda	; 0xfda <__fp_pscB>
     cdc:	20 f0       	brcs	.+8      	; 0xce6 <__addsf3+0x20>
     cde:	39 f4       	brne	.+14     	; 0xcee <__addsf3+0x28>
     ce0:	9f 3f       	cpi	r25, 0xFF	; 255
     ce2:	19 f4       	brne	.+6      	; 0xcea <__addsf3+0x24>
     ce4:	26 f4       	brtc	.+8      	; 0xcee <__addsf3+0x28>
     ce6:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_nan>
     cea:	0e f4       	brtc	.+2      	; 0xcee <__addsf3+0x28>
     cec:	e0 95       	com	r30
     cee:	e7 fb       	bst	r30, 7
     cf0:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>

00000cf4 <__addsf3x>:
     cf4:	e9 2f       	mov	r30, r25
     cf6:	0e 94 05 08 	call	0x100a	; 0x100a <__fp_split3>
     cfa:	58 f3       	brcs	.-42     	; 0xcd2 <__addsf3+0xc>
     cfc:	ba 17       	cp	r27, r26
     cfe:	62 07       	cpc	r22, r18
     d00:	73 07       	cpc	r23, r19
     d02:	84 07       	cpc	r24, r20
     d04:	95 07       	cpc	r25, r21
     d06:	20 f0       	brcs	.+8      	; 0xd10 <__addsf3x+0x1c>
     d08:	79 f4       	brne	.+30     	; 0xd28 <__addsf3x+0x34>
     d0a:	a6 f5       	brtc	.+104    	; 0xd74 <__addsf3x+0x80>
     d0c:	0c 94 27 08 	jmp	0x104e	; 0x104e <__fp_zero>
     d10:	0e f4       	brtc	.+2      	; 0xd14 <__addsf3x+0x20>
     d12:	e0 95       	com	r30
     d14:	0b 2e       	mov	r0, r27
     d16:	ba 2f       	mov	r27, r26
     d18:	a0 2d       	mov	r26, r0
     d1a:	0b 01       	movw	r0, r22
     d1c:	b9 01       	movw	r22, r18
     d1e:	90 01       	movw	r18, r0
     d20:	0c 01       	movw	r0, r24
     d22:	ca 01       	movw	r24, r20
     d24:	a0 01       	movw	r20, r0
     d26:	11 24       	eor	r1, r1
     d28:	ff 27       	eor	r31, r31
     d2a:	59 1b       	sub	r21, r25
     d2c:	99 f0       	breq	.+38     	; 0xd54 <__addsf3x+0x60>
     d2e:	59 3f       	cpi	r21, 0xF9	; 249
     d30:	50 f4       	brcc	.+20     	; 0xd46 <__addsf3x+0x52>
     d32:	50 3e       	cpi	r21, 0xE0	; 224
     d34:	68 f1       	brcs	.+90     	; 0xd90 <__addsf3x+0x9c>
     d36:	1a 16       	cp	r1, r26
     d38:	f0 40       	sbci	r31, 0x00	; 0
     d3a:	a2 2f       	mov	r26, r18
     d3c:	23 2f       	mov	r18, r19
     d3e:	34 2f       	mov	r19, r20
     d40:	44 27       	eor	r20, r20
     d42:	58 5f       	subi	r21, 0xF8	; 248
     d44:	f3 cf       	rjmp	.-26     	; 0xd2c <__addsf3x+0x38>
     d46:	46 95       	lsr	r20
     d48:	37 95       	ror	r19
     d4a:	27 95       	ror	r18
     d4c:	a7 95       	ror	r26
     d4e:	f0 40       	sbci	r31, 0x00	; 0
     d50:	53 95       	inc	r21
     d52:	c9 f7       	brne	.-14     	; 0xd46 <__addsf3x+0x52>
     d54:	7e f4       	brtc	.+30     	; 0xd74 <__addsf3x+0x80>
     d56:	1f 16       	cp	r1, r31
     d58:	ba 0b       	sbc	r27, r26
     d5a:	62 0b       	sbc	r22, r18
     d5c:	73 0b       	sbc	r23, r19
     d5e:	84 0b       	sbc	r24, r20
     d60:	ba f0       	brmi	.+46     	; 0xd90 <__addsf3x+0x9c>
     d62:	91 50       	subi	r25, 0x01	; 1
     d64:	a1 f0       	breq	.+40     	; 0xd8e <__addsf3x+0x9a>
     d66:	ff 0f       	add	r31, r31
     d68:	bb 1f       	adc	r27, r27
     d6a:	66 1f       	adc	r22, r22
     d6c:	77 1f       	adc	r23, r23
     d6e:	88 1f       	adc	r24, r24
     d70:	c2 f7       	brpl	.-16     	; 0xd62 <__addsf3x+0x6e>
     d72:	0e c0       	rjmp	.+28     	; 0xd90 <__addsf3x+0x9c>
     d74:	ba 0f       	add	r27, r26
     d76:	62 1f       	adc	r22, r18
     d78:	73 1f       	adc	r23, r19
     d7a:	84 1f       	adc	r24, r20
     d7c:	48 f4       	brcc	.+18     	; 0xd90 <__addsf3x+0x9c>
     d7e:	87 95       	ror	r24
     d80:	77 95       	ror	r23
     d82:	67 95       	ror	r22
     d84:	b7 95       	ror	r27
     d86:	f7 95       	ror	r31
     d88:	9e 3f       	cpi	r25, 0xFE	; 254
     d8a:	08 f0       	brcs	.+2      	; 0xd8e <__addsf3x+0x9a>
     d8c:	b0 cf       	rjmp	.-160    	; 0xcee <__addsf3+0x28>
     d8e:	93 95       	inc	r25
     d90:	88 0f       	add	r24, r24
     d92:	08 f0       	brcs	.+2      	; 0xd96 <__addsf3x+0xa2>
     d94:	99 27       	eor	r25, r25
     d96:	ee 0f       	add	r30, r30
     d98:	97 95       	ror	r25
     d9a:	87 95       	ror	r24
     d9c:	08 95       	ret

00000d9e <__cmpsf2>:
     d9e:	0e 94 b9 07 	call	0xf72	; 0xf72 <__fp_cmp>
     da2:	08 f4       	brcc	.+2      	; 0xda6 <__cmpsf2+0x8>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	08 95       	ret

00000da8 <__divsf3>:
     da8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__divsf3x>
     dac:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_round>
     db0:	0e 94 ed 07 	call	0xfda	; 0xfda <__fp_pscB>
     db4:	58 f0       	brcs	.+22     	; 0xdcc <__divsf3+0x24>
     db6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_pscA>
     dba:	40 f0       	brcs	.+16     	; 0xdcc <__divsf3+0x24>
     dbc:	29 f4       	brne	.+10     	; 0xdc8 <__divsf3+0x20>
     dbe:	5f 3f       	cpi	r21, 0xFF	; 255
     dc0:	29 f0       	breq	.+10     	; 0xdcc <__divsf3+0x24>
     dc2:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
     dc6:	51 11       	cpse	r21, r1
     dc8:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_szero>
     dcc:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_nan>

00000dd0 <__divsf3x>:
     dd0:	0e 94 05 08 	call	0x100a	; 0x100a <__fp_split3>
     dd4:	68 f3       	brcs	.-38     	; 0xdb0 <__divsf3+0x8>

00000dd6 <__divsf3_pse>:
     dd6:	99 23       	and	r25, r25
     dd8:	b1 f3       	breq	.-20     	; 0xdc6 <__divsf3+0x1e>
     dda:	55 23       	and	r21, r21
     ddc:	91 f3       	breq	.-28     	; 0xdc2 <__divsf3+0x1a>
     dde:	95 1b       	sub	r25, r21
     de0:	55 0b       	sbc	r21, r21
     de2:	bb 27       	eor	r27, r27
     de4:	aa 27       	eor	r26, r26
     de6:	62 17       	cp	r22, r18
     de8:	73 07       	cpc	r23, r19
     dea:	84 07       	cpc	r24, r20
     dec:	38 f0       	brcs	.+14     	; 0xdfc <__divsf3_pse+0x26>
     dee:	9f 5f       	subi	r25, 0xFF	; 255
     df0:	5f 4f       	sbci	r21, 0xFF	; 255
     df2:	22 0f       	add	r18, r18
     df4:	33 1f       	adc	r19, r19
     df6:	44 1f       	adc	r20, r20
     df8:	aa 1f       	adc	r26, r26
     dfa:	a9 f3       	breq	.-22     	; 0xde6 <__divsf3_pse+0x10>
     dfc:	35 d0       	rcall	.+106    	; 0xe68 <__divsf3_pse+0x92>
     dfe:	0e 2e       	mov	r0, r30
     e00:	3a f0       	brmi	.+14     	; 0xe10 <__divsf3_pse+0x3a>
     e02:	e0 e8       	ldi	r30, 0x80	; 128
     e04:	32 d0       	rcall	.+100    	; 0xe6a <__divsf3_pse+0x94>
     e06:	91 50       	subi	r25, 0x01	; 1
     e08:	50 40       	sbci	r21, 0x00	; 0
     e0a:	e6 95       	lsr	r30
     e0c:	00 1c       	adc	r0, r0
     e0e:	ca f7       	brpl	.-14     	; 0xe02 <__divsf3_pse+0x2c>
     e10:	2b d0       	rcall	.+86     	; 0xe68 <__divsf3_pse+0x92>
     e12:	fe 2f       	mov	r31, r30
     e14:	29 d0       	rcall	.+82     	; 0xe68 <__divsf3_pse+0x92>
     e16:	66 0f       	add	r22, r22
     e18:	77 1f       	adc	r23, r23
     e1a:	88 1f       	adc	r24, r24
     e1c:	bb 1f       	adc	r27, r27
     e1e:	26 17       	cp	r18, r22
     e20:	37 07       	cpc	r19, r23
     e22:	48 07       	cpc	r20, r24
     e24:	ab 07       	cpc	r26, r27
     e26:	b0 e8       	ldi	r27, 0x80	; 128
     e28:	09 f0       	breq	.+2      	; 0xe2c <__divsf3_pse+0x56>
     e2a:	bb 0b       	sbc	r27, r27
     e2c:	80 2d       	mov	r24, r0
     e2e:	bf 01       	movw	r22, r30
     e30:	ff 27       	eor	r31, r31
     e32:	93 58       	subi	r25, 0x83	; 131
     e34:	5f 4f       	sbci	r21, 0xFF	; 255
     e36:	3a f0       	brmi	.+14     	; 0xe46 <__divsf3_pse+0x70>
     e38:	9e 3f       	cpi	r25, 0xFE	; 254
     e3a:	51 05       	cpc	r21, r1
     e3c:	78 f0       	brcs	.+30     	; 0xe5c <__divsf3_pse+0x86>
     e3e:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
     e42:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_szero>
     e46:	5f 3f       	cpi	r21, 0xFF	; 255
     e48:	e4 f3       	brlt	.-8      	; 0xe42 <__divsf3_pse+0x6c>
     e4a:	98 3e       	cpi	r25, 0xE8	; 232
     e4c:	d4 f3       	brlt	.-12     	; 0xe42 <__divsf3_pse+0x6c>
     e4e:	86 95       	lsr	r24
     e50:	77 95       	ror	r23
     e52:	67 95       	ror	r22
     e54:	b7 95       	ror	r27
     e56:	f7 95       	ror	r31
     e58:	9f 5f       	subi	r25, 0xFF	; 255
     e5a:	c9 f7       	brne	.-14     	; 0xe4e <__divsf3_pse+0x78>
     e5c:	88 0f       	add	r24, r24
     e5e:	91 1d       	adc	r25, r1
     e60:	96 95       	lsr	r25
     e62:	87 95       	ror	r24
     e64:	97 f9       	bld	r25, 7
     e66:	08 95       	ret
     e68:	e1 e0       	ldi	r30, 0x01	; 1
     e6a:	66 0f       	add	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	88 1f       	adc	r24, r24
     e70:	bb 1f       	adc	r27, r27
     e72:	62 17       	cp	r22, r18
     e74:	73 07       	cpc	r23, r19
     e76:	84 07       	cpc	r24, r20
     e78:	ba 07       	cpc	r27, r26
     e7a:	20 f0       	brcs	.+8      	; 0xe84 <__divsf3_pse+0xae>
     e7c:	62 1b       	sub	r22, r18
     e7e:	73 0b       	sbc	r23, r19
     e80:	84 0b       	sbc	r24, r20
     e82:	ba 0b       	sbc	r27, r26
     e84:	ee 1f       	adc	r30, r30
     e86:	88 f7       	brcc	.-30     	; 0xe6a <__divsf3_pse+0x94>
     e88:	e0 95       	com	r30
     e8a:	08 95       	ret

00000e8c <__fixsfsi>:
     e8c:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__fixunssfsi>
     e90:	68 94       	set
     e92:	b1 11       	cpse	r27, r1
     e94:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_szero>
     e98:	08 95       	ret

00000e9a <__fixunssfsi>:
     e9a:	0e 94 0d 08 	call	0x101a	; 0x101a <__fp_splitA>
     e9e:	88 f0       	brcs	.+34     	; 0xec2 <__fixunssfsi+0x28>
     ea0:	9f 57       	subi	r25, 0x7F	; 127
     ea2:	98 f0       	brcs	.+38     	; 0xeca <__fixunssfsi+0x30>
     ea4:	b9 2f       	mov	r27, r25
     ea6:	99 27       	eor	r25, r25
     ea8:	b7 51       	subi	r27, 0x17	; 23
     eaa:	b0 f0       	brcs	.+44     	; 0xed8 <__fixunssfsi+0x3e>
     eac:	e1 f0       	breq	.+56     	; 0xee6 <__fixunssfsi+0x4c>
     eae:	66 0f       	add	r22, r22
     eb0:	77 1f       	adc	r23, r23
     eb2:	88 1f       	adc	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	1a f0       	brmi	.+6      	; 0xebe <__fixunssfsi+0x24>
     eb8:	ba 95       	dec	r27
     eba:	c9 f7       	brne	.-14     	; 0xeae <__fixunssfsi+0x14>
     ebc:	14 c0       	rjmp	.+40     	; 0xee6 <__fixunssfsi+0x4c>
     ebe:	b1 30       	cpi	r27, 0x01	; 1
     ec0:	91 f0       	breq	.+36     	; 0xee6 <__fixunssfsi+0x4c>
     ec2:	0e 94 27 08 	call	0x104e	; 0x104e <__fp_zero>
     ec6:	b1 e0       	ldi	r27, 0x01	; 1
     ec8:	08 95       	ret
     eca:	0c 94 27 08 	jmp	0x104e	; 0x104e <__fp_zero>
     ece:	67 2f       	mov	r22, r23
     ed0:	78 2f       	mov	r23, r24
     ed2:	88 27       	eor	r24, r24
     ed4:	b8 5f       	subi	r27, 0xF8	; 248
     ed6:	39 f0       	breq	.+14     	; 0xee6 <__fixunssfsi+0x4c>
     ed8:	b9 3f       	cpi	r27, 0xF9	; 249
     eda:	cc f3       	brlt	.-14     	; 0xece <__fixunssfsi+0x34>
     edc:	86 95       	lsr	r24
     ede:	77 95       	ror	r23
     ee0:	67 95       	ror	r22
     ee2:	b3 95       	inc	r27
     ee4:	d9 f7       	brne	.-10     	; 0xedc <__fixunssfsi+0x42>
     ee6:	3e f4       	brtc	.+14     	; 0xef6 <__fixunssfsi+0x5c>
     ee8:	90 95       	com	r25
     eea:	80 95       	com	r24
     eec:	70 95       	com	r23
     eee:	61 95       	neg	r22
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	8f 4f       	sbci	r24, 0xFF	; 255
     ef4:	9f 4f       	sbci	r25, 0xFF	; 255
     ef6:	08 95       	ret

00000ef8 <__floatunsisf>:
     ef8:	e8 94       	clt
     efa:	09 c0       	rjmp	.+18     	; 0xf0e <__floatsisf+0x12>

00000efc <__floatsisf>:
     efc:	97 fb       	bst	r25, 7
     efe:	3e f4       	brtc	.+14     	; 0xf0e <__floatsisf+0x12>
     f00:	90 95       	com	r25
     f02:	80 95       	com	r24
     f04:	70 95       	com	r23
     f06:	61 95       	neg	r22
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	8f 4f       	sbci	r24, 0xFF	; 255
     f0c:	9f 4f       	sbci	r25, 0xFF	; 255
     f0e:	99 23       	and	r25, r25
     f10:	a9 f0       	breq	.+42     	; 0xf3c <__floatsisf+0x40>
     f12:	f9 2f       	mov	r31, r25
     f14:	96 e9       	ldi	r25, 0x96	; 150
     f16:	bb 27       	eor	r27, r27
     f18:	93 95       	inc	r25
     f1a:	f6 95       	lsr	r31
     f1c:	87 95       	ror	r24
     f1e:	77 95       	ror	r23
     f20:	67 95       	ror	r22
     f22:	b7 95       	ror	r27
     f24:	f1 11       	cpse	r31, r1
     f26:	f8 cf       	rjmp	.-16     	; 0xf18 <__floatsisf+0x1c>
     f28:	fa f4       	brpl	.+62     	; 0xf68 <__floatsisf+0x6c>
     f2a:	bb 0f       	add	r27, r27
     f2c:	11 f4       	brne	.+4      	; 0xf32 <__floatsisf+0x36>
     f2e:	60 ff       	sbrs	r22, 0
     f30:	1b c0       	rjmp	.+54     	; 0xf68 <__floatsisf+0x6c>
     f32:	6f 5f       	subi	r22, 0xFF	; 255
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	8f 4f       	sbci	r24, 0xFF	; 255
     f38:	9f 4f       	sbci	r25, 0xFF	; 255
     f3a:	16 c0       	rjmp	.+44     	; 0xf68 <__floatsisf+0x6c>
     f3c:	88 23       	and	r24, r24
     f3e:	11 f0       	breq	.+4      	; 0xf44 <__floatsisf+0x48>
     f40:	96 e9       	ldi	r25, 0x96	; 150
     f42:	11 c0       	rjmp	.+34     	; 0xf66 <__floatsisf+0x6a>
     f44:	77 23       	and	r23, r23
     f46:	21 f0       	breq	.+8      	; 0xf50 <__floatsisf+0x54>
     f48:	9e e8       	ldi	r25, 0x8E	; 142
     f4a:	87 2f       	mov	r24, r23
     f4c:	76 2f       	mov	r23, r22
     f4e:	05 c0       	rjmp	.+10     	; 0xf5a <__floatsisf+0x5e>
     f50:	66 23       	and	r22, r22
     f52:	71 f0       	breq	.+28     	; 0xf70 <__floatsisf+0x74>
     f54:	96 e8       	ldi	r25, 0x86	; 134
     f56:	86 2f       	mov	r24, r22
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	2a f0       	brmi	.+10     	; 0xf68 <__floatsisf+0x6c>
     f5e:	9a 95       	dec	r25
     f60:	66 0f       	add	r22, r22
     f62:	77 1f       	adc	r23, r23
     f64:	88 1f       	adc	r24, r24
     f66:	da f7       	brpl	.-10     	; 0xf5e <__floatsisf+0x62>
     f68:	88 0f       	add	r24, r24
     f6a:	96 95       	lsr	r25
     f6c:	87 95       	ror	r24
     f6e:	97 f9       	bld	r25, 7
     f70:	08 95       	ret

00000f72 <__fp_cmp>:
     f72:	99 0f       	add	r25, r25
     f74:	00 08       	sbc	r0, r0
     f76:	55 0f       	add	r21, r21
     f78:	aa 0b       	sbc	r26, r26
     f7a:	e0 e8       	ldi	r30, 0x80	; 128
     f7c:	fe ef       	ldi	r31, 0xFE	; 254
     f7e:	16 16       	cp	r1, r22
     f80:	17 06       	cpc	r1, r23
     f82:	e8 07       	cpc	r30, r24
     f84:	f9 07       	cpc	r31, r25
     f86:	c0 f0       	brcs	.+48     	; 0xfb8 <__fp_cmp+0x46>
     f88:	12 16       	cp	r1, r18
     f8a:	13 06       	cpc	r1, r19
     f8c:	e4 07       	cpc	r30, r20
     f8e:	f5 07       	cpc	r31, r21
     f90:	98 f0       	brcs	.+38     	; 0xfb8 <__fp_cmp+0x46>
     f92:	62 1b       	sub	r22, r18
     f94:	73 0b       	sbc	r23, r19
     f96:	84 0b       	sbc	r24, r20
     f98:	95 0b       	sbc	r25, r21
     f9a:	39 f4       	brne	.+14     	; 0xfaa <__fp_cmp+0x38>
     f9c:	0a 26       	eor	r0, r26
     f9e:	61 f0       	breq	.+24     	; 0xfb8 <__fp_cmp+0x46>
     fa0:	23 2b       	or	r18, r19
     fa2:	24 2b       	or	r18, r20
     fa4:	25 2b       	or	r18, r21
     fa6:	21 f4       	brne	.+8      	; 0xfb0 <__fp_cmp+0x3e>
     fa8:	08 95       	ret
     faa:	0a 26       	eor	r0, r26
     fac:	09 f4       	brne	.+2      	; 0xfb0 <__fp_cmp+0x3e>
     fae:	a1 40       	sbci	r26, 0x01	; 1
     fb0:	a6 95       	lsr	r26
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	81 1d       	adc	r24, r1
     fb6:	81 1d       	adc	r24, r1
     fb8:	08 95       	ret

00000fba <__fp_inf>:
     fba:	97 f9       	bld	r25, 7
     fbc:	9f 67       	ori	r25, 0x7F	; 127
     fbe:	80 e8       	ldi	r24, 0x80	; 128
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	08 95       	ret

00000fc6 <__fp_nan>:
     fc6:	9f ef       	ldi	r25, 0xFF	; 255
     fc8:	80 ec       	ldi	r24, 0xC0	; 192
     fca:	08 95       	ret

00000fcc <__fp_pscA>:
     fcc:	00 24       	eor	r0, r0
     fce:	0a 94       	dec	r0
     fd0:	16 16       	cp	r1, r22
     fd2:	17 06       	cpc	r1, r23
     fd4:	18 06       	cpc	r1, r24
     fd6:	09 06       	cpc	r0, r25
     fd8:	08 95       	ret

00000fda <__fp_pscB>:
     fda:	00 24       	eor	r0, r0
     fdc:	0a 94       	dec	r0
     fde:	12 16       	cp	r1, r18
     fe0:	13 06       	cpc	r1, r19
     fe2:	14 06       	cpc	r1, r20
     fe4:	05 06       	cpc	r0, r21
     fe6:	08 95       	ret

00000fe8 <__fp_round>:
     fe8:	09 2e       	mov	r0, r25
     fea:	03 94       	inc	r0
     fec:	00 0c       	add	r0, r0
     fee:	11 f4       	brne	.+4      	; 0xff4 <__fp_round+0xc>
     ff0:	88 23       	and	r24, r24
     ff2:	52 f0       	brmi	.+20     	; 0x1008 <__fp_round+0x20>
     ff4:	bb 0f       	add	r27, r27
     ff6:	40 f4       	brcc	.+16     	; 0x1008 <__fp_round+0x20>
     ff8:	bf 2b       	or	r27, r31
     ffa:	11 f4       	brne	.+4      	; 0x1000 <__fp_round+0x18>
     ffc:	60 ff       	sbrs	r22, 0
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <__fp_round+0x20>
    1000:	6f 5f       	subi	r22, 0xFF	; 255
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	8f 4f       	sbci	r24, 0xFF	; 255
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	08 95       	ret

0000100a <__fp_split3>:
    100a:	57 fd       	sbrc	r21, 7
    100c:	90 58       	subi	r25, 0x80	; 128
    100e:	44 0f       	add	r20, r20
    1010:	55 1f       	adc	r21, r21
    1012:	59 f0       	breq	.+22     	; 0x102a <__fp_splitA+0x10>
    1014:	5f 3f       	cpi	r21, 0xFF	; 255
    1016:	71 f0       	breq	.+28     	; 0x1034 <__fp_splitA+0x1a>
    1018:	47 95       	ror	r20

0000101a <__fp_splitA>:
    101a:	88 0f       	add	r24, r24
    101c:	97 fb       	bst	r25, 7
    101e:	99 1f       	adc	r25, r25
    1020:	61 f0       	breq	.+24     	; 0x103a <__fp_splitA+0x20>
    1022:	9f 3f       	cpi	r25, 0xFF	; 255
    1024:	79 f0       	breq	.+30     	; 0x1044 <__fp_splitA+0x2a>
    1026:	87 95       	ror	r24
    1028:	08 95       	ret
    102a:	12 16       	cp	r1, r18
    102c:	13 06       	cpc	r1, r19
    102e:	14 06       	cpc	r1, r20
    1030:	55 1f       	adc	r21, r21
    1032:	f2 cf       	rjmp	.-28     	; 0x1018 <__fp_split3+0xe>
    1034:	46 95       	lsr	r20
    1036:	f1 df       	rcall	.-30     	; 0x101a <__fp_splitA>
    1038:	08 c0       	rjmp	.+16     	; 0x104a <__fp_splitA+0x30>
    103a:	16 16       	cp	r1, r22
    103c:	17 06       	cpc	r1, r23
    103e:	18 06       	cpc	r1, r24
    1040:	99 1f       	adc	r25, r25
    1042:	f1 cf       	rjmp	.-30     	; 0x1026 <__fp_splitA+0xc>
    1044:	86 95       	lsr	r24
    1046:	71 05       	cpc	r23, r1
    1048:	61 05       	cpc	r22, r1
    104a:	08 94       	sec
    104c:	08 95       	ret

0000104e <__fp_zero>:
    104e:	e8 94       	clt

00001050 <__fp_szero>:
    1050:	bb 27       	eor	r27, r27
    1052:	66 27       	eor	r22, r22
    1054:	77 27       	eor	r23, r23
    1056:	cb 01       	movw	r24, r22
    1058:	97 f9       	bld	r25, 7
    105a:	08 95       	ret

0000105c <__gesf2>:
    105c:	0e 94 b9 07 	call	0xf72	; 0xf72 <__fp_cmp>
    1060:	08 f4       	brcc	.+2      	; 0x1064 <__gesf2+0x8>
    1062:	8f ef       	ldi	r24, 0xFF	; 255
    1064:	08 95       	ret

00001066 <__mulsf3>:
    1066:	0e 94 46 08 	call	0x108c	; 0x108c <__mulsf3x>
    106a:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_round>
    106e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__fp_pscA>
    1072:	38 f0       	brcs	.+14     	; 0x1082 <__mulsf3+0x1c>
    1074:	0e 94 ed 07 	call	0xfda	; 0xfda <__fp_pscB>
    1078:	20 f0       	brcs	.+8      	; 0x1082 <__mulsf3+0x1c>
    107a:	95 23       	and	r25, r21
    107c:	11 f0       	breq	.+4      	; 0x1082 <__mulsf3+0x1c>
    107e:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
    1082:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_nan>
    1086:	11 24       	eor	r1, r1
    1088:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_szero>

0000108c <__mulsf3x>:
    108c:	0e 94 05 08 	call	0x100a	; 0x100a <__fp_split3>
    1090:	70 f3       	brcs	.-36     	; 0x106e <__mulsf3+0x8>

00001092 <__mulsf3_pse>:
    1092:	95 9f       	mul	r25, r21
    1094:	c1 f3       	breq	.-16     	; 0x1086 <__mulsf3+0x20>
    1096:	95 0f       	add	r25, r21
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	55 1f       	adc	r21, r21
    109c:	62 9f       	mul	r22, r18
    109e:	f0 01       	movw	r30, r0
    10a0:	72 9f       	mul	r23, r18
    10a2:	bb 27       	eor	r27, r27
    10a4:	f0 0d       	add	r31, r0
    10a6:	b1 1d       	adc	r27, r1
    10a8:	63 9f       	mul	r22, r19
    10aa:	aa 27       	eor	r26, r26
    10ac:	f0 0d       	add	r31, r0
    10ae:	b1 1d       	adc	r27, r1
    10b0:	aa 1f       	adc	r26, r26
    10b2:	64 9f       	mul	r22, r20
    10b4:	66 27       	eor	r22, r22
    10b6:	b0 0d       	add	r27, r0
    10b8:	a1 1d       	adc	r26, r1
    10ba:	66 1f       	adc	r22, r22
    10bc:	82 9f       	mul	r24, r18
    10be:	22 27       	eor	r18, r18
    10c0:	b0 0d       	add	r27, r0
    10c2:	a1 1d       	adc	r26, r1
    10c4:	62 1f       	adc	r22, r18
    10c6:	73 9f       	mul	r23, r19
    10c8:	b0 0d       	add	r27, r0
    10ca:	a1 1d       	adc	r26, r1
    10cc:	62 1f       	adc	r22, r18
    10ce:	83 9f       	mul	r24, r19
    10d0:	a0 0d       	add	r26, r0
    10d2:	61 1d       	adc	r22, r1
    10d4:	22 1f       	adc	r18, r18
    10d6:	74 9f       	mul	r23, r20
    10d8:	33 27       	eor	r19, r19
    10da:	a0 0d       	add	r26, r0
    10dc:	61 1d       	adc	r22, r1
    10de:	23 1f       	adc	r18, r19
    10e0:	84 9f       	mul	r24, r20
    10e2:	60 0d       	add	r22, r0
    10e4:	21 1d       	adc	r18, r1
    10e6:	82 2f       	mov	r24, r18
    10e8:	76 2f       	mov	r23, r22
    10ea:	6a 2f       	mov	r22, r26
    10ec:	11 24       	eor	r1, r1
    10ee:	9f 57       	subi	r25, 0x7F	; 127
    10f0:	50 40       	sbci	r21, 0x00	; 0
    10f2:	9a f0       	brmi	.+38     	; 0x111a <__mulsf3_pse+0x88>
    10f4:	f1 f0       	breq	.+60     	; 0x1132 <__mulsf3_pse+0xa0>
    10f6:	88 23       	and	r24, r24
    10f8:	4a f0       	brmi	.+18     	; 0x110c <__mulsf3_pse+0x7a>
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	bb 1f       	adc	r27, r27
    1100:	66 1f       	adc	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	91 50       	subi	r25, 0x01	; 1
    1108:	50 40       	sbci	r21, 0x00	; 0
    110a:	a9 f7       	brne	.-22     	; 0x10f6 <__mulsf3_pse+0x64>
    110c:	9e 3f       	cpi	r25, 0xFE	; 254
    110e:	51 05       	cpc	r21, r1
    1110:	80 f0       	brcs	.+32     	; 0x1132 <__mulsf3_pse+0xa0>
    1112:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
    1116:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_szero>
    111a:	5f 3f       	cpi	r21, 0xFF	; 255
    111c:	e4 f3       	brlt	.-8      	; 0x1116 <__mulsf3_pse+0x84>
    111e:	98 3e       	cpi	r25, 0xE8	; 232
    1120:	d4 f3       	brlt	.-12     	; 0x1116 <__mulsf3_pse+0x84>
    1122:	86 95       	lsr	r24
    1124:	77 95       	ror	r23
    1126:	67 95       	ror	r22
    1128:	b7 95       	ror	r27
    112a:	f7 95       	ror	r31
    112c:	e7 95       	ror	r30
    112e:	9f 5f       	subi	r25, 0xFF	; 255
    1130:	c1 f7       	brne	.-16     	; 0x1122 <__mulsf3_pse+0x90>
    1132:	fe 2b       	or	r31, r30
    1134:	88 0f       	add	r24, r24
    1136:	91 1d       	adc	r25, r1
    1138:	96 95       	lsr	r25
    113a:	87 95       	ror	r24
    113c:	97 f9       	bld	r25, 7
    113e:	08 95       	ret

00001140 <pow>:
    1140:	fa 01       	movw	r30, r20
    1142:	ee 0f       	add	r30, r30
    1144:	ff 1f       	adc	r31, r31
    1146:	30 96       	adiw	r30, 0x00	; 0
    1148:	21 05       	cpc	r18, r1
    114a:	31 05       	cpc	r19, r1
    114c:	a1 f1       	breq	.+104    	; 0x11b6 <pow+0x76>
    114e:	61 15       	cp	r22, r1
    1150:	71 05       	cpc	r23, r1
    1152:	61 f4       	brne	.+24     	; 0x116c <pow+0x2c>
    1154:	80 38       	cpi	r24, 0x80	; 128
    1156:	bf e3       	ldi	r27, 0x3F	; 63
    1158:	9b 07       	cpc	r25, r27
    115a:	49 f1       	breq	.+82     	; 0x11ae <pow+0x6e>
    115c:	68 94       	set
    115e:	90 38       	cpi	r25, 0x80	; 128
    1160:	81 05       	cpc	r24, r1
    1162:	61 f0       	breq	.+24     	; 0x117c <pow+0x3c>
    1164:	80 38       	cpi	r24, 0x80	; 128
    1166:	bf ef       	ldi	r27, 0xFF	; 255
    1168:	9b 07       	cpc	r25, r27
    116a:	41 f0       	breq	.+16     	; 0x117c <pow+0x3c>
    116c:	99 23       	and	r25, r25
    116e:	4a f5       	brpl	.+82     	; 0x11c2 <pow+0x82>
    1170:	ff 3f       	cpi	r31, 0xFF	; 255
    1172:	e1 05       	cpc	r30, r1
    1174:	31 05       	cpc	r19, r1
    1176:	21 05       	cpc	r18, r1
    1178:	19 f1       	breq	.+70     	; 0x11c0 <pow+0x80>
    117a:	e8 94       	clt
    117c:	08 94       	sec
    117e:	e7 95       	ror	r30
    1180:	d9 01       	movw	r26, r18
    1182:	aa 23       	and	r26, r26
    1184:	29 f4       	brne	.+10     	; 0x1190 <pow+0x50>
    1186:	ab 2f       	mov	r26, r27
    1188:	be 2f       	mov	r27, r30
    118a:	f8 5f       	subi	r31, 0xF8	; 248
    118c:	d0 f3       	brcs	.-12     	; 0x1182 <pow+0x42>
    118e:	10 c0       	rjmp	.+32     	; 0x11b0 <pow+0x70>
    1190:	ff 5f       	subi	r31, 0xFF	; 255
    1192:	70 f4       	brcc	.+28     	; 0x11b0 <pow+0x70>
    1194:	a6 95       	lsr	r26
    1196:	e0 f7       	brcc	.-8      	; 0x1190 <pow+0x50>
    1198:	f7 39       	cpi	r31, 0x97	; 151
    119a:	50 f0       	brcs	.+20     	; 0x11b0 <pow+0x70>
    119c:	19 f0       	breq	.+6      	; 0x11a4 <pow+0x64>
    119e:	ff 3a       	cpi	r31, 0xAF	; 175
    11a0:	38 f4       	brcc	.+14     	; 0x11b0 <pow+0x70>
    11a2:	9f 77       	andi	r25, 0x7F	; 127
    11a4:	9f 93       	push	r25
    11a6:	0d d0       	rcall	.+26     	; 0x11c2 <pow+0x82>
    11a8:	0f 90       	pop	r0
    11aa:	07 fc       	sbrc	r0, 7
    11ac:	90 58       	subi	r25, 0x80	; 128
    11ae:	08 95       	ret
    11b0:	46 f0       	brts	.+16     	; 0x11c2 <pow+0x82>
    11b2:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_nan>
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	80 e8       	ldi	r24, 0x80	; 128
    11bc:	9f e3       	ldi	r25, 0x3F	; 63
    11be:	08 95       	ret
    11c0:	4f e7       	ldi	r20, 0x7F	; 127
    11c2:	9f 77       	andi	r25, 0x7F	; 127
    11c4:	5f 93       	push	r21
    11c6:	4f 93       	push	r20
    11c8:	3f 93       	push	r19
    11ca:	2f 93       	push	r18
    11cc:	0e 94 35 0a 	call	0x146a	; 0x146a <log>
    11d0:	2f 91       	pop	r18
    11d2:	3f 91       	pop	r19
    11d4:	4f 91       	pop	r20
    11d6:	5f 91       	pop	r21
    11d8:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
    11dc:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <exp>

000011e0 <round>:
    11e0:	0e 94 0d 08 	call	0x101a	; 0x101a <__fp_splitA>
    11e4:	e8 f0       	brcs	.+58     	; 0x1220 <round+0x40>
    11e6:	9e 37       	cpi	r25, 0x7E	; 126
    11e8:	e8 f0       	brcs	.+58     	; 0x1224 <round+0x44>
    11ea:	96 39       	cpi	r25, 0x96	; 150
    11ec:	b8 f4       	brcc	.+46     	; 0x121c <round+0x3c>
    11ee:	9e 38       	cpi	r25, 0x8E	; 142
    11f0:	48 f4       	brcc	.+18     	; 0x1204 <round+0x24>
    11f2:	67 2f       	mov	r22, r23
    11f4:	78 2f       	mov	r23, r24
    11f6:	88 27       	eor	r24, r24
    11f8:	98 5f       	subi	r25, 0xF8	; 248
    11fa:	f9 cf       	rjmp	.-14     	; 0x11ee <round+0xe>
    11fc:	86 95       	lsr	r24
    11fe:	77 95       	ror	r23
    1200:	67 95       	ror	r22
    1202:	93 95       	inc	r25
    1204:	95 39       	cpi	r25, 0x95	; 149
    1206:	d0 f3       	brcs	.-12     	; 0x11fc <round+0x1c>
    1208:	b6 2f       	mov	r27, r22
    120a:	b1 70       	andi	r27, 0x01	; 1
    120c:	6b 0f       	add	r22, r27
    120e:	71 1d       	adc	r23, r1
    1210:	81 1d       	adc	r24, r1
    1212:	20 f4       	brcc	.+8      	; 0x121c <round+0x3c>
    1214:	87 95       	ror	r24
    1216:	77 95       	ror	r23
    1218:	67 95       	ror	r22
    121a:	93 95       	inc	r25
    121c:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_mintl>
    1220:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_mpack>
    1224:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_szero>
    1228:	19 f4       	brne	.+6      	; 0x1230 <round+0x50>
    122a:	16 f4       	brtc	.+4      	; 0x1230 <round+0x50>
    122c:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_nan>
    1230:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_mpack>

00001234 <sqrt>:
    1234:	0e 94 0d 08 	call	0x101a	; 0x101a <__fp_splitA>
    1238:	b8 f3       	brcs	.-18     	; 0x1228 <round+0x48>
    123a:	99 23       	and	r25, r25
    123c:	c9 f3       	breq	.-14     	; 0x1230 <round+0x50>
    123e:	b6 f3       	brts	.-20     	; 0x122c <round+0x4c>
    1240:	9f 57       	subi	r25, 0x7F	; 127
    1242:	55 0b       	sbc	r21, r21
    1244:	87 ff       	sbrs	r24, 7
    1246:	0e 94 bd 09 	call	0x137a	; 0x137a <__fp_norm2>
    124a:	00 24       	eor	r0, r0
    124c:	a0 e6       	ldi	r26, 0x60	; 96
    124e:	40 ea       	ldi	r20, 0xA0	; 160
    1250:	90 01       	movw	r18, r0
    1252:	80 58       	subi	r24, 0x80	; 128
    1254:	56 95       	lsr	r21
    1256:	97 95       	ror	r25
    1258:	28 f4       	brcc	.+10     	; 0x1264 <sqrt+0x30>
    125a:	80 5c       	subi	r24, 0xC0	; 192
    125c:	66 0f       	add	r22, r22
    125e:	77 1f       	adc	r23, r23
    1260:	88 1f       	adc	r24, r24
    1262:	20 f0       	brcs	.+8      	; 0x126c <sqrt+0x38>
    1264:	26 17       	cp	r18, r22
    1266:	37 07       	cpc	r19, r23
    1268:	48 07       	cpc	r20, r24
    126a:	30 f4       	brcc	.+12     	; 0x1278 <sqrt+0x44>
    126c:	62 1b       	sub	r22, r18
    126e:	73 0b       	sbc	r23, r19
    1270:	84 0b       	sbc	r24, r20
    1272:	20 29       	or	r18, r0
    1274:	31 29       	or	r19, r1
    1276:	4a 2b       	or	r20, r26
    1278:	a6 95       	lsr	r26
    127a:	17 94       	ror	r1
    127c:	07 94       	ror	r0
    127e:	20 25       	eor	r18, r0
    1280:	31 25       	eor	r19, r1
    1282:	4a 27       	eor	r20, r26
    1284:	58 f7       	brcc	.-42     	; 0x125c <sqrt+0x28>
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	88 1f       	adc	r24, r24
    128c:	20 f0       	brcs	.+8      	; 0x1296 <sqrt+0x62>
    128e:	26 17       	cp	r18, r22
    1290:	37 07       	cpc	r19, r23
    1292:	48 07       	cpc	r20, r24
    1294:	30 f4       	brcc	.+12     	; 0x12a2 <sqrt+0x6e>
    1296:	62 0b       	sbc	r22, r18
    1298:	73 0b       	sbc	r23, r19
    129a:	84 0b       	sbc	r24, r20
    129c:	20 0d       	add	r18, r0
    129e:	31 1d       	adc	r19, r1
    12a0:	41 1d       	adc	r20, r1
    12a2:	a0 95       	com	r26
    12a4:	81 f7       	brne	.-32     	; 0x1286 <sqrt+0x52>
    12a6:	b9 01       	movw	r22, r18
    12a8:	84 2f       	mov	r24, r20
    12aa:	91 58       	subi	r25, 0x81	; 129
    12ac:	88 0f       	add	r24, r24
    12ae:	96 95       	lsr	r25
    12b0:	87 95       	ror	r24
    12b2:	08 95       	ret
    12b4:	29 f4       	brne	.+10     	; 0x12c0 <sqrt+0x8c>
    12b6:	16 f0       	brts	.+4      	; 0x12bc <sqrt+0x88>
    12b8:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
    12bc:	0c 94 27 08 	jmp	0x104e	; 0x104e <__fp_zero>
    12c0:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_nan>

000012c4 <exp>:
    12c4:	0e 94 0d 08 	call	0x101a	; 0x101a <__fp_splitA>
    12c8:	a8 f3       	brcs	.-22     	; 0x12b4 <sqrt+0x80>
    12ca:	96 38       	cpi	r25, 0x86	; 134
    12cc:	a0 f7       	brcc	.-24     	; 0x12b6 <sqrt+0x82>
    12ce:	07 f8       	bld	r0, 7
    12d0:	0f 92       	push	r0
    12d2:	e8 94       	clt
    12d4:	2b e3       	ldi	r18, 0x3B	; 59
    12d6:	3a ea       	ldi	r19, 0xAA	; 170
    12d8:	48 eb       	ldi	r20, 0xB8	; 184
    12da:	5f e7       	ldi	r21, 0x7F	; 127
    12dc:	0e 94 49 08 	call	0x1092	; 0x1092 <__mulsf3_pse>
    12e0:	0f 92       	push	r0
    12e2:	0f 92       	push	r0
    12e4:	0f 92       	push	r0
    12e6:	4d b7       	in	r20, 0x3d	; 61
    12e8:	5e b7       	in	r21, 0x3e	; 62
    12ea:	0f 92       	push	r0
    12ec:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <modf>
    12f0:	e8 e6       	ldi	r30, 0x68	; 104
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	0e 94 c4 09 	call	0x1388	; 0x1388 <__fp_powser>
    12f8:	4f 91       	pop	r20
    12fa:	5f 91       	pop	r21
    12fc:	ef 91       	pop	r30
    12fe:	ff 91       	pop	r31
    1300:	e5 95       	asr	r30
    1302:	ee 1f       	adc	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	49 f0       	breq	.+18     	; 0x131a <exp+0x56>
    1308:	fe 57       	subi	r31, 0x7E	; 126
    130a:	e0 68       	ori	r30, 0x80	; 128
    130c:	44 27       	eor	r20, r20
    130e:	ee 0f       	add	r30, r30
    1310:	44 1f       	adc	r20, r20
    1312:	fa 95       	dec	r31
    1314:	e1 f7       	brne	.-8      	; 0x130e <exp+0x4a>
    1316:	41 95       	neg	r20
    1318:	55 0b       	sbc	r21, r21
    131a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <ldexp>
    131e:	0f 90       	pop	r0
    1320:	07 fe       	sbrs	r0, 7
    1322:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <inverse>
    1326:	08 95       	ret

00001328 <__fp_mintl>:
    1328:	88 23       	and	r24, r24
    132a:	71 f4       	brne	.+28     	; 0x1348 <__fp_mintl+0x20>
    132c:	77 23       	and	r23, r23
    132e:	21 f0       	breq	.+8      	; 0x1338 <__fp_mintl+0x10>
    1330:	98 50       	subi	r25, 0x08	; 8
    1332:	87 2b       	or	r24, r23
    1334:	76 2f       	mov	r23, r22
    1336:	07 c0       	rjmp	.+14     	; 0x1346 <__fp_mintl+0x1e>
    1338:	66 23       	and	r22, r22
    133a:	11 f4       	brne	.+4      	; 0x1340 <__fp_mintl+0x18>
    133c:	99 27       	eor	r25, r25
    133e:	0d c0       	rjmp	.+26     	; 0x135a <__fp_mintl+0x32>
    1340:	90 51       	subi	r25, 0x10	; 16
    1342:	86 2b       	or	r24, r22
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	2a f0       	brmi	.+10     	; 0x1354 <__fp_mintl+0x2c>
    134a:	9a 95       	dec	r25
    134c:	66 0f       	add	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	da f7       	brpl	.-10     	; 0x134a <__fp_mintl+0x22>
    1354:	88 0f       	add	r24, r24
    1356:	96 95       	lsr	r25
    1358:	87 95       	ror	r24
    135a:	97 f9       	bld	r25, 7
    135c:	08 95       	ret

0000135e <__fp_mpack>:
    135e:	9f 3f       	cpi	r25, 0xFF	; 255
    1360:	31 f0       	breq	.+12     	; 0x136e <__fp_mpack_finite+0xc>

00001362 <__fp_mpack_finite>:
    1362:	91 50       	subi	r25, 0x01	; 1
    1364:	20 f4       	brcc	.+8      	; 0x136e <__fp_mpack_finite+0xc>
    1366:	87 95       	ror	r24
    1368:	77 95       	ror	r23
    136a:	67 95       	ror	r22
    136c:	b7 95       	ror	r27
    136e:	88 0f       	add	r24, r24
    1370:	91 1d       	adc	r25, r1
    1372:	96 95       	lsr	r25
    1374:	87 95       	ror	r24
    1376:	97 f9       	bld	r25, 7
    1378:	08 95       	ret

0000137a <__fp_norm2>:
    137a:	91 50       	subi	r25, 0x01	; 1
    137c:	50 40       	sbci	r21, 0x00	; 0
    137e:	66 0f       	add	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	88 1f       	adc	r24, r24
    1384:	d2 f7       	brpl	.-12     	; 0x137a <__fp_norm2>
    1386:	08 95       	ret

00001388 <__fp_powser>:
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	1f 93       	push	r17
    138e:	0f 93       	push	r16
    1390:	ff 92       	push	r15
    1392:	ef 92       	push	r14
    1394:	df 92       	push	r13
    1396:	7b 01       	movw	r14, r22
    1398:	8c 01       	movw	r16, r24
    139a:	68 94       	set
    139c:	06 c0       	rjmp	.+12     	; 0x13aa <__fp_powser+0x22>
    139e:	da 2e       	mov	r13, r26
    13a0:	ef 01       	movw	r28, r30
    13a2:	0e 94 46 08 	call	0x108c	; 0x108c <__mulsf3x>
    13a6:	fe 01       	movw	r30, r28
    13a8:	e8 94       	clt
    13aa:	a5 91       	lpm	r26, Z+
    13ac:	25 91       	lpm	r18, Z+
    13ae:	35 91       	lpm	r19, Z+
    13b0:	45 91       	lpm	r20, Z+
    13b2:	55 91       	lpm	r21, Z+
    13b4:	a6 f3       	brts	.-24     	; 0x139e <__fp_powser+0x16>
    13b6:	ef 01       	movw	r28, r30
    13b8:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__addsf3x>
    13bc:	fe 01       	movw	r30, r28
    13be:	97 01       	movw	r18, r14
    13c0:	a8 01       	movw	r20, r16
    13c2:	da 94       	dec	r13
    13c4:	69 f7       	brne	.-38     	; 0x13a0 <__fp_powser+0x18>
    13c6:	df 90       	pop	r13
    13c8:	ef 90       	pop	r14
    13ca:	ff 90       	pop	r15
    13cc:	0f 91       	pop	r16
    13ce:	1f 91       	pop	r17
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <inverse>:
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	80 e8       	ldi	r24, 0x80	; 128
    13e0:	9f e3       	ldi	r25, 0x3F	; 63
    13e2:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <__divsf3>
    13e6:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>
    13ea:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_mpack>

000013ee <ldexp>:
    13ee:	0e 94 0d 08 	call	0x101a	; 0x101a <__fp_splitA>
    13f2:	d8 f3       	brcs	.-10     	; 0x13ea <inverse+0x14>
    13f4:	99 23       	and	r25, r25
    13f6:	c9 f3       	breq	.-14     	; 0x13ea <inverse+0x14>
    13f8:	94 0f       	add	r25, r20
    13fa:	51 1d       	adc	r21, r1
    13fc:	a3 f3       	brvs	.-24     	; 0x13e6 <inverse+0x10>
    13fe:	91 50       	subi	r25, 0x01	; 1
    1400:	50 40       	sbci	r21, 0x00	; 0
    1402:	94 f0       	brlt	.+36     	; 0x1428 <ldexp+0x3a>
    1404:	59 f0       	breq	.+22     	; 0x141c <ldexp+0x2e>
    1406:	88 23       	and	r24, r24
    1408:	32 f0       	brmi	.+12     	; 0x1416 <ldexp+0x28>
    140a:	66 0f       	add	r22, r22
    140c:	77 1f       	adc	r23, r23
    140e:	88 1f       	adc	r24, r24
    1410:	91 50       	subi	r25, 0x01	; 1
    1412:	50 40       	sbci	r21, 0x00	; 0
    1414:	c1 f7       	brne	.-16     	; 0x1406 <ldexp+0x18>
    1416:	9e 3f       	cpi	r25, 0xFE	; 254
    1418:	51 05       	cpc	r21, r1
    141a:	2c f7       	brge	.-54     	; 0x13e6 <inverse+0x10>
    141c:	88 0f       	add	r24, r24
    141e:	91 1d       	adc	r25, r1
    1420:	96 95       	lsr	r25
    1422:	87 95       	ror	r24
    1424:	97 f9       	bld	r25, 7
    1426:	08 95       	ret
    1428:	5f 3f       	cpi	r21, 0xFF	; 255
    142a:	ac f0       	brlt	.+42     	; 0x1456 <ldexp+0x68>
    142c:	98 3e       	cpi	r25, 0xE8	; 232
    142e:	9c f0       	brlt	.+38     	; 0x1456 <ldexp+0x68>
    1430:	bb 27       	eor	r27, r27
    1432:	86 95       	lsr	r24
    1434:	77 95       	ror	r23
    1436:	67 95       	ror	r22
    1438:	b7 95       	ror	r27
    143a:	08 f4       	brcc	.+2      	; 0x143e <ldexp+0x50>
    143c:	b1 60       	ori	r27, 0x01	; 1
    143e:	93 95       	inc	r25
    1440:	c1 f7       	brne	.-16     	; 0x1432 <ldexp+0x44>
    1442:	bb 0f       	add	r27, r27
    1444:	58 f7       	brcc	.-42     	; 0x141c <ldexp+0x2e>
    1446:	11 f4       	brne	.+4      	; 0x144c <ldexp+0x5e>
    1448:	60 ff       	sbrs	r22, 0
    144a:	e8 cf       	rjmp	.-48     	; 0x141c <ldexp+0x2e>
    144c:	6f 5f       	subi	r22, 0xFF	; 255
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	8f 4f       	sbci	r24, 0xFF	; 255
    1452:	9f 4f       	sbci	r25, 0xFF	; 255
    1454:	e3 cf       	rjmp	.-58     	; 0x141c <ldexp+0x2e>
    1456:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_szero>
    145a:	16 f0       	brts	.+4      	; 0x1460 <ldexp+0x72>
    145c:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_mpack>
    1460:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_nan>
    1464:	68 94       	set
    1466:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_inf>

0000146a <log>:
    146a:	0e 94 0d 08 	call	0x101a	; 0x101a <__fp_splitA>
    146e:	a8 f3       	brcs	.-22     	; 0x145a <ldexp+0x6c>
    1470:	99 23       	and	r25, r25
    1472:	c1 f3       	breq	.-16     	; 0x1464 <ldexp+0x76>
    1474:	ae f3       	brts	.-22     	; 0x1460 <ldexp+0x72>
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	1f 93       	push	r17
    147c:	0f 93       	push	r16
    147e:	ff 92       	push	r15
    1480:	c9 2f       	mov	r28, r25
    1482:	dd 27       	eor	r29, r29
    1484:	88 23       	and	r24, r24
    1486:	2a f0       	brmi	.+10     	; 0x1492 <log+0x28>
    1488:	21 97       	sbiw	r28, 0x01	; 1
    148a:	66 0f       	add	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	88 1f       	adc	r24, r24
    1490:	da f7       	brpl	.-10     	; 0x1488 <log+0x1e>
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e8       	ldi	r20, 0x80	; 128
    1498:	5f eb       	ldi	r21, 0xBF	; 191
    149a:	9f e3       	ldi	r25, 0x3F	; 63
    149c:	88 39       	cpi	r24, 0x98	; 152
    149e:	20 f0       	brcs	.+8      	; 0x14a8 <log+0x3e>
    14a0:	80 3e       	cpi	r24, 0xE0	; 224
    14a2:	38 f0       	brcs	.+14     	; 0x14b2 <log+0x48>
    14a4:	21 96       	adiw	r28, 0x01	; 1
    14a6:	8f 77       	andi	r24, 0x7F	; 127
    14a8:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__addsf3>
    14ac:	e0 e9       	ldi	r30, 0x90	; 144
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	04 c0       	rjmp	.+8      	; 0x14ba <log+0x50>
    14b2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__addsf3>
    14b6:	ed eb       	ldi	r30, 0xBD	; 189
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	0e 94 c4 09 	call	0x1388	; 0x1388 <__fp_powser>
    14be:	8b 01       	movw	r16, r22
    14c0:	be 01       	movw	r22, r28
    14c2:	ec 01       	movw	r28, r24
    14c4:	fb 2e       	mov	r15, r27
    14c6:	6f 57       	subi	r22, 0x7F	; 127
    14c8:	71 09       	sbc	r23, r1
    14ca:	75 95       	asr	r23
    14cc:	77 1f       	adc	r23, r23
    14ce:	88 0b       	sbc	r24, r24
    14d0:	99 0b       	sbc	r25, r25
    14d2:	0e 94 7e 07 	call	0xefc	; 0xefc <__floatsisf>
    14d6:	28 e1       	ldi	r18, 0x18	; 24
    14d8:	32 e7       	ldi	r19, 0x72	; 114
    14da:	41 e3       	ldi	r20, 0x31	; 49
    14dc:	5f e3       	ldi	r21, 0x3F	; 63
    14de:	0e 94 46 08 	call	0x108c	; 0x108c <__mulsf3x>
    14e2:	af 2d       	mov	r26, r15
    14e4:	98 01       	movw	r18, r16
    14e6:	ae 01       	movw	r20, r28
    14e8:	ff 90       	pop	r15
    14ea:	0f 91       	pop	r16
    14ec:	1f 91       	pop	r17
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__addsf3x>
    14f6:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_round>

000014fa <modf>:
    14fa:	fa 01       	movw	r30, r20
    14fc:	dc 01       	movw	r26, r24
    14fe:	aa 0f       	add	r26, r26
    1500:	bb 1f       	adc	r27, r27
    1502:	9b 01       	movw	r18, r22
    1504:	ac 01       	movw	r20, r24
    1506:	bf 57       	subi	r27, 0x7F	; 127
    1508:	28 f4       	brcc	.+10     	; 0x1514 <modf+0x1a>
    150a:	22 27       	eor	r18, r18
    150c:	33 27       	eor	r19, r19
    150e:	44 27       	eor	r20, r20
    1510:	50 78       	andi	r21, 0x80	; 128
    1512:	20 c0       	rjmp	.+64     	; 0x1554 <modf+0x5a>
    1514:	b7 51       	subi	r27, 0x17	; 23
    1516:	90 f4       	brcc	.+36     	; 0x153c <modf+0x42>
    1518:	ab 2f       	mov	r26, r27
    151a:	00 24       	eor	r0, r0
    151c:	46 95       	lsr	r20
    151e:	37 95       	ror	r19
    1520:	27 95       	ror	r18
    1522:	01 1c       	adc	r0, r1
    1524:	a3 95       	inc	r26
    1526:	d2 f3       	brmi	.-12     	; 0x151c <modf+0x22>
    1528:	00 20       	and	r0, r0
    152a:	71 f0       	breq	.+28     	; 0x1548 <modf+0x4e>
    152c:	22 0f       	add	r18, r18
    152e:	33 1f       	adc	r19, r19
    1530:	44 1f       	adc	r20, r20
    1532:	b3 95       	inc	r27
    1534:	da f3       	brmi	.-10     	; 0x152c <modf+0x32>
    1536:	0e d0       	rcall	.+28     	; 0x1554 <modf+0x5a>
    1538:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__subsf3>
    153c:	61 30       	cpi	r22, 0x01	; 1
    153e:	71 05       	cpc	r23, r1
    1540:	a0 e8       	ldi	r26, 0x80	; 128
    1542:	8a 07       	cpc	r24, r26
    1544:	b9 46       	sbci	r27, 0x69	; 105
    1546:	30 f4       	brcc	.+12     	; 0x1554 <modf+0x5a>
    1548:	9b 01       	movw	r18, r22
    154a:	ac 01       	movw	r20, r24
    154c:	66 27       	eor	r22, r22
    154e:	77 27       	eor	r23, r23
    1550:	88 27       	eor	r24, r24
    1552:	90 78       	andi	r25, 0x80	; 128
    1554:	30 96       	adiw	r30, 0x00	; 0
    1556:	21 f0       	breq	.+8      	; 0x1560 <modf+0x66>
    1558:	20 83       	st	Z, r18
    155a:	31 83       	std	Z+1, r19	; 0x01
    155c:	42 83       	std	Z+2, r20	; 0x02
    155e:	53 83       	std	Z+3, r21	; 0x03
    1560:	08 95       	ret

00001562 <__udivmodsi4>:
    1562:	a1 e2       	ldi	r26, 0x21	; 33
    1564:	1a 2e       	mov	r1, r26
    1566:	aa 1b       	sub	r26, r26
    1568:	bb 1b       	sub	r27, r27
    156a:	fd 01       	movw	r30, r26
    156c:	0d c0       	rjmp	.+26     	; 0x1588 <__udivmodsi4_ep>

0000156e <__udivmodsi4_loop>:
    156e:	aa 1f       	adc	r26, r26
    1570:	bb 1f       	adc	r27, r27
    1572:	ee 1f       	adc	r30, r30
    1574:	ff 1f       	adc	r31, r31
    1576:	a2 17       	cp	r26, r18
    1578:	b3 07       	cpc	r27, r19
    157a:	e4 07       	cpc	r30, r20
    157c:	f5 07       	cpc	r31, r21
    157e:	20 f0       	brcs	.+8      	; 0x1588 <__udivmodsi4_ep>
    1580:	a2 1b       	sub	r26, r18
    1582:	b3 0b       	sbc	r27, r19
    1584:	e4 0b       	sbc	r30, r20
    1586:	f5 0b       	sbc	r31, r21

00001588 <__udivmodsi4_ep>:
    1588:	66 1f       	adc	r22, r22
    158a:	77 1f       	adc	r23, r23
    158c:	88 1f       	adc	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	1a 94       	dec	r1
    1592:	69 f7       	brne	.-38     	; 0x156e <__udivmodsi4_loop>
    1594:	60 95       	com	r22
    1596:	70 95       	com	r23
    1598:	80 95       	com	r24
    159a:	90 95       	com	r25
    159c:	9b 01       	movw	r18, r22
    159e:	ac 01       	movw	r20, r24
    15a0:	bd 01       	movw	r22, r26
    15a2:	cf 01       	movw	r24, r30
    15a4:	08 95       	ret

000015a6 <__umulhisi3>:
    15a6:	a2 9f       	mul	r26, r18
    15a8:	b0 01       	movw	r22, r0
    15aa:	b3 9f       	mul	r27, r19
    15ac:	c0 01       	movw	r24, r0
    15ae:	a3 9f       	mul	r26, r19
    15b0:	70 0d       	add	r23, r0
    15b2:	81 1d       	adc	r24, r1
    15b4:	11 24       	eor	r1, r1
    15b6:	91 1d       	adc	r25, r1
    15b8:	b2 9f       	mul	r27, r18
    15ba:	70 0d       	add	r23, r0
    15bc:	81 1d       	adc	r24, r1
    15be:	11 24       	eor	r1, r1
    15c0:	91 1d       	adc	r25, r1
    15c2:	08 95       	ret

000015c4 <_exit>:
    15c4:	f8 94       	cli

000015c6 <__stop_program>:
    15c6:	ff cf       	rjmp	.-2      	; 0x15c6 <__stop_program>
