
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000179a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001726  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000179a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000179a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca7  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000408  00000000  00000000  00002583  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ba  00000000  00000000  0000298b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00003248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000411  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001158  00000000  00000000  00003925  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004a7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__vector_1>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__vector_11>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <voltage_real+0x64>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
      f6:	21 e0       	ldi	r18, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a6 30       	cpi	r26, 0x06	; 6
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 8f 04 	call	0x91e	; 0x91e <main>
     10a:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <uart_init>:

 // Approximates a data value based on the two nearest data points
 float linearApproximate(float higher, float lower) {
	float approximation = (higher + lower) / 2;
	return approximation;
 }
     112:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     116:	87 e6       	ldi	r24, 0x67	; 103
     118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     11c:	e1 ec       	ldi	r30, 0xC1	; 193
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	88 60       	ori	r24, 0x08	; 8
     124:	80 83       	st	Z, r24
     126:	e2 ec       	ldi	r30, 0xC2	; 194
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	86 60       	ori	r24, 0x06	; 6
     12e:	80 83       	st	Z, r24
     130:	08 95       	ret

00000132 <uart_transmit>:
     132:	e0 ec       	ldi	r30, 0xC0	; 192
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	90 81       	ld	r25, Z
     138:	99 23       	and	r25, r25
     13a:	e9 f3       	breq	.-6      	; 0x136 <uart_transmit+0x4>
     13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     140:	08 95       	ret

00000142 <timer0_init>:
     142:	85 b5       	in	r24, 0x25	; 37
     144:	85 60       	ori	r24, 0x05	; 5
     146:	85 bd       	out	0x25, r24	; 37
     148:	16 bc       	out	0x26, r1	; 38
     14a:	08 95       	ret

0000014c <timer1_init>:
     14c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     150:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     154:	e1 e8       	ldi	r30, 0x81	; 129
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	88 60       	ori	r24, 0x08	; 8
     15c:	80 83       	st	Z, r24
     15e:	af e6       	ldi	r26, 0x6F	; 111
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	8c 91       	ld	r24, X
     164:	82 60       	ori	r24, 0x02	; 2
     166:	8c 93       	st	X, r24
     168:	80 81       	ld	r24, Z
     16a:	85 60       	ori	r24, 0x05	; 5
     16c:	80 83       	st	Z, r24
     16e:	08 95       	ret

00000170 <int_init>:
     170:	e9 e6       	ldi	r30, 0x69	; 105
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	83 60       	ori	r24, 0x03	; 3
     178:	80 83       	st	Z, r24
     17a:	e8 9a       	sbi	0x1d, 0	; 29
     17c:	08 95       	ret

0000017e <find_decimal>:
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	6b 01       	movw	r12, r22
     188:	7c 01       	movw	r14, r24
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 e2       	ldi	r20, 0x20	; 32
     190:	51 e4       	ldi	r21, 0x41	; 65
     192:	0e 94 7e 07 	call	0xefc	; 0xefc <__cmpsf2>
     196:	88 23       	and	r24, r24
     198:	b4 f0       	brlt	.+44     	; 0x1c6 <find_decimal+0x48>
     19a:	20 e0       	ldi	r18, 0x00	; 0
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	48 ec       	ldi	r20, 0xC8	; 200
     1a0:	52 e4       	ldi	r21, 0x42	; 66
     1a2:	c7 01       	movw	r24, r14
     1a4:	b6 01       	movw	r22, r12
     1a6:	0e 94 7e 07 	call	0xefc	; 0xefc <__cmpsf2>
     1aa:	08 2e       	mov	r0, r24
     1ac:	00 0c       	add	r0, r0
     1ae:	99 0b       	sbc	r25, r25
     1b0:	88 27       	eor	r24, r24
     1b2:	99 0f       	add	r25, r25
     1b4:	88 1f       	adc	r24, r24
     1b6:	99 27       	eor	r25, r25
     1b8:	22 e0       	ldi	r18, 0x02	; 2
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	a9 01       	movw	r20, r18
     1be:	48 1b       	sub	r20, r24
     1c0:	59 0b       	sbc	r21, r25
     1c2:	ca 01       	movw	r24, r20
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <find_decimal+0x4c>
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	08 95       	ret

000001d4 <wololo>:
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	41 30       	cpi	r20, 0x01	; 1
     1d8:	09 f4       	brne	.+2      	; 0x1dc <wololo+0x8>
     1da:	40 96       	adiw	r24, 0x10	; 16
     1dc:	61 11       	cpse	r22, r1
     1de:	03 c0       	rjmp	.+6      	; 0x1e6 <wololo+0x12>
     1e0:	80 5a       	subi	r24, 0xA0	; 160
     1e2:	9f 4f       	sbci	r25, 0xFF	; 255
     1e4:	08 95       	ret
     1e6:	61 30       	cpi	r22, 0x01	; 1
     1e8:	19 f4       	brne	.+6      	; 0x1f0 <wololo+0x1c>
     1ea:	80 5c       	subi	r24, 0xC0	; 192
     1ec:	9f 4f       	sbci	r25, 0xFF	; 255
     1ee:	08 95       	ret
     1f0:	62 30       	cpi	r22, 0x02	; 2
     1f2:	09 f4       	brne	.+2      	; 0x1f6 <wololo+0x22>
     1f4:	80 96       	adiw	r24, 0x20	; 32
     1f6:	08 95       	ret

000001f8 <calcPower>:
     1f8:	4f 92       	push	r4
     1fa:	5f 92       	push	r5
     1fc:	6f 92       	push	r6
     1fe:	7f 92       	push	r7
     200:	8f 92       	push	r8
     202:	9f 92       	push	r9
     204:	af 92       	push	r10
     206:	bf 92       	push	r11
     208:	cf 92       	push	r12
     20a:	df 92       	push	r13
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	cd b7       	in	r28, 0x3d	; 61
     21a:	de b7       	in	r29, 0x3e	; 62
     21c:	c8 5e       	subi	r28, 0xE8	; 232
     21e:	d1 09       	sbc	r29, r1
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	f8 94       	cli
     224:	de bf       	out	0x3e, r29	; 62
     226:	0f be       	out	0x3f, r0	; 63
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	fe 01       	movw	r30, r28
     22c:	31 96       	adiw	r30, 0x01	; 1
     22e:	e6 2e       	mov	r14, r22
     230:	f7 2e       	mov	r15, r23
     232:	9e 01       	movw	r18, r28
     234:	27 5d       	subi	r18, 0xD7	; 215
     236:	3f 4f       	sbci	r19, 0xFF	; 255
     238:	89 01       	movw	r16, r18
     23a:	dc 01       	movw	r26, r24
     23c:	4d 91       	ld	r20, X+
     23e:	5d 91       	ld	r21, X+
     240:	6d 91       	ld	r22, X+
     242:	7d 91       	ld	r23, X+
     244:	cd 01       	movw	r24, r26
     246:	41 93       	st	Z+, r20
     248:	51 93       	st	Z+, r21
     24a:	61 93       	st	Z+, r22
     24c:	71 93       	st	Z+, r23
     24e:	d7 01       	movw	r26, r14
     250:	4d 91       	ld	r20, X+
     252:	5d 91       	ld	r21, X+
     254:	6d 91       	ld	r22, X+
     256:	7d 91       	ld	r23, X+
     258:	7d 01       	movw	r14, r26
     25a:	d9 01       	movw	r26, r18
     25c:	4d 93       	st	X+, r20
     25e:	5d 93       	st	X+, r21
     260:	6d 93       	st	X+, r22
     262:	7d 93       	st	X+, r23
     264:	9d 01       	movw	r18, r26
     266:	e0 17       	cp	r30, r16
     268:	f1 07       	cpc	r31, r17
     26a:	39 f7       	brne	.-50     	; 0x23a <calcPower+0x42>
     26c:	4e 01       	movw	r8, r28
     26e:	bd e9       	ldi	r27, 0x9D	; 157
     270:	8b 0e       	add	r8, r27
     272:	91 1c       	adc	r9, r1
     274:	7e 01       	movw	r14, r28
     276:	e1 e5       	ldi	r30, 0x51	; 81
     278:	ee 0e       	add	r14, r30
     27a:	f1 1c       	adc	r15, r1
     27c:	57 01       	movw	r10, r14
     27e:	64 01       	movw	r12, r8
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	10 e0       	ldi	r17, 0x00	; 0
     284:	38 01       	movw	r6, r16
     286:	00 fd       	sbrc	r16, 0
     288:	61 c0       	rjmp	.+194    	; 0x34c <calcPower+0x154>
     28a:	c8 01       	movw	r24, r16
     28c:	11 23       	and	r17, r17
     28e:	0c f4       	brge	.+2      	; 0x292 <calcPower+0x9a>
     290:	01 96       	adiw	r24, 0x01	; 1
     292:	95 95       	asr	r25
     294:	87 95       	ror	r24
     296:	fc 01       	movw	r30, r24
     298:	ee 0f       	add	r30, r30
     29a:	ff 1f       	adc	r31, r31
     29c:	ee 0f       	add	r30, r30
     29e:	ff 1f       	adc	r31, r31
     2a0:	21 e0       	ldi	r18, 0x01	; 1
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	2c 0f       	add	r18, r28
     2a6:	3d 1f       	adc	r19, r29
     2a8:	e2 0f       	add	r30, r18
     2aa:	f3 1f       	adc	r31, r19
     2ac:	40 81       	ld	r20, Z
     2ae:	51 81       	ldd	r21, Z+1	; 0x01
     2b0:	62 81       	ldd	r22, Z+2	; 0x02
     2b2:	73 81       	ldd	r23, Z+3	; 0x03
     2b4:	d5 01       	movw	r26, r10
     2b6:	4d 93       	st	X+, r20
     2b8:	5d 93       	st	X+, r21
     2ba:	6d 93       	st	X+, r22
     2bc:	7c 93       	st	X, r23
     2be:	13 97       	sbiw	r26, 0x03	; 3
     2c0:	01 15       	cp	r16, r1
     2c2:	11 05       	cpc	r17, r1
     2c4:	19 f0       	breq	.+6      	; 0x2cc <calcPower+0xd4>
     2c6:	02 31       	cpi	r16, 0x12	; 18
     2c8:	11 05       	cpc	r17, r1
     2ca:	a1 f4       	brne	.+40     	; 0x2f4 <calcPower+0xfc>
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	e1 e0       	ldi	r30, 0x01	; 1
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	ec 0f       	add	r30, r28
     2da:	fd 1f       	adc	r31, r29
     2dc:	e8 0f       	add	r30, r24
     2de:	f9 1f       	adc	r31, r25
     2e0:	80 a5       	ldd	r24, Z+40	; 0x28
     2e2:	91 a5       	ldd	r25, Z+41	; 0x29
     2e4:	a2 a5       	ldd	r26, Z+42	; 0x2a
     2e6:	b3 a5       	ldd	r27, Z+43	; 0x2b
     2e8:	f6 01       	movw	r30, r12
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
     2f2:	7e c0       	rjmp	.+252    	; 0x3f0 <calcPower+0x1f8>
     2f4:	dc 01       	movw	r26, r24
     2f6:	11 97       	sbiw	r26, 0x01	; 1
     2f8:	aa 0f       	add	r26, r26
     2fa:	bb 1f       	adc	r27, r27
     2fc:	aa 0f       	add	r26, r26
     2fe:	bb 1f       	adc	r27, r27
     300:	21 e0       	ldi	r18, 0x01	; 1
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	2c 0f       	add	r18, r28
     306:	3d 1f       	adc	r19, r29
     308:	a2 0f       	add	r26, r18
     30a:	b3 1f       	adc	r27, r19
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	f9 01       	movw	r30, r18
     316:	e8 0f       	add	r30, r24
     318:	f9 1f       	adc	r31, r25
     31a:	20 a5       	ldd	r18, Z+40	; 0x28
     31c:	31 a5       	ldd	r19, Z+41	; 0x29
     31e:	42 a5       	ldd	r20, Z+42	; 0x2a
     320:	53 a5       	ldd	r21, Z+43	; 0x2b
     322:	98 96       	adiw	r26, 0x28	; 40
     324:	6d 91       	ld	r22, X+
     326:	7d 91       	ld	r23, X+
     328:	8d 91       	ld	r24, X+
     32a:	9c 91       	ld	r25, X
     32c:	9b 97       	sbiw	r26, 0x2b	; 43
     32e:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3>
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	5f e3       	ldi	r21, 0x3F	; 63
     33a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     33e:	d6 01       	movw	r26, r12
     340:	6d 93       	st	X+, r22
     342:	7d 93       	st	X+, r23
     344:	8d 93       	st	X+, r24
     346:	9c 93       	st	X, r25
     348:	13 97       	sbiw	r26, 0x03	; 3
     34a:	52 c0       	rjmp	.+164    	; 0x3f0 <calcPower+0x1f8>
     34c:	98 01       	movw	r18, r16
     34e:	2f 5f       	subi	r18, 0xFF	; 255
     350:	3f 4f       	sbci	r19, 0xFF	; 255
     352:	c9 01       	movw	r24, r18
     354:	99 23       	and	r25, r25
     356:	0c f4       	brge	.+2      	; 0x35a <calcPower+0x162>
     358:	01 96       	adiw	r24, 0x01	; 1
     35a:	95 95       	asr	r25
     35c:	87 95       	ror	r24
     35e:	dc 01       	movw	r26, r24
     360:	11 97       	sbiw	r26, 0x01	; 1
     362:	aa 0f       	add	r26, r26
     364:	bb 1f       	adc	r27, r27
     366:	aa 0f       	add	r26, r26
     368:	bb 1f       	adc	r27, r27
     36a:	e1 e0       	ldi	r30, 0x01	; 1
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	ec 0f       	add	r30, r28
     370:	fd 1f       	adc	r31, r29
     372:	ae 0f       	add	r26, r30
     374:	bf 1f       	adc	r27, r31
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	e1 e0       	ldi	r30, 0x01	; 1
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	ec 0f       	add	r30, r28
     384:	fd 1f       	adc	r31, r29
     386:	e8 0f       	add	r30, r24
     388:	f9 1f       	adc	r31, r25
     38a:	20 81       	ld	r18, Z
     38c:	31 81       	ldd	r19, Z+1	; 0x01
     38e:	42 81       	ldd	r20, Z+2	; 0x02
     390:	53 81       	ldd	r21, Z+3	; 0x03
     392:	6d 91       	ld	r22, X+
     394:	7d 91       	ld	r23, X+
     396:	8d 91       	ld	r24, X+
     398:	9c 91       	ld	r25, X
     39a:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3>
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	5f e3       	ldi	r21, 0x3F	; 63
     3a6:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     3aa:	d5 01       	movw	r26, r10
     3ac:	6d 93       	st	X+, r22
     3ae:	7d 93       	st	X+, r23
     3b0:	8d 93       	st	X+, r24
     3b2:	9c 93       	st	X, r25
     3b4:	13 97       	sbiw	r26, 0x03	; 3
     3b6:	b1 e0       	ldi	r27, 0x01	; 1
     3b8:	6b 1a       	sub	r6, r27
     3ba:	71 08       	sbc	r7, r1
     3bc:	c3 01       	movw	r24, r6
     3be:	99 23       	and	r25, r25
     3c0:	0c f4       	brge	.+2      	; 0x3c4 <calcPower+0x1cc>
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	fc 01       	movw	r30, r24
     3c6:	f5 95       	asr	r31
     3c8:	e7 95       	ror	r30
     3ca:	ee 0f       	add	r30, r30
     3cc:	ff 1f       	adc	r31, r31
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	21 e0       	ldi	r18, 0x01	; 1
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	2c 0f       	add	r18, r28
     3d8:	3d 1f       	adc	r19, r29
     3da:	e2 0f       	add	r30, r18
     3dc:	f3 1f       	adc	r31, r19
     3de:	80 a5       	ldd	r24, Z+40	; 0x28
     3e0:	91 a5       	ldd	r25, Z+41	; 0x29
     3e2:	a2 a5       	ldd	r26, Z+42	; 0x2a
     3e4:	b3 a5       	ldd	r27, Z+43	; 0x2b
     3e6:	f6 01       	movw	r30, r12
     3e8:	80 83       	st	Z, r24
     3ea:	91 83       	std	Z+1, r25	; 0x01
     3ec:	a2 83       	std	Z+2, r26	; 0x02
     3ee:	b3 83       	std	Z+3, r27	; 0x03
     3f0:	0f 5f       	subi	r16, 0xFF	; 255
     3f2:	1f 4f       	sbci	r17, 0xFF	; 255
     3f4:	f4 e0       	ldi	r31, 0x04	; 4
     3f6:	cf 0e       	add	r12, r31
     3f8:	d1 1c       	adc	r13, r1
     3fa:	24 e0       	ldi	r18, 0x04	; 4
     3fc:	a2 0e       	add	r10, r18
     3fe:	b1 1c       	adc	r11, r1
     400:	03 31       	cpi	r16, 0x13	; 19
     402:	11 05       	cpc	r17, r1
     404:	09 f0       	breq	.+2      	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
     406:	3e cf       	rjmp	.-388    	; 0x284 <calcPower+0x8c>
     408:	8e 01       	movw	r16, r28
     40a:	03 56       	subi	r16, 0x63	; 99
     40c:	1f 4f       	sbci	r17, 0xFF	; 255
     40e:	41 2c       	mov	r4, r1
     410:	51 2c       	mov	r5, r1
     412:	32 01       	movw	r6, r4
     414:	d7 01       	movw	r26, r14
     416:	6d 91       	ld	r22, X+
     418:	7d 91       	ld	r23, X+
     41a:	8d 91       	ld	r24, X+
     41c:	9d 91       	ld	r25, X+
     41e:	7d 01       	movw	r14, r26
     420:	f4 01       	movw	r30, r8
     422:	21 91       	ld	r18, Z+
     424:	31 91       	ld	r19, Z+
     426:	41 91       	ld	r20, Z+
     428:	51 91       	ld	r21, Z+
     42a:	4f 01       	movw	r8, r30
     42c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     430:	9b 01       	movw	r18, r22
     432:	ac 01       	movw	r20, r24
     434:	c3 01       	movw	r24, r6
     436:	b2 01       	movw	r22, r4
     438:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3>
     43c:	2b 01       	movw	r4, r22
     43e:	3c 01       	movw	r6, r24
     440:	e0 16       	cp	r14, r16
     442:	f1 06       	cpc	r15, r17
     444:	39 f7       	brne	.-50     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	48 e9       	ldi	r20, 0x98	; 152
     44c:	51 e4       	ldi	r21, 0x41	; 65
     44e:	0e 94 83 07 	call	0xf06	; 0xf06 <__divsf3>
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	48 e5       	ldi	r20, 0x58	; 88
     458:	51 e4       	ldi	r21, 0x41	; 65
     45a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     45e:	c8 51       	subi	r28, 0x18	; 24
     460:	df 4f       	sbci	r29, 0xFF	; 255
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	de bf       	out	0x3e, r29	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	cd bf       	out	0x3d, r28	; 61
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	df 90       	pop	r13
     47a:	cf 90       	pop	r12
     47c:	bf 90       	pop	r11
     47e:	af 90       	pop	r10
     480:	9f 90       	pop	r9
     482:	8f 90       	pop	r8
     484:	7f 90       	pop	r7
     486:	6f 90       	pop	r6
     488:	5f 90       	pop	r5
     48a:	4f 90       	pop	r4
     48c:	08 95       	ret

0000048e <calcVoltageRMS>:
     48e:	8f 92       	push	r8
     490:	9f 92       	push	r9
     492:	af 92       	push	r10
     494:	bf 92       	push	r11
     496:	cf 92       	push	r12
     498:	df 92       	push	r13
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	c4 57       	subi	r28, 0x74	; 116
     4ac:	d1 09       	sbc	r29, r1
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	fc 01       	movw	r30, r24
     4ba:	de 01       	movw	r26, r28
     4bc:	11 96       	adiw	r26, 0x01	; 1
     4be:	88 96       	adiw	r24, 0x28	; 40
     4c0:	41 91       	ld	r20, Z+
     4c2:	51 91       	ld	r21, Z+
     4c4:	61 91       	ld	r22, Z+
     4c6:	71 91       	ld	r23, Z+
     4c8:	4d 93       	st	X+, r20
     4ca:	5d 93       	st	X+, r21
     4cc:	6d 93       	st	X+, r22
     4ce:	7d 93       	st	X+, r23
     4d0:	e8 17       	cp	r30, r24
     4d2:	f9 07       	cpc	r31, r25
     4d4:	a9 f7       	brne	.-22     	; 0x4c0 <calcVoltageRMS+0x32>
     4d6:	7e 01       	movw	r14, r28
     4d8:	29 e2       	ldi	r18, 0x29	; 41
     4da:	e2 0e       	add	r14, r18
     4dc:	f1 1c       	adc	r15, r1
     4de:	67 01       	movw	r12, r14
     4e0:	00 e0       	ldi	r16, 0x00	; 0
     4e2:	10 e0       	ldi	r17, 0x00	; 0
     4e4:	00 fd       	sbrc	r16, 0
     4e6:	1b c0       	rjmp	.+54     	; 0x51e <calcVoltageRMS+0x90>
     4e8:	c8 01       	movw	r24, r16
     4ea:	11 23       	and	r17, r17
     4ec:	0c f4       	brge	.+2      	; 0x4f0 <calcVoltageRMS+0x62>
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	fc 01       	movw	r30, r24
     4f2:	f5 95       	asr	r31
     4f4:	e7 95       	ror	r30
     4f6:	ee 0f       	add	r30, r30
     4f8:	ff 1f       	adc	r31, r31
     4fa:	ee 0f       	add	r30, r30
     4fc:	ff 1f       	adc	r31, r31
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	8c 0f       	add	r24, r28
     504:	9d 1f       	adc	r25, r29
     506:	e8 0f       	add	r30, r24
     508:	f9 1f       	adc	r31, r25
     50a:	80 81       	ld	r24, Z
     50c:	91 81       	ldd	r25, Z+1	; 0x01
     50e:	a2 81       	ldd	r26, Z+2	; 0x02
     510:	b3 81       	ldd	r27, Z+3	; 0x03
     512:	f6 01       	movw	r30, r12
     514:	80 83       	st	Z, r24
     516:	91 83       	std	Z+1, r25	; 0x01
     518:	a2 83       	std	Z+2, r26	; 0x02
     51a:	b3 83       	std	Z+3, r27	; 0x03
     51c:	31 c0       	rjmp	.+98     	; 0x580 <calcVoltageRMS+0xf2>
     51e:	98 01       	movw	r18, r16
     520:	2f 5f       	subi	r18, 0xFF	; 255
     522:	3f 4f       	sbci	r19, 0xFF	; 255
     524:	c9 01       	movw	r24, r18
     526:	99 23       	and	r25, r25
     528:	0c f4       	brge	.+2      	; 0x52c <calcVoltageRMS+0x9e>
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	95 95       	asr	r25
     52e:	87 95       	ror	r24
     530:	dc 01       	movw	r26, r24
     532:	11 97       	sbiw	r26, 0x01	; 1
     534:	aa 0f       	add	r26, r26
     536:	bb 1f       	adc	r27, r27
     538:	aa 0f       	add	r26, r26
     53a:	bb 1f       	adc	r27, r27
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	2c 0f       	add	r18, r28
     542:	3d 1f       	adc	r19, r29
     544:	a2 0f       	add	r26, r18
     546:	b3 1f       	adc	r27, r19
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	f9 01       	movw	r30, r18
     552:	e8 0f       	add	r30, r24
     554:	f9 1f       	adc	r31, r25
     556:	20 81       	ld	r18, Z
     558:	31 81       	ldd	r19, Z+1	; 0x01
     55a:	42 81       	ldd	r20, Z+2	; 0x02
     55c:	53 81       	ldd	r21, Z+3	; 0x03
     55e:	6d 91       	ld	r22, X+
     560:	7d 91       	ld	r23, X+
     562:	8d 91       	ld	r24, X+
     564:	9c 91       	ld	r25, X
     566:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3>
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	5f e3       	ldi	r21, 0x3F	; 63
     572:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     576:	f6 01       	movw	r30, r12
     578:	60 83       	st	Z, r22
     57a:	71 83       	std	Z+1, r23	; 0x01
     57c:	82 83       	std	Z+2, r24	; 0x02
     57e:	93 83       	std	Z+3, r25	; 0x03
     580:	0f 5f       	subi	r16, 0xFF	; 255
     582:	1f 4f       	sbci	r17, 0xFF	; 255
     584:	f4 e0       	ldi	r31, 0x04	; 4
     586:	cf 0e       	add	r12, r31
     588:	d1 1c       	adc	r13, r1
     58a:	03 31       	cpi	r16, 0x13	; 19
     58c:	11 05       	cpc	r17, r1
     58e:	09 f0       	breq	.+2      	; 0x592 <calcVoltageRMS+0x104>
     590:	a9 cf       	rjmp	.-174    	; 0x4e4 <calcVoltageRMS+0x56>
     592:	8e 01       	movw	r16, r28
     594:	0b 58       	subi	r16, 0x8B	; 139
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	81 2c       	mov	r8, r1
     59a:	91 2c       	mov	r9, r1
     59c:	54 01       	movw	r10, r8
     59e:	f7 01       	movw	r30, r14
     5a0:	61 91       	ld	r22, Z+
     5a2:	71 91       	ld	r23, Z+
     5a4:	81 91       	ld	r24, Z+
     5a6:	91 91       	ld	r25, Z+
     5a8:	7f 01       	movw	r14, r30
     5aa:	9b 01       	movw	r18, r22
     5ac:	ac 01       	movw	r20, r24
     5ae:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     5b2:	9b 01       	movw	r18, r22
     5b4:	ac 01       	movw	r20, r24
     5b6:	c5 01       	movw	r24, r10
     5b8:	b4 01       	movw	r22, r8
     5ba:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3>
     5be:	4b 01       	movw	r8, r22
     5c0:	5c 01       	movw	r10, r24
     5c2:	e0 16       	cp	r14, r16
     5c4:	f1 06       	cpc	r15, r17
     5c6:	59 f7       	brne	.-42     	; 0x59e <calcVoltageRMS+0x110>
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	48 e9       	ldi	r20, 0x98	; 152
     5ce:	51 e4       	ldi	r21, 0x41	; 65
     5d0:	c5 01       	movw	r24, r10
     5d2:	b4 01       	movw	r22, r8
     5d4:	0e 94 83 07 	call	0xf06	; 0xf06 <__divsf3>
     5d8:	0e 94 c9 09 	call	0x1392	; 0x1392 <sqrt>
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	48 e5       	ldi	r20, 0x58	; 88
     5e2:	51 e4       	ldi	r21, 0x41	; 65
     5e4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     5e8:	cc 58       	subi	r28, 0x8C	; 140
     5ea:	df 4f       	sbci	r29, 0xFF	; 255
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	af 90       	pop	r10
     60a:	9f 90       	pop	r9
     60c:	8f 90       	pop	r8
     60e:	08 95       	ret

00000610 <calcCurrentRMS>:
     610:	8f 92       	push	r8
     612:	9f 92       	push	r9
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	c4 57       	subi	r28, 0x74	; 116
     62e:	d1 09       	sbc	r29, r1
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	fc 01       	movw	r30, r24
     63c:	de 01       	movw	r26, r28
     63e:	11 96       	adiw	r26, 0x01	; 1
     640:	88 96       	adiw	r24, 0x28	; 40
     642:	41 91       	ld	r20, Z+
     644:	51 91       	ld	r21, Z+
     646:	61 91       	ld	r22, Z+
     648:	71 91       	ld	r23, Z+
     64a:	4d 93       	st	X+, r20
     64c:	5d 93       	st	X+, r21
     64e:	6d 93       	st	X+, r22
     650:	7d 93       	st	X+, r23
     652:	e8 17       	cp	r30, r24
     654:	f9 07       	cpc	r31, r25
     656:	a9 f7       	brne	.-22     	; 0x642 <calcCurrentRMS+0x32>
     658:	7e 01       	movw	r14, r28
     65a:	29 e2       	ldi	r18, 0x29	; 41
     65c:	e2 0e       	add	r14, r18
     65e:	f1 1c       	adc	r15, r1
     660:	67 01       	movw	r12, r14
     662:	00 e0       	ldi	r16, 0x00	; 0
     664:	10 e0       	ldi	r17, 0x00	; 0
     666:	00 fd       	sbrc	r16, 0
     668:	50 c0       	rjmp	.+160    	; 0x70a <calcCurrentRMS+0xfa>
     66a:	01 15       	cp	r16, r1
     66c:	11 05       	cpc	r17, r1
     66e:	19 f0       	breq	.+6      	; 0x676 <calcCurrentRMS+0x66>
     670:	02 31       	cpi	r16, 0x12	; 18
     672:	11 05       	cpc	r17, r1
     674:	d9 f4       	brne	.+54     	; 0x6ac <calcCurrentRMS+0x9c>
     676:	c8 01       	movw	r24, r16
     678:	11 23       	and	r17, r17
     67a:	0c f4       	brge	.+2      	; 0x67e <calcCurrentRMS+0x6e>
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	fc 01       	movw	r30, r24
     680:	f5 95       	asr	r31
     682:	e7 95       	ror	r30
     684:	ee 0f       	add	r30, r30
     686:	ff 1f       	adc	r31, r31
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	8c 0f       	add	r24, r28
     692:	9d 1f       	adc	r25, r29
     694:	e8 0f       	add	r30, r24
     696:	f9 1f       	adc	r31, r25
     698:	80 81       	ld	r24, Z
     69a:	91 81       	ldd	r25, Z+1	; 0x01
     69c:	a2 81       	ldd	r26, Z+2	; 0x02
     69e:	b3 81       	ldd	r27, Z+3	; 0x03
     6a0:	f6 01       	movw	r30, r12
     6a2:	80 83       	st	Z, r24
     6a4:	91 83       	std	Z+1, r25	; 0x01
     6a6:	a2 83       	std	Z+2, r26	; 0x02
     6a8:	b3 83       	std	Z+3, r27	; 0x03
     6aa:	4c c0       	rjmp	.+152    	; 0x744 <calcCurrentRMS+0x134>
     6ac:	c8 01       	movw	r24, r16
     6ae:	11 23       	and	r17, r17
     6b0:	0c f4       	brge	.+2      	; 0x6b4 <calcCurrentRMS+0xa4>
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	95 95       	asr	r25
     6b6:	87 95       	ror	r24
     6b8:	dc 01       	movw	r26, r24
     6ba:	11 97       	sbiw	r26, 0x01	; 1
     6bc:	aa 0f       	add	r26, r26
     6be:	bb 1f       	adc	r27, r27
     6c0:	aa 0f       	add	r26, r26
     6c2:	bb 1f       	adc	r27, r27
     6c4:	21 e0       	ldi	r18, 0x01	; 1
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	2c 0f       	add	r18, r28
     6ca:	3d 1f       	adc	r19, r29
     6cc:	a2 0f       	add	r26, r18
     6ce:	b3 1f       	adc	r27, r19
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	f9 01       	movw	r30, r18
     6da:	e8 0f       	add	r30, r24
     6dc:	f9 1f       	adc	r31, r25
     6de:	20 81       	ld	r18, Z
     6e0:	31 81       	ldd	r19, Z+1	; 0x01
     6e2:	42 81       	ldd	r20, Z+2	; 0x02
     6e4:	53 81       	ldd	r21, Z+3	; 0x03
     6e6:	6d 91       	ld	r22, X+
     6e8:	7d 91       	ld	r23, X+
     6ea:	8d 91       	ld	r24, X+
     6ec:	9c 91       	ld	r25, X
     6ee:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3>
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	5f e3       	ldi	r21, 0x3F	; 63
     6fa:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     6fe:	f6 01       	movw	r30, r12
     700:	60 83       	st	Z, r22
     702:	71 83       	std	Z+1, r23	; 0x01
     704:	82 83       	std	Z+2, r24	; 0x02
     706:	93 83       	std	Z+3, r25	; 0x03
     708:	1d c0       	rjmp	.+58     	; 0x744 <calcCurrentRMS+0x134>
     70a:	98 01       	movw	r18, r16
     70c:	21 50       	subi	r18, 0x01	; 1
     70e:	31 09       	sbc	r19, r1
     710:	c9 01       	movw	r24, r18
     712:	99 23       	and	r25, r25
     714:	0c f4       	brge	.+2      	; 0x718 <calcCurrentRMS+0x108>
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	fc 01       	movw	r30, r24
     71a:	f5 95       	asr	r31
     71c:	e7 95       	ror	r30
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	21 e0       	ldi	r18, 0x01	; 1
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	2c 0f       	add	r18, r28
     72c:	3d 1f       	adc	r19, r29
     72e:	e2 0f       	add	r30, r18
     730:	f3 1f       	adc	r31, r19
     732:	80 81       	ld	r24, Z
     734:	91 81       	ldd	r25, Z+1	; 0x01
     736:	a2 81       	ldd	r26, Z+2	; 0x02
     738:	b3 81       	ldd	r27, Z+3	; 0x03
     73a:	f6 01       	movw	r30, r12
     73c:	80 83       	st	Z, r24
     73e:	91 83       	std	Z+1, r25	; 0x01
     740:	a2 83       	std	Z+2, r26	; 0x02
     742:	b3 83       	std	Z+3, r27	; 0x03
     744:	0f 5f       	subi	r16, 0xFF	; 255
     746:	1f 4f       	sbci	r17, 0xFF	; 255
     748:	f4 e0       	ldi	r31, 0x04	; 4
     74a:	cf 0e       	add	r12, r31
     74c:	d1 1c       	adc	r13, r1
     74e:	03 31       	cpi	r16, 0x13	; 19
     750:	11 05       	cpc	r17, r1
     752:	09 f0       	breq	.+2      	; 0x756 <calcCurrentRMS+0x146>
     754:	88 cf       	rjmp	.-240    	; 0x666 <calcCurrentRMS+0x56>
     756:	8e 01       	movw	r16, r28
     758:	0b 58       	subi	r16, 0x8B	; 139
     75a:	1f 4f       	sbci	r17, 0xFF	; 255
     75c:	81 2c       	mov	r8, r1
     75e:	91 2c       	mov	r9, r1
     760:	54 01       	movw	r10, r8
     762:	f7 01       	movw	r30, r14
     764:	61 91       	ld	r22, Z+
     766:	71 91       	ld	r23, Z+
     768:	81 91       	ld	r24, Z+
     76a:	91 91       	ld	r25, Z+
     76c:	7f 01       	movw	r14, r30
     76e:	9b 01       	movw	r18, r22
     770:	ac 01       	movw	r20, r24
     772:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     776:	9b 01       	movw	r18, r22
     778:	ac 01       	movw	r20, r24
     77a:	c5 01       	movw	r24, r10
     77c:	b4 01       	movw	r22, r8
     77e:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3>
     782:	4b 01       	movw	r8, r22
     784:	5c 01       	movw	r10, r24
     786:	e0 16       	cp	r14, r16
     788:	f1 06       	cpc	r15, r17
     78a:	59 f7       	brne	.-42     	; 0x762 <calcCurrentRMS+0x152>
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	48 e9       	ldi	r20, 0x98	; 152
     792:	51 e4       	ldi	r21, 0x41	; 65
     794:	c5 01       	movw	r24, r10
     796:	b4 01       	movw	r22, r8
     798:	0e 94 83 07 	call	0xf06	; 0xf06 <__divsf3>
     79c:	0e 94 c9 09 	call	0x1392	; 0x1392 <sqrt>
     7a0:	cc 58       	subi	r28, 0x8C	; 140
     7a2:	df 4f       	sbci	r29, 0xFF	; 255
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	ff 90       	pop	r15
     7b8:	ef 90       	pop	r14
     7ba:	df 90       	pop	r13
     7bc:	cf 90       	pop	r12
     7be:	bf 90       	pop	r11
     7c0:	af 90       	pop	r10
     7c2:	9f 90       	pop	r9
     7c4:	8f 90       	pop	r8
     7c6:	08 95       	ret

000007c8 <adc_init>:

 // Initialises the ADC
 void adc_init() {
	DDRC = 0x00; // Set port c as input
     7c8:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADEN); // Set Prescaler to 128 and enable the ADC 
     7ca:	ea e7       	ldi	r30, 0x7A	; 122
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	80 81       	ld	r24, Z
     7d0:	87 68       	ori	r24, 0x87	; 135
     7d2:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); // Set reference voltage to VCC
     7d4:	ec e7       	ldi	r30, 0x7C	; 124
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
     7da:	80 64       	ori	r24, 0x40	; 64
     7dc:	80 83       	st	Z, r24
     7de:	08 95       	ret

000007e0 <adc_read_voltage>:
 }

 // Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_voltage() {
	ADMUX &= ~(1<<MUX0);
     7e0:	ec e7       	ldi	r30, 0x7C	; 124
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	8e 7f       	andi	r24, 0xFE	; 254
     7e8:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX1);
     7ea:	80 81       	ld	r24, Z
     7ec:	8d 7f       	andi	r24, 0xFD	; 253
     7ee:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX2);
     7f0:	80 81       	ld	r24, Z
     7f2:	8b 7f       	andi	r24, 0xFB	; 251
     7f4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // Start conversion
     7f6:	ea e7       	ldi	r30, 0x7A	; 122
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	80 64       	ori	r24, 0x40	; 64
     7fe:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); // Poll the ADIF bit
     800:	80 81       	ld	r24, Z
     802:	84 ff       	sbrs	r24, 4
     804:	fd cf       	rjmp	.-6      	; 0x800 <adc_read_voltage+0x20>
	unsigned int adcRead = ADC;
     806:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     80a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     80e:	08 95       	ret

00000810 <adc_read_current>:

 // Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_current(unsigned int highLow) {
	if (highLow == 1) { // High gain current
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	61 f4       	brne	.+24     	; 0x82c <adc_read_current+0x1c>
		ADMUX |= (1<<MUX0);
     814:	ec e7       	ldi	r30, 0x7C	; 124
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	81 60       	ori	r24, 0x01	; 1
     81c:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX1);
     81e:	80 81       	ld	r24, Z
     820:	82 60       	ori	r24, 0x02	; 2
     822:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX2);
     824:	80 81       	ld	r24, Z
     826:	8b 7f       	andi	r24, 0xFB	; 251
     828:	80 83       	st	Z, r24
     82a:	0b c0       	rjmp	.+22     	; 0x842 <adc_read_current+0x32>
	} else { // Regular current
		ADMUX |= (1<<MUX0);
     82c:	ec e7       	ldi	r30, 0x7C	; 124
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	81 60       	ori	r24, 0x01	; 1
     834:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX1);
     836:	80 81       	ld	r24, Z
     838:	8d 7f       	andi	r24, 0xFD	; 253
     83a:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX2);
     83c:	80 81       	ld	r24, Z
     83e:	84 60       	ori	r24, 0x04	; 4
     840:	80 83       	st	Z, r24
	}
	ADCSRA |= (1<<ADSC); // Start conversion
     842:	ea e7       	ldi	r30, 0x7A	; 122
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	80 64       	ori	r24, 0x40	; 64
     84a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); // Poll the ADIF bit
     84c:	80 81       	ld	r24, Z
     84e:	84 ff       	sbrs	r24, 4
     850:	fd cf       	rjmp	.-6      	; 0x84c <adc_read_current+0x3c>
	unsigned int adcRead = ADC;
     852:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     856:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     85a:	08 95       	ret

0000085c <adc_calculation>:

 // Converts an ADC integer into the actual voltage measured by the ADC pin
 float adc_calculation(unsigned int adcValue) {
	float calculatedValue;
	calculatedValue = ((float)adcValue / 1023) * 5; // Digital value to analogue voltage measured
     85c:	bc 01       	movw	r22, r24
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 2b 08 	call	0x1056	; 0x1056 <__floatunsisf>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 ec       	ldi	r19, 0xC0	; 192
     86a:	4f e7       	ldi	r20, 0x7F	; 127
     86c:	54 e4       	ldi	r21, 0x44	; 68
     86e:	0e 94 83 07 	call	0xf06	; 0xf06 <__divsf3>
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 ea       	ldi	r20, 0xA0	; 160
     878:	50 e4       	ldi	r21, 0x40	; 64
     87a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
	return calculatedValue; 
 }
     87e:	08 95       	ret

00000880 <voltage_real>:
 This function figures out what the actual voltage being measured was based on reversing the process 
 that the signal went through. Option 0 for voltage, 1 for regular current, 2 for high gain current
 */
 float voltage_real(float adcValue, unsigned int option) {
	float output;
	if (option == 0) {
     880:	41 15       	cp	r20, r1
     882:	51 05       	cpc	r21, r1
     884:	d9 f4       	brne	.+54     	; 0x8bc <voltage_real+0x3c>
		output = adcValue - 1.7;
     886:	2a e9       	ldi	r18, 0x9A	; 154
     888:	39 e9       	ldi	r19, 0x99	; 153
     88a:	49 ed       	ldi	r20, 0xD9	; 217
     88c:	5f e3       	ldi	r21, 0x3F	; 63
     88e:	0e 94 11 07 	call	0xe22	; 0xe22 <__subsf3>
     892:	9b 01       	movw	r18, r22
     894:	ac 01       	movw	r20, r24
		output = (-1 * output) + 0.27; // Remove offset voltage and then invert
     896:	61 e7       	ldi	r22, 0x71	; 113
     898:	7d e3       	ldi	r23, 0x3D	; 61
     89a:	8a e8       	ldi	r24, 0x8A	; 138
     89c:	9e e3       	ldi	r25, 0x3E	; 62
     89e:	0e 94 11 07 	call	0xe22	; 0xe22 <__subsf3>
		output = output / 1.03; // Revert to value from before the op amp
     8a2:	2a e0       	ldi	r18, 0x0A	; 10
     8a4:	37 ed       	ldi	r19, 0xD7	; 215
     8a6:	43 e8       	ldi	r20, 0x83	; 131
     8a8:	5f e3       	ldi	r21, 0x3F	; 63
     8aa:	0e 94 83 07 	call	0xf06	; 0xf06 <__divsf3>
		output = output * 1.0684;
     8ae:	25 e5       	ldi	r18, 0x55	; 85
     8b0:	31 ec       	ldi	r19, 0xC1	; 193
     8b2:	48 e8       	ldi	r20, 0x88	; 136
     8b4:	5f e3       	ldi	r21, 0x3F	; 63
     8b6:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     8ba:	08 95       	ret
	} else if (option == 1) {
     8bc:	41 30       	cpi	r20, 0x01	; 1
     8be:	51 05       	cpc	r21, r1
     8c0:	d1 f4       	brne	.+52     	; 0x8f6 <voltage_real+0x76>
		output = -(adcValue - 1.64);
     8c2:	25 e8       	ldi	r18, 0x85	; 133
     8c4:	3b ee       	ldi	r19, 0xEB	; 235
     8c6:	41 ed       	ldi	r20, 0xD1	; 209
     8c8:	5f e3       	ldi	r21, 0x3F	; 63
     8ca:	0e 94 11 07 	call	0xe22	; 0xe22 <__subsf3>
     8ce:	90 58       	subi	r25, 0x80	; 128
		output = output / 5.65;
     8d0:	2d ec       	ldi	r18, 0xCD	; 205
     8d2:	3c ec       	ldi	r19, 0xCC	; 204
     8d4:	44 eb       	ldi	r20, 0xB4	; 180
     8d6:	50 e4       	ldi	r21, 0x40	; 64
     8d8:	0e 94 83 07 	call	0xf06	; 0xf06 <__divsf3>
		output = output / 0.30; // Divide by R to get I
     8dc:	2a e9       	ldi	r18, 0x9A	; 154
     8de:	39 e9       	ldi	r19, 0x99	; 153
     8e0:	49 e9       	ldi	r20, 0x99	; 153
     8e2:	5e e3       	ldi	r21, 0x3E	; 62
     8e4:	0e 94 83 07 	call	0xf06	; 0xf06 <__divsf3>
		output = output * 1.08;
     8e8:	21 e7       	ldi	r18, 0x71	; 113
     8ea:	3d e3       	ldi	r19, 0x3D	; 61
     8ec:	4a e8       	ldi	r20, 0x8A	; 138
     8ee:	5f e3       	ldi	r21, 0x3F	; 63
     8f0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     8f4:	08 95       	ret
	} else {
		output = -(adcValue - 1.64);
     8f6:	25 e8       	ldi	r18, 0x85	; 133
     8f8:	3b ee       	ldi	r19, 0xEB	; 235
     8fa:	41 ed       	ldi	r20, 0xD1	; 209
     8fc:	5f e3       	ldi	r21, 0x3F	; 63
     8fe:	0e 94 11 07 	call	0xe22	; 0xe22 <__subsf3>
     902:	90 58       	subi	r25, 0x80	; 128
		output = output / 12.4;
     904:	26 e6       	ldi	r18, 0x66	; 102
     906:	36 e6       	ldi	r19, 0x66	; 102
     908:	46 e4       	ldi	r20, 0x46	; 70
     90a:	51 e4       	ldi	r21, 0x41	; 65
     90c:	0e 94 83 07 	call	0xf06	; 0xf06 <__divsf3>
		output = output / 0.30; // Divide by R to get I
     910:	2a e9       	ldi	r18, 0x9A	; 154
     912:	39 e9       	ldi	r19, 0x99	; 153
     914:	49 e9       	ldi	r20, 0x99	; 153
     916:	5e e3       	ldi	r21, 0x3E	; 62
     918:	0e 94 83 07 	call	0xf06	; 0xf06 <__divsf3>
	}
	return output;
     91c:	08 95       	ret

0000091e <main>:

volatile uint8_t counter = 0; //Counter for the number of times the TCNT0 compares correctly
volatile uint8_t flag = 0; // Flag for zero crossing detector
volatile float oldVoltage = 0;

int main(void) {
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	c4 56       	subi	r28, 0x64	; 100
     928:	d1 09       	sbc	r29, r1
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	de bf       	out	0x3e, r29	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	cd bf       	out	0x3d, r28	; 61
	sei();
     934:	78 94       	sei
	adc_init();
     936:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <adc_init>
	uart_init();	
     93a:	0e 94 89 00 	call	0x112	; 0x112 <uart_init>
	timer0_init();
     93e:	0e 94 a1 00 	call	0x142	; 0x142 <timer0_init>
	timer1_init();
     942:	0e 94 a6 00 	call	0x14c	; 0x14c <timer1_init>
	int_init();
     946:	0e 94 b8 00 	call	0x170	; 0x170 <int_init>
	DDRB |= (1<<5);
     94a:	25 9a       	sbi	0x04, 5	; 4
	uint32_t displayCount = 0;
	uint8_t currentFlag = 1;
     94c:	99 24       	eor	r9, r9
     94e:	93 94       	inc	r9
	uart_init();	
	timer0_init();
	timer1_init();
	int_init();
	DDRB |= (1<<5);
	uint32_t displayCount = 0;
     950:	a0 96       	adiw	r28, 0x20	; 32
     952:	1c ae       	std	Y+60, r1	; 0x3c
     954:	1d ae       	std	Y+61, r1	; 0x3d
     956:	1e ae       	std	Y+62, r1	; 0x3e
     958:	1f ae       	std	Y+63, r1	; 0x3f
     95a:	a0 97       	sbiw	r28, 0x20	; 32
     95c:	a1 2c       	mov	r10, r1
     95e:	b1 2c       	mov	r11, r1
				voltageArray[i/2] = voltage;
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); 
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); 
				currentArray[(i-1)/2] = current;
     960:	9e 01       	movw	r18, r28
     962:	2f 5f       	subi	r18, 0xFF	; 255
     964:	3f 4f       	sbci	r19, 0xFF	; 255
     966:	19 01       	movw	r2, r18
     968:	6b 96       	adiw	r28, 0x1b	; 27
     96a:	2f af       	std	Y+63, r18	; 0x3f
     96c:	6b 97       	sbiw	r28, 0x1b	; 27
     96e:	6c 96       	adiw	r28, 0x1c	; 28
     970:	3f ae       	std	Y+63, r3	; 0x3f
     972:	6c 97       	sbiw	r28, 0x1c	; 28
     974:	81 e5       	ldi	r24, 0x51	; 81
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	8c 0f       	add	r24, r28
     97a:	9d 1f       	adc	r25, r29
     97c:	03 96       	adiw	r24, 0x03	; 3
     97e:	a4 96       	adiw	r28, 0x24	; 36
     980:	9f af       	std	Y+63, r25	; 0x3f
     982:	8e af       	std	Y+62, r24	; 0x3e
     984:	a4 97       	sbiw	r28, 0x24	; 36
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		// Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	a5 96       	adiw	r28, 0x25	; 37
     98a:	9f af       	std	Y+63, r25	; 0x3f
     98c:	a5 97       	sbiw	r28, 0x25	; 37
			} else if ((dataFloat < maxPower*0.75 ) && (dataFloat >= maxPower*0.5)) { 
				OCR1A = 0xA2C; // Flash 3 times per second
			} else if ((dataFloat < maxPower*0.5 ) && (dataFloat >= maxPower*0.25)) { 
				OCR1A = 0xF42; // Flash 2 times per second
			} else { 
				OCR1A = 0x1E84; // Flash once per second
     98e:	66 96       	adiw	r28, 0x16	; 22
     990:	9f ae       	std	Y+63, r9	; 0x3f
     992:	66 97       	sbiw	r28, 0x16	; 22
		uint8_t hasDecimal = 0;
		uint8_t dataArray[4];
		uint8_t index = 0;
		float dataFloat = 0;
		
		flag = 0;
     994:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag>
		while (flag == 0); // Wait for the zero crossing detector to signal a rising zero crossing
     998:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <flag>
     99c:	88 23       	and	r24, r24
     99e:	e1 f3       	breq	.-8      	; 0x998 <main+0x7a>
     9a0:	0a 2d       	mov	r16, r10
     9a2:	1b 2d       	mov	r17, r11
				unsigned int adcValue = adc_read_voltage();
				float adcVoltage = adc_calculation(adcValue);
				float voltage = voltage_real(adcVoltage, 0);
				voltageArray[i/2] = voltage;
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); 
     9a4:	66 96       	adiw	r28, 0x16	; 22
     9a6:	af ad       	ldd	r26, Y+63	; 0x3f
     9a8:	66 97       	sbiw	r28, 0x16	; 22
     9aa:	ea 2e       	mov	r14, r26
     9ac:	f1 2c       	mov	r15, r1
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); 
     9ae:	67 01       	movw	r12, r14
     9b0:	bf ef       	ldi	r27, 0xFF	; 255
     9b2:	cb 1a       	sub	r12, r27
     9b4:	db 0a       	sbc	r13, r27
		
		// Reading from the ADC, calculating and converting
		float voltageArray[10];
		float currentArray[10];
		for (int i=0;i<19;i++) { // Alternate reading voltage and current
			if (i%2 == 0) {
     9b6:	00 fd       	sbrc	r16, 0
     9b8:	1b c0       	rjmp	.+54     	; 0x9f0 <main+0xd2>
				unsigned int adcValue = adc_read_voltage();
     9ba:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <adc_read_voltage>
				float adcVoltage = adc_calculation(adcValue);
     9be:	0e 94 2e 04 	call	0x85c	; 0x85c <adc_calculation>
				float voltage = voltage_real(adcVoltage, 0);
     9c2:	4a 2d       	mov	r20, r10
     9c4:	5b 2d       	mov	r21, r11
     9c6:	0e 94 40 04 	call	0x880	; 0x880 <voltage_real>
				voltageArray[i/2] = voltage;
     9ca:	98 01       	movw	r18, r16
     9cc:	11 23       	and	r17, r17
     9ce:	14 f4       	brge	.+4      	; 0x9d4 <main+0xb6>
     9d0:	2f 5f       	subi	r18, 0xFF	; 255
     9d2:	3f 4f       	sbci	r19, 0xFF	; 255
     9d4:	f9 01       	movw	r30, r18
     9d6:	f5 95       	asr	r31
     9d8:	e7 95       	ror	r30
     9da:	ee 0f       	add	r30, r30
     9dc:	ff 1f       	adc	r31, r31
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	e2 0d       	add	r30, r2
     9e4:	f3 1d       	adc	r31, r3
     9e6:	60 a7       	std	Z+40, r22	; 0x28
     9e8:	71 a7       	std	Z+41, r23	; 0x29
     9ea:	82 a7       	std	Z+42, r24	; 0x2a
     9ec:	93 a7       	std	Z+43, r25	; 0x2b
     9ee:	1c c0       	rjmp	.+56     	; 0xa28 <main+0x10a>
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); 
     9f0:	c7 01       	movw	r24, r14
     9f2:	0e 94 08 04 	call	0x810	; 0x810 <adc_read_current>
				float adcCurrent = adc_calculation(adcValue);
     9f6:	0e 94 2e 04 	call	0x85c	; 0x85c <adc_calculation>
				float current = voltage_real(adcCurrent, currentFlag+1); 
     9fa:	a6 01       	movw	r20, r12
     9fc:	0e 94 40 04 	call	0x880	; 0x880 <voltage_real>
     a00:	a8 01       	movw	r20, r16
     a02:	41 50       	subi	r20, 0x01	; 1
     a04:	51 09       	sbc	r21, r1
				currentArray[(i-1)/2] = current;
     a06:	9a 01       	movw	r18, r20
     a08:	12 f4       	brpl	.+4      	; 0xa0e <main+0xf0>
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	f9 01       	movw	r30, r18
     a10:	f5 95       	asr	r31
     a12:	e7 95       	ror	r30
     a14:	ee 0f       	add	r30, r30
     a16:	ff 1f       	adc	r31, r31
     a18:	ee 0f       	add	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	e2 0d       	add	r30, r2
     a1e:	f3 1d       	adc	r31, r3
     a20:	60 83       	st	Z, r22
     a22:	71 83       	std	Z+1, r23	; 0x01
     a24:	82 83       	std	Z+2, r24	; 0x02
     a26:	93 83       	std	Z+3, r25	; 0x03
		while (flag == 0); // Wait for the zero crossing detector to signal a rising zero crossing
		
		// Reading from the ADC, calculating and converting
		float voltageArray[10];
		float currentArray[10];
		for (int i=0;i<19;i++) { // Alternate reading voltage and current
     a28:	0f 5f       	subi	r16, 0xFF	; 255
     a2a:	1f 4f       	sbci	r17, 0xFF	; 255
     a2c:	03 31       	cpi	r16, 0x13	; 19
     a2e:	11 05       	cpc	r17, r1
     a30:	11 f6       	brne	.-124    	; 0x9b6 <main+0x98>
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); 
				currentArray[(i-1)/2] = current;
			}
		}
		float test = calcCurrentRMS(&currentArray);
     a32:	6b 96       	adiw	r28, 0x1b	; 27
     a34:	8f ad       	ldd	r24, Y+63	; 0x3f
     a36:	6b 97       	sbiw	r28, 0x1b	; 27
     a38:	6c 96       	adiw	r28, 0x1c	; 28
     a3a:	9f ad       	ldd	r25, Y+63	; 0x3f
     a3c:	6c 97       	sbiw	r28, 0x1c	; 28
     a3e:	0e 94 08 03 	call	0x610	; 0x610 <calcCurrentRMS>
		if (test > 0.21) {
     a42:	2d e3       	ldi	r18, 0x3D	; 61
     a44:	3a e0       	ldi	r19, 0x0A	; 10
     a46:	47 e5       	ldi	r20, 0x57	; 87
     a48:	5e e3       	ldi	r21, 0x3E	; 62
     a4a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     a4e:	18 16       	cp	r1, r24
     a50:	34 f4       	brge	.+12     	; 0xa5e <main+0x140>
			if (currentFlag != 0) {
     a52:	66 96       	adiw	r28, 0x16	; 22
     a54:	ef ad       	ldd	r30, Y+63	; 0x3f
     a56:	66 97       	sbiw	r28, 0x16	; 22
     a58:	e1 11       	cpse	r30, r1
     a5a:	b9 c1       	rjmp	.+882    	; 0xdce <main+0x4b0>
     a5c:	06 c0       	rjmp	.+12     	; 0xa6a <main+0x14c>
				currentFlag = 0; // Set the flag to regular amplifier
				continue;
			}
		} else {
			if (currentFlag != 1) {
     a5e:	66 96       	adiw	r28, 0x16	; 22
     a60:	ff ad       	ldd	r31, Y+63	; 0x3f
     a62:	66 97       	sbiw	r28, 0x16	; 22
     a64:	f1 30       	cpi	r31, 0x01	; 1
     a66:	09 f0       	breq	.+2      	; 0xa6a <main+0x14c>
     a68:	b6 c1       	rjmp	.+876    	; 0xdd6 <main+0x4b8>
				currentFlag = 1; // Set the flag to high gain amplifier
				continue;
			}
		}
		
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { 
     a6a:	a0 96       	adiw	r28, 0x20	; 32
     a6c:	6c ad       	ldd	r22, Y+60	; 0x3c
     a6e:	7d ad       	ldd	r23, Y+61	; 0x3d
     a70:	8e ad       	ldd	r24, Y+62	; 0x3e
     a72:	9f ad       	ldd	r25, Y+63	; 0x3f
     a74:	a0 97       	sbiw	r28, 0x20	; 32
     a76:	2a e0       	ldi	r18, 0x0A	; 10
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__udivmodsi4>
     a82:	6a 96       	adiw	r28, 0x1a	; 26
     a84:	6c af       	std	Y+60, r22	; 0x3c
     a86:	7d af       	std	Y+61, r23	; 0x3d
     a88:	8e af       	std	Y+62, r24	; 0x3e
     a8a:	9f af       	std	Y+63, r25	; 0x3f
     a8c:	6a 97       	sbiw	r28, 0x1a	; 26
     a8e:	2b 01       	movw	r4, r22
     a90:	3c 01       	movw	r6, r24
     a92:	64 30       	cpi	r22, 0x04	; 4
     a94:	71 05       	cpc	r23, r1
     a96:	81 05       	cpc	r24, r1
     a98:	91 05       	cpc	r25, r1
     a9a:	08 f0       	brcs	.+2      	; 0xa9e <main+0x180>
     a9c:	64 c0       	rjmp	.+200    	; 0xb66 <main+0x248>
			dataFloat = calcPower(&voltageArray, &currentArray); // Display average power
     a9e:	6b 96       	adiw	r28, 0x1b	; 27
     aa0:	6f ad       	ldd	r22, Y+63	; 0x3f
     aa2:	6b 97       	sbiw	r28, 0x1b	; 27
     aa4:	6c 96       	adiw	r28, 0x1c	; 28
     aa6:	7f ad       	ldd	r23, Y+63	; 0x3f
     aa8:	6c 97       	sbiw	r28, 0x1c	; 28
     aaa:	ce 01       	movw	r24, r28
     aac:	89 96       	adiw	r24, 0x29	; 41
     aae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <calcPower>
     ab2:	16 2f       	mov	r17, r22
     ab4:	07 2f       	mov	r16, r23
     ab6:	88 2e       	mov	r8, r24
     ab8:	99 2e       	mov	r9, r25
			if (dataFloat >= maxPower*0.75) {
     aba:	2e ea       	ldi	r18, 0xAE	; 174
     abc:	37 e4       	ldi	r19, 0x47	; 71
     abe:	47 ea       	ldi	r20, 0xA7	; 167
     ac0:	50 e4       	ldi	r21, 0x40	; 64
     ac2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     ac6:	88 23       	and	r24, r24
     ac8:	44 f0       	brlt	.+16     	; 0xada <main+0x1bc>
				OCR1A = 0x001; // Flash constantly
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a8 e8       	ldi	r26, 0x88	; 136
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	11 96       	adiw	r26, 0x01	; 1
     ad4:	9c 93       	st	X, r25
     ad6:	8e 93       	st	-X, r24
     ad8:	93 c0       	rjmp	.+294    	; 0xc00 <main+0x2e2>
			} else if ((dataFloat < maxPower*0.75 ) && (dataFloat >= maxPower*0.5)) { 
     ada:	2e ea       	ldi	r18, 0xAE	; 174
     adc:	37 e4       	ldi	r19, 0x47	; 71
     ade:	47 ea       	ldi	r20, 0xA7	; 167
     ae0:	50 e4       	ldi	r21, 0x40	; 64
     ae2:	61 2f       	mov	r22, r17
     ae4:	70 2f       	mov	r23, r16
     ae6:	88 2d       	mov	r24, r8
     ae8:	99 2d       	mov	r25, r9
     aea:	0e 94 7e 07 	call	0xefc	; 0xefc <__cmpsf2>
     aee:	88 23       	and	r24, r24
     af0:	9c f4       	brge	.+38     	; 0xb18 <main+0x1fa>
     af2:	2d e3       	ldi	r18, 0x3D	; 61
     af4:	3a e0       	ldi	r19, 0x0A	; 10
     af6:	4f e5       	ldi	r20, 0x5F	; 95
     af8:	50 e4       	ldi	r21, 0x40	; 64
     afa:	61 2f       	mov	r22, r17
     afc:	70 2f       	mov	r23, r16
     afe:	88 2d       	mov	r24, r8
     b00:	99 2d       	mov	r25, r9
     b02:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     b06:	88 23       	and	r24, r24
     b08:	3c f0       	brlt	.+14     	; 0xb18 <main+0x1fa>
				OCR1A = 0xA2C; // Flash 3 times per second
     b0a:	8c e2       	ldi	r24, 0x2C	; 44
     b0c:	9a e0       	ldi	r25, 0x0A	; 10
     b0e:	e8 e8       	ldi	r30, 0x88	; 136
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	91 83       	std	Z+1, r25	; 0x01
     b14:	80 83       	st	Z, r24
     b16:	74 c0       	rjmp	.+232    	; 0xc00 <main+0x2e2>
			} else if ((dataFloat < maxPower*0.5 ) && (dataFloat >= maxPower*0.25)) { 
     b18:	2d e3       	ldi	r18, 0x3D	; 61
     b1a:	3a e0       	ldi	r19, 0x0A	; 10
     b1c:	4f e5       	ldi	r20, 0x5F	; 95
     b1e:	50 e4       	ldi	r21, 0x40	; 64
     b20:	61 2f       	mov	r22, r17
     b22:	70 2f       	mov	r23, r16
     b24:	88 2d       	mov	r24, r8
     b26:	99 2d       	mov	r25, r9
     b28:	0e 94 7e 07 	call	0xefc	; 0xefc <__cmpsf2>
     b2c:	88 23       	and	r24, r24
     b2e:	a4 f4       	brge	.+40     	; 0xb58 <main+0x23a>
     b30:	2d e3       	ldi	r18, 0x3D	; 61
     b32:	3a e0       	ldi	r19, 0x0A	; 10
     b34:	4f ed       	ldi	r20, 0xDF	; 223
     b36:	5f e3       	ldi	r21, 0x3F	; 63
     b38:	61 2f       	mov	r22, r17
     b3a:	70 2f       	mov	r23, r16
     b3c:	88 2d       	mov	r24, r8
     b3e:	99 2d       	mov	r25, r9
     b40:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     b44:	88 23       	and	r24, r24
     b46:	44 f0       	brlt	.+16     	; 0xb58 <main+0x23a>
				OCR1A = 0xF42; // Flash 2 times per second
     b48:	82 e4       	ldi	r24, 0x42	; 66
     b4a:	9f e0       	ldi	r25, 0x0F	; 15
     b4c:	a8 e8       	ldi	r26, 0x88	; 136
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	11 96       	adiw	r26, 0x01	; 1
     b52:	9c 93       	st	X, r25
     b54:	8e 93       	st	-X, r24
     b56:	54 c0       	rjmp	.+168    	; 0xc00 <main+0x2e2>
			} else { 
				OCR1A = 0x1E84; // Flash once per second
     b58:	84 e8       	ldi	r24, 0x84	; 132
     b5a:	9e e1       	ldi	r25, 0x1E	; 30
     b5c:	e8 e8       	ldi	r30, 0x88	; 136
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	91 83       	std	Z+1, r25	; 0x01
     b62:	80 83       	st	Z, r24
     b64:	4d c0       	rjmp	.+154    	; 0xc00 <main+0x2e2>
			} 
		} 
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { 
     b66:	6a 96       	adiw	r28, 0x1a	; 26
     b68:	8c ad       	ldd	r24, Y+60	; 0x3c
     b6a:	9d ad       	ldd	r25, Y+61	; 0x3d
     b6c:	ae ad       	ldd	r26, Y+62	; 0x3e
     b6e:	bf ad       	ldd	r27, Y+63	; 0x3f
     b70:	6a 97       	sbiw	r28, 0x1a	; 26
     b72:	04 97       	sbiw	r24, 0x04	; 4
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	03 97       	sbiw	r24, 0x03	; 3
     b7a:	a1 05       	cpc	r26, r1
     b7c:	b1 05       	cpc	r27, r1
     b7e:	98 f4       	brcc	.+38     	; 0xba6 <main+0x288>
			dataFloat = calcCurrentRMS(&currentArray) * sqrt(2); // Display peak current
     b80:	6b 96       	adiw	r28, 0x1b	; 27
     b82:	8f ad       	ldd	r24, Y+63	; 0x3f
     b84:	6b 97       	sbiw	r28, 0x1b	; 27
     b86:	6c 96       	adiw	r28, 0x1c	; 28
     b88:	9f ad       	ldd	r25, Y+63	; 0x3f
     b8a:	6c 97       	sbiw	r28, 0x1c	; 28
     b8c:	0e 94 08 03 	call	0x610	; 0x610 <calcCurrentRMS>
     b90:	23 ef       	ldi	r18, 0xF3	; 243
     b92:	34 e0       	ldi	r19, 0x04	; 4
     b94:	45 eb       	ldi	r20, 0xB5	; 181
     b96:	5f e3       	ldi	r21, 0x3F	; 63
     b98:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     b9c:	16 2f       	mov	r17, r22
     b9e:	07 2f       	mov	r16, r23
     ba0:	88 2e       	mov	r8, r24
     ba2:	99 2e       	mov	r9, r25
     ba4:	2d c0       	rjmp	.+90     	; 0xc00 <main+0x2e2>
		} else if (displayCount%10 > 6) { 
     ba6:	f7 e0       	ldi	r31, 0x07	; 7
     ba8:	4f 16       	cp	r4, r31
     baa:	51 04       	cpc	r5, r1
     bac:	61 04       	cpc	r6, r1
     bae:	71 04       	cpc	r7, r1
     bb0:	18 f1       	brcs	.+70     	; 0xbf8 <main+0x2da>
			float dataFloatOne = calcVoltageRMS(&voltageArray); // Display rms voltage
     bb2:	ce 01       	movw	r24, r28
     bb4:	89 96       	adiw	r24, 0x29	; 41
     bb6:	0e 94 47 02 	call	0x48e	; 0x48e <calcVoltageRMS>
     bba:	6b 01       	movw	r12, r22
     bbc:	7c 01       	movw	r14, r24
			dataFloat = (dataFloatOne + oldVoltage) / 2; 
     bbe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     bc2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     bc6:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_edata+0x2>
     bca:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <_edata+0x3>
     bce:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3>
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	5f e3       	ldi	r21, 0x3F	; 63
     bda:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     bde:	16 2f       	mov	r17, r22
     be0:	07 2f       	mov	r16, r23
     be2:	88 2e       	mov	r8, r24
     be4:	99 2e       	mov	r9, r25
			oldVoltage = dataFloatOne;
     be6:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <_edata>
     bea:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <_edata+0x1>
     bee:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <_edata+0x2>
     bf2:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <_edata+0x3>
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <main+0x2e2>

	while(1) {
		uint8_t hasDecimal = 0;
		uint8_t dataArray[4];
		uint8_t index = 0;
		float dataFloat = 0;
     bf8:	10 e0       	ldi	r17, 0x00	; 0
     bfa:	00 e0       	ldi	r16, 0x00	; 0
     bfc:	81 2c       	mov	r8, r1
     bfe:	91 2c       	mov	r9, r1
			float dataFloatOne = calcVoltageRMS(&voltageArray); // Display rms voltage
			dataFloat = (dataFloatOne + oldVoltage) / 2; 
			oldVoltage = dataFloatOne;
		} 

		dataFloat = roundf(dataFloat * 100) / 100;
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	48 ec       	ldi	r20, 0xC8	; 200
     c06:	52 e4       	ldi	r21, 0x42	; 66
     c08:	61 2f       	mov	r22, r17
     c0a:	70 2f       	mov	r23, r16
     c0c:	88 2d       	mov	r24, r8
     c0e:	99 2d       	mov	r25, r9
     c10:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     c14:	0e 94 9f 09 	call	0x133e	; 0x133e <round>
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	48 ec       	ldi	r20, 0xC8	; 200
     c1e:	52 e4       	ldi	r21, 0x42	; 66
     c20:	0e 94 83 07 	call	0xf06	; 0xf06 <__divsf3>
     c24:	6b 01       	movw	r12, r22
     c26:	7c 01       	movw	r14, r24
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
     c28:	0e 94 bf 00 	call	0x17e	; 0x17e <find_decimal>
     c2c:	4c 01       	movw	r8, r24
     c2e:	99 24       	eor	r9, r9
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
     c30:	22 e0       	ldi	r18, 0x02	; 2
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	28 19       	sub	r18, r8
     c36:	39 09       	sbc	r19, r9
     c38:	a2 96       	adiw	r28, 0x22	; 34
     c3a:	3f af       	std	Y+63, r19	; 0x3f
     c3c:	2e af       	std	Y+62, r18	; 0x3e
     c3e:	a2 97       	sbiw	r28, 0x22	; 34
     c40:	b9 01       	movw	r22, r18
     c42:	33 0f       	add	r19, r19
     c44:	88 0b       	sbc	r24, r24
     c46:	99 0b       	sbc	r25, r25
     c48:	0e 94 2d 08 	call	0x105a	; 0x105a <__floatsisf>
     c4c:	9b 01       	movw	r18, r22
     c4e:	ac 01       	movw	r20, r24
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	80 e2       	ldi	r24, 0x20	; 32
     c56:	91 e4       	ldi	r25, 0x41	; 65
     c58:	0e 94 4f 09 	call	0x129e	; 0x129e <pow>
     c5c:	a7 01       	movw	r20, r14
     c5e:	96 01       	movw	r18, r12
     c60:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	5f e3       	ldi	r21, 0x3F	; 63
     c6c:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3>
     c70:	0e 94 f5 07 	call	0xfea	; 0xfea <__fixsfsi>
     c74:	7b 01       	movw	r14, r22
     c76:	a4 96       	adiw	r28, 0x24	; 36
     c78:	ce ac       	ldd	r12, Y+62	; 0x3e
     c7a:	df ac       	ldd	r13, Y+63	; 0x3f
     c7c:	a4 97       	sbiw	r28, 0x24	; 36
		
		// Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     c7e:	02 e0       	ldi	r16, 0x02	; 2
     c80:	10 e0       	ldi	r17, 0x00	; 0
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     c82:	08 15       	cp	r16, r8
     c84:	19 05       	cpc	r17, r9
     c86:	61 f4       	brne	.+24     	; 0xca0 <main+0x382>
     c88:	a5 96       	adiw	r28, 0x25	; 37
     c8a:	4f ad       	ldd	r20, Y+63	; 0x3f
     c8c:	a5 97       	sbiw	r28, 0x25	; 37
     c8e:	a2 96       	adiw	r28, 0x22	; 34
     c90:	8e ad       	ldd	r24, Y+62	; 0x3e
     c92:	9f ad       	ldd	r25, Y+63	; 0x3f
     c94:	a2 97       	sbiw	r28, 0x22	; 34
     c96:	18 16       	cp	r1, r24
     c98:	19 06       	cpc	r1, r25
     c9a:	1c f0       	brlt	.+6      	; 0xca2 <main+0x384>
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <main+0x384>
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
     ca0:	40 e0       	ldi	r20, 0x00	; 0
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
     ca2:	97 01       	movw	r18, r14
     ca4:	ad ec       	ldi	r26, 0xCD	; 205
     ca6:	bc ec       	ldi	r27, 0xCC	; 204
     ca8:	0e 94 82 0b 	call	0x1704	; 0x1704 <__umulhisi3>
     cac:	96 95       	lsr	r25
     cae:	87 95       	ror	r24
     cb0:	96 95       	lsr	r25
     cb2:	87 95       	ror	r24
     cb4:	96 95       	lsr	r25
     cb6:	87 95       	ror	r24
     cb8:	9c 01       	movw	r18, r24
     cba:	22 0f       	add	r18, r18
     cbc:	33 1f       	adc	r19, r19
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	82 0f       	add	r24, r18
     ccc:	93 1f       	adc	r25, r19
     cce:	60 2f       	mov	r22, r16
     cd0:	ae 2d       	mov	r26, r14
     cd2:	a8 1b       	sub	r26, r24
     cd4:	8a 2f       	mov	r24, r26
     cd6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <wololo>
     cda:	f6 01       	movw	r30, r12
     cdc:	82 93       	st	-Z, r24
     cde:	6f 01       	movw	r12, r30
			dataInt = dataInt/10;
     ce0:	97 01       	movw	r18, r14
     ce2:	ad ec       	ldi	r26, 0xCD	; 205
     ce4:	bc ec       	ldi	r27, 0xCC	; 204
     ce6:	0e 94 82 0b 	call	0x1704	; 0x1704 <__umulhisi3>
     cea:	7c 01       	movw	r14, r24
     cec:	f6 94       	lsr	r15
     cee:	e7 94       	ror	r14
     cf0:	f6 94       	lsr	r15
     cf2:	e7 94       	ror	r14
     cf4:	f6 94       	lsr	r15
     cf6:	e7 94       	ror	r14
		dataFloat = roundf(dataFloat * 100) / 100;
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		// Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     cf8:	01 50       	subi	r16, 0x01	; 1
     cfa:	11 09       	sbc	r17, r1
     cfc:	10 f6       	brcc	.-124    	; 0xc82 <main+0x364>
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
			dataInt = dataInt/10;
		}
		
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { 
     cfe:	24 e0       	ldi	r18, 0x04	; 4
     d00:	42 16       	cp	r4, r18
     d02:	51 04       	cpc	r5, r1
     d04:	61 04       	cpc	r6, r1
     d06:	71 04       	cpc	r7, r1
     d08:	28 f4       	brcc	.+10     	; 0xd14 <main+0x3f6>
			dataArray[3] = 15; // Unit P
     d0a:	8f e0       	ldi	r24, 0x0F	; 15
     d0c:	65 96       	adiw	r28, 0x15	; 21
     d0e:	8f af       	std	Y+63, r24	; 0x3f
     d10:	65 97       	sbiw	r28, 0x15	; 21
     d12:	1c c0       	rjmp	.+56     	; 0xd4c <main+0x42e>
		} else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { 
     d14:	6a 96       	adiw	r28, 0x1a	; 26
     d16:	8c ad       	ldd	r24, Y+60	; 0x3c
     d18:	9d ad       	ldd	r25, Y+61	; 0x3d
     d1a:	ae ad       	ldd	r26, Y+62	; 0x3e
     d1c:	bf ad       	ldd	r27, Y+63	; 0x3f
     d1e:	6a 97       	sbiw	r28, 0x1a	; 26
     d20:	04 97       	sbiw	r24, 0x04	; 4
     d22:	a1 09       	sbc	r26, r1
     d24:	b1 09       	sbc	r27, r1
     d26:	03 97       	sbiw	r24, 0x03	; 3
     d28:	a1 05       	cpc	r26, r1
     d2a:	b1 05       	cpc	r27, r1
     d2c:	28 f4       	brcc	.+10     	; 0xd38 <main+0x41a>
			dataArray[3] = 13; // Unit I
     d2e:	8d e0       	ldi	r24, 0x0D	; 13
     d30:	65 96       	adiw	r28, 0x15	; 21
     d32:	8f af       	std	Y+63, r24	; 0x3f
     d34:	65 97       	sbiw	r28, 0x15	; 21
     d36:	0a c0       	rjmp	.+20     	; 0xd4c <main+0x42e>
		} else if (displayCount%10 > 6) { 
     d38:	37 e0       	ldi	r19, 0x07	; 7
     d3a:	43 16       	cp	r4, r19
     d3c:	51 04       	cpc	r5, r1
     d3e:	61 04       	cpc	r6, r1
     d40:	71 04       	cpc	r7, r1
     d42:	20 f0       	brcs	.+8      	; 0xd4c <main+0x42e>
			dataArray[3] = 14; // Unit V
     d44:	8e e0       	ldi	r24, 0x0E	; 14
     d46:	65 96       	adiw	r28, 0x15	; 21
     d48:	8f af       	std	Y+63, r24	; 0x3f
     d4a:	65 97       	sbiw	r28, 0x15	; 21
		} 

		// Transmits data until we get TCNT0 = 191 fifty times (i.e 500ms for each transmission)
		while (1) {
			uint8_t data = dataArray[index]; // Get the integer to send	
			uart_transmit(data);
     d4c:	62 96       	adiw	r28, 0x12	; 18
     d4e:	8f ad       	ldd	r24, Y+63	; 0x3f
     d50:	62 97       	sbiw	r28, 0x12	; 18
     d52:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d56:	8f ed       	ldi	r24, 0xDF	; 223
     d58:	9e e2       	ldi	r25, 0x2E	; 46
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <main+0x43c>
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <main+0x442>
     d60:	00 00       	nop
			_delay_ms(3); // Small time delay so that no apparent flicker on seven segment displays
			index++;
     d62:	11 e0       	ldi	r17, 0x01	; 1
			// Select next integer to send
			if (index == 4) {
				index = 0;
     d64:	00 e0       	ldi	r16, 0x00	; 0
     d66:	13 c0       	rjmp	.+38     	; 0xd8e <main+0x470>
			dataArray[3] = 14; // Unit V
		} 

		// Transmits data until we get TCNT0 = 191 fifty times (i.e 500ms for each transmission)
		while (1) {
			uint8_t data = dataArray[index]; // Get the integer to send	
     d68:	e1 e5       	ldi	r30, 0x51	; 81
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	ec 0f       	add	r30, r28
     d6e:	fd 1f       	adc	r31, r29
     d70:	e1 0f       	add	r30, r17
     d72:	f1 1d       	adc	r31, r1
			uart_transmit(data);
     d74:	80 81       	ld	r24, Z
     d76:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
     d7a:	af ed       	ldi	r26, 0xDF	; 223
     d7c:	be e2       	ldi	r27, 0x2E	; 46
     d7e:	11 97       	sbiw	r26, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <main+0x460>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <main+0x466>
     d84:	00 00       	nop
			_delay_ms(3); // Small time delay so that no apparent flicker on seven segment displays
			index++;
     d86:	1f 5f       	subi	r17, 0xFF	; 255
			// Select next integer to send
			if (index == 4) {
     d88:	14 30       	cpi	r17, 0x04	; 4
     d8a:	09 f4       	brne	.+2      	; 0xd8e <main+0x470>
				index = 0;
     d8c:	10 2f       	mov	r17, r16
			}
			// Polling mechanism
			if(TCNT0>=156) {
     d8e:	86 b5       	in	r24, 0x26	; 38
     d90:	8c 39       	cpi	r24, 0x9C	; 156
     d92:	50 f3       	brcs	.-44     	; 0xd68 <main+0x44a>
				TCNT0 = 0;
     d94:	16 bc       	out	0x26, r1	; 38
				if (counter == 50) {
     d96:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter>
     d9a:	82 33       	cpi	r24, 0x32	; 50
     d9c:	91 f4       	brne	.+36     	; 0xdc2 <main+0x4a4>
					counter = 0;
     d9e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter>
				} else {
					counter++;
				}
			}
		}
		displayCount++;
     da2:	a0 96       	adiw	r28, 0x20	; 32
     da4:	8c ad       	ldd	r24, Y+60	; 0x3c
     da6:	9d ad       	ldd	r25, Y+61	; 0x3d
     da8:	ae ad       	ldd	r26, Y+62	; 0x3e
     daa:	bf ad       	ldd	r27, Y+63	; 0x3f
     dac:	a0 97       	sbiw	r28, 0x20	; 32
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	a1 1d       	adc	r26, r1
     db2:	b1 1d       	adc	r27, r1
     db4:	a0 96       	adiw	r28, 0x20	; 32
     db6:	8c af       	std	Y+60, r24	; 0x3c
     db8:	9d af       	std	Y+61, r25	; 0x3d
     dba:	ae af       	std	Y+62, r26	; 0x3e
     dbc:	bf af       	std	Y+63, r27	; 0x3f
     dbe:	a0 97       	sbiw	r28, 0x20	; 32
     dc0:	e9 cd       	rjmp	.-1070   	; 0x994 <main+0x76>
				TCNT0 = 0;
				if (counter == 50) {
					counter = 0;
					break;
				} else {
					counter++;
     dc2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter>
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <counter>
     dcc:	cd cf       	rjmp	.-102    	; 0xd68 <main+0x44a>
			}
		}
		float test = calcCurrentRMS(&currentArray);
		if (test > 0.21) {
			if (currentFlag != 0) {
				currentFlag = 0; // Set the flag to regular amplifier
     dce:	66 96       	adiw	r28, 0x16	; 22
     dd0:	1f ae       	std	Y+63, r1	; 0x3f
     dd2:	66 97       	sbiw	r28, 0x16	; 22
     dd4:	df cd       	rjmp	.-1090   	; 0x994 <main+0x76>
				continue;
			}
		} else {
			if (currentFlag != 1) {
				currentFlag = 1; // Set the flag to high gain amplifier
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	66 96       	adiw	r28, 0x16	; 22
     dda:	9f af       	std	Y+63, r25	; 0x3f
     ddc:	66 97       	sbiw	r28, 0x16	; 22
     dde:	da cd       	rjmp	.-1100   	; 0x994 <main+0x76>

00000de0 <__vector_1>:
		displayCount++;
	}
	return 0;
}

ISR (INT0_vect) {
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	8f 93       	push	r24
	flag = 1; 
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <flag>
}
     df2:	8f 91       	pop	r24
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <__vector_11>:

ISR (TIMER1_COMPA_vect) {
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	8f 93       	push	r24
     e0a:	9f 93       	push	r25
	PORTB ^= (1<<5); // Toggle the LED
     e0c:	95 b1       	in	r25, 0x05	; 5
     e0e:	80 e2       	ldi	r24, 0x20	; 32
     e10:	89 27       	eor	r24, r25
     e12:	85 b9       	out	0x05, r24	; 5
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	0f 90       	pop	r0
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	0f 90       	pop	r0
     e1e:	1f 90       	pop	r1
     e20:	18 95       	reti

00000e22 <__subsf3>:
     e22:	50 58       	subi	r21, 0x80	; 128

00000e24 <__addsf3>:
     e24:	bb 27       	eor	r27, r27
     e26:	aa 27       	eor	r26, r26
     e28:	0e 94 29 07 	call	0xe52	; 0xe52 <__addsf3x>
     e2c:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_round>
     e30:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_pscA>
     e34:	38 f0       	brcs	.+14     	; 0xe44 <__addsf3+0x20>
     e36:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_pscB>
     e3a:	20 f0       	brcs	.+8      	; 0xe44 <__addsf3+0x20>
     e3c:	39 f4       	brne	.+14     	; 0xe4c <__addsf3+0x28>
     e3e:	9f 3f       	cpi	r25, 0xFF	; 255
     e40:	19 f4       	brne	.+6      	; 0xe48 <__addsf3+0x24>
     e42:	26 f4       	brtc	.+8      	; 0xe4c <__addsf3+0x28>
     e44:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_nan>
     e48:	0e f4       	brtc	.+2      	; 0xe4c <__addsf3+0x28>
     e4a:	e0 95       	com	r30
     e4c:	e7 fb       	bst	r30, 7
     e4e:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_inf>

00000e52 <__addsf3x>:
     e52:	e9 2f       	mov	r30, r25
     e54:	0e 94 b4 08 	call	0x1168	; 0x1168 <__fp_split3>
     e58:	58 f3       	brcs	.-42     	; 0xe30 <__addsf3+0xc>
     e5a:	ba 17       	cp	r27, r26
     e5c:	62 07       	cpc	r22, r18
     e5e:	73 07       	cpc	r23, r19
     e60:	84 07       	cpc	r24, r20
     e62:	95 07       	cpc	r25, r21
     e64:	20 f0       	brcs	.+8      	; 0xe6e <__addsf3x+0x1c>
     e66:	79 f4       	brne	.+30     	; 0xe86 <__addsf3x+0x34>
     e68:	a6 f5       	brtc	.+104    	; 0xed2 <__addsf3x+0x80>
     e6a:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__fp_zero>
     e6e:	0e f4       	brtc	.+2      	; 0xe72 <__addsf3x+0x20>
     e70:	e0 95       	com	r30
     e72:	0b 2e       	mov	r0, r27
     e74:	ba 2f       	mov	r27, r26
     e76:	a0 2d       	mov	r26, r0
     e78:	0b 01       	movw	r0, r22
     e7a:	b9 01       	movw	r22, r18
     e7c:	90 01       	movw	r18, r0
     e7e:	0c 01       	movw	r0, r24
     e80:	ca 01       	movw	r24, r20
     e82:	a0 01       	movw	r20, r0
     e84:	11 24       	eor	r1, r1
     e86:	ff 27       	eor	r31, r31
     e88:	59 1b       	sub	r21, r25
     e8a:	99 f0       	breq	.+38     	; 0xeb2 <__addsf3x+0x60>
     e8c:	59 3f       	cpi	r21, 0xF9	; 249
     e8e:	50 f4       	brcc	.+20     	; 0xea4 <__addsf3x+0x52>
     e90:	50 3e       	cpi	r21, 0xE0	; 224
     e92:	68 f1       	brcs	.+90     	; 0xeee <__addsf3x+0x9c>
     e94:	1a 16       	cp	r1, r26
     e96:	f0 40       	sbci	r31, 0x00	; 0
     e98:	a2 2f       	mov	r26, r18
     e9a:	23 2f       	mov	r18, r19
     e9c:	34 2f       	mov	r19, r20
     e9e:	44 27       	eor	r20, r20
     ea0:	58 5f       	subi	r21, 0xF8	; 248
     ea2:	f3 cf       	rjmp	.-26     	; 0xe8a <__addsf3x+0x38>
     ea4:	46 95       	lsr	r20
     ea6:	37 95       	ror	r19
     ea8:	27 95       	ror	r18
     eaa:	a7 95       	ror	r26
     eac:	f0 40       	sbci	r31, 0x00	; 0
     eae:	53 95       	inc	r21
     eb0:	c9 f7       	brne	.-14     	; 0xea4 <__addsf3x+0x52>
     eb2:	7e f4       	brtc	.+30     	; 0xed2 <__addsf3x+0x80>
     eb4:	1f 16       	cp	r1, r31
     eb6:	ba 0b       	sbc	r27, r26
     eb8:	62 0b       	sbc	r22, r18
     eba:	73 0b       	sbc	r23, r19
     ebc:	84 0b       	sbc	r24, r20
     ebe:	ba f0       	brmi	.+46     	; 0xeee <__addsf3x+0x9c>
     ec0:	91 50       	subi	r25, 0x01	; 1
     ec2:	a1 f0       	breq	.+40     	; 0xeec <__addsf3x+0x9a>
     ec4:	ff 0f       	add	r31, r31
     ec6:	bb 1f       	adc	r27, r27
     ec8:	66 1f       	adc	r22, r22
     eca:	77 1f       	adc	r23, r23
     ecc:	88 1f       	adc	r24, r24
     ece:	c2 f7       	brpl	.-16     	; 0xec0 <__addsf3x+0x6e>
     ed0:	0e c0       	rjmp	.+28     	; 0xeee <__addsf3x+0x9c>
     ed2:	ba 0f       	add	r27, r26
     ed4:	62 1f       	adc	r22, r18
     ed6:	73 1f       	adc	r23, r19
     ed8:	84 1f       	adc	r24, r20
     eda:	48 f4       	brcc	.+18     	; 0xeee <__addsf3x+0x9c>
     edc:	87 95       	ror	r24
     ede:	77 95       	ror	r23
     ee0:	67 95       	ror	r22
     ee2:	b7 95       	ror	r27
     ee4:	f7 95       	ror	r31
     ee6:	9e 3f       	cpi	r25, 0xFE	; 254
     ee8:	08 f0       	brcs	.+2      	; 0xeec <__addsf3x+0x9a>
     eea:	b0 cf       	rjmp	.-160    	; 0xe4c <__addsf3+0x28>
     eec:	93 95       	inc	r25
     eee:	88 0f       	add	r24, r24
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <__addsf3x+0xa2>
     ef2:	99 27       	eor	r25, r25
     ef4:	ee 0f       	add	r30, r30
     ef6:	97 95       	ror	r25
     ef8:	87 95       	ror	r24
     efa:	08 95       	ret

00000efc <__cmpsf2>:
     efc:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__fp_cmp>
     f00:	08 f4       	brcc	.+2      	; 0xf04 <__cmpsf2+0x8>
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	08 95       	ret

00000f06 <__divsf3>:
     f06:	0e 94 97 07 	call	0xf2e	; 0xf2e <__divsf3x>
     f0a:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_round>
     f0e:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_pscB>
     f12:	58 f0       	brcs	.+22     	; 0xf2a <__divsf3+0x24>
     f14:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_pscA>
     f18:	40 f0       	brcs	.+16     	; 0xf2a <__divsf3+0x24>
     f1a:	29 f4       	brne	.+10     	; 0xf26 <__divsf3+0x20>
     f1c:	5f 3f       	cpi	r21, 0xFF	; 255
     f1e:	29 f0       	breq	.+10     	; 0xf2a <__divsf3+0x24>
     f20:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_inf>
     f24:	51 11       	cpse	r21, r1
     f26:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_szero>
     f2a:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_nan>

00000f2e <__divsf3x>:
     f2e:	0e 94 b4 08 	call	0x1168	; 0x1168 <__fp_split3>
     f32:	68 f3       	brcs	.-38     	; 0xf0e <__divsf3+0x8>

00000f34 <__divsf3_pse>:
     f34:	99 23       	and	r25, r25
     f36:	b1 f3       	breq	.-20     	; 0xf24 <__divsf3+0x1e>
     f38:	55 23       	and	r21, r21
     f3a:	91 f3       	breq	.-28     	; 0xf20 <__divsf3+0x1a>
     f3c:	95 1b       	sub	r25, r21
     f3e:	55 0b       	sbc	r21, r21
     f40:	bb 27       	eor	r27, r27
     f42:	aa 27       	eor	r26, r26
     f44:	62 17       	cp	r22, r18
     f46:	73 07       	cpc	r23, r19
     f48:	84 07       	cpc	r24, r20
     f4a:	38 f0       	brcs	.+14     	; 0xf5a <__divsf3_pse+0x26>
     f4c:	9f 5f       	subi	r25, 0xFF	; 255
     f4e:	5f 4f       	sbci	r21, 0xFF	; 255
     f50:	22 0f       	add	r18, r18
     f52:	33 1f       	adc	r19, r19
     f54:	44 1f       	adc	r20, r20
     f56:	aa 1f       	adc	r26, r26
     f58:	a9 f3       	breq	.-22     	; 0xf44 <__divsf3_pse+0x10>
     f5a:	35 d0       	rcall	.+106    	; 0xfc6 <__divsf3_pse+0x92>
     f5c:	0e 2e       	mov	r0, r30
     f5e:	3a f0       	brmi	.+14     	; 0xf6e <__divsf3_pse+0x3a>
     f60:	e0 e8       	ldi	r30, 0x80	; 128
     f62:	32 d0       	rcall	.+100    	; 0xfc8 <__divsf3_pse+0x94>
     f64:	91 50       	subi	r25, 0x01	; 1
     f66:	50 40       	sbci	r21, 0x00	; 0
     f68:	e6 95       	lsr	r30
     f6a:	00 1c       	adc	r0, r0
     f6c:	ca f7       	brpl	.-14     	; 0xf60 <__divsf3_pse+0x2c>
     f6e:	2b d0       	rcall	.+86     	; 0xfc6 <__divsf3_pse+0x92>
     f70:	fe 2f       	mov	r31, r30
     f72:	29 d0       	rcall	.+82     	; 0xfc6 <__divsf3_pse+0x92>
     f74:	66 0f       	add	r22, r22
     f76:	77 1f       	adc	r23, r23
     f78:	88 1f       	adc	r24, r24
     f7a:	bb 1f       	adc	r27, r27
     f7c:	26 17       	cp	r18, r22
     f7e:	37 07       	cpc	r19, r23
     f80:	48 07       	cpc	r20, r24
     f82:	ab 07       	cpc	r26, r27
     f84:	b0 e8       	ldi	r27, 0x80	; 128
     f86:	09 f0       	breq	.+2      	; 0xf8a <__divsf3_pse+0x56>
     f88:	bb 0b       	sbc	r27, r27
     f8a:	80 2d       	mov	r24, r0
     f8c:	bf 01       	movw	r22, r30
     f8e:	ff 27       	eor	r31, r31
     f90:	93 58       	subi	r25, 0x83	; 131
     f92:	5f 4f       	sbci	r21, 0xFF	; 255
     f94:	3a f0       	brmi	.+14     	; 0xfa4 <__divsf3_pse+0x70>
     f96:	9e 3f       	cpi	r25, 0xFE	; 254
     f98:	51 05       	cpc	r21, r1
     f9a:	78 f0       	brcs	.+30     	; 0xfba <__divsf3_pse+0x86>
     f9c:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_inf>
     fa0:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_szero>
     fa4:	5f 3f       	cpi	r21, 0xFF	; 255
     fa6:	e4 f3       	brlt	.-8      	; 0xfa0 <__divsf3_pse+0x6c>
     fa8:	98 3e       	cpi	r25, 0xE8	; 232
     faa:	d4 f3       	brlt	.-12     	; 0xfa0 <__divsf3_pse+0x6c>
     fac:	86 95       	lsr	r24
     fae:	77 95       	ror	r23
     fb0:	67 95       	ror	r22
     fb2:	b7 95       	ror	r27
     fb4:	f7 95       	ror	r31
     fb6:	9f 5f       	subi	r25, 0xFF	; 255
     fb8:	c9 f7       	brne	.-14     	; 0xfac <__divsf3_pse+0x78>
     fba:	88 0f       	add	r24, r24
     fbc:	91 1d       	adc	r25, r1
     fbe:	96 95       	lsr	r25
     fc0:	87 95       	ror	r24
     fc2:	97 f9       	bld	r25, 7
     fc4:	08 95       	ret
     fc6:	e1 e0       	ldi	r30, 0x01	; 1
     fc8:	66 0f       	add	r22, r22
     fca:	77 1f       	adc	r23, r23
     fcc:	88 1f       	adc	r24, r24
     fce:	bb 1f       	adc	r27, r27
     fd0:	62 17       	cp	r22, r18
     fd2:	73 07       	cpc	r23, r19
     fd4:	84 07       	cpc	r24, r20
     fd6:	ba 07       	cpc	r27, r26
     fd8:	20 f0       	brcs	.+8      	; 0xfe2 <__divsf3_pse+0xae>
     fda:	62 1b       	sub	r22, r18
     fdc:	73 0b       	sbc	r23, r19
     fde:	84 0b       	sbc	r24, r20
     fe0:	ba 0b       	sbc	r27, r26
     fe2:	ee 1f       	adc	r30, r30
     fe4:	88 f7       	brcc	.-30     	; 0xfc8 <__divsf3_pse+0x94>
     fe6:	e0 95       	com	r30
     fe8:	08 95       	ret

00000fea <__fixsfsi>:
     fea:	0e 94 fc 07 	call	0xff8	; 0xff8 <__fixunssfsi>
     fee:	68 94       	set
     ff0:	b1 11       	cpse	r27, r1
     ff2:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_szero>
     ff6:	08 95       	ret

00000ff8 <__fixunssfsi>:
     ff8:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fp_splitA>
     ffc:	88 f0       	brcs	.+34     	; 0x1020 <__fixunssfsi+0x28>
     ffe:	9f 57       	subi	r25, 0x7F	; 127
    1000:	98 f0       	brcs	.+38     	; 0x1028 <__fixunssfsi+0x30>
    1002:	b9 2f       	mov	r27, r25
    1004:	99 27       	eor	r25, r25
    1006:	b7 51       	subi	r27, 0x17	; 23
    1008:	b0 f0       	brcs	.+44     	; 0x1036 <__fixunssfsi+0x3e>
    100a:	e1 f0       	breq	.+56     	; 0x1044 <__fixunssfsi+0x4c>
    100c:	66 0f       	add	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	1a f0       	brmi	.+6      	; 0x101c <__fixunssfsi+0x24>
    1016:	ba 95       	dec	r27
    1018:	c9 f7       	brne	.-14     	; 0x100c <__fixunssfsi+0x14>
    101a:	14 c0       	rjmp	.+40     	; 0x1044 <__fixunssfsi+0x4c>
    101c:	b1 30       	cpi	r27, 0x01	; 1
    101e:	91 f0       	breq	.+36     	; 0x1044 <__fixunssfsi+0x4c>
    1020:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_zero>
    1024:	b1 e0       	ldi	r27, 0x01	; 1
    1026:	08 95       	ret
    1028:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__fp_zero>
    102c:	67 2f       	mov	r22, r23
    102e:	78 2f       	mov	r23, r24
    1030:	88 27       	eor	r24, r24
    1032:	b8 5f       	subi	r27, 0xF8	; 248
    1034:	39 f0       	breq	.+14     	; 0x1044 <__fixunssfsi+0x4c>
    1036:	b9 3f       	cpi	r27, 0xF9	; 249
    1038:	cc f3       	brlt	.-14     	; 0x102c <__fixunssfsi+0x34>
    103a:	86 95       	lsr	r24
    103c:	77 95       	ror	r23
    103e:	67 95       	ror	r22
    1040:	b3 95       	inc	r27
    1042:	d9 f7       	brne	.-10     	; 0x103a <__fixunssfsi+0x42>
    1044:	3e f4       	brtc	.+14     	; 0x1054 <__fixunssfsi+0x5c>
    1046:	90 95       	com	r25
    1048:	80 95       	com	r24
    104a:	70 95       	com	r23
    104c:	61 95       	neg	r22
    104e:	7f 4f       	sbci	r23, 0xFF	; 255
    1050:	8f 4f       	sbci	r24, 0xFF	; 255
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	08 95       	ret

00001056 <__floatunsisf>:
    1056:	e8 94       	clt
    1058:	09 c0       	rjmp	.+18     	; 0x106c <__floatsisf+0x12>

0000105a <__floatsisf>:
    105a:	97 fb       	bst	r25, 7
    105c:	3e f4       	brtc	.+14     	; 0x106c <__floatsisf+0x12>
    105e:	90 95       	com	r25
    1060:	80 95       	com	r24
    1062:	70 95       	com	r23
    1064:	61 95       	neg	r22
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	8f 4f       	sbci	r24, 0xFF	; 255
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	99 23       	and	r25, r25
    106e:	a9 f0       	breq	.+42     	; 0x109a <__floatsisf+0x40>
    1070:	f9 2f       	mov	r31, r25
    1072:	96 e9       	ldi	r25, 0x96	; 150
    1074:	bb 27       	eor	r27, r27
    1076:	93 95       	inc	r25
    1078:	f6 95       	lsr	r31
    107a:	87 95       	ror	r24
    107c:	77 95       	ror	r23
    107e:	67 95       	ror	r22
    1080:	b7 95       	ror	r27
    1082:	f1 11       	cpse	r31, r1
    1084:	f8 cf       	rjmp	.-16     	; 0x1076 <__floatsisf+0x1c>
    1086:	fa f4       	brpl	.+62     	; 0x10c6 <__floatsisf+0x6c>
    1088:	bb 0f       	add	r27, r27
    108a:	11 f4       	brne	.+4      	; 0x1090 <__floatsisf+0x36>
    108c:	60 ff       	sbrs	r22, 0
    108e:	1b c0       	rjmp	.+54     	; 0x10c6 <__floatsisf+0x6c>
    1090:	6f 5f       	subi	r22, 0xFF	; 255
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	8f 4f       	sbci	r24, 0xFF	; 255
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	16 c0       	rjmp	.+44     	; 0x10c6 <__floatsisf+0x6c>
    109a:	88 23       	and	r24, r24
    109c:	11 f0       	breq	.+4      	; 0x10a2 <__floatsisf+0x48>
    109e:	96 e9       	ldi	r25, 0x96	; 150
    10a0:	11 c0       	rjmp	.+34     	; 0x10c4 <__floatsisf+0x6a>
    10a2:	77 23       	and	r23, r23
    10a4:	21 f0       	breq	.+8      	; 0x10ae <__floatsisf+0x54>
    10a6:	9e e8       	ldi	r25, 0x8E	; 142
    10a8:	87 2f       	mov	r24, r23
    10aa:	76 2f       	mov	r23, r22
    10ac:	05 c0       	rjmp	.+10     	; 0x10b8 <__floatsisf+0x5e>
    10ae:	66 23       	and	r22, r22
    10b0:	71 f0       	breq	.+28     	; 0x10ce <__floatsisf+0x74>
    10b2:	96 e8       	ldi	r25, 0x86	; 134
    10b4:	86 2f       	mov	r24, r22
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	2a f0       	brmi	.+10     	; 0x10c6 <__floatsisf+0x6c>
    10bc:	9a 95       	dec	r25
    10be:	66 0f       	add	r22, r22
    10c0:	77 1f       	adc	r23, r23
    10c2:	88 1f       	adc	r24, r24
    10c4:	da f7       	brpl	.-10     	; 0x10bc <__floatsisf+0x62>
    10c6:	88 0f       	add	r24, r24
    10c8:	96 95       	lsr	r25
    10ca:	87 95       	ror	r24
    10cc:	97 f9       	bld	r25, 7
    10ce:	08 95       	ret

000010d0 <__fp_cmp>:
    10d0:	99 0f       	add	r25, r25
    10d2:	00 08       	sbc	r0, r0
    10d4:	55 0f       	add	r21, r21
    10d6:	aa 0b       	sbc	r26, r26
    10d8:	e0 e8       	ldi	r30, 0x80	; 128
    10da:	fe ef       	ldi	r31, 0xFE	; 254
    10dc:	16 16       	cp	r1, r22
    10de:	17 06       	cpc	r1, r23
    10e0:	e8 07       	cpc	r30, r24
    10e2:	f9 07       	cpc	r31, r25
    10e4:	c0 f0       	brcs	.+48     	; 0x1116 <__fp_cmp+0x46>
    10e6:	12 16       	cp	r1, r18
    10e8:	13 06       	cpc	r1, r19
    10ea:	e4 07       	cpc	r30, r20
    10ec:	f5 07       	cpc	r31, r21
    10ee:	98 f0       	brcs	.+38     	; 0x1116 <__fp_cmp+0x46>
    10f0:	62 1b       	sub	r22, r18
    10f2:	73 0b       	sbc	r23, r19
    10f4:	84 0b       	sbc	r24, r20
    10f6:	95 0b       	sbc	r25, r21
    10f8:	39 f4       	brne	.+14     	; 0x1108 <__fp_cmp+0x38>
    10fa:	0a 26       	eor	r0, r26
    10fc:	61 f0       	breq	.+24     	; 0x1116 <__fp_cmp+0x46>
    10fe:	23 2b       	or	r18, r19
    1100:	24 2b       	or	r18, r20
    1102:	25 2b       	or	r18, r21
    1104:	21 f4       	brne	.+8      	; 0x110e <__fp_cmp+0x3e>
    1106:	08 95       	ret
    1108:	0a 26       	eor	r0, r26
    110a:	09 f4       	brne	.+2      	; 0x110e <__fp_cmp+0x3e>
    110c:	a1 40       	sbci	r26, 0x01	; 1
    110e:	a6 95       	lsr	r26
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	81 1d       	adc	r24, r1
    1114:	81 1d       	adc	r24, r1
    1116:	08 95       	ret

00001118 <__fp_inf>:
    1118:	97 f9       	bld	r25, 7
    111a:	9f 67       	ori	r25, 0x7F	; 127
    111c:	80 e8       	ldi	r24, 0x80	; 128
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	08 95       	ret

00001124 <__fp_nan>:
    1124:	9f ef       	ldi	r25, 0xFF	; 255
    1126:	80 ec       	ldi	r24, 0xC0	; 192
    1128:	08 95       	ret

0000112a <__fp_pscA>:
    112a:	00 24       	eor	r0, r0
    112c:	0a 94       	dec	r0
    112e:	16 16       	cp	r1, r22
    1130:	17 06       	cpc	r1, r23
    1132:	18 06       	cpc	r1, r24
    1134:	09 06       	cpc	r0, r25
    1136:	08 95       	ret

00001138 <__fp_pscB>:
    1138:	00 24       	eor	r0, r0
    113a:	0a 94       	dec	r0
    113c:	12 16       	cp	r1, r18
    113e:	13 06       	cpc	r1, r19
    1140:	14 06       	cpc	r1, r20
    1142:	05 06       	cpc	r0, r21
    1144:	08 95       	ret

00001146 <__fp_round>:
    1146:	09 2e       	mov	r0, r25
    1148:	03 94       	inc	r0
    114a:	00 0c       	add	r0, r0
    114c:	11 f4       	brne	.+4      	; 0x1152 <__fp_round+0xc>
    114e:	88 23       	and	r24, r24
    1150:	52 f0       	brmi	.+20     	; 0x1166 <__fp_round+0x20>
    1152:	bb 0f       	add	r27, r27
    1154:	40 f4       	brcc	.+16     	; 0x1166 <__fp_round+0x20>
    1156:	bf 2b       	or	r27, r31
    1158:	11 f4       	brne	.+4      	; 0x115e <__fp_round+0x18>
    115a:	60 ff       	sbrs	r22, 0
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <__fp_round+0x20>
    115e:	6f 5f       	subi	r22, 0xFF	; 255
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	8f 4f       	sbci	r24, 0xFF	; 255
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	08 95       	ret

00001168 <__fp_split3>:
    1168:	57 fd       	sbrc	r21, 7
    116a:	90 58       	subi	r25, 0x80	; 128
    116c:	44 0f       	add	r20, r20
    116e:	55 1f       	adc	r21, r21
    1170:	59 f0       	breq	.+22     	; 0x1188 <__fp_splitA+0x10>
    1172:	5f 3f       	cpi	r21, 0xFF	; 255
    1174:	71 f0       	breq	.+28     	; 0x1192 <__fp_splitA+0x1a>
    1176:	47 95       	ror	r20

00001178 <__fp_splitA>:
    1178:	88 0f       	add	r24, r24
    117a:	97 fb       	bst	r25, 7
    117c:	99 1f       	adc	r25, r25
    117e:	61 f0       	breq	.+24     	; 0x1198 <__fp_splitA+0x20>
    1180:	9f 3f       	cpi	r25, 0xFF	; 255
    1182:	79 f0       	breq	.+30     	; 0x11a2 <__fp_splitA+0x2a>
    1184:	87 95       	ror	r24
    1186:	08 95       	ret
    1188:	12 16       	cp	r1, r18
    118a:	13 06       	cpc	r1, r19
    118c:	14 06       	cpc	r1, r20
    118e:	55 1f       	adc	r21, r21
    1190:	f2 cf       	rjmp	.-28     	; 0x1176 <__fp_split3+0xe>
    1192:	46 95       	lsr	r20
    1194:	f1 df       	rcall	.-30     	; 0x1178 <__fp_splitA>
    1196:	08 c0       	rjmp	.+16     	; 0x11a8 <__fp_splitA+0x30>
    1198:	16 16       	cp	r1, r22
    119a:	17 06       	cpc	r1, r23
    119c:	18 06       	cpc	r1, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	f1 cf       	rjmp	.-30     	; 0x1184 <__fp_splitA+0xc>
    11a2:	86 95       	lsr	r24
    11a4:	71 05       	cpc	r23, r1
    11a6:	61 05       	cpc	r22, r1
    11a8:	08 94       	sec
    11aa:	08 95       	ret

000011ac <__fp_zero>:
    11ac:	e8 94       	clt

000011ae <__fp_szero>:
    11ae:	bb 27       	eor	r27, r27
    11b0:	66 27       	eor	r22, r22
    11b2:	77 27       	eor	r23, r23
    11b4:	cb 01       	movw	r24, r22
    11b6:	97 f9       	bld	r25, 7
    11b8:	08 95       	ret

000011ba <__gesf2>:
    11ba:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__fp_cmp>
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <__gesf2+0x8>
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	08 95       	ret

000011c4 <__mulsf3>:
    11c4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__mulsf3x>
    11c8:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_round>
    11cc:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_pscA>
    11d0:	38 f0       	brcs	.+14     	; 0x11e0 <__mulsf3+0x1c>
    11d2:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_pscB>
    11d6:	20 f0       	brcs	.+8      	; 0x11e0 <__mulsf3+0x1c>
    11d8:	95 23       	and	r25, r21
    11da:	11 f0       	breq	.+4      	; 0x11e0 <__mulsf3+0x1c>
    11dc:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_inf>
    11e0:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_nan>
    11e4:	11 24       	eor	r1, r1
    11e6:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_szero>

000011ea <__mulsf3x>:
    11ea:	0e 94 b4 08 	call	0x1168	; 0x1168 <__fp_split3>
    11ee:	70 f3       	brcs	.-36     	; 0x11cc <__mulsf3+0x8>

000011f0 <__mulsf3_pse>:
    11f0:	95 9f       	mul	r25, r21
    11f2:	c1 f3       	breq	.-16     	; 0x11e4 <__mulsf3+0x20>
    11f4:	95 0f       	add	r25, r21
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	55 1f       	adc	r21, r21
    11fa:	62 9f       	mul	r22, r18
    11fc:	f0 01       	movw	r30, r0
    11fe:	72 9f       	mul	r23, r18
    1200:	bb 27       	eor	r27, r27
    1202:	f0 0d       	add	r31, r0
    1204:	b1 1d       	adc	r27, r1
    1206:	63 9f       	mul	r22, r19
    1208:	aa 27       	eor	r26, r26
    120a:	f0 0d       	add	r31, r0
    120c:	b1 1d       	adc	r27, r1
    120e:	aa 1f       	adc	r26, r26
    1210:	64 9f       	mul	r22, r20
    1212:	66 27       	eor	r22, r22
    1214:	b0 0d       	add	r27, r0
    1216:	a1 1d       	adc	r26, r1
    1218:	66 1f       	adc	r22, r22
    121a:	82 9f       	mul	r24, r18
    121c:	22 27       	eor	r18, r18
    121e:	b0 0d       	add	r27, r0
    1220:	a1 1d       	adc	r26, r1
    1222:	62 1f       	adc	r22, r18
    1224:	73 9f       	mul	r23, r19
    1226:	b0 0d       	add	r27, r0
    1228:	a1 1d       	adc	r26, r1
    122a:	62 1f       	adc	r22, r18
    122c:	83 9f       	mul	r24, r19
    122e:	a0 0d       	add	r26, r0
    1230:	61 1d       	adc	r22, r1
    1232:	22 1f       	adc	r18, r18
    1234:	74 9f       	mul	r23, r20
    1236:	33 27       	eor	r19, r19
    1238:	a0 0d       	add	r26, r0
    123a:	61 1d       	adc	r22, r1
    123c:	23 1f       	adc	r18, r19
    123e:	84 9f       	mul	r24, r20
    1240:	60 0d       	add	r22, r0
    1242:	21 1d       	adc	r18, r1
    1244:	82 2f       	mov	r24, r18
    1246:	76 2f       	mov	r23, r22
    1248:	6a 2f       	mov	r22, r26
    124a:	11 24       	eor	r1, r1
    124c:	9f 57       	subi	r25, 0x7F	; 127
    124e:	50 40       	sbci	r21, 0x00	; 0
    1250:	9a f0       	brmi	.+38     	; 0x1278 <__mulsf3_pse+0x88>
    1252:	f1 f0       	breq	.+60     	; 0x1290 <__mulsf3_pse+0xa0>
    1254:	88 23       	and	r24, r24
    1256:	4a f0       	brmi	.+18     	; 0x126a <__mulsf3_pse+0x7a>
    1258:	ee 0f       	add	r30, r30
    125a:	ff 1f       	adc	r31, r31
    125c:	bb 1f       	adc	r27, r27
    125e:	66 1f       	adc	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	91 50       	subi	r25, 0x01	; 1
    1266:	50 40       	sbci	r21, 0x00	; 0
    1268:	a9 f7       	brne	.-22     	; 0x1254 <__mulsf3_pse+0x64>
    126a:	9e 3f       	cpi	r25, 0xFE	; 254
    126c:	51 05       	cpc	r21, r1
    126e:	80 f0       	brcs	.+32     	; 0x1290 <__mulsf3_pse+0xa0>
    1270:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_inf>
    1274:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_szero>
    1278:	5f 3f       	cpi	r21, 0xFF	; 255
    127a:	e4 f3       	brlt	.-8      	; 0x1274 <__mulsf3_pse+0x84>
    127c:	98 3e       	cpi	r25, 0xE8	; 232
    127e:	d4 f3       	brlt	.-12     	; 0x1274 <__mulsf3_pse+0x84>
    1280:	86 95       	lsr	r24
    1282:	77 95       	ror	r23
    1284:	67 95       	ror	r22
    1286:	b7 95       	ror	r27
    1288:	f7 95       	ror	r31
    128a:	e7 95       	ror	r30
    128c:	9f 5f       	subi	r25, 0xFF	; 255
    128e:	c1 f7       	brne	.-16     	; 0x1280 <__mulsf3_pse+0x90>
    1290:	fe 2b       	or	r31, r30
    1292:	88 0f       	add	r24, r24
    1294:	91 1d       	adc	r25, r1
    1296:	96 95       	lsr	r25
    1298:	87 95       	ror	r24
    129a:	97 f9       	bld	r25, 7
    129c:	08 95       	ret

0000129e <pow>:
    129e:	fa 01       	movw	r30, r20
    12a0:	ee 0f       	add	r30, r30
    12a2:	ff 1f       	adc	r31, r31
    12a4:	30 96       	adiw	r30, 0x00	; 0
    12a6:	21 05       	cpc	r18, r1
    12a8:	31 05       	cpc	r19, r1
    12aa:	a1 f1       	breq	.+104    	; 0x1314 <pow+0x76>
    12ac:	61 15       	cp	r22, r1
    12ae:	71 05       	cpc	r23, r1
    12b0:	61 f4       	brne	.+24     	; 0x12ca <pow+0x2c>
    12b2:	80 38       	cpi	r24, 0x80	; 128
    12b4:	bf e3       	ldi	r27, 0x3F	; 63
    12b6:	9b 07       	cpc	r25, r27
    12b8:	49 f1       	breq	.+82     	; 0x130c <pow+0x6e>
    12ba:	68 94       	set
    12bc:	90 38       	cpi	r25, 0x80	; 128
    12be:	81 05       	cpc	r24, r1
    12c0:	61 f0       	breq	.+24     	; 0x12da <pow+0x3c>
    12c2:	80 38       	cpi	r24, 0x80	; 128
    12c4:	bf ef       	ldi	r27, 0xFF	; 255
    12c6:	9b 07       	cpc	r25, r27
    12c8:	41 f0       	breq	.+16     	; 0x12da <pow+0x3c>
    12ca:	99 23       	and	r25, r25
    12cc:	4a f5       	brpl	.+82     	; 0x1320 <pow+0x82>
    12ce:	ff 3f       	cpi	r31, 0xFF	; 255
    12d0:	e1 05       	cpc	r30, r1
    12d2:	31 05       	cpc	r19, r1
    12d4:	21 05       	cpc	r18, r1
    12d6:	19 f1       	breq	.+70     	; 0x131e <pow+0x80>
    12d8:	e8 94       	clt
    12da:	08 94       	sec
    12dc:	e7 95       	ror	r30
    12de:	d9 01       	movw	r26, r18
    12e0:	aa 23       	and	r26, r26
    12e2:	29 f4       	brne	.+10     	; 0x12ee <pow+0x50>
    12e4:	ab 2f       	mov	r26, r27
    12e6:	be 2f       	mov	r27, r30
    12e8:	f8 5f       	subi	r31, 0xF8	; 248
    12ea:	d0 f3       	brcs	.-12     	; 0x12e0 <pow+0x42>
    12ec:	10 c0       	rjmp	.+32     	; 0x130e <pow+0x70>
    12ee:	ff 5f       	subi	r31, 0xFF	; 255
    12f0:	70 f4       	brcc	.+28     	; 0x130e <pow+0x70>
    12f2:	a6 95       	lsr	r26
    12f4:	e0 f7       	brcc	.-8      	; 0x12ee <pow+0x50>
    12f6:	f7 39       	cpi	r31, 0x97	; 151
    12f8:	50 f0       	brcs	.+20     	; 0x130e <pow+0x70>
    12fa:	19 f0       	breq	.+6      	; 0x1302 <pow+0x64>
    12fc:	ff 3a       	cpi	r31, 0xAF	; 175
    12fe:	38 f4       	brcc	.+14     	; 0x130e <pow+0x70>
    1300:	9f 77       	andi	r25, 0x7F	; 127
    1302:	9f 93       	push	r25
    1304:	0d d0       	rcall	.+26     	; 0x1320 <pow+0x82>
    1306:	0f 90       	pop	r0
    1308:	07 fc       	sbrc	r0, 7
    130a:	90 58       	subi	r25, 0x80	; 128
    130c:	08 95       	ret
    130e:	46 f0       	brts	.+16     	; 0x1320 <pow+0x82>
    1310:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_nan>
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	80 e8       	ldi	r24, 0x80	; 128
    131a:	9f e3       	ldi	r25, 0x3F	; 63
    131c:	08 95       	ret
    131e:	4f e7       	ldi	r20, 0x7F	; 127
    1320:	9f 77       	andi	r25, 0x7F	; 127
    1322:	5f 93       	push	r21
    1324:	4f 93       	push	r20
    1326:	3f 93       	push	r19
    1328:	2f 93       	push	r18
    132a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <log>
    132e:	2f 91       	pop	r18
    1330:	3f 91       	pop	r19
    1332:	4f 91       	pop	r20
    1334:	5f 91       	pop	r21
    1336:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
    133a:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <exp>

0000133e <round>:
    133e:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fp_splitA>
    1342:	e8 f0       	brcs	.+58     	; 0x137e <round+0x40>
    1344:	9e 37       	cpi	r25, 0x7E	; 126
    1346:	e8 f0       	brcs	.+58     	; 0x1382 <round+0x44>
    1348:	96 39       	cpi	r25, 0x96	; 150
    134a:	b8 f4       	brcc	.+46     	; 0x137a <round+0x3c>
    134c:	9e 38       	cpi	r25, 0x8E	; 142
    134e:	48 f4       	brcc	.+18     	; 0x1362 <round+0x24>
    1350:	67 2f       	mov	r22, r23
    1352:	78 2f       	mov	r23, r24
    1354:	88 27       	eor	r24, r24
    1356:	98 5f       	subi	r25, 0xF8	; 248
    1358:	f9 cf       	rjmp	.-14     	; 0x134c <round+0xe>
    135a:	86 95       	lsr	r24
    135c:	77 95       	ror	r23
    135e:	67 95       	ror	r22
    1360:	93 95       	inc	r25
    1362:	95 39       	cpi	r25, 0x95	; 149
    1364:	d0 f3       	brcs	.-12     	; 0x135a <round+0x1c>
    1366:	b6 2f       	mov	r27, r22
    1368:	b1 70       	andi	r27, 0x01	; 1
    136a:	6b 0f       	add	r22, r27
    136c:	71 1d       	adc	r23, r1
    136e:	81 1d       	adc	r24, r1
    1370:	20 f4       	brcc	.+8      	; 0x137a <round+0x3c>
    1372:	87 95       	ror	r24
    1374:	77 95       	ror	r23
    1376:	67 95       	ror	r22
    1378:	93 95       	inc	r25
    137a:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__fp_mintl>
    137e:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__fp_mpack>
    1382:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_szero>
    1386:	19 f4       	brne	.+6      	; 0x138e <round+0x50>
    1388:	16 f4       	brtc	.+4      	; 0x138e <round+0x50>
    138a:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_nan>
    138e:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__fp_mpack>

00001392 <sqrt>:
    1392:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fp_splitA>
    1396:	b8 f3       	brcs	.-18     	; 0x1386 <round+0x48>
    1398:	99 23       	and	r25, r25
    139a:	c9 f3       	breq	.-14     	; 0x138e <round+0x50>
    139c:	b6 f3       	brts	.-20     	; 0x138a <round+0x4c>
    139e:	9f 57       	subi	r25, 0x7F	; 127
    13a0:	55 0b       	sbc	r21, r21
    13a2:	87 ff       	sbrs	r24, 7
    13a4:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__fp_norm2>
    13a8:	00 24       	eor	r0, r0
    13aa:	a0 e6       	ldi	r26, 0x60	; 96
    13ac:	40 ea       	ldi	r20, 0xA0	; 160
    13ae:	90 01       	movw	r18, r0
    13b0:	80 58       	subi	r24, 0x80	; 128
    13b2:	56 95       	lsr	r21
    13b4:	97 95       	ror	r25
    13b6:	28 f4       	brcc	.+10     	; 0x13c2 <sqrt+0x30>
    13b8:	80 5c       	subi	r24, 0xC0	; 192
    13ba:	66 0f       	add	r22, r22
    13bc:	77 1f       	adc	r23, r23
    13be:	88 1f       	adc	r24, r24
    13c0:	20 f0       	brcs	.+8      	; 0x13ca <sqrt+0x38>
    13c2:	26 17       	cp	r18, r22
    13c4:	37 07       	cpc	r19, r23
    13c6:	48 07       	cpc	r20, r24
    13c8:	30 f4       	brcc	.+12     	; 0x13d6 <sqrt+0x44>
    13ca:	62 1b       	sub	r22, r18
    13cc:	73 0b       	sbc	r23, r19
    13ce:	84 0b       	sbc	r24, r20
    13d0:	20 29       	or	r18, r0
    13d2:	31 29       	or	r19, r1
    13d4:	4a 2b       	or	r20, r26
    13d6:	a6 95       	lsr	r26
    13d8:	17 94       	ror	r1
    13da:	07 94       	ror	r0
    13dc:	20 25       	eor	r18, r0
    13de:	31 25       	eor	r19, r1
    13e0:	4a 27       	eor	r20, r26
    13e2:	58 f7       	brcc	.-42     	; 0x13ba <sqrt+0x28>
    13e4:	66 0f       	add	r22, r22
    13e6:	77 1f       	adc	r23, r23
    13e8:	88 1f       	adc	r24, r24
    13ea:	20 f0       	brcs	.+8      	; 0x13f4 <sqrt+0x62>
    13ec:	26 17       	cp	r18, r22
    13ee:	37 07       	cpc	r19, r23
    13f0:	48 07       	cpc	r20, r24
    13f2:	30 f4       	brcc	.+12     	; 0x1400 <sqrt+0x6e>
    13f4:	62 0b       	sbc	r22, r18
    13f6:	73 0b       	sbc	r23, r19
    13f8:	84 0b       	sbc	r24, r20
    13fa:	20 0d       	add	r18, r0
    13fc:	31 1d       	adc	r19, r1
    13fe:	41 1d       	adc	r20, r1
    1400:	a0 95       	com	r26
    1402:	81 f7       	brne	.-32     	; 0x13e4 <sqrt+0x52>
    1404:	b9 01       	movw	r22, r18
    1406:	84 2f       	mov	r24, r20
    1408:	91 58       	subi	r25, 0x81	; 129
    140a:	88 0f       	add	r24, r24
    140c:	96 95       	lsr	r25
    140e:	87 95       	ror	r24
    1410:	08 95       	ret
    1412:	29 f4       	brne	.+10     	; 0x141e <sqrt+0x8c>
    1414:	16 f0       	brts	.+4      	; 0x141a <sqrt+0x88>
    1416:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_inf>
    141a:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__fp_zero>
    141e:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_nan>

00001422 <exp>:
    1422:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fp_splitA>
    1426:	a8 f3       	brcs	.-22     	; 0x1412 <sqrt+0x80>
    1428:	96 38       	cpi	r25, 0x86	; 134
    142a:	a0 f7       	brcc	.-24     	; 0x1414 <sqrt+0x82>
    142c:	07 f8       	bld	r0, 7
    142e:	0f 92       	push	r0
    1430:	e8 94       	clt
    1432:	2b e3       	ldi	r18, 0x3B	; 59
    1434:	3a ea       	ldi	r19, 0xAA	; 170
    1436:	48 eb       	ldi	r20, 0xB8	; 184
    1438:	5f e7       	ldi	r21, 0x7F	; 127
    143a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__mulsf3_pse>
    143e:	0f 92       	push	r0
    1440:	0f 92       	push	r0
    1442:	0f 92       	push	r0
    1444:	4d b7       	in	r20, 0x3d	; 61
    1446:	5e b7       	in	r21, 0x3e	; 62
    1448:	0f 92       	push	r0
    144a:	0e 94 2c 0b 	call	0x1658	; 0x1658 <modf>
    144e:	e8 e6       	ldi	r30, 0x68	; 104
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__fp_powser>
    1456:	4f 91       	pop	r20
    1458:	5f 91       	pop	r21
    145a:	ef 91       	pop	r30
    145c:	ff 91       	pop	r31
    145e:	e5 95       	asr	r30
    1460:	ee 1f       	adc	r30, r30
    1462:	ff 1f       	adc	r31, r31
    1464:	49 f0       	breq	.+18     	; 0x1478 <exp+0x56>
    1466:	fe 57       	subi	r31, 0x7E	; 126
    1468:	e0 68       	ori	r30, 0x80	; 128
    146a:	44 27       	eor	r20, r20
    146c:	ee 0f       	add	r30, r30
    146e:	44 1f       	adc	r20, r20
    1470:	fa 95       	dec	r31
    1472:	e1 f7       	brne	.-8      	; 0x146c <exp+0x4a>
    1474:	41 95       	neg	r20
    1476:	55 0b       	sbc	r21, r21
    1478:	0e 94 a6 0a 	call	0x154c	; 0x154c <ldexp>
    147c:	0f 90       	pop	r0
    147e:	07 fe       	sbrs	r0, 7
    1480:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <inverse>
    1484:	08 95       	ret

00001486 <__fp_mintl>:
    1486:	88 23       	and	r24, r24
    1488:	71 f4       	brne	.+28     	; 0x14a6 <__fp_mintl+0x20>
    148a:	77 23       	and	r23, r23
    148c:	21 f0       	breq	.+8      	; 0x1496 <__fp_mintl+0x10>
    148e:	98 50       	subi	r25, 0x08	; 8
    1490:	87 2b       	or	r24, r23
    1492:	76 2f       	mov	r23, r22
    1494:	07 c0       	rjmp	.+14     	; 0x14a4 <__fp_mintl+0x1e>
    1496:	66 23       	and	r22, r22
    1498:	11 f4       	brne	.+4      	; 0x149e <__fp_mintl+0x18>
    149a:	99 27       	eor	r25, r25
    149c:	0d c0       	rjmp	.+26     	; 0x14b8 <__fp_mintl+0x32>
    149e:	90 51       	subi	r25, 0x10	; 16
    14a0:	86 2b       	or	r24, r22
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	2a f0       	brmi	.+10     	; 0x14b2 <__fp_mintl+0x2c>
    14a8:	9a 95       	dec	r25
    14aa:	66 0f       	add	r22, r22
    14ac:	77 1f       	adc	r23, r23
    14ae:	88 1f       	adc	r24, r24
    14b0:	da f7       	brpl	.-10     	; 0x14a8 <__fp_mintl+0x22>
    14b2:	88 0f       	add	r24, r24
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	97 f9       	bld	r25, 7
    14ba:	08 95       	ret

000014bc <__fp_mpack>:
    14bc:	9f 3f       	cpi	r25, 0xFF	; 255
    14be:	31 f0       	breq	.+12     	; 0x14cc <__fp_mpack_finite+0xc>

000014c0 <__fp_mpack_finite>:
    14c0:	91 50       	subi	r25, 0x01	; 1
    14c2:	20 f4       	brcc	.+8      	; 0x14cc <__fp_mpack_finite+0xc>
    14c4:	87 95       	ror	r24
    14c6:	77 95       	ror	r23
    14c8:	67 95       	ror	r22
    14ca:	b7 95       	ror	r27
    14cc:	88 0f       	add	r24, r24
    14ce:	91 1d       	adc	r25, r1
    14d0:	96 95       	lsr	r25
    14d2:	87 95       	ror	r24
    14d4:	97 f9       	bld	r25, 7
    14d6:	08 95       	ret

000014d8 <__fp_norm2>:
    14d8:	91 50       	subi	r25, 0x01	; 1
    14da:	50 40       	sbci	r21, 0x00	; 0
    14dc:	66 0f       	add	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	d2 f7       	brpl	.-12     	; 0x14d8 <__fp_norm2>
    14e4:	08 95       	ret

000014e6 <__fp_powser>:
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	1f 93       	push	r17
    14ec:	0f 93       	push	r16
    14ee:	ff 92       	push	r15
    14f0:	ef 92       	push	r14
    14f2:	df 92       	push	r13
    14f4:	7b 01       	movw	r14, r22
    14f6:	8c 01       	movw	r16, r24
    14f8:	68 94       	set
    14fa:	06 c0       	rjmp	.+12     	; 0x1508 <__fp_powser+0x22>
    14fc:	da 2e       	mov	r13, r26
    14fe:	ef 01       	movw	r28, r30
    1500:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__mulsf3x>
    1504:	fe 01       	movw	r30, r28
    1506:	e8 94       	clt
    1508:	a5 91       	lpm	r26, Z+
    150a:	25 91       	lpm	r18, Z+
    150c:	35 91       	lpm	r19, Z+
    150e:	45 91       	lpm	r20, Z+
    1510:	55 91       	lpm	r21, Z+
    1512:	a6 f3       	brts	.-24     	; 0x14fc <__fp_powser+0x16>
    1514:	ef 01       	movw	r28, r30
    1516:	0e 94 29 07 	call	0xe52	; 0xe52 <__addsf3x>
    151a:	fe 01       	movw	r30, r28
    151c:	97 01       	movw	r18, r14
    151e:	a8 01       	movw	r20, r16
    1520:	da 94       	dec	r13
    1522:	69 f7       	brne	.-38     	; 0x14fe <__fp_powser+0x18>
    1524:	df 90       	pop	r13
    1526:	ef 90       	pop	r14
    1528:	ff 90       	pop	r15
    152a:	0f 91       	pop	r16
    152c:	1f 91       	pop	r17
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <inverse>:
    1534:	9b 01       	movw	r18, r22
    1536:	ac 01       	movw	r20, r24
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	80 e8       	ldi	r24, 0x80	; 128
    153e:	9f e3       	ldi	r25, 0x3F	; 63
    1540:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__divsf3>
    1544:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_inf>
    1548:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__fp_mpack>

0000154c <ldexp>:
    154c:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fp_splitA>
    1550:	d8 f3       	brcs	.-10     	; 0x1548 <inverse+0x14>
    1552:	99 23       	and	r25, r25
    1554:	c9 f3       	breq	.-14     	; 0x1548 <inverse+0x14>
    1556:	94 0f       	add	r25, r20
    1558:	51 1d       	adc	r21, r1
    155a:	a3 f3       	brvs	.-24     	; 0x1544 <inverse+0x10>
    155c:	91 50       	subi	r25, 0x01	; 1
    155e:	50 40       	sbci	r21, 0x00	; 0
    1560:	94 f0       	brlt	.+36     	; 0x1586 <ldexp+0x3a>
    1562:	59 f0       	breq	.+22     	; 0x157a <ldexp+0x2e>
    1564:	88 23       	and	r24, r24
    1566:	32 f0       	brmi	.+12     	; 0x1574 <ldexp+0x28>
    1568:	66 0f       	add	r22, r22
    156a:	77 1f       	adc	r23, r23
    156c:	88 1f       	adc	r24, r24
    156e:	91 50       	subi	r25, 0x01	; 1
    1570:	50 40       	sbci	r21, 0x00	; 0
    1572:	c1 f7       	brne	.-16     	; 0x1564 <ldexp+0x18>
    1574:	9e 3f       	cpi	r25, 0xFE	; 254
    1576:	51 05       	cpc	r21, r1
    1578:	2c f7       	brge	.-54     	; 0x1544 <inverse+0x10>
    157a:	88 0f       	add	r24, r24
    157c:	91 1d       	adc	r25, r1
    157e:	96 95       	lsr	r25
    1580:	87 95       	ror	r24
    1582:	97 f9       	bld	r25, 7
    1584:	08 95       	ret
    1586:	5f 3f       	cpi	r21, 0xFF	; 255
    1588:	ac f0       	brlt	.+42     	; 0x15b4 <ldexp+0x68>
    158a:	98 3e       	cpi	r25, 0xE8	; 232
    158c:	9c f0       	brlt	.+38     	; 0x15b4 <ldexp+0x68>
    158e:	bb 27       	eor	r27, r27
    1590:	86 95       	lsr	r24
    1592:	77 95       	ror	r23
    1594:	67 95       	ror	r22
    1596:	b7 95       	ror	r27
    1598:	08 f4       	brcc	.+2      	; 0x159c <ldexp+0x50>
    159a:	b1 60       	ori	r27, 0x01	; 1
    159c:	93 95       	inc	r25
    159e:	c1 f7       	brne	.-16     	; 0x1590 <ldexp+0x44>
    15a0:	bb 0f       	add	r27, r27
    15a2:	58 f7       	brcc	.-42     	; 0x157a <ldexp+0x2e>
    15a4:	11 f4       	brne	.+4      	; 0x15aa <ldexp+0x5e>
    15a6:	60 ff       	sbrs	r22, 0
    15a8:	e8 cf       	rjmp	.-48     	; 0x157a <ldexp+0x2e>
    15aa:	6f 5f       	subi	r22, 0xFF	; 255
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	8f 4f       	sbci	r24, 0xFF	; 255
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	e3 cf       	rjmp	.-58     	; 0x157a <ldexp+0x2e>
    15b4:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_szero>
    15b8:	16 f0       	brts	.+4      	; 0x15be <ldexp+0x72>
    15ba:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__fp_mpack>
    15be:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_nan>
    15c2:	68 94       	set
    15c4:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_inf>

000015c8 <log>:
    15c8:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fp_splitA>
    15cc:	a8 f3       	brcs	.-22     	; 0x15b8 <ldexp+0x6c>
    15ce:	99 23       	and	r25, r25
    15d0:	c1 f3       	breq	.-16     	; 0x15c2 <ldexp+0x76>
    15d2:	ae f3       	brts	.-22     	; 0x15be <ldexp+0x72>
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	1f 93       	push	r17
    15da:	0f 93       	push	r16
    15dc:	ff 92       	push	r15
    15de:	c9 2f       	mov	r28, r25
    15e0:	dd 27       	eor	r29, r29
    15e2:	88 23       	and	r24, r24
    15e4:	2a f0       	brmi	.+10     	; 0x15f0 <log+0x28>
    15e6:	21 97       	sbiw	r28, 0x01	; 1
    15e8:	66 0f       	add	r22, r22
    15ea:	77 1f       	adc	r23, r23
    15ec:	88 1f       	adc	r24, r24
    15ee:	da f7       	brpl	.-10     	; 0x15e6 <log+0x1e>
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	5f eb       	ldi	r21, 0xBF	; 191
    15f8:	9f e3       	ldi	r25, 0x3F	; 63
    15fa:	88 39       	cpi	r24, 0x98	; 152
    15fc:	20 f0       	brcs	.+8      	; 0x1606 <log+0x3e>
    15fe:	80 3e       	cpi	r24, 0xE0	; 224
    1600:	38 f0       	brcs	.+14     	; 0x1610 <log+0x48>
    1602:	21 96       	adiw	r28, 0x01	; 1
    1604:	8f 77       	andi	r24, 0x7F	; 127
    1606:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3>
    160a:	e0 e9       	ldi	r30, 0x90	; 144
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <log+0x50>
    1610:	0e 94 12 07 	call	0xe24	; 0xe24 <__addsf3>
    1614:	ed eb       	ldi	r30, 0xBD	; 189
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__fp_powser>
    161c:	8b 01       	movw	r16, r22
    161e:	be 01       	movw	r22, r28
    1620:	ec 01       	movw	r28, r24
    1622:	fb 2e       	mov	r15, r27
    1624:	6f 57       	subi	r22, 0x7F	; 127
    1626:	71 09       	sbc	r23, r1
    1628:	75 95       	asr	r23
    162a:	77 1f       	adc	r23, r23
    162c:	88 0b       	sbc	r24, r24
    162e:	99 0b       	sbc	r25, r25
    1630:	0e 94 2d 08 	call	0x105a	; 0x105a <__floatsisf>
    1634:	28 e1       	ldi	r18, 0x18	; 24
    1636:	32 e7       	ldi	r19, 0x72	; 114
    1638:	41 e3       	ldi	r20, 0x31	; 49
    163a:	5f e3       	ldi	r21, 0x3F	; 63
    163c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__mulsf3x>
    1640:	af 2d       	mov	r26, r15
    1642:	98 01       	movw	r18, r16
    1644:	ae 01       	movw	r20, r28
    1646:	ff 90       	pop	r15
    1648:	0f 91       	pop	r16
    164a:	1f 91       	pop	r17
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	0e 94 29 07 	call	0xe52	; 0xe52 <__addsf3x>
    1654:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_round>

00001658 <modf>:
    1658:	fa 01       	movw	r30, r20
    165a:	dc 01       	movw	r26, r24
    165c:	aa 0f       	add	r26, r26
    165e:	bb 1f       	adc	r27, r27
    1660:	9b 01       	movw	r18, r22
    1662:	ac 01       	movw	r20, r24
    1664:	bf 57       	subi	r27, 0x7F	; 127
    1666:	28 f4       	brcc	.+10     	; 0x1672 <modf+0x1a>
    1668:	22 27       	eor	r18, r18
    166a:	33 27       	eor	r19, r19
    166c:	44 27       	eor	r20, r20
    166e:	50 78       	andi	r21, 0x80	; 128
    1670:	20 c0       	rjmp	.+64     	; 0x16b2 <modf+0x5a>
    1672:	b7 51       	subi	r27, 0x17	; 23
    1674:	90 f4       	brcc	.+36     	; 0x169a <modf+0x42>
    1676:	ab 2f       	mov	r26, r27
    1678:	00 24       	eor	r0, r0
    167a:	46 95       	lsr	r20
    167c:	37 95       	ror	r19
    167e:	27 95       	ror	r18
    1680:	01 1c       	adc	r0, r1
    1682:	a3 95       	inc	r26
    1684:	d2 f3       	brmi	.-12     	; 0x167a <modf+0x22>
    1686:	00 20       	and	r0, r0
    1688:	71 f0       	breq	.+28     	; 0x16a6 <modf+0x4e>
    168a:	22 0f       	add	r18, r18
    168c:	33 1f       	adc	r19, r19
    168e:	44 1f       	adc	r20, r20
    1690:	b3 95       	inc	r27
    1692:	da f3       	brmi	.-10     	; 0x168a <modf+0x32>
    1694:	0e d0       	rcall	.+28     	; 0x16b2 <modf+0x5a>
    1696:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__subsf3>
    169a:	61 30       	cpi	r22, 0x01	; 1
    169c:	71 05       	cpc	r23, r1
    169e:	a0 e8       	ldi	r26, 0x80	; 128
    16a0:	8a 07       	cpc	r24, r26
    16a2:	b9 46       	sbci	r27, 0x69	; 105
    16a4:	30 f4       	brcc	.+12     	; 0x16b2 <modf+0x5a>
    16a6:	9b 01       	movw	r18, r22
    16a8:	ac 01       	movw	r20, r24
    16aa:	66 27       	eor	r22, r22
    16ac:	77 27       	eor	r23, r23
    16ae:	88 27       	eor	r24, r24
    16b0:	90 78       	andi	r25, 0x80	; 128
    16b2:	30 96       	adiw	r30, 0x00	; 0
    16b4:	21 f0       	breq	.+8      	; 0x16be <modf+0x66>
    16b6:	20 83       	st	Z, r18
    16b8:	31 83       	std	Z+1, r19	; 0x01
    16ba:	42 83       	std	Z+2, r20	; 0x02
    16bc:	53 83       	std	Z+3, r21	; 0x03
    16be:	08 95       	ret

000016c0 <__udivmodsi4>:
    16c0:	a1 e2       	ldi	r26, 0x21	; 33
    16c2:	1a 2e       	mov	r1, r26
    16c4:	aa 1b       	sub	r26, r26
    16c6:	bb 1b       	sub	r27, r27
    16c8:	fd 01       	movw	r30, r26
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <__udivmodsi4_ep>

000016cc <__udivmodsi4_loop>:
    16cc:	aa 1f       	adc	r26, r26
    16ce:	bb 1f       	adc	r27, r27
    16d0:	ee 1f       	adc	r30, r30
    16d2:	ff 1f       	adc	r31, r31
    16d4:	a2 17       	cp	r26, r18
    16d6:	b3 07       	cpc	r27, r19
    16d8:	e4 07       	cpc	r30, r20
    16da:	f5 07       	cpc	r31, r21
    16dc:	20 f0       	brcs	.+8      	; 0x16e6 <__udivmodsi4_ep>
    16de:	a2 1b       	sub	r26, r18
    16e0:	b3 0b       	sbc	r27, r19
    16e2:	e4 0b       	sbc	r30, r20
    16e4:	f5 0b       	sbc	r31, r21

000016e6 <__udivmodsi4_ep>:
    16e6:	66 1f       	adc	r22, r22
    16e8:	77 1f       	adc	r23, r23
    16ea:	88 1f       	adc	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	1a 94       	dec	r1
    16f0:	69 f7       	brne	.-38     	; 0x16cc <__udivmodsi4_loop>
    16f2:	60 95       	com	r22
    16f4:	70 95       	com	r23
    16f6:	80 95       	com	r24
    16f8:	90 95       	com	r25
    16fa:	9b 01       	movw	r18, r22
    16fc:	ac 01       	movw	r20, r24
    16fe:	bd 01       	movw	r22, r26
    1700:	cf 01       	movw	r24, r30
    1702:	08 95       	ret

00001704 <__umulhisi3>:
    1704:	a2 9f       	mul	r26, r18
    1706:	b0 01       	movw	r22, r0
    1708:	b3 9f       	mul	r27, r19
    170a:	c0 01       	movw	r24, r0
    170c:	a3 9f       	mul	r26, r19
    170e:	70 0d       	add	r23, r0
    1710:	81 1d       	adc	r24, r1
    1712:	11 24       	eor	r1, r1
    1714:	91 1d       	adc	r25, r1
    1716:	b2 9f       	mul	r27, r18
    1718:	70 0d       	add	r23, r0
    171a:	81 1d       	adc	r24, r1
    171c:	11 24       	eor	r1, r1
    171e:	91 1d       	adc	r25, r1
    1720:	08 95       	ret

00001722 <_exit>:
    1722:	f8 94       	cli

00001724 <__stop_program>:
    1724:	ff cf       	rjmp	.-2      	; 0x1724 <__stop_program>
