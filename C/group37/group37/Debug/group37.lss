
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000304  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000229  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c9  00000000  00000000  000007f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00000ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fd  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b5  00000000  00000000  00000d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000eea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  78:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <uart_init>:
 #define F_CPU 16000000UL
 #include <util/delay.h>

 //Initializes the UART
 void uart_init() {
	UBRR0H = 0;
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 103;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B|= (1<<TXEN0);	//Sets the Transmit Enable to 1
  8a:	e1 ec       	ldi	r30, 0xC1	; 193
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 60       	ori	r24, 0x08	; 8
  92:	80 83       	st	Z, r24
	UCSR0C|= (1<<UCSZ00)|(1<<UCSZ01);	//Sets an 8-bit character
  94:	e2 ec       	ldi	r30, 0xC2	; 194
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	86 60       	ori	r24, 0x06	; 6
  9c:	80 83       	st	Z, r24
  9e:	08 95       	ret

000000a0 <uart_transmit>:
 }

 //Transmits the data
 void uart_transmit(uint8_t data) {
	while(!((1<<UDRE0) && UCSR0A));	//When UDRE0 is empty, put data value into buffer to be sent
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	99 23       	and	r25, r25
  a8:	e9 f3       	breq	.-6      	; 0xa4 <uart_transmit+0x4>
		UDR0 = data;
  aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ae:	08 95       	ret

000000b0 <wololo>:
 }

 //Converts our parameters into the value to send
 unsigned int wololo(uint8_t input, uint8_t position, uint8_t decimal) {
	unsigned int output = input;
  b0:	90 e0       	ldi	r25, 0x00	; 0
	if (decimal == 1) { output += 16; }
  b2:	41 30       	cpi	r20, 0x01	; 1
  b4:	09 f4       	brne	.+2      	; 0xb8 <wololo+0x8>
  b6:	40 96       	adiw	r24, 0x10	; 16
	if (position == 0) { output += 96; }
  b8:	61 11       	cpse	r22, r1
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <wololo+0x12>
  bc:	80 5a       	subi	r24, 0xA0	; 160
  be:	9f 4f       	sbci	r25, 0xFF	; 255
  c0:	08 95       	ret
	if (position == 1) { output += 64; }
  c2:	61 30       	cpi	r22, 0x01	; 1
  c4:	19 f4       	brne	.+6      	; 0xcc <wololo+0x1c>
  c6:	80 5c       	subi	r24, 0xC0	; 192
  c8:	9f 4f       	sbci	r25, 0xFF	; 255
  ca:	08 95       	ret
	if (position == 2) { output += 32; }
  cc:	62 30       	cpi	r22, 0x02	; 2
  ce:	09 f4       	brne	.+2      	; 0xd2 <wololo+0x22>
  d0:	80 96       	adiw	r24, 0x20	; 32
	return output;
  d2:	08 95       	ret

000000d4 <main>:
#include <math.h>
#include "prototypes37.h"
#define F_CPU 16000000UL
#include <util/delay.h>

int main(void) {
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	00 d0       	rcall	.+0      	; 0xda <main+0x6>
  da:	00 d0       	rcall	.+0      	; 0xdc <main+0x8>
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
	uart_init();	//Tells me the position of the data to send
  e0:	0e 94 40 00 	call	0x80	; 0x80 <uart_init>
  e4:	6e 01       	movw	r12, r28
  e6:	85 e0       	ldi	r24, 0x05	; 5
  e8:	c8 0e       	add	r12, r24
  ea:	d1 1c       	adc	r13, r1
  ec:	13 e0       	ldi	r17, 0x03	; 3
	int dataInt = 6969;
  ee:	89 e3       	ldi	r24, 0x39	; 57
  f0:	9b e1       	ldi	r25, 0x1B	; 27
	uint8_t hasDecimal = 0;
	uint8_t dataArray[4];
	uint8_t index = 0;
	
	for (int i=3;i>=0;i--) {
		dataArray[i] = wololo(dataInt%10, i, hasDecimal);
  f2:	0f 2e       	mov	r0, r31
  f4:	fa e0       	ldi	r31, 0x0A	; 10
  f6:	af 2e       	mov	r10, r31
  f8:	b1 2c       	mov	r11, r1
  fa:	f0 2d       	mov	r31, r0
  fc:	b5 01       	movw	r22, r10
  fe:	0e 94 af 00 	call	0x15e	; 0x15e <__divmodhi4>
 102:	06 2f       	mov	r16, r22
 104:	f7 2e       	mov	r15, r23
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	61 2f       	mov	r22, r17
 10a:	0e 94 58 00 	call	0xb0	; 0xb0 <wololo>
 10e:	f6 01       	movw	r30, r12
 110:	82 93       	st	-Z, r24
 112:	6f 01       	movw	r12, r30
		dataInt = dataInt/10;
 114:	80 2f       	mov	r24, r16
 116:	9f 2d       	mov	r25, r15
 118:	11 50       	subi	r17, 0x01	; 1
 11a:	80 f7       	brcc	.-32     	; 0xfc <main+0x28>
 11c:	14 c0       	rjmp	.+40     	; 0x146 <main+0x72>
	}

    while (1) {
		uint8_t data = dataArray[index];	//Get the data to send	
 11e:	e1 e0       	ldi	r30, 0x01	; 1
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ec 0f       	add	r30, r28
 124:	fd 1f       	adc	r31, r29
 126:	e1 0f       	add	r30, r17
 128:	f1 1d       	adc	r31, r1
		//uint8_t data = 21;
		uart_transmit(data);
 12a:	80 81       	ld	r24, Z
 12c:	0e 94 50 00 	call	0xa0	; 0xa0 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	8f ed       	ldi	r24, 0xDF	; 223
 132:	9e e2       	ldi	r25, 0x2E	; 46
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x60>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x66>
 13a:	00 00       	nop
		_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
		index++;
 13c:	1f 5f       	subi	r17, 0xFF	; 255
		if (index == 4) {
 13e:	14 30       	cpi	r17, 0x04	; 4
 140:	71 f7       	brne	.-36     	; 0x11e <main+0x4a>
			index = 0;
 142:	10 2f       	mov	r17, r16
 144:	ec cf       	rjmp	.-40     	; 0x11e <main+0x4a>
	}

    while (1) {
		uint8_t data = dataArray[index];	//Get the data to send	
		//uint8_t data = 21;
		uart_transmit(data);
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	0e 94 50 00 	call	0xa0	; 0xa0 <uart_transmit>
 14c:	ef ed       	ldi	r30, 0xDF	; 223
 14e:	fe e2       	ldi	r31, 0x2E	; 46
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x7c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x82>
 156:	00 00       	nop
		_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
		index++;
 158:	11 e0       	ldi	r17, 0x01	; 1
		if (index == 4) {
			index = 0;
 15a:	00 e0       	ldi	r16, 0x00	; 0
 15c:	e0 cf       	rjmp	.-64     	; 0x11e <main+0x4a>

0000015e <__divmodhi4>:
 15e:	97 fb       	bst	r25, 7
 160:	07 2e       	mov	r0, r23
 162:	16 f4       	brtc	.+4      	; 0x168 <__divmodhi4+0xa>
 164:	00 94       	com	r0
 166:	07 d0       	rcall	.+14     	; 0x176 <__divmodhi4_neg1>
 168:	77 fd       	sbrc	r23, 7
 16a:	09 d0       	rcall	.+18     	; 0x17e <__divmodhi4_neg2>
 16c:	0e 94 c3 00 	call	0x186	; 0x186 <__udivmodhi4>
 170:	07 fc       	sbrc	r0, 7
 172:	05 d0       	rcall	.+10     	; 0x17e <__divmodhi4_neg2>
 174:	3e f4       	brtc	.+14     	; 0x184 <__divmodhi4_exit>

00000176 <__divmodhi4_neg1>:
 176:	90 95       	com	r25
 178:	81 95       	neg	r24
 17a:	9f 4f       	sbci	r25, 0xFF	; 255
 17c:	08 95       	ret

0000017e <__divmodhi4_neg2>:
 17e:	70 95       	com	r23
 180:	61 95       	neg	r22
 182:	7f 4f       	sbci	r23, 0xFF	; 255

00000184 <__divmodhi4_exit>:
 184:	08 95       	ret

00000186 <__udivmodhi4>:
 186:	aa 1b       	sub	r26, r26
 188:	bb 1b       	sub	r27, r27
 18a:	51 e1       	ldi	r21, 0x11	; 17
 18c:	07 c0       	rjmp	.+14     	; 0x19c <__udivmodhi4_ep>

0000018e <__udivmodhi4_loop>:
 18e:	aa 1f       	adc	r26, r26
 190:	bb 1f       	adc	r27, r27
 192:	a6 17       	cp	r26, r22
 194:	b7 07       	cpc	r27, r23
 196:	10 f0       	brcs	.+4      	; 0x19c <__udivmodhi4_ep>
 198:	a6 1b       	sub	r26, r22
 19a:	b7 0b       	sbc	r27, r23

0000019c <__udivmodhi4_ep>:
 19c:	88 1f       	adc	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	5a 95       	dec	r21
 1a2:	a9 f7       	brne	.-22     	; 0x18e <__udivmodhi4_loop>
 1a4:	80 95       	com	r24
 1a6:	90 95       	com	r25
 1a8:	bc 01       	movw	r22, r24
 1aa:	cd 01       	movw	r24, r26
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
