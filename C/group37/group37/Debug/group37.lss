
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00001654  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd5  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000408  00000000  00000000  00002351  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000810  00000000  00000000  00002759  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00002f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c9  00000000  00000000  000031b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f09  00000000  00000000  00003581  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000448a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__vector_1>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <voltage_real+0x88>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
      f6:	21 e0       	ldi	r18, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a2 30       	cpi	r26, 0x02	; 2
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 77 04 	call	0x8ee	; 0x8ee <main>
     10a:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <uart_init>:

 //Approximates a data value based on the two nearest data points
 float linearApproximate(float higher, float lower) {
	float approximation = (higher + lower) / 2;
	return approximation;
 }
     112:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     116:	87 e6       	ldi	r24, 0x67	; 103
     118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     11c:	e1 ec       	ldi	r30, 0xC1	; 193
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	88 60       	ori	r24, 0x08	; 8
     124:	80 83       	st	Z, r24
     126:	e2 ec       	ldi	r30, 0xC2	; 194
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	86 60       	ori	r24, 0x06	; 6
     12e:	80 83       	st	Z, r24
     130:	08 95       	ret

00000132 <uart_transmit>:
     132:	e0 ec       	ldi	r30, 0xC0	; 192
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	90 81       	ld	r25, Z
     138:	99 23       	and	r25, r25
     13a:	e9 f3       	breq	.-6      	; 0x136 <uart_transmit+0x4>
     13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     140:	08 95       	ret

00000142 <timer0_init>:
     142:	85 b5       	in	r24, 0x25	; 37
     144:	85 60       	ori	r24, 0x05	; 5
     146:	85 bd       	out	0x25, r24	; 37
     148:	16 bc       	out	0x26, r1	; 38
     14a:	08 95       	ret

0000014c <int_init>:
     14c:	e9 e6       	ldi	r30, 0x69	; 105
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	83 60       	ori	r24, 0x03	; 3
     154:	80 83       	st	Z, r24
     156:	e8 9a       	sbi	0x1d, 0	; 29
     158:	08 95       	ret

0000015a <find_decimal>:
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	6b 01       	movw	r12, r22
     164:	7c 01       	movw	r14, r24
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e2       	ldi	r20, 0x20	; 32
     16c:	51 e4       	ldi	r21, 0x41	; 65
     16e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__cmpsf2>
     172:	88 23       	and	r24, r24
     174:	b4 f0       	brlt	.+44     	; 0x1a2 <find_decimal+0x48>
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	48 ec       	ldi	r20, 0xC8	; 200
     17c:	52 e4       	ldi	r21, 0x42	; 66
     17e:	c7 01       	movw	r24, r14
     180:	b6 01       	movw	r22, r12
     182:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__cmpsf2>
     186:	08 2e       	mov	r0, r24
     188:	00 0c       	add	r0, r0
     18a:	99 0b       	sbc	r25, r25
     18c:	88 27       	eor	r24, r24
     18e:	99 0f       	add	r25, r25
     190:	88 1f       	adc	r24, r24
     192:	99 27       	eor	r25, r25
     194:	22 e0       	ldi	r18, 0x02	; 2
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	a9 01       	movw	r20, r18
     19a:	48 1b       	sub	r20, r24
     19c:	59 0b       	sbc	r21, r25
     19e:	ca 01       	movw	r24, r20
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <find_decimal+0x4c>
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	ff 90       	pop	r15
     1a8:	ef 90       	pop	r14
     1aa:	df 90       	pop	r13
     1ac:	cf 90       	pop	r12
     1ae:	08 95       	ret

000001b0 <wololo>:
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	41 30       	cpi	r20, 0x01	; 1
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <wololo+0x8>
     1b6:	40 96       	adiw	r24, 0x10	; 16
     1b8:	61 11       	cpse	r22, r1
     1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <wololo+0x12>
     1bc:	80 5a       	subi	r24, 0xA0	; 160
     1be:	9f 4f       	sbci	r25, 0xFF	; 255
     1c0:	08 95       	ret
     1c2:	61 30       	cpi	r22, 0x01	; 1
     1c4:	19 f4       	brne	.+6      	; 0x1cc <wololo+0x1c>
     1c6:	80 5c       	subi	r24, 0xC0	; 192
     1c8:	9f 4f       	sbci	r25, 0xFF	; 255
     1ca:	08 95       	ret
     1cc:	62 30       	cpi	r22, 0x02	; 2
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <wololo+0x22>
     1d0:	80 96       	adiw	r24, 0x20	; 32
     1d2:	08 95       	ret

000001d4 <calcPower>:
     1d4:	4f 92       	push	r4
     1d6:	5f 92       	push	r5
     1d8:	6f 92       	push	r6
     1da:	7f 92       	push	r7
     1dc:	8f 92       	push	r8
     1de:	9f 92       	push	r9
     1e0:	af 92       	push	r10
     1e2:	bf 92       	push	r11
     1e4:	cf 92       	push	r12
     1e6:	df 92       	push	r13
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62
     1f8:	c8 5e       	subi	r28, 0xE8	; 232
     1fa:	d1 09       	sbc	r29, r1
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	de bf       	out	0x3e, r29	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	cd bf       	out	0x3d, r28	; 61
     206:	fe 01       	movw	r30, r28
     208:	31 96       	adiw	r30, 0x01	; 1
     20a:	e6 2e       	mov	r14, r22
     20c:	f7 2e       	mov	r15, r23
     20e:	9e 01       	movw	r18, r28
     210:	27 5d       	subi	r18, 0xD7	; 215
     212:	3f 4f       	sbci	r19, 0xFF	; 255
     214:	89 01       	movw	r16, r18
     216:	dc 01       	movw	r26, r24
     218:	4d 91       	ld	r20, X+
     21a:	5d 91       	ld	r21, X+
     21c:	6d 91       	ld	r22, X+
     21e:	7d 91       	ld	r23, X+
     220:	cd 01       	movw	r24, r26
     222:	41 93       	st	Z+, r20
     224:	51 93       	st	Z+, r21
     226:	61 93       	st	Z+, r22
     228:	71 93       	st	Z+, r23
     22a:	d7 01       	movw	r26, r14
     22c:	4d 91       	ld	r20, X+
     22e:	5d 91       	ld	r21, X+
     230:	6d 91       	ld	r22, X+
     232:	7d 91       	ld	r23, X+
     234:	7d 01       	movw	r14, r26
     236:	d9 01       	movw	r26, r18
     238:	4d 93       	st	X+, r20
     23a:	5d 93       	st	X+, r21
     23c:	6d 93       	st	X+, r22
     23e:	7d 93       	st	X+, r23
     240:	9d 01       	movw	r18, r26
     242:	e0 17       	cp	r30, r16
     244:	f1 07       	cpc	r31, r17
     246:	39 f7       	brne	.-50     	; 0x216 <calcPower+0x42>
     248:	4e 01       	movw	r8, r28
     24a:	bd e9       	ldi	r27, 0x9D	; 157
     24c:	8b 0e       	add	r8, r27
     24e:	91 1c       	adc	r9, r1
     250:	7e 01       	movw	r14, r28
     252:	e1 e5       	ldi	r30, 0x51	; 81
     254:	ee 0e       	add	r14, r30
     256:	f1 1c       	adc	r15, r1
     258:	57 01       	movw	r10, r14
     25a:	64 01       	movw	r12, r8
     25c:	00 e0       	ldi	r16, 0x00	; 0
     25e:	10 e0       	ldi	r17, 0x00	; 0
     260:	38 01       	movw	r6, r16
     262:	00 fd       	sbrc	r16, 0
     264:	61 c0       	rjmp	.+194    	; 0x328 <calcPower+0x154>
     266:	c8 01       	movw	r24, r16
     268:	11 23       	and	r17, r17
     26a:	0c f4       	brge	.+2      	; 0x26e <calcPower+0x9a>
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	95 95       	asr	r25
     270:	87 95       	ror	r24
     272:	fc 01       	movw	r30, r24
     274:	ee 0f       	add	r30, r30
     276:	ff 1f       	adc	r31, r31
     278:	ee 0f       	add	r30, r30
     27a:	ff 1f       	adc	r31, r31
     27c:	21 e0       	ldi	r18, 0x01	; 1
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	2c 0f       	add	r18, r28
     282:	3d 1f       	adc	r19, r29
     284:	e2 0f       	add	r30, r18
     286:	f3 1f       	adc	r31, r19
     288:	40 81       	ld	r20, Z
     28a:	51 81       	ldd	r21, Z+1	; 0x01
     28c:	62 81       	ldd	r22, Z+2	; 0x02
     28e:	73 81       	ldd	r23, Z+3	; 0x03
     290:	d5 01       	movw	r26, r10
     292:	4d 93       	st	X+, r20
     294:	5d 93       	st	X+, r21
     296:	6d 93       	st	X+, r22
     298:	7c 93       	st	X, r23
     29a:	13 97       	sbiw	r26, 0x03	; 3
     29c:	01 15       	cp	r16, r1
     29e:	11 05       	cpc	r17, r1
     2a0:	19 f0       	breq	.+6      	; 0x2a8 <calcPower+0xd4>
     2a2:	02 31       	cpi	r16, 0x12	; 18
     2a4:	11 05       	cpc	r17, r1
     2a6:	a1 f4       	brne	.+40     	; 0x2d0 <calcPower+0xfc>
     2a8:	88 0f       	add	r24, r24
     2aa:	99 1f       	adc	r25, r25
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	e1 e0       	ldi	r30, 0x01	; 1
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	ec 0f       	add	r30, r28
     2b6:	fd 1f       	adc	r31, r29
     2b8:	e8 0f       	add	r30, r24
     2ba:	f9 1f       	adc	r31, r25
     2bc:	80 a5       	ldd	r24, Z+40	; 0x28
     2be:	91 a5       	ldd	r25, Z+41	; 0x29
     2c0:	a2 a5       	ldd	r26, Z+42	; 0x2a
     2c2:	b3 a5       	ldd	r27, Z+43	; 0x2b
     2c4:	f6 01       	movw	r30, r12
     2c6:	80 83       	st	Z, r24
     2c8:	91 83       	std	Z+1, r25	; 0x01
     2ca:	a2 83       	std	Z+2, r26	; 0x02
     2cc:	b3 83       	std	Z+3, r27	; 0x03
     2ce:	7e c0       	rjmp	.+252    	; 0x3cc <calcPower+0x1f8>
     2d0:	dc 01       	movw	r26, r24
     2d2:	11 97       	sbiw	r26, 0x01	; 1
     2d4:	aa 0f       	add	r26, r26
     2d6:	bb 1f       	adc	r27, r27
     2d8:	aa 0f       	add	r26, r26
     2da:	bb 1f       	adc	r27, r27
     2dc:	21 e0       	ldi	r18, 0x01	; 1
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	2c 0f       	add	r18, r28
     2e2:	3d 1f       	adc	r19, r29
     2e4:	a2 0f       	add	r26, r18
     2e6:	b3 1f       	adc	r27, r19
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	f9 01       	movw	r30, r18
     2f2:	e8 0f       	add	r30, r24
     2f4:	f9 1f       	adc	r31, r25
     2f6:	20 a5       	ldd	r18, Z+40	; 0x28
     2f8:	31 a5       	ldd	r19, Z+41	; 0x29
     2fa:	42 a5       	ldd	r20, Z+42	; 0x2a
     2fc:	53 a5       	ldd	r21, Z+43	; 0x2b
     2fe:	98 96       	adiw	r26, 0x28	; 40
     300:	6d 91       	ld	r22, X+
     302:	7d 91       	ld	r23, X+
     304:	8d 91       	ld	r24, X+
     306:	9c 91       	ld	r25, X
     308:	9b 97       	sbiw	r26, 0x2b	; 43
     30a:	0e 94 6f 06 	call	0xcde	; 0xcde <__addsf3>
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	5f e3       	ldi	r21, 0x3F	; 63
     316:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     31a:	d6 01       	movw	r26, r12
     31c:	6d 93       	st	X+, r22
     31e:	7d 93       	st	X+, r23
     320:	8d 93       	st	X+, r24
     322:	9c 93       	st	X, r25
     324:	13 97       	sbiw	r26, 0x03	; 3
     326:	52 c0       	rjmp	.+164    	; 0x3cc <calcPower+0x1f8>
     328:	98 01       	movw	r18, r16
     32a:	2f 5f       	subi	r18, 0xFF	; 255
     32c:	3f 4f       	sbci	r19, 0xFF	; 255
     32e:	c9 01       	movw	r24, r18
     330:	99 23       	and	r25, r25
     332:	0c f4       	brge	.+2      	; 0x336 <calcPower+0x162>
     334:	01 96       	adiw	r24, 0x01	; 1
     336:	95 95       	asr	r25
     338:	87 95       	ror	r24
     33a:	dc 01       	movw	r26, r24
     33c:	11 97       	sbiw	r26, 0x01	; 1
     33e:	aa 0f       	add	r26, r26
     340:	bb 1f       	adc	r27, r27
     342:	aa 0f       	add	r26, r26
     344:	bb 1f       	adc	r27, r27
     346:	e1 e0       	ldi	r30, 0x01	; 1
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	ec 0f       	add	r30, r28
     34c:	fd 1f       	adc	r31, r29
     34e:	ae 0f       	add	r26, r30
     350:	bf 1f       	adc	r27, r31
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	e1 e0       	ldi	r30, 0x01	; 1
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	ec 0f       	add	r30, r28
     360:	fd 1f       	adc	r31, r29
     362:	e8 0f       	add	r30, r24
     364:	f9 1f       	adc	r31, r25
     366:	20 81       	ld	r18, Z
     368:	31 81       	ldd	r19, Z+1	; 0x01
     36a:	42 81       	ldd	r20, Z+2	; 0x02
     36c:	53 81       	ldd	r21, Z+3	; 0x03
     36e:	6d 91       	ld	r22, X+
     370:	7d 91       	ld	r23, X+
     372:	8d 91       	ld	r24, X+
     374:	9c 91       	ld	r25, X
     376:	0e 94 6f 06 	call	0xcde	; 0xcde <__addsf3>
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	40 e0       	ldi	r20, 0x00	; 0
     380:	5f e3       	ldi	r21, 0x3F	; 63
     382:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     386:	d5 01       	movw	r26, r10
     388:	6d 93       	st	X+, r22
     38a:	7d 93       	st	X+, r23
     38c:	8d 93       	st	X+, r24
     38e:	9c 93       	st	X, r25
     390:	13 97       	sbiw	r26, 0x03	; 3
     392:	b1 e0       	ldi	r27, 0x01	; 1
     394:	6b 1a       	sub	r6, r27
     396:	71 08       	sbc	r7, r1
     398:	c3 01       	movw	r24, r6
     39a:	99 23       	and	r25, r25
     39c:	0c f4       	brge	.+2      	; 0x3a0 <calcPower+0x1cc>
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	fc 01       	movw	r30, r24
     3a2:	f5 95       	asr	r31
     3a4:	e7 95       	ror	r30
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	ee 0f       	add	r30, r30
     3ac:	ff 1f       	adc	r31, r31
     3ae:	21 e0       	ldi	r18, 0x01	; 1
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	2c 0f       	add	r18, r28
     3b4:	3d 1f       	adc	r19, r29
     3b6:	e2 0f       	add	r30, r18
     3b8:	f3 1f       	adc	r31, r19
     3ba:	80 a5       	ldd	r24, Z+40	; 0x28
     3bc:	91 a5       	ldd	r25, Z+41	; 0x29
     3be:	a2 a5       	ldd	r26, Z+42	; 0x2a
     3c0:	b3 a5       	ldd	r27, Z+43	; 0x2b
     3c2:	f6 01       	movw	r30, r12
     3c4:	80 83       	st	Z, r24
     3c6:	91 83       	std	Z+1, r25	; 0x01
     3c8:	a2 83       	std	Z+2, r26	; 0x02
     3ca:	b3 83       	std	Z+3, r27	; 0x03
     3cc:	0f 5f       	subi	r16, 0xFF	; 255
     3ce:	1f 4f       	sbci	r17, 0xFF	; 255
     3d0:	f4 e0       	ldi	r31, 0x04	; 4
     3d2:	cf 0e       	add	r12, r31
     3d4:	d1 1c       	adc	r13, r1
     3d6:	24 e0       	ldi	r18, 0x04	; 4
     3d8:	a2 0e       	add	r10, r18
     3da:	b1 1c       	adc	r11, r1
     3dc:	03 31       	cpi	r16, 0x13	; 19
     3de:	11 05       	cpc	r17, r1
     3e0:	09 f0       	breq	.+2      	; 0x3e4 <calcPower+0x210>
     3e2:	3e cf       	rjmp	.-388    	; 0x260 <calcPower+0x8c>
     3e4:	8e 01       	movw	r16, r28
     3e6:	03 56       	subi	r16, 0x63	; 99
     3e8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ea:	41 2c       	mov	r4, r1
     3ec:	51 2c       	mov	r5, r1
     3ee:	32 01       	movw	r6, r4
     3f0:	d7 01       	movw	r26, r14
     3f2:	6d 91       	ld	r22, X+
     3f4:	7d 91       	ld	r23, X+
     3f6:	8d 91       	ld	r24, X+
     3f8:	9d 91       	ld	r25, X+
     3fa:	7d 01       	movw	r14, r26
     3fc:	f4 01       	movw	r30, r8
     3fe:	21 91       	ld	r18, Z+
     400:	31 91       	ld	r19, Z+
     402:	41 91       	ld	r20, Z+
     404:	51 91       	ld	r21, Z+
     406:	4f 01       	movw	r8, r30
     408:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	48 e5       	ldi	r20, 0x58	; 88
     412:	51 e4       	ldi	r21, 0x41	; 65
     414:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     418:	9b 01       	movw	r18, r22
     41a:	ac 01       	movw	r20, r24
     41c:	c3 01       	movw	r24, r6
     41e:	b2 01       	movw	r22, r4
     420:	0e 94 6f 06 	call	0xcde	; 0xcde <__addsf3>
     424:	2b 01       	movw	r4, r22
     426:	3c 01       	movw	r6, r24
     428:	e0 16       	cp	r14, r16
     42a:	f1 06       	cpc	r15, r17
     42c:	09 f7       	brne	.-62     	; 0x3f0 <calcPower+0x21c>
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	48 e9       	ldi	r20, 0x98	; 152
     434:	51 e4       	ldi	r21, 0x41	; 65
     436:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__divsf3>
     43a:	c8 51       	subi	r28, 0x18	; 24
     43c:	df 4f       	sbci	r29, 0xFF	; 255
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	de bf       	out	0x3e, r29	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	cd bf       	out	0x3d, r28	; 61
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	df 90       	pop	r13
     456:	cf 90       	pop	r12
     458:	bf 90       	pop	r11
     45a:	af 90       	pop	r10
     45c:	9f 90       	pop	r9
     45e:	8f 90       	pop	r8
     460:	7f 90       	pop	r7
     462:	6f 90       	pop	r6
     464:	5f 90       	pop	r5
     466:	4f 90       	pop	r4
     468:	08 95       	ret

0000046a <calcVoltageRMS>:
     46a:	8f 92       	push	r8
     46c:	9f 92       	push	r9
     46e:	af 92       	push	r10
     470:	bf 92       	push	r11
     472:	cf 92       	push	r12
     474:	df 92       	push	r13
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	c4 57       	subi	r28, 0x74	; 116
     488:	d1 09       	sbc	r29, r1
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
     494:	fc 01       	movw	r30, r24
     496:	de 01       	movw	r26, r28
     498:	11 96       	adiw	r26, 0x01	; 1
     49a:	88 96       	adiw	r24, 0x28	; 40
     49c:	41 91       	ld	r20, Z+
     49e:	51 91       	ld	r21, Z+
     4a0:	61 91       	ld	r22, Z+
     4a2:	71 91       	ld	r23, Z+
     4a4:	4d 93       	st	X+, r20
     4a6:	5d 93       	st	X+, r21
     4a8:	6d 93       	st	X+, r22
     4aa:	7d 93       	st	X+, r23
     4ac:	e8 17       	cp	r30, r24
     4ae:	f9 07       	cpc	r31, r25
     4b0:	a9 f7       	brne	.-22     	; 0x49c <calcVoltageRMS+0x32>
     4b2:	7e 01       	movw	r14, r28
     4b4:	29 e2       	ldi	r18, 0x29	; 41
     4b6:	e2 0e       	add	r14, r18
     4b8:	f1 1c       	adc	r15, r1
     4ba:	67 01       	movw	r12, r14
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	10 e0       	ldi	r17, 0x00	; 0
     4c0:	00 fd       	sbrc	r16, 0
     4c2:	1b c0       	rjmp	.+54     	; 0x4fa <calcVoltageRMS+0x90>
     4c4:	c8 01       	movw	r24, r16
     4c6:	11 23       	and	r17, r17
     4c8:	0c f4       	brge	.+2      	; 0x4cc <calcVoltageRMS+0x62>
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	fc 01       	movw	r30, r24
     4ce:	f5 95       	asr	r31
     4d0:	e7 95       	ror	r30
     4d2:	ee 0f       	add	r30, r30
     4d4:	ff 1f       	adc	r31, r31
     4d6:	ee 0f       	add	r30, r30
     4d8:	ff 1f       	adc	r31, r31
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	8c 0f       	add	r24, r28
     4e0:	9d 1f       	adc	r25, r29
     4e2:	e8 0f       	add	r30, r24
     4e4:	f9 1f       	adc	r31, r25
     4e6:	80 81       	ld	r24, Z
     4e8:	91 81       	ldd	r25, Z+1	; 0x01
     4ea:	a2 81       	ldd	r26, Z+2	; 0x02
     4ec:	b3 81       	ldd	r27, Z+3	; 0x03
     4ee:	f6 01       	movw	r30, r12
     4f0:	80 83       	st	Z, r24
     4f2:	91 83       	std	Z+1, r25	; 0x01
     4f4:	a2 83       	std	Z+2, r26	; 0x02
     4f6:	b3 83       	std	Z+3, r27	; 0x03
     4f8:	31 c0       	rjmp	.+98     	; 0x55c <calcVoltageRMS+0xf2>
     4fa:	98 01       	movw	r18, r16
     4fc:	2f 5f       	subi	r18, 0xFF	; 255
     4fe:	3f 4f       	sbci	r19, 0xFF	; 255
     500:	c9 01       	movw	r24, r18
     502:	99 23       	and	r25, r25
     504:	0c f4       	brge	.+2      	; 0x508 <calcVoltageRMS+0x9e>
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	95 95       	asr	r25
     50a:	87 95       	ror	r24
     50c:	dc 01       	movw	r26, r24
     50e:	11 97       	sbiw	r26, 0x01	; 1
     510:	aa 0f       	add	r26, r26
     512:	bb 1f       	adc	r27, r27
     514:	aa 0f       	add	r26, r26
     516:	bb 1f       	adc	r27, r27
     518:	21 e0       	ldi	r18, 0x01	; 1
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	2c 0f       	add	r18, r28
     51e:	3d 1f       	adc	r19, r29
     520:	a2 0f       	add	r26, r18
     522:	b3 1f       	adc	r27, r19
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	f9 01       	movw	r30, r18
     52e:	e8 0f       	add	r30, r24
     530:	f9 1f       	adc	r31, r25
     532:	20 81       	ld	r18, Z
     534:	31 81       	ldd	r19, Z+1	; 0x01
     536:	42 81       	ldd	r20, Z+2	; 0x02
     538:	53 81       	ldd	r21, Z+3	; 0x03
     53a:	6d 91       	ld	r22, X+
     53c:	7d 91       	ld	r23, X+
     53e:	8d 91       	ld	r24, X+
     540:	9c 91       	ld	r25, X
     542:	0e 94 6f 06 	call	0xcde	; 0xcde <__addsf3>
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	5f e3       	ldi	r21, 0x3F	; 63
     54e:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     552:	f6 01       	movw	r30, r12
     554:	60 83       	st	Z, r22
     556:	71 83       	std	Z+1, r23	; 0x01
     558:	82 83       	std	Z+2, r24	; 0x02
     55a:	93 83       	std	Z+3, r25	; 0x03
     55c:	0f 5f       	subi	r16, 0xFF	; 255
     55e:	1f 4f       	sbci	r17, 0xFF	; 255
     560:	f4 e0       	ldi	r31, 0x04	; 4
     562:	cf 0e       	add	r12, r31
     564:	d1 1c       	adc	r13, r1
     566:	03 31       	cpi	r16, 0x13	; 19
     568:	11 05       	cpc	r17, r1
     56a:	09 f0       	breq	.+2      	; 0x56e <calcVoltageRMS+0x104>
     56c:	a9 cf       	rjmp	.-174    	; 0x4c0 <calcVoltageRMS+0x56>
     56e:	8e 01       	movw	r16, r28
     570:	0b 58       	subi	r16, 0x8B	; 139
     572:	1f 4f       	sbci	r17, 0xFF	; 255
     574:	81 2c       	mov	r8, r1
     576:	91 2c       	mov	r9, r1
     578:	54 01       	movw	r10, r8
     57a:	f7 01       	movw	r30, r14
     57c:	61 91       	ld	r22, Z+
     57e:	71 91       	ld	r23, Z+
     580:	81 91       	ld	r24, Z+
     582:	91 91       	ld	r25, Z+
     584:	7f 01       	movw	r14, r30
     586:	9b 01       	movw	r18, r22
     588:	ac 01       	movw	r20, r24
     58a:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     58e:	9b 01       	movw	r18, r22
     590:	ac 01       	movw	r20, r24
     592:	c5 01       	movw	r24, r10
     594:	b4 01       	movw	r22, r8
     596:	0e 94 6f 06 	call	0xcde	; 0xcde <__addsf3>
     59a:	4b 01       	movw	r8, r22
     59c:	5c 01       	movw	r10, r24
     59e:	e0 16       	cp	r14, r16
     5a0:	f1 06       	cpc	r15, r17
     5a2:	59 f7       	brne	.-42     	; 0x57a <calcVoltageRMS+0x110>
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	48 e9       	ldi	r20, 0x98	; 152
     5aa:	51 e4       	ldi	r21, 0x41	; 65
     5ac:	c5 01       	movw	r24, r10
     5ae:	b4 01       	movw	r22, r8
     5b0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__divsf3>
     5b4:	0e 94 26 09 	call	0x124c	; 0x124c <sqrt>
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	48 e5       	ldi	r20, 0x58	; 88
     5be:	51 e4       	ldi	r21, 0x41	; 65
     5c0:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     5c4:	cc 58       	subi	r28, 0x8C	; 140
     5c6:	df 4f       	sbci	r29, 0xFF	; 255
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	df 90       	pop	r13
     5e0:	cf 90       	pop	r12
     5e2:	bf 90       	pop	r11
     5e4:	af 90       	pop	r10
     5e6:	9f 90       	pop	r9
     5e8:	8f 90       	pop	r8
     5ea:	08 95       	ret

000005ec <calcCurrentRMS>:
     5ec:	8f 92       	push	r8
     5ee:	9f 92       	push	r9
     5f0:	af 92       	push	r10
     5f2:	bf 92       	push	r11
     5f4:	cf 92       	push	r12
     5f6:	df 92       	push	r13
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
     608:	c4 57       	subi	r28, 0x74	; 116
     60a:	d1 09       	sbc	r29, r1
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	fc 01       	movw	r30, r24
     618:	de 01       	movw	r26, r28
     61a:	11 96       	adiw	r26, 0x01	; 1
     61c:	88 96       	adiw	r24, 0x28	; 40
     61e:	41 91       	ld	r20, Z+
     620:	51 91       	ld	r21, Z+
     622:	61 91       	ld	r22, Z+
     624:	71 91       	ld	r23, Z+
     626:	4d 93       	st	X+, r20
     628:	5d 93       	st	X+, r21
     62a:	6d 93       	st	X+, r22
     62c:	7d 93       	st	X+, r23
     62e:	e8 17       	cp	r30, r24
     630:	f9 07       	cpc	r31, r25
     632:	a9 f7       	brne	.-22     	; 0x61e <calcCurrentRMS+0x32>
     634:	7e 01       	movw	r14, r28
     636:	29 e2       	ldi	r18, 0x29	; 41
     638:	e2 0e       	add	r14, r18
     63a:	f1 1c       	adc	r15, r1
     63c:	67 01       	movw	r12, r14
     63e:	00 e0       	ldi	r16, 0x00	; 0
     640:	10 e0       	ldi	r17, 0x00	; 0
     642:	00 fd       	sbrc	r16, 0
     644:	50 c0       	rjmp	.+160    	; 0x6e6 <calcCurrentRMS+0xfa>
     646:	01 15       	cp	r16, r1
     648:	11 05       	cpc	r17, r1
     64a:	19 f0       	breq	.+6      	; 0x652 <calcCurrentRMS+0x66>
     64c:	02 31       	cpi	r16, 0x12	; 18
     64e:	11 05       	cpc	r17, r1
     650:	d9 f4       	brne	.+54     	; 0x688 <calcCurrentRMS+0x9c>
     652:	c8 01       	movw	r24, r16
     654:	11 23       	and	r17, r17
     656:	0c f4       	brge	.+2      	; 0x65a <calcCurrentRMS+0x6e>
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	fc 01       	movw	r30, r24
     65c:	f5 95       	asr	r31
     65e:	e7 95       	ror	r30
     660:	ee 0f       	add	r30, r30
     662:	ff 1f       	adc	r31, r31
     664:	ee 0f       	add	r30, r30
     666:	ff 1f       	adc	r31, r31
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	8c 0f       	add	r24, r28
     66e:	9d 1f       	adc	r25, r29
     670:	e8 0f       	add	r30, r24
     672:	f9 1f       	adc	r31, r25
     674:	80 81       	ld	r24, Z
     676:	91 81       	ldd	r25, Z+1	; 0x01
     678:	a2 81       	ldd	r26, Z+2	; 0x02
     67a:	b3 81       	ldd	r27, Z+3	; 0x03
     67c:	f6 01       	movw	r30, r12
     67e:	80 83       	st	Z, r24
     680:	91 83       	std	Z+1, r25	; 0x01
     682:	a2 83       	std	Z+2, r26	; 0x02
     684:	b3 83       	std	Z+3, r27	; 0x03
     686:	4c c0       	rjmp	.+152    	; 0x720 <calcCurrentRMS+0x134>
     688:	c8 01       	movw	r24, r16
     68a:	11 23       	and	r17, r17
     68c:	0c f4       	brge	.+2      	; 0x690 <calcCurrentRMS+0xa4>
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	95 95       	asr	r25
     692:	87 95       	ror	r24
     694:	dc 01       	movw	r26, r24
     696:	11 97       	sbiw	r26, 0x01	; 1
     698:	aa 0f       	add	r26, r26
     69a:	bb 1f       	adc	r27, r27
     69c:	aa 0f       	add	r26, r26
     69e:	bb 1f       	adc	r27, r27
     6a0:	21 e0       	ldi	r18, 0x01	; 1
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	2c 0f       	add	r18, r28
     6a6:	3d 1f       	adc	r19, r29
     6a8:	a2 0f       	add	r26, r18
     6aa:	b3 1f       	adc	r27, r19
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	f9 01       	movw	r30, r18
     6b6:	e8 0f       	add	r30, r24
     6b8:	f9 1f       	adc	r31, r25
     6ba:	20 81       	ld	r18, Z
     6bc:	31 81       	ldd	r19, Z+1	; 0x01
     6be:	42 81       	ldd	r20, Z+2	; 0x02
     6c0:	53 81       	ldd	r21, Z+3	; 0x03
     6c2:	6d 91       	ld	r22, X+
     6c4:	7d 91       	ld	r23, X+
     6c6:	8d 91       	ld	r24, X+
     6c8:	9c 91       	ld	r25, X
     6ca:	0e 94 6f 06 	call	0xcde	; 0xcde <__addsf3>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	5f e3       	ldi	r21, 0x3F	; 63
     6d6:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     6da:	f6 01       	movw	r30, r12
     6dc:	60 83       	st	Z, r22
     6de:	71 83       	std	Z+1, r23	; 0x01
     6e0:	82 83       	std	Z+2, r24	; 0x02
     6e2:	93 83       	std	Z+3, r25	; 0x03
     6e4:	1d c0       	rjmp	.+58     	; 0x720 <calcCurrentRMS+0x134>
     6e6:	98 01       	movw	r18, r16
     6e8:	21 50       	subi	r18, 0x01	; 1
     6ea:	31 09       	sbc	r19, r1
     6ec:	c9 01       	movw	r24, r18
     6ee:	99 23       	and	r25, r25
     6f0:	0c f4       	brge	.+2      	; 0x6f4 <calcCurrentRMS+0x108>
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	fc 01       	movw	r30, r24
     6f6:	f5 95       	asr	r31
     6f8:	e7 95       	ror	r30
     6fa:	ee 0f       	add	r30, r30
     6fc:	ff 1f       	adc	r31, r31
     6fe:	ee 0f       	add	r30, r30
     700:	ff 1f       	adc	r31, r31
     702:	21 e0       	ldi	r18, 0x01	; 1
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	2c 0f       	add	r18, r28
     708:	3d 1f       	adc	r19, r29
     70a:	e2 0f       	add	r30, r18
     70c:	f3 1f       	adc	r31, r19
     70e:	80 81       	ld	r24, Z
     710:	91 81       	ldd	r25, Z+1	; 0x01
     712:	a2 81       	ldd	r26, Z+2	; 0x02
     714:	b3 81       	ldd	r27, Z+3	; 0x03
     716:	f6 01       	movw	r30, r12
     718:	80 83       	st	Z, r24
     71a:	91 83       	std	Z+1, r25	; 0x01
     71c:	a2 83       	std	Z+2, r26	; 0x02
     71e:	b3 83       	std	Z+3, r27	; 0x03
     720:	0f 5f       	subi	r16, 0xFF	; 255
     722:	1f 4f       	sbci	r17, 0xFF	; 255
     724:	f4 e0       	ldi	r31, 0x04	; 4
     726:	cf 0e       	add	r12, r31
     728:	d1 1c       	adc	r13, r1
     72a:	03 31       	cpi	r16, 0x13	; 19
     72c:	11 05       	cpc	r17, r1
     72e:	09 f0       	breq	.+2      	; 0x732 <calcCurrentRMS+0x146>
     730:	88 cf       	rjmp	.-240    	; 0x642 <calcCurrentRMS+0x56>
     732:	8e 01       	movw	r16, r28
     734:	0b 58       	subi	r16, 0x8B	; 139
     736:	1f 4f       	sbci	r17, 0xFF	; 255
     738:	81 2c       	mov	r8, r1
     73a:	91 2c       	mov	r9, r1
     73c:	54 01       	movw	r10, r8
     73e:	f7 01       	movw	r30, r14
     740:	61 91       	ld	r22, Z+
     742:	71 91       	ld	r23, Z+
     744:	81 91       	ld	r24, Z+
     746:	91 91       	ld	r25, Z+
     748:	7f 01       	movw	r14, r30
     74a:	9b 01       	movw	r18, r22
     74c:	ac 01       	movw	r20, r24
     74e:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     752:	9b 01       	movw	r18, r22
     754:	ac 01       	movw	r20, r24
     756:	c5 01       	movw	r24, r10
     758:	b4 01       	movw	r22, r8
     75a:	0e 94 6f 06 	call	0xcde	; 0xcde <__addsf3>
     75e:	4b 01       	movw	r8, r22
     760:	5c 01       	movw	r10, r24
     762:	e0 16       	cp	r14, r16
     764:	f1 06       	cpc	r15, r17
     766:	59 f7       	brne	.-42     	; 0x73e <calcCurrentRMS+0x152>
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	48 e9       	ldi	r20, 0x98	; 152
     76e:	51 e4       	ldi	r21, 0x41	; 65
     770:	c5 01       	movw	r24, r10
     772:	b4 01       	movw	r22, r8
     774:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__divsf3>
     778:	0e 94 26 09 	call	0x124c	; 0x124c <sqrt>
     77c:	cc 58       	subi	r28, 0x8C	; 140
     77e:	df 4f       	sbci	r29, 0xFF	; 255
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	bf 90       	pop	r11
     79c:	af 90       	pop	r10
     79e:	9f 90       	pop	r9
     7a0:	8f 90       	pop	r8
     7a2:	08 95       	ret

000007a4 <adc_init>:

 //Initialises the ADC
 void adc_init() {
	DDRC = 0x00; //Set port c as input
     7a4:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADEN); //Set Prescaler to 128 and enable the ADC 
     7a6:	ea e7       	ldi	r30, 0x7A	; 122
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	87 68       	ori	r24, 0x87	; 135
     7ae:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //Set reference voltage to VCC
     7b0:	ec e7       	ldi	r30, 0x7C	; 124
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	80 81       	ld	r24, Z
     7b6:	80 64       	ori	r24, 0x40	; 64
     7b8:	80 83       	st	Z, r24
     7ba:	08 95       	ret

000007bc <adc_read_voltage>:
 }

 //Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_voltage() {
	ADMUX &= ~(1<<MUX0);
     7bc:	ec e7       	ldi	r30, 0x7C	; 124
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 81       	ld	r24, Z
     7c2:	8e 7f       	andi	r24, 0xFE	; 254
     7c4:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX1);
     7c6:	80 81       	ld	r24, Z
     7c8:	8d 7f       	andi	r24, 0xFD	; 253
     7ca:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX2);
     7cc:	80 81       	ld	r24, Z
     7ce:	8b 7f       	andi	r24, 0xFB	; 251
     7d0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start conversion
     7d2:	ea e7       	ldi	r30, 0x7A	; 122
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	80 81       	ld	r24, Z
     7d8:	80 64       	ori	r24, 0x40	; 64
     7da:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
     7dc:	80 81       	ld	r24, Z
     7de:	84 ff       	sbrs	r24, 4
     7e0:	fd cf       	rjmp	.-6      	; 0x7dc <adc_read_voltage+0x20>
	unsigned int adcRead = ADC;
     7e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     7e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     7ea:	08 95       	ret

000007ec <adc_read_current>:

  //Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_current(unsigned int highLow) {
	if (highLow == 1) { //High gain current
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	61 f4       	brne	.+24     	; 0x808 <adc_read_current+0x1c>
		ADMUX |= (1<<MUX0);
     7f0:	ec e7       	ldi	r30, 0x7C	; 124
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	81 60       	ori	r24, 0x01	; 1
     7f8:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX1);
     7fa:	80 81       	ld	r24, Z
     7fc:	82 60       	ori	r24, 0x02	; 2
     7fe:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX2);
     800:	80 81       	ld	r24, Z
     802:	8b 7f       	andi	r24, 0xFB	; 251
     804:	80 83       	st	Z, r24
     806:	0b c0       	rjmp	.+22     	; 0x81e <adc_read_current+0x32>
	} else { //Low gain current
		ADMUX |= (1<<MUX0);
     808:	ec e7       	ldi	r30, 0x7C	; 124
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	81 60       	ori	r24, 0x01	; 1
     810:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX1);
     812:	80 81       	ld	r24, Z
     814:	8d 7f       	andi	r24, 0xFD	; 253
     816:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX2);
     818:	80 81       	ld	r24, Z
     81a:	84 60       	ori	r24, 0x04	; 4
     81c:	80 83       	st	Z, r24
	}
	ADCSRA |= (1<<ADSC); //Start conversion
     81e:	ea e7       	ldi	r30, 0x7A	; 122
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	80 64       	ori	r24, 0x40	; 64
     826:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
     828:	80 81       	ld	r24, Z
     82a:	84 ff       	sbrs	r24, 4
     82c:	fd cf       	rjmp	.-6      	; 0x828 <adc_read_current+0x3c>
	unsigned int adcRead = ADC;
     82e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     832:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     836:	08 95       	ret

00000838 <adc_calculation>:

 //Converts an ADC integer into the actual voltage measured by the ADC pin
 float adc_calculation(unsigned int adcValue) {
	float calculatedValue;
	calculatedValue = ((float)adcValue / 1023) * 5; //Digital value to analogue voltage measured
     838:	bc 01       	movw	r22, r24
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 88 07 	call	0xf10	; 0xf10 <__floatunsisf>
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 ec       	ldi	r19, 0xC0	; 192
     846:	4f e7       	ldi	r20, 0x7F	; 127
     848:	54 e4       	ldi	r21, 0x44	; 68
     84a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__divsf3>
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 ea       	ldi	r20, 0xA0	; 160
     854:	50 e4       	ldi	r21, 0x40	; 64
     856:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
	return calculatedValue; 
 }
     85a:	08 95       	ret

0000085c <voltage_real>:
 This function figures out what the actual voltage being measured was based on reversing the process 
 that the signal went through. Option 0 for voltage, 1 for regular current, 2 for high gain current
 */
 float voltage_real(float adcValue, unsigned int option) {
	float output;
	if (option == 0) {
     85c:	41 15       	cp	r20, r1
     85e:	51 05       	cpc	r21, r1
     860:	a9 f4       	brne	.+42     	; 0x88c <voltage_real+0x30>
		output = -(adcValue - 1.7) + 0.27; //Remove offset voltage and then invert
     862:	2a e9       	ldi	r18, 0x9A	; 154
     864:	39 e9       	ldi	r19, 0x99	; 153
     866:	49 ed       	ldi	r20, 0xD9	; 217
     868:	5f e3       	ldi	r21, 0x3F	; 63
     86a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__subsf3>
     86e:	9b 01       	movw	r18, r22
     870:	ac 01       	movw	r20, r24
     872:	61 e7       	ldi	r22, 0x71	; 113
     874:	7d e3       	ldi	r23, 0x3D	; 61
     876:	8a e8       	ldi	r24, 0x8A	; 138
     878:	9e e3       	ldi	r25, 0x3E	; 62
     87a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__subsf3>
		output = output * 0.98; //Revert to value from before the op amp
     87e:	28 e4       	ldi	r18, 0x48	; 72
     880:	31 ee       	ldi	r19, 0xE1	; 225
     882:	4a e7       	ldi	r20, 0x7A	; 122
     884:	5f e3       	ldi	r21, 0x3F	; 63
     886:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     88a:	08 95       	ret
	} else if (option == 1) {
     88c:	41 30       	cpi	r20, 0x01	; 1
     88e:	51 05       	cpc	r21, r1
     890:	d1 f4       	brne	.+52     	; 0x8c6 <voltage_real+0x6a>
		output = -(adcValue - 1.64);
     892:	25 e8       	ldi	r18, 0x85	; 133
     894:	3b ee       	ldi	r19, 0xEB	; 235
     896:	41 ed       	ldi	r20, 0xD1	; 209
     898:	5f e3       	ldi	r21, 0x3F	; 63
     89a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__subsf3>
     89e:	90 58       	subi	r25, 0x80	; 128
		output = output / 5;
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	40 ea       	ldi	r20, 0xA0	; 160
     8a6:	50 e4       	ldi	r21, 0x40	; 64
     8a8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__divsf3>
		output = output / 0.30; //Divide by R to get I
     8ac:	2a e9       	ldi	r18, 0x9A	; 154
     8ae:	39 e9       	ldi	r19, 0x99	; 153
     8b0:	49 e9       	ldi	r20, 0x99	; 153
     8b2:	5e e3       	ldi	r21, 0x3E	; 62
     8b4:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__divsf3>
		output = output * 1.08;
     8b8:	21 e7       	ldi	r18, 0x71	; 113
     8ba:	3d e3       	ldi	r19, 0x3D	; 61
     8bc:	4a e8       	ldi	r20, 0x8A	; 138
     8be:	5f e3       	ldi	r21, 0x3F	; 63
     8c0:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     8c4:	08 95       	ret
	} else {
		output = -(adcValue - 1.64);
     8c6:	25 e8       	ldi	r18, 0x85	; 133
     8c8:	3b ee       	ldi	r19, 0xEB	; 235
     8ca:	41 ed       	ldi	r20, 0xD1	; 209
     8cc:	5f e3       	ldi	r21, 0x3F	; 63
     8ce:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__subsf3>
     8d2:	90 58       	subi	r25, 0x80	; 128
		output = output / 12.4;
     8d4:	26 e6       	ldi	r18, 0x66	; 102
     8d6:	36 e6       	ldi	r19, 0x66	; 102
     8d8:	46 e4       	ldi	r20, 0x46	; 70
     8da:	51 e4       	ldi	r21, 0x41	; 65
     8dc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__divsf3>
		output = output / 0.30; //Divide by R to get I
     8e0:	2a e9       	ldi	r18, 0x9A	; 154
     8e2:	39 e9       	ldi	r19, 0x99	; 153
     8e4:	49 e9       	ldi	r20, 0x99	; 153
     8e6:	5e e3       	ldi	r21, 0x3E	; 62
     8e8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__divsf3>
	}
	return output;
     8ec:	08 95       	ret

000008ee <main>:
#include <avr/interrupt.h>

volatile uint8_t counter = 0; //Counter for the number of times the TCNT0 compares correctly
volatile uint8_t flag = 0;

int main(void) {
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	c4 56       	subi	r28, 0x64	; 100
     8f8:	d1 09       	sbc	r29, r1
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
	sei();
     904:	78 94       	sei
	adc_init();
     906:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <adc_init>
	uart_init();	
     90a:	0e 94 89 00 	call	0x112	; 0x112 <uart_init>
	timer0_init();
     90e:	0e 94 a1 00 	call	0x142	; 0x142 <timer0_init>
	int_init();
     912:	0e 94 a6 00 	call	0x14c	; 0x14c <int_init>
	uint32_t displayCount = 0;
	uint8_t currentFlag = 1;
     916:	99 24       	eor	r9, r9
     918:	93 94       	inc	r9
	sei();
	adc_init();
	uart_init();	
	timer0_init();
	int_init();
	uint32_t displayCount = 0;
     91a:	a0 96       	adiw	r28, 0x20	; 32
     91c:	1c ae       	std	Y+60, r1	; 0x3c
     91e:	1d ae       	std	Y+61, r1	; 0x3d
     920:	1e ae       	std	Y+62, r1	; 0x3e
     922:	1f ae       	std	Y+63, r1	; 0x3f
     924:	a0 97       	sbiw	r28, 0x20	; 32
     926:	a1 2c       	mov	r10, r1
     928:	b1 2c       	mov	r11, r1
				voltageArray[i/2] = voltage;
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); // Regular Current
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
				currentArray[(i-1)/2] = current;
     92a:	9e 01       	movw	r18, r28
     92c:	2f 5f       	subi	r18, 0xFF	; 255
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
     930:	19 01       	movw	r2, r18
     932:	6b 96       	adiw	r28, 0x1b	; 27
     934:	2f af       	std	Y+63, r18	; 0x3f
     936:	6b 97       	sbiw	r28, 0x1b	; 27
     938:	6c 96       	adiw	r28, 0x1c	; 28
     93a:	3f ae       	std	Y+63, r3	; 0x3f
     93c:	6c 97       	sbiw	r28, 0x1c	; 28
     93e:	81 e5       	ldi	r24, 0x51	; 81
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	8c 0f       	add	r24, r28
     944:	9d 1f       	adc	r25, r29
     946:	03 96       	adiw	r24, 0x03	; 3
     948:	a4 96       	adiw	r28, 0x24	; 36
     94a:	9f af       	std	Y+63, r25	; 0x3f
     94c:	8e af       	std	Y+62, r24	; 0x3e
     94e:	a4 97       	sbiw	r28, 0x24	; 36
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	a5 96       	adiw	r28, 0x25	; 37
     954:	9f af       	std	Y+63, r25	; 0x3f
     956:	a5 97       	sbiw	r28, 0x25	; 37
			}
		}
		
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { dataFloat = calcPower(&voltageArray, &currentArray); } 
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataFloat = dataFloat = calcCurrentRMS(&currentArray); }
		else if (displayCount%10 > 6) { dataFloat = calcVoltageRMS(&voltageArray); }
     958:	66 96       	adiw	r28, 0x16	; 22
     95a:	9f ae       	std	Y+63, r9	; 0x3f
     95c:	66 97       	sbiw	r28, 0x16	; 22
		uint8_t hasDecimal = 0;
		uint8_t dataArray[4];
		uint8_t index = 0;
		float dataFloat = 0;
		
		flag = 0;
     95e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		while (flag == 0); //Wait for Zero Crossing Detector to signal a rising zero crossing
     962:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     966:	88 23       	and	r24, r24
     968:	e1 f3       	breq	.-8      	; 0x962 <__stack+0x63>
     96a:	0a 2d       	mov	r16, r10
     96c:	1b 2d       	mov	r17, r11
				unsigned int adcValue = adc_read_voltage();
				float adcVoltage = adc_calculation(adcValue);
				float voltage = voltage_real(adcVoltage, 0);
				voltageArray[i/2] = voltage;
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); // Regular Current
     96e:	66 96       	adiw	r28, 0x16	; 22
     970:	af ad       	ldd	r26, Y+63	; 0x3f
     972:	66 97       	sbiw	r28, 0x16	; 22
     974:	ea 2e       	mov	r14, r26
     976:	f1 2c       	mov	r15, r1
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
     978:	67 01       	movw	r12, r14
     97a:	bf ef       	ldi	r27, 0xFF	; 255
     97c:	cb 1a       	sub	r12, r27
     97e:	db 0a       	sbc	r13, r27
		
		//Reading from the ADC, calculating and converting
		float voltageArray[10];
		float currentArray[10];
		for (int i=0;i<19;i++) {
			if (i%2 == 0) {
     980:	00 fd       	sbrc	r16, 0
     982:	1b c0       	rjmp	.+54     	; 0x9ba <__stack+0xbb>
				unsigned int adcValue = adc_read_voltage();
     984:	0e 94 de 03 	call	0x7bc	; 0x7bc <adc_read_voltage>
				float adcVoltage = adc_calculation(adcValue);
     988:	0e 94 1c 04 	call	0x838	; 0x838 <adc_calculation>
				float voltage = voltage_real(adcVoltage, 0);
     98c:	4a 2d       	mov	r20, r10
     98e:	5b 2d       	mov	r21, r11
     990:	0e 94 2e 04 	call	0x85c	; 0x85c <voltage_real>
				voltageArray[i/2] = voltage;
     994:	98 01       	movw	r18, r16
     996:	11 23       	and	r17, r17
     998:	14 f4       	brge	.+4      	; 0x99e <__stack+0x9f>
     99a:	2f 5f       	subi	r18, 0xFF	; 255
     99c:	3f 4f       	sbci	r19, 0xFF	; 255
     99e:	f9 01       	movw	r30, r18
     9a0:	f5 95       	asr	r31
     9a2:	e7 95       	ror	r30
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	e2 0d       	add	r30, r2
     9ae:	f3 1d       	adc	r31, r3
     9b0:	60 a7       	std	Z+40, r22	; 0x28
     9b2:	71 a7       	std	Z+41, r23	; 0x29
     9b4:	82 a7       	std	Z+42, r24	; 0x2a
     9b6:	93 a7       	std	Z+43, r25	; 0x2b
     9b8:	1c c0       	rjmp	.+56     	; 0x9f2 <__stack+0xf3>
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); // Regular Current
     9ba:	c7 01       	movw	r24, r14
     9bc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <adc_read_current>
				float adcCurrent = adc_calculation(adcValue);
     9c0:	0e 94 1c 04 	call	0x838	; 0x838 <adc_calculation>
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
     9c4:	a6 01       	movw	r20, r12
     9c6:	0e 94 2e 04 	call	0x85c	; 0x85c <voltage_real>
     9ca:	a8 01       	movw	r20, r16
     9cc:	41 50       	subi	r20, 0x01	; 1
     9ce:	51 09       	sbc	r21, r1
				currentArray[(i-1)/2] = current;
     9d0:	9a 01       	movw	r18, r20
     9d2:	12 f4       	brpl	.+4      	; 0x9d8 <__stack+0xd9>
     9d4:	2f 5f       	subi	r18, 0xFF	; 255
     9d6:	3f 4f       	sbci	r19, 0xFF	; 255
     9d8:	f9 01       	movw	r30, r18
     9da:	f5 95       	asr	r31
     9dc:	e7 95       	ror	r30
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	ee 0f       	add	r30, r30
     9e4:	ff 1f       	adc	r31, r31
     9e6:	e2 0d       	add	r30, r2
     9e8:	f3 1d       	adc	r31, r3
     9ea:	60 83       	st	Z, r22
     9ec:	71 83       	std	Z+1, r23	; 0x01
     9ee:	82 83       	std	Z+2, r24	; 0x02
     9f0:	93 83       	std	Z+3, r25	; 0x03
		while (flag == 0); //Wait for Zero Crossing Detector to signal a rising zero crossing
		
		//Reading from the ADC, calculating and converting
		float voltageArray[10];
		float currentArray[10];
		for (int i=0;i<19;i++) {
     9f2:	0f 5f       	subi	r16, 0xFF	; 255
     9f4:	1f 4f       	sbci	r17, 0xFF	; 255
     9f6:	03 31       	cpi	r16, 0x13	; 19
     9f8:	11 05       	cpc	r17, r1
     9fa:	11 f6       	brne	.-124    	; 0x980 <__stack+0x81>
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
				currentArray[(i-1)/2] = current;
			}
		}
		float test = calcCurrentRMS(&currentArray);
     9fc:	6b 96       	adiw	r28, 0x1b	; 27
     9fe:	8f ad       	ldd	r24, Y+63	; 0x3f
     a00:	6b 97       	sbiw	r28, 0x1b	; 27
     a02:	6c 96       	adiw	r28, 0x1c	; 28
     a04:	9f ad       	ldd	r25, Y+63	; 0x3f
     a06:	6c 97       	sbiw	r28, 0x1c	; 28
     a08:	0e 94 f6 02 	call	0x5ec	; 0x5ec <calcCurrentRMS>
		if (test > 0.21) {
     a0c:	2d e3       	ldi	r18, 0x3D	; 61
     a0e:	3a e0       	ldi	r19, 0x0A	; 10
     a10:	47 e5       	ldi	r20, 0x57	; 87
     a12:	5e e3       	ldi	r21, 0x3E	; 62
     a14:	0e 94 3a 08 	call	0x1074	; 0x1074 <__gesf2>
     a18:	18 16       	cp	r1, r24
     a1a:	34 f4       	brge	.+12     	; 0xa28 <__stack+0x129>
			if (currentFlag != 0) {
     a1c:	66 96       	adiw	r28, 0x16	; 22
     a1e:	ef ad       	ldd	r30, Y+63	; 0x3f
     a20:	66 97       	sbiw	r28, 0x16	; 22
     a22:	e1 11       	cpse	r30, r1
     a24:	43 c1       	rjmp	.+646    	; 0xcac <__stack+0x3ad>
     a26:	06 c0       	rjmp	.+12     	; 0xa34 <__stack+0x135>
				currentFlag = 0;
				continue;
			}
		} else {
			if (currentFlag != 1) {
     a28:	66 96       	adiw	r28, 0x16	; 22
     a2a:	ff ad       	ldd	r31, Y+63	; 0x3f
     a2c:	66 97       	sbiw	r28, 0x16	; 22
     a2e:	f1 30       	cpi	r31, 0x01	; 1
     a30:	09 f0       	breq	.+2      	; 0xa34 <__stack+0x135>
     a32:	40 c1       	rjmp	.+640    	; 0xcb4 <__stack+0x3b5>
				currentFlag = 1;
				continue;
			}
		}
		
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { dataFloat = calcPower(&voltageArray, &currentArray); } 
     a34:	a0 96       	adiw	r28, 0x20	; 32
     a36:	6c ad       	ldd	r22, Y+60	; 0x3c
     a38:	7d ad       	ldd	r23, Y+61	; 0x3d
     a3a:	8e ad       	ldd	r24, Y+62	; 0x3e
     a3c:	9f ad       	ldd	r25, Y+63	; 0x3f
     a3e:	a0 97       	sbiw	r28, 0x20	; 32
     a40:	2a e0       	ldi	r18, 0x0A	; 10
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	0e 94 bd 0a 	call	0x157a	; 0x157a <__udivmodsi4>
     a4c:	6a 96       	adiw	r28, 0x1a	; 26
     a4e:	6c af       	std	Y+60, r22	; 0x3c
     a50:	7d af       	std	Y+61, r23	; 0x3d
     a52:	8e af       	std	Y+62, r24	; 0x3e
     a54:	9f af       	std	Y+63, r25	; 0x3f
     a56:	6a 97       	sbiw	r28, 0x1a	; 26
     a58:	2b 01       	movw	r4, r22
     a5a:	3c 01       	movw	r6, r24
     a5c:	64 30       	cpi	r22, 0x04	; 4
     a5e:	71 05       	cpc	r23, r1
     a60:	81 05       	cpc	r24, r1
     a62:	91 05       	cpc	r25, r1
     a64:	78 f4       	brcc	.+30     	; 0xa84 <__stack+0x185>
     a66:	6b 96       	adiw	r28, 0x1b	; 27
     a68:	6f ad       	ldd	r22, Y+63	; 0x3f
     a6a:	6b 97       	sbiw	r28, 0x1b	; 27
     a6c:	6c 96       	adiw	r28, 0x1c	; 28
     a6e:	7f ad       	ldd	r23, Y+63	; 0x3f
     a70:	6c 97       	sbiw	r28, 0x1c	; 28
     a72:	ce 01       	movw	r24, r28
     a74:	89 96       	adiw	r24, 0x29	; 41
     a76:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <calcPower>
     a7a:	b6 2f       	mov	r27, r22
     a7c:	a7 2f       	mov	r26, r23
     a7e:	f8 2f       	mov	r31, r24
     a80:	e9 2f       	mov	r30, r25
     a82:	2d c0       	rjmp	.+90     	; 0xade <__stack+0x1df>
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataFloat = dataFloat = calcCurrentRMS(&currentArray); }
     a84:	6a 96       	adiw	r28, 0x1a	; 26
     a86:	8c ad       	ldd	r24, Y+60	; 0x3c
     a88:	9d ad       	ldd	r25, Y+61	; 0x3d
     a8a:	ae ad       	ldd	r26, Y+62	; 0x3e
     a8c:	bf ad       	ldd	r27, Y+63	; 0x3f
     a8e:	6a 97       	sbiw	r28, 0x1a	; 26
     a90:	04 97       	sbiw	r24, 0x04	; 4
     a92:	a1 09       	sbc	r26, r1
     a94:	b1 09       	sbc	r27, r1
     a96:	03 97       	sbiw	r24, 0x03	; 3
     a98:	a1 05       	cpc	r26, r1
     a9a:	b1 05       	cpc	r27, r1
     a9c:	68 f4       	brcc	.+26     	; 0xab8 <__stack+0x1b9>
     a9e:	6b 96       	adiw	r28, 0x1b	; 27
     aa0:	8f ad       	ldd	r24, Y+63	; 0x3f
     aa2:	6b 97       	sbiw	r28, 0x1b	; 27
     aa4:	6c 96       	adiw	r28, 0x1c	; 28
     aa6:	9f ad       	ldd	r25, Y+63	; 0x3f
     aa8:	6c 97       	sbiw	r28, 0x1c	; 28
     aaa:	0e 94 f6 02 	call	0x5ec	; 0x5ec <calcCurrentRMS>
     aae:	b6 2f       	mov	r27, r22
     ab0:	a7 2f       	mov	r26, r23
     ab2:	f8 2f       	mov	r31, r24
     ab4:	e9 2f       	mov	r30, r25
     ab6:	13 c0       	rjmp	.+38     	; 0xade <__stack+0x1df>
		else if (displayCount%10 > 6) { dataFloat = calcVoltageRMS(&voltageArray); }
     ab8:	37 e0       	ldi	r19, 0x07	; 7
     aba:	43 16       	cp	r4, r19
     abc:	51 04       	cpc	r5, r1
     abe:	61 04       	cpc	r6, r1
     ac0:	71 04       	cpc	r7, r1
     ac2:	48 f0       	brcs	.+18     	; 0xad6 <__stack+0x1d7>
     ac4:	ce 01       	movw	r24, r28
     ac6:	89 96       	adiw	r24, 0x29	; 41
     ac8:	0e 94 35 02 	call	0x46a	; 0x46a <calcVoltageRMS>
     acc:	b6 2f       	mov	r27, r22
     ace:	a7 2f       	mov	r26, r23
     ad0:	f8 2f       	mov	r31, r24
     ad2:	e9 2f       	mov	r30, r25
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__stack+0x1df>

	while(1) {
		uint8_t hasDecimal = 0;
		uint8_t dataArray[4];
		uint8_t index = 0;
		float dataFloat = 0;
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	a0 e0       	ldi	r26, 0x00	; 0
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	e0 e0       	ldi	r30, 0x00	; 0
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataFloat = dataFloat = calcCurrentRMS(&currentArray); }
		else if (displayCount%10 > 6) { dataFloat = calcVoltageRMS(&voltageArray); }
		
		// if A > 0.21 use low gain

		dataFloat = roundf(dataFloat * 100) / 100;
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	48 ec       	ldi	r20, 0xC8	; 200
     ae4:	52 e4       	ldi	r21, 0x42	; 66
     ae6:	6b 2f       	mov	r22, r27
     ae8:	7a 2f       	mov	r23, r26
     aea:	8f 2f       	mov	r24, r31
     aec:	9e 2f       	mov	r25, r30
     aee:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     af2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <round>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	48 ec       	ldi	r20, 0xC8	; 200
     afc:	52 e4       	ldi	r21, 0x42	; 66
     afe:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__divsf3>
     b02:	6b 01       	movw	r12, r22
     b04:	7c 01       	movw	r14, r24
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
     b06:	0e 94 ad 00 	call	0x15a	; 0x15a <find_decimal>
     b0a:	4c 01       	movw	r8, r24
     b0c:	99 24       	eor	r9, r9
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	88 19       	sub	r24, r8
     b14:	99 09       	sbc	r25, r9
     b16:	a2 96       	adiw	r28, 0x22	; 34
     b18:	9f af       	std	Y+63, r25	; 0x3f
     b1a:	8e af       	std	Y+62, r24	; 0x3e
     b1c:	a2 97       	sbiw	r28, 0x22	; 34
     b1e:	bc 01       	movw	r22, r24
     b20:	99 0f       	add	r25, r25
     b22:	88 0b       	sbc	r24, r24
     b24:	99 0b       	sbc	r25, r25
     b26:	0e 94 8a 07 	call	0xf14	; 0xf14 <__floatsisf>
     b2a:	9b 01       	movw	r18, r22
     b2c:	ac 01       	movw	r20, r24
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	80 e2       	ldi	r24, 0x20	; 32
     b34:	91 e4       	ldi	r25, 0x41	; 65
     b36:	0e 94 ac 08 	call	0x1158	; 0x1158 <pow>
     b3a:	a7 01       	movw	r20, r14
     b3c:	96 01       	movw	r18, r12
     b3e:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	40 e0       	ldi	r20, 0x00	; 0
     b48:	5f e3       	ldi	r21, 0x3F	; 63
     b4a:	0e 94 6f 06 	call	0xcde	; 0xcde <__addsf3>
     b4e:	0e 94 52 07 	call	0xea4	; 0xea4 <__fixsfsi>
     b52:	7b 01       	movw	r14, r22
     b54:	a4 96       	adiw	r28, 0x24	; 36
     b56:	ce ac       	ldd	r12, Y+62	; 0x3e
     b58:	df ac       	ldd	r13, Y+63	; 0x3f
     b5a:	a4 97       	sbiw	r28, 0x24	; 36
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     b5c:	02 e0       	ldi	r16, 0x02	; 2
     b5e:	10 e0       	ldi	r17, 0x00	; 0
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     b60:	08 15       	cp	r16, r8
     b62:	19 05       	cpc	r17, r9
     b64:	61 f4       	brne	.+24     	; 0xb7e <__stack+0x27f>
     b66:	a5 96       	adiw	r28, 0x25	; 37
     b68:	4f ad       	ldd	r20, Y+63	; 0x3f
     b6a:	a5 97       	sbiw	r28, 0x25	; 37
     b6c:	a2 96       	adiw	r28, 0x22	; 34
     b6e:	ae ad       	ldd	r26, Y+62	; 0x3e
     b70:	bf ad       	ldd	r27, Y+63	; 0x3f
     b72:	a2 97       	sbiw	r28, 0x22	; 34
     b74:	1a 16       	cp	r1, r26
     b76:	1b 06       	cpc	r1, r27
     b78:	1c f0       	brlt	.+6      	; 0xb80 <__stack+0x281>
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	01 c0       	rjmp	.+2      	; 0xb80 <__stack+0x281>
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
     b7e:	40 e0       	ldi	r20, 0x00	; 0
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
     b80:	97 01       	movw	r18, r14
     b82:	ad ec       	ldi	r26, 0xCD	; 205
     b84:	bc ec       	ldi	r27, 0xCC	; 204
     b86:	0e 94 df 0a 	call	0x15be	; 0x15be <__umulhisi3>
     b8a:	96 95       	lsr	r25
     b8c:	87 95       	ror	r24
     b8e:	96 95       	lsr	r25
     b90:	87 95       	ror	r24
     b92:	96 95       	lsr	r25
     b94:	87 95       	ror	r24
     b96:	9c 01       	movw	r18, r24
     b98:	22 0f       	add	r18, r18
     b9a:	33 1f       	adc	r19, r19
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	82 0f       	add	r24, r18
     baa:	93 1f       	adc	r25, r19
     bac:	60 2f       	mov	r22, r16
     bae:	be 2d       	mov	r27, r14
     bb0:	b8 1b       	sub	r27, r24
     bb2:	8b 2f       	mov	r24, r27
     bb4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <wololo>
     bb8:	f6 01       	movw	r30, r12
     bba:	82 93       	st	-Z, r24
     bbc:	6f 01       	movw	r12, r30
			dataInt = dataInt/10;
     bbe:	97 01       	movw	r18, r14
     bc0:	ad ec       	ldi	r26, 0xCD	; 205
     bc2:	bc ec       	ldi	r27, 0xCC	; 204
     bc4:	0e 94 df 0a 	call	0x15be	; 0x15be <__umulhisi3>
     bc8:	7c 01       	movw	r14, r24
     bca:	f6 94       	lsr	r15
     bcc:	e7 94       	ror	r14
     bce:	f6 94       	lsr	r15
     bd0:	e7 94       	ror	r14
     bd2:	f6 94       	lsr	r15
     bd4:	e7 94       	ror	r14
		dataFloat = roundf(dataFloat * 100) / 100;
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     bd6:	01 50       	subi	r16, 0x01	; 1
     bd8:	11 09       	sbc	r17, r1
     bda:	10 f6       	brcc	.-124    	; 0xb60 <__stack+0x261>
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
			dataInt = dataInt/10;
		}
		
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { dataArray[3] = 15; }
     bdc:	24 e0       	ldi	r18, 0x04	; 4
     bde:	42 16       	cp	r4, r18
     be0:	51 04       	cpc	r5, r1
     be2:	61 04       	cpc	r6, r1
     be4:	71 04       	cpc	r7, r1
     be6:	28 f4       	brcc	.+10     	; 0xbf2 <__stack+0x2f3>
     be8:	8f e0       	ldi	r24, 0x0F	; 15
     bea:	65 96       	adiw	r28, 0x15	; 21
     bec:	8f af       	std	Y+63, r24	; 0x3f
     bee:	65 97       	sbiw	r28, 0x15	; 21
     bf0:	1c c0       	rjmp	.+56     	; 0xc2a <__stack+0x32b>
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataArray[3] = 13; }
     bf2:	6a 96       	adiw	r28, 0x1a	; 26
     bf4:	8c ad       	ldd	r24, Y+60	; 0x3c
     bf6:	9d ad       	ldd	r25, Y+61	; 0x3d
     bf8:	ae ad       	ldd	r26, Y+62	; 0x3e
     bfa:	bf ad       	ldd	r27, Y+63	; 0x3f
     bfc:	6a 97       	sbiw	r28, 0x1a	; 26
     bfe:	04 97       	sbiw	r24, 0x04	; 4
     c00:	a1 09       	sbc	r26, r1
     c02:	b1 09       	sbc	r27, r1
     c04:	03 97       	sbiw	r24, 0x03	; 3
     c06:	a1 05       	cpc	r26, r1
     c08:	b1 05       	cpc	r27, r1
     c0a:	28 f4       	brcc	.+10     	; 0xc16 <__stack+0x317>
     c0c:	8d e0       	ldi	r24, 0x0D	; 13
     c0e:	65 96       	adiw	r28, 0x15	; 21
     c10:	8f af       	std	Y+63, r24	; 0x3f
     c12:	65 97       	sbiw	r28, 0x15	; 21
     c14:	0a c0       	rjmp	.+20     	; 0xc2a <__stack+0x32b>
		else if (displayCount%10 > 6) { dataArray[3] = 14; }
     c16:	37 e0       	ldi	r19, 0x07	; 7
     c18:	43 16       	cp	r4, r19
     c1a:	51 04       	cpc	r5, r1
     c1c:	61 04       	cpc	r6, r1
     c1e:	71 04       	cpc	r7, r1
     c20:	20 f0       	brcs	.+8      	; 0xc2a <__stack+0x32b>
     c22:	8e e0       	ldi	r24, 0x0E	; 14
     c24:	65 96       	adiw	r28, 0x15	; 21
     c26:	8f af       	std	Y+63, r24	; 0x3f
     c28:	65 97       	sbiw	r28, 0x15	; 21

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
			uart_transmit(data);
     c2a:	62 96       	adiw	r28, 0x12	; 18
     c2c:	8f ad       	ldd	r24, Y+63	; 0x3f
     c2e:	62 97       	sbiw	r28, 0x12	; 18
     c30:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c34:	af ed       	ldi	r26, 0xDF	; 223
     c36:	be e2       	ldi	r27, 0x2E	; 46
     c38:	11 97       	sbiw	r26, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <__stack+0x339>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <__stack+0x33f>
     c3e:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
     c40:	11 e0       	ldi	r17, 0x01	; 1
			//Select next integer to send
			if (index == 4) {
				index = 0;
     c42:	00 e0       	ldi	r16, 0x00	; 0
     c44:	13 c0       	rjmp	.+38     	; 0xc6c <__stack+0x36d>
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataArray[3] = 13; }
		else if (displayCount%10 > 6) { dataArray[3] = 14; }

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
     c46:	e1 e5       	ldi	r30, 0x51	; 81
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	ec 0f       	add	r30, r28
     c4c:	fd 1f       	adc	r31, r29
     c4e:	e1 0f       	add	r30, r17
     c50:	f1 1d       	adc	r31, r1
			uart_transmit(data);
     c52:	80 81       	ld	r24, Z
     c54:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
     c58:	ef ed       	ldi	r30, 0xDF	; 223
     c5a:	fe e2       	ldi	r31, 0x2E	; 46
     c5c:	31 97       	sbiw	r30, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <__stack+0x35d>
     c60:	00 c0       	rjmp	.+0      	; 0xc62 <__stack+0x363>
     c62:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
     c64:	1f 5f       	subi	r17, 0xFF	; 255
			//Select next integer to send
			if (index == 4) {
     c66:	14 30       	cpi	r17, 0x04	; 4
     c68:	09 f4       	brne	.+2      	; 0xc6c <__stack+0x36d>
				index = 0;
     c6a:	10 2f       	mov	r17, r16
			}
			//Polling mechanism
			if(TCNT0>=156) {
     c6c:	86 b5       	in	r24, 0x26	; 38
     c6e:	8c 39       	cpi	r24, 0x9C	; 156
     c70:	50 f3       	brcs	.-44     	; 0xc46 <__stack+0x347>
				TCNT0 = 0;
     c72:	16 bc       	out	0x26, r1	; 38
				if (counter == 50) {
     c74:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
     c78:	82 33       	cpi	r24, 0x32	; 50
     c7a:	91 f4       	brne	.+36     	; 0xca0 <__stack+0x3a1>
					counter = 0;
     c7c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter>
				} else {
					counter++;
				}
			}
		}
		displayCount++;
     c80:	a0 96       	adiw	r28, 0x20	; 32
     c82:	8c ad       	ldd	r24, Y+60	; 0x3c
     c84:	9d ad       	ldd	r25, Y+61	; 0x3d
     c86:	ae ad       	ldd	r26, Y+62	; 0x3e
     c88:	bf ad       	ldd	r27, Y+63	; 0x3f
     c8a:	a0 97       	sbiw	r28, 0x20	; 32
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	a1 1d       	adc	r26, r1
     c90:	b1 1d       	adc	r27, r1
     c92:	a0 96       	adiw	r28, 0x20	; 32
     c94:	8c af       	std	Y+60, r24	; 0x3c
     c96:	9d af       	std	Y+61, r25	; 0x3d
     c98:	ae af       	std	Y+62, r26	; 0x3e
     c9a:	bf af       	std	Y+63, r27	; 0x3f
     c9c:	a0 97       	sbiw	r28, 0x20	; 32
     c9e:	5f ce       	rjmp	.-834    	; 0x95e <__stack+0x5f>
				TCNT0 = 0;
				if (counter == 50) {
					counter = 0;
					break;
				} else {
					counter++;
     ca0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter>
     caa:	cd cf       	rjmp	.-102    	; 0xc46 <__stack+0x347>
			}
		}
		float test = calcCurrentRMS(&currentArray);
		if (test > 0.21) {
			if (currentFlag != 0) {
				currentFlag = 0;
     cac:	66 96       	adiw	r28, 0x16	; 22
     cae:	1f ae       	std	Y+63, r1	; 0x3f
     cb0:	66 97       	sbiw	r28, 0x16	; 22
     cb2:	55 ce       	rjmp	.-854    	; 0x95e <__stack+0x5f>
				continue;
			}
		} else {
			if (currentFlag != 1) {
				currentFlag = 1;
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	66 96       	adiw	r28, 0x16	; 22
     cb8:	9f af       	std	Y+63, r25	; 0x3f
     cba:	66 97       	sbiw	r28, 0x16	; 22
     cbc:	50 ce       	rjmp	.-864    	; 0x95e <__stack+0x5f>

00000cbe <__vector_1>:
		displayCount++;
	}
	return 0;
}

ISR (INT0_vect) {
     cbe:	1f 92       	push	r1
     cc0:	0f 92       	push	r0
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	0f 92       	push	r0
     cc6:	11 24       	eor	r1, r1
     cc8:	8f 93       	push	r24
	flag = 1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     cd0:	8f 91       	pop	r24
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <__subsf3>:
     cdc:	50 58       	subi	r21, 0x80	; 128

00000cde <__addsf3>:
     cde:	bb 27       	eor	r27, r27
     ce0:	aa 27       	eor	r26, r26
     ce2:	0e 94 86 06 	call	0xd0c	; 0xd0c <__addsf3x>
     ce6:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_round>
     cea:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fp_pscA>
     cee:	38 f0       	brcs	.+14     	; 0xcfe <__addsf3+0x20>
     cf0:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_pscB>
     cf4:	20 f0       	brcs	.+8      	; 0xcfe <__addsf3+0x20>
     cf6:	39 f4       	brne	.+14     	; 0xd06 <__addsf3+0x28>
     cf8:	9f 3f       	cpi	r25, 0xFF	; 255
     cfa:	19 f4       	brne	.+6      	; 0xd02 <__addsf3+0x24>
     cfc:	26 f4       	brtc	.+8      	; 0xd06 <__addsf3+0x28>
     cfe:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_nan>
     d02:	0e f4       	brtc	.+2      	; 0xd06 <__addsf3+0x28>
     d04:	e0 95       	com	r30
     d06:	e7 fb       	bst	r30, 7
     d08:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>

00000d0c <__addsf3x>:
     d0c:	e9 2f       	mov	r30, r25
     d0e:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_split3>
     d12:	58 f3       	brcs	.-42     	; 0xcea <__addsf3+0xc>
     d14:	ba 17       	cp	r27, r26
     d16:	62 07       	cpc	r22, r18
     d18:	73 07       	cpc	r23, r19
     d1a:	84 07       	cpc	r24, r20
     d1c:	95 07       	cpc	r25, r21
     d1e:	20 f0       	brcs	.+8      	; 0xd28 <__addsf3x+0x1c>
     d20:	79 f4       	brne	.+30     	; 0xd40 <__addsf3x+0x34>
     d22:	a6 f5       	brtc	.+104    	; 0xd8c <__addsf3x+0x80>
     d24:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__fp_zero>
     d28:	0e f4       	brtc	.+2      	; 0xd2c <__addsf3x+0x20>
     d2a:	e0 95       	com	r30
     d2c:	0b 2e       	mov	r0, r27
     d2e:	ba 2f       	mov	r27, r26
     d30:	a0 2d       	mov	r26, r0
     d32:	0b 01       	movw	r0, r22
     d34:	b9 01       	movw	r22, r18
     d36:	90 01       	movw	r18, r0
     d38:	0c 01       	movw	r0, r24
     d3a:	ca 01       	movw	r24, r20
     d3c:	a0 01       	movw	r20, r0
     d3e:	11 24       	eor	r1, r1
     d40:	ff 27       	eor	r31, r31
     d42:	59 1b       	sub	r21, r25
     d44:	99 f0       	breq	.+38     	; 0xd6c <__addsf3x+0x60>
     d46:	59 3f       	cpi	r21, 0xF9	; 249
     d48:	50 f4       	brcc	.+20     	; 0xd5e <__addsf3x+0x52>
     d4a:	50 3e       	cpi	r21, 0xE0	; 224
     d4c:	68 f1       	brcs	.+90     	; 0xda8 <__addsf3x+0x9c>
     d4e:	1a 16       	cp	r1, r26
     d50:	f0 40       	sbci	r31, 0x00	; 0
     d52:	a2 2f       	mov	r26, r18
     d54:	23 2f       	mov	r18, r19
     d56:	34 2f       	mov	r19, r20
     d58:	44 27       	eor	r20, r20
     d5a:	58 5f       	subi	r21, 0xF8	; 248
     d5c:	f3 cf       	rjmp	.-26     	; 0xd44 <__addsf3x+0x38>
     d5e:	46 95       	lsr	r20
     d60:	37 95       	ror	r19
     d62:	27 95       	ror	r18
     d64:	a7 95       	ror	r26
     d66:	f0 40       	sbci	r31, 0x00	; 0
     d68:	53 95       	inc	r21
     d6a:	c9 f7       	brne	.-14     	; 0xd5e <__addsf3x+0x52>
     d6c:	7e f4       	brtc	.+30     	; 0xd8c <__addsf3x+0x80>
     d6e:	1f 16       	cp	r1, r31
     d70:	ba 0b       	sbc	r27, r26
     d72:	62 0b       	sbc	r22, r18
     d74:	73 0b       	sbc	r23, r19
     d76:	84 0b       	sbc	r24, r20
     d78:	ba f0       	brmi	.+46     	; 0xda8 <__addsf3x+0x9c>
     d7a:	91 50       	subi	r25, 0x01	; 1
     d7c:	a1 f0       	breq	.+40     	; 0xda6 <__addsf3x+0x9a>
     d7e:	ff 0f       	add	r31, r31
     d80:	bb 1f       	adc	r27, r27
     d82:	66 1f       	adc	r22, r22
     d84:	77 1f       	adc	r23, r23
     d86:	88 1f       	adc	r24, r24
     d88:	c2 f7       	brpl	.-16     	; 0xd7a <__addsf3x+0x6e>
     d8a:	0e c0       	rjmp	.+28     	; 0xda8 <__addsf3x+0x9c>
     d8c:	ba 0f       	add	r27, r26
     d8e:	62 1f       	adc	r22, r18
     d90:	73 1f       	adc	r23, r19
     d92:	84 1f       	adc	r24, r20
     d94:	48 f4       	brcc	.+18     	; 0xda8 <__addsf3x+0x9c>
     d96:	87 95       	ror	r24
     d98:	77 95       	ror	r23
     d9a:	67 95       	ror	r22
     d9c:	b7 95       	ror	r27
     d9e:	f7 95       	ror	r31
     da0:	9e 3f       	cpi	r25, 0xFE	; 254
     da2:	08 f0       	brcs	.+2      	; 0xda6 <__addsf3x+0x9a>
     da4:	b0 cf       	rjmp	.-160    	; 0xd06 <__addsf3+0x28>
     da6:	93 95       	inc	r25
     da8:	88 0f       	add	r24, r24
     daa:	08 f0       	brcs	.+2      	; 0xdae <__addsf3x+0xa2>
     dac:	99 27       	eor	r25, r25
     dae:	ee 0f       	add	r30, r30
     db0:	97 95       	ror	r25
     db2:	87 95       	ror	r24
     db4:	08 95       	ret

00000db6 <__cmpsf2>:
     db6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fp_cmp>
     dba:	08 f4       	brcc	.+2      	; 0xdbe <__cmpsf2+0x8>
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	08 95       	ret

00000dc0 <__divsf3>:
     dc0:	0e 94 f4 06 	call	0xde8	; 0xde8 <__divsf3x>
     dc4:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_round>
     dc8:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_pscB>
     dcc:	58 f0       	brcs	.+22     	; 0xde4 <__divsf3+0x24>
     dce:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fp_pscA>
     dd2:	40 f0       	brcs	.+16     	; 0xde4 <__divsf3+0x24>
     dd4:	29 f4       	brne	.+10     	; 0xde0 <__divsf3+0x20>
     dd6:	5f 3f       	cpi	r21, 0xFF	; 255
     dd8:	29 f0       	breq	.+10     	; 0xde4 <__divsf3+0x24>
     dda:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>
     dde:	51 11       	cpse	r21, r1
     de0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_szero>
     de4:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_nan>

00000de8 <__divsf3x>:
     de8:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_split3>
     dec:	68 f3       	brcs	.-38     	; 0xdc8 <__divsf3+0x8>

00000dee <__divsf3_pse>:
     dee:	99 23       	and	r25, r25
     df0:	b1 f3       	breq	.-20     	; 0xdde <__divsf3+0x1e>
     df2:	55 23       	and	r21, r21
     df4:	91 f3       	breq	.-28     	; 0xdda <__divsf3+0x1a>
     df6:	95 1b       	sub	r25, r21
     df8:	55 0b       	sbc	r21, r21
     dfa:	bb 27       	eor	r27, r27
     dfc:	aa 27       	eor	r26, r26
     dfe:	62 17       	cp	r22, r18
     e00:	73 07       	cpc	r23, r19
     e02:	84 07       	cpc	r24, r20
     e04:	38 f0       	brcs	.+14     	; 0xe14 <__divsf3_pse+0x26>
     e06:	9f 5f       	subi	r25, 0xFF	; 255
     e08:	5f 4f       	sbci	r21, 0xFF	; 255
     e0a:	22 0f       	add	r18, r18
     e0c:	33 1f       	adc	r19, r19
     e0e:	44 1f       	adc	r20, r20
     e10:	aa 1f       	adc	r26, r26
     e12:	a9 f3       	breq	.-22     	; 0xdfe <__divsf3_pse+0x10>
     e14:	35 d0       	rcall	.+106    	; 0xe80 <__divsf3_pse+0x92>
     e16:	0e 2e       	mov	r0, r30
     e18:	3a f0       	brmi	.+14     	; 0xe28 <__divsf3_pse+0x3a>
     e1a:	e0 e8       	ldi	r30, 0x80	; 128
     e1c:	32 d0       	rcall	.+100    	; 0xe82 <__divsf3_pse+0x94>
     e1e:	91 50       	subi	r25, 0x01	; 1
     e20:	50 40       	sbci	r21, 0x00	; 0
     e22:	e6 95       	lsr	r30
     e24:	00 1c       	adc	r0, r0
     e26:	ca f7       	brpl	.-14     	; 0xe1a <__divsf3_pse+0x2c>
     e28:	2b d0       	rcall	.+86     	; 0xe80 <__divsf3_pse+0x92>
     e2a:	fe 2f       	mov	r31, r30
     e2c:	29 d0       	rcall	.+82     	; 0xe80 <__divsf3_pse+0x92>
     e2e:	66 0f       	add	r22, r22
     e30:	77 1f       	adc	r23, r23
     e32:	88 1f       	adc	r24, r24
     e34:	bb 1f       	adc	r27, r27
     e36:	26 17       	cp	r18, r22
     e38:	37 07       	cpc	r19, r23
     e3a:	48 07       	cpc	r20, r24
     e3c:	ab 07       	cpc	r26, r27
     e3e:	b0 e8       	ldi	r27, 0x80	; 128
     e40:	09 f0       	breq	.+2      	; 0xe44 <__divsf3_pse+0x56>
     e42:	bb 0b       	sbc	r27, r27
     e44:	80 2d       	mov	r24, r0
     e46:	bf 01       	movw	r22, r30
     e48:	ff 27       	eor	r31, r31
     e4a:	93 58       	subi	r25, 0x83	; 131
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255
     e4e:	3a f0       	brmi	.+14     	; 0xe5e <__divsf3_pse+0x70>
     e50:	9e 3f       	cpi	r25, 0xFE	; 254
     e52:	51 05       	cpc	r21, r1
     e54:	78 f0       	brcs	.+30     	; 0xe74 <__divsf3_pse+0x86>
     e56:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>
     e5a:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_szero>
     e5e:	5f 3f       	cpi	r21, 0xFF	; 255
     e60:	e4 f3       	brlt	.-8      	; 0xe5a <__divsf3_pse+0x6c>
     e62:	98 3e       	cpi	r25, 0xE8	; 232
     e64:	d4 f3       	brlt	.-12     	; 0xe5a <__divsf3_pse+0x6c>
     e66:	86 95       	lsr	r24
     e68:	77 95       	ror	r23
     e6a:	67 95       	ror	r22
     e6c:	b7 95       	ror	r27
     e6e:	f7 95       	ror	r31
     e70:	9f 5f       	subi	r25, 0xFF	; 255
     e72:	c9 f7       	brne	.-14     	; 0xe66 <__divsf3_pse+0x78>
     e74:	88 0f       	add	r24, r24
     e76:	91 1d       	adc	r25, r1
     e78:	96 95       	lsr	r25
     e7a:	87 95       	ror	r24
     e7c:	97 f9       	bld	r25, 7
     e7e:	08 95       	ret
     e80:	e1 e0       	ldi	r30, 0x01	; 1
     e82:	66 0f       	add	r22, r22
     e84:	77 1f       	adc	r23, r23
     e86:	88 1f       	adc	r24, r24
     e88:	bb 1f       	adc	r27, r27
     e8a:	62 17       	cp	r22, r18
     e8c:	73 07       	cpc	r23, r19
     e8e:	84 07       	cpc	r24, r20
     e90:	ba 07       	cpc	r27, r26
     e92:	20 f0       	brcs	.+8      	; 0xe9c <__divsf3_pse+0xae>
     e94:	62 1b       	sub	r22, r18
     e96:	73 0b       	sbc	r23, r19
     e98:	84 0b       	sbc	r24, r20
     e9a:	ba 0b       	sbc	r27, r26
     e9c:	ee 1f       	adc	r30, r30
     e9e:	88 f7       	brcc	.-30     	; 0xe82 <__divsf3_pse+0x94>
     ea0:	e0 95       	com	r30
     ea2:	08 95       	ret

00000ea4 <__fixsfsi>:
     ea4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__fixunssfsi>
     ea8:	68 94       	set
     eaa:	b1 11       	cpse	r27, r1
     eac:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_szero>
     eb0:	08 95       	ret

00000eb2 <__fixunssfsi>:
     eb2:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_splitA>
     eb6:	88 f0       	brcs	.+34     	; 0xeda <__fixunssfsi+0x28>
     eb8:	9f 57       	subi	r25, 0x7F	; 127
     eba:	98 f0       	brcs	.+38     	; 0xee2 <__fixunssfsi+0x30>
     ebc:	b9 2f       	mov	r27, r25
     ebe:	99 27       	eor	r25, r25
     ec0:	b7 51       	subi	r27, 0x17	; 23
     ec2:	b0 f0       	brcs	.+44     	; 0xef0 <__fixunssfsi+0x3e>
     ec4:	e1 f0       	breq	.+56     	; 0xefe <__fixunssfsi+0x4c>
     ec6:	66 0f       	add	r22, r22
     ec8:	77 1f       	adc	r23, r23
     eca:	88 1f       	adc	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	1a f0       	brmi	.+6      	; 0xed6 <__fixunssfsi+0x24>
     ed0:	ba 95       	dec	r27
     ed2:	c9 f7       	brne	.-14     	; 0xec6 <__fixunssfsi+0x14>
     ed4:	14 c0       	rjmp	.+40     	; 0xefe <__fixunssfsi+0x4c>
     ed6:	b1 30       	cpi	r27, 0x01	; 1
     ed8:	91 f0       	breq	.+36     	; 0xefe <__fixunssfsi+0x4c>
     eda:	0e 94 33 08 	call	0x1066	; 0x1066 <__fp_zero>
     ede:	b1 e0       	ldi	r27, 0x01	; 1
     ee0:	08 95       	ret
     ee2:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__fp_zero>
     ee6:	67 2f       	mov	r22, r23
     ee8:	78 2f       	mov	r23, r24
     eea:	88 27       	eor	r24, r24
     eec:	b8 5f       	subi	r27, 0xF8	; 248
     eee:	39 f0       	breq	.+14     	; 0xefe <__fixunssfsi+0x4c>
     ef0:	b9 3f       	cpi	r27, 0xF9	; 249
     ef2:	cc f3       	brlt	.-14     	; 0xee6 <__fixunssfsi+0x34>
     ef4:	86 95       	lsr	r24
     ef6:	77 95       	ror	r23
     ef8:	67 95       	ror	r22
     efa:	b3 95       	inc	r27
     efc:	d9 f7       	brne	.-10     	; 0xef4 <__fixunssfsi+0x42>
     efe:	3e f4       	brtc	.+14     	; 0xf0e <__fixunssfsi+0x5c>
     f00:	90 95       	com	r25
     f02:	80 95       	com	r24
     f04:	70 95       	com	r23
     f06:	61 95       	neg	r22
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	8f 4f       	sbci	r24, 0xFF	; 255
     f0c:	9f 4f       	sbci	r25, 0xFF	; 255
     f0e:	08 95       	ret

00000f10 <__floatunsisf>:
     f10:	e8 94       	clt
     f12:	09 c0       	rjmp	.+18     	; 0xf26 <__floatsisf+0x12>

00000f14 <__floatsisf>:
     f14:	97 fb       	bst	r25, 7
     f16:	3e f4       	brtc	.+14     	; 0xf26 <__floatsisf+0x12>
     f18:	90 95       	com	r25
     f1a:	80 95       	com	r24
     f1c:	70 95       	com	r23
     f1e:	61 95       	neg	r22
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	8f 4f       	sbci	r24, 0xFF	; 255
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	99 23       	and	r25, r25
     f28:	a9 f0       	breq	.+42     	; 0xf54 <__floatsisf+0x40>
     f2a:	f9 2f       	mov	r31, r25
     f2c:	96 e9       	ldi	r25, 0x96	; 150
     f2e:	bb 27       	eor	r27, r27
     f30:	93 95       	inc	r25
     f32:	f6 95       	lsr	r31
     f34:	87 95       	ror	r24
     f36:	77 95       	ror	r23
     f38:	67 95       	ror	r22
     f3a:	b7 95       	ror	r27
     f3c:	f1 11       	cpse	r31, r1
     f3e:	f8 cf       	rjmp	.-16     	; 0xf30 <__floatsisf+0x1c>
     f40:	fa f4       	brpl	.+62     	; 0xf80 <__floatsisf+0x6c>
     f42:	bb 0f       	add	r27, r27
     f44:	11 f4       	brne	.+4      	; 0xf4a <__floatsisf+0x36>
     f46:	60 ff       	sbrs	r22, 0
     f48:	1b c0       	rjmp	.+54     	; 0xf80 <__floatsisf+0x6c>
     f4a:	6f 5f       	subi	r22, 0xFF	; 255
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	8f 4f       	sbci	r24, 0xFF	; 255
     f50:	9f 4f       	sbci	r25, 0xFF	; 255
     f52:	16 c0       	rjmp	.+44     	; 0xf80 <__floatsisf+0x6c>
     f54:	88 23       	and	r24, r24
     f56:	11 f0       	breq	.+4      	; 0xf5c <__floatsisf+0x48>
     f58:	96 e9       	ldi	r25, 0x96	; 150
     f5a:	11 c0       	rjmp	.+34     	; 0xf7e <__floatsisf+0x6a>
     f5c:	77 23       	and	r23, r23
     f5e:	21 f0       	breq	.+8      	; 0xf68 <__floatsisf+0x54>
     f60:	9e e8       	ldi	r25, 0x8E	; 142
     f62:	87 2f       	mov	r24, r23
     f64:	76 2f       	mov	r23, r22
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <__floatsisf+0x5e>
     f68:	66 23       	and	r22, r22
     f6a:	71 f0       	breq	.+28     	; 0xf88 <__floatsisf+0x74>
     f6c:	96 e8       	ldi	r25, 0x86	; 134
     f6e:	86 2f       	mov	r24, r22
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	2a f0       	brmi	.+10     	; 0xf80 <__floatsisf+0x6c>
     f76:	9a 95       	dec	r25
     f78:	66 0f       	add	r22, r22
     f7a:	77 1f       	adc	r23, r23
     f7c:	88 1f       	adc	r24, r24
     f7e:	da f7       	brpl	.-10     	; 0xf76 <__floatsisf+0x62>
     f80:	88 0f       	add	r24, r24
     f82:	96 95       	lsr	r25
     f84:	87 95       	ror	r24
     f86:	97 f9       	bld	r25, 7
     f88:	08 95       	ret

00000f8a <__fp_cmp>:
     f8a:	99 0f       	add	r25, r25
     f8c:	00 08       	sbc	r0, r0
     f8e:	55 0f       	add	r21, r21
     f90:	aa 0b       	sbc	r26, r26
     f92:	e0 e8       	ldi	r30, 0x80	; 128
     f94:	fe ef       	ldi	r31, 0xFE	; 254
     f96:	16 16       	cp	r1, r22
     f98:	17 06       	cpc	r1, r23
     f9a:	e8 07       	cpc	r30, r24
     f9c:	f9 07       	cpc	r31, r25
     f9e:	c0 f0       	brcs	.+48     	; 0xfd0 <__fp_cmp+0x46>
     fa0:	12 16       	cp	r1, r18
     fa2:	13 06       	cpc	r1, r19
     fa4:	e4 07       	cpc	r30, r20
     fa6:	f5 07       	cpc	r31, r21
     fa8:	98 f0       	brcs	.+38     	; 0xfd0 <__fp_cmp+0x46>
     faa:	62 1b       	sub	r22, r18
     fac:	73 0b       	sbc	r23, r19
     fae:	84 0b       	sbc	r24, r20
     fb0:	95 0b       	sbc	r25, r21
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__fp_cmp+0x38>
     fb4:	0a 26       	eor	r0, r26
     fb6:	61 f0       	breq	.+24     	; 0xfd0 <__fp_cmp+0x46>
     fb8:	23 2b       	or	r18, r19
     fba:	24 2b       	or	r18, r20
     fbc:	25 2b       	or	r18, r21
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <__fp_cmp+0x3e>
     fc0:	08 95       	ret
     fc2:	0a 26       	eor	r0, r26
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <__fp_cmp+0x3e>
     fc6:	a1 40       	sbci	r26, 0x01	; 1
     fc8:	a6 95       	lsr	r26
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	81 1d       	adc	r24, r1
     fce:	81 1d       	adc	r24, r1
     fd0:	08 95       	ret

00000fd2 <__fp_inf>:
     fd2:	97 f9       	bld	r25, 7
     fd4:	9f 67       	ori	r25, 0x7F	; 127
     fd6:	80 e8       	ldi	r24, 0x80	; 128
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	08 95       	ret

00000fde <__fp_nan>:
     fde:	9f ef       	ldi	r25, 0xFF	; 255
     fe0:	80 ec       	ldi	r24, 0xC0	; 192
     fe2:	08 95       	ret

00000fe4 <__fp_pscA>:
     fe4:	00 24       	eor	r0, r0
     fe6:	0a 94       	dec	r0
     fe8:	16 16       	cp	r1, r22
     fea:	17 06       	cpc	r1, r23
     fec:	18 06       	cpc	r1, r24
     fee:	09 06       	cpc	r0, r25
     ff0:	08 95       	ret

00000ff2 <__fp_pscB>:
     ff2:	00 24       	eor	r0, r0
     ff4:	0a 94       	dec	r0
     ff6:	12 16       	cp	r1, r18
     ff8:	13 06       	cpc	r1, r19
     ffa:	14 06       	cpc	r1, r20
     ffc:	05 06       	cpc	r0, r21
     ffe:	08 95       	ret

00001000 <__fp_round>:
    1000:	09 2e       	mov	r0, r25
    1002:	03 94       	inc	r0
    1004:	00 0c       	add	r0, r0
    1006:	11 f4       	brne	.+4      	; 0x100c <__fp_round+0xc>
    1008:	88 23       	and	r24, r24
    100a:	52 f0       	brmi	.+20     	; 0x1020 <__fp_round+0x20>
    100c:	bb 0f       	add	r27, r27
    100e:	40 f4       	brcc	.+16     	; 0x1020 <__fp_round+0x20>
    1010:	bf 2b       	or	r27, r31
    1012:	11 f4       	brne	.+4      	; 0x1018 <__fp_round+0x18>
    1014:	60 ff       	sbrs	r22, 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__fp_round+0x20>
    1018:	6f 5f       	subi	r22, 0xFF	; 255
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	8f 4f       	sbci	r24, 0xFF	; 255
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	08 95       	ret

00001022 <__fp_split3>:
    1022:	57 fd       	sbrc	r21, 7
    1024:	90 58       	subi	r25, 0x80	; 128
    1026:	44 0f       	add	r20, r20
    1028:	55 1f       	adc	r21, r21
    102a:	59 f0       	breq	.+22     	; 0x1042 <__fp_splitA+0x10>
    102c:	5f 3f       	cpi	r21, 0xFF	; 255
    102e:	71 f0       	breq	.+28     	; 0x104c <__fp_splitA+0x1a>
    1030:	47 95       	ror	r20

00001032 <__fp_splitA>:
    1032:	88 0f       	add	r24, r24
    1034:	97 fb       	bst	r25, 7
    1036:	99 1f       	adc	r25, r25
    1038:	61 f0       	breq	.+24     	; 0x1052 <__fp_splitA+0x20>
    103a:	9f 3f       	cpi	r25, 0xFF	; 255
    103c:	79 f0       	breq	.+30     	; 0x105c <__fp_splitA+0x2a>
    103e:	87 95       	ror	r24
    1040:	08 95       	ret
    1042:	12 16       	cp	r1, r18
    1044:	13 06       	cpc	r1, r19
    1046:	14 06       	cpc	r1, r20
    1048:	55 1f       	adc	r21, r21
    104a:	f2 cf       	rjmp	.-28     	; 0x1030 <__fp_split3+0xe>
    104c:	46 95       	lsr	r20
    104e:	f1 df       	rcall	.-30     	; 0x1032 <__fp_splitA>
    1050:	08 c0       	rjmp	.+16     	; 0x1062 <__fp_splitA+0x30>
    1052:	16 16       	cp	r1, r22
    1054:	17 06       	cpc	r1, r23
    1056:	18 06       	cpc	r1, r24
    1058:	99 1f       	adc	r25, r25
    105a:	f1 cf       	rjmp	.-30     	; 0x103e <__fp_splitA+0xc>
    105c:	86 95       	lsr	r24
    105e:	71 05       	cpc	r23, r1
    1060:	61 05       	cpc	r22, r1
    1062:	08 94       	sec
    1064:	08 95       	ret

00001066 <__fp_zero>:
    1066:	e8 94       	clt

00001068 <__fp_szero>:
    1068:	bb 27       	eor	r27, r27
    106a:	66 27       	eor	r22, r22
    106c:	77 27       	eor	r23, r23
    106e:	cb 01       	movw	r24, r22
    1070:	97 f9       	bld	r25, 7
    1072:	08 95       	ret

00001074 <__gesf2>:
    1074:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fp_cmp>
    1078:	08 f4       	brcc	.+2      	; 0x107c <__gesf2+0x8>
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	08 95       	ret

0000107e <__mulsf3>:
    107e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3x>
    1082:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_round>
    1086:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fp_pscA>
    108a:	38 f0       	brcs	.+14     	; 0x109a <__mulsf3+0x1c>
    108c:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_pscB>
    1090:	20 f0       	brcs	.+8      	; 0x109a <__mulsf3+0x1c>
    1092:	95 23       	and	r25, r21
    1094:	11 f0       	breq	.+4      	; 0x109a <__mulsf3+0x1c>
    1096:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>
    109a:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_nan>
    109e:	11 24       	eor	r1, r1
    10a0:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_szero>

000010a4 <__mulsf3x>:
    10a4:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_split3>
    10a8:	70 f3       	brcs	.-36     	; 0x1086 <__mulsf3+0x8>

000010aa <__mulsf3_pse>:
    10aa:	95 9f       	mul	r25, r21
    10ac:	c1 f3       	breq	.-16     	; 0x109e <__mulsf3+0x20>
    10ae:	95 0f       	add	r25, r21
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	55 1f       	adc	r21, r21
    10b4:	62 9f       	mul	r22, r18
    10b6:	f0 01       	movw	r30, r0
    10b8:	72 9f       	mul	r23, r18
    10ba:	bb 27       	eor	r27, r27
    10bc:	f0 0d       	add	r31, r0
    10be:	b1 1d       	adc	r27, r1
    10c0:	63 9f       	mul	r22, r19
    10c2:	aa 27       	eor	r26, r26
    10c4:	f0 0d       	add	r31, r0
    10c6:	b1 1d       	adc	r27, r1
    10c8:	aa 1f       	adc	r26, r26
    10ca:	64 9f       	mul	r22, r20
    10cc:	66 27       	eor	r22, r22
    10ce:	b0 0d       	add	r27, r0
    10d0:	a1 1d       	adc	r26, r1
    10d2:	66 1f       	adc	r22, r22
    10d4:	82 9f       	mul	r24, r18
    10d6:	22 27       	eor	r18, r18
    10d8:	b0 0d       	add	r27, r0
    10da:	a1 1d       	adc	r26, r1
    10dc:	62 1f       	adc	r22, r18
    10de:	73 9f       	mul	r23, r19
    10e0:	b0 0d       	add	r27, r0
    10e2:	a1 1d       	adc	r26, r1
    10e4:	62 1f       	adc	r22, r18
    10e6:	83 9f       	mul	r24, r19
    10e8:	a0 0d       	add	r26, r0
    10ea:	61 1d       	adc	r22, r1
    10ec:	22 1f       	adc	r18, r18
    10ee:	74 9f       	mul	r23, r20
    10f0:	33 27       	eor	r19, r19
    10f2:	a0 0d       	add	r26, r0
    10f4:	61 1d       	adc	r22, r1
    10f6:	23 1f       	adc	r18, r19
    10f8:	84 9f       	mul	r24, r20
    10fa:	60 0d       	add	r22, r0
    10fc:	21 1d       	adc	r18, r1
    10fe:	82 2f       	mov	r24, r18
    1100:	76 2f       	mov	r23, r22
    1102:	6a 2f       	mov	r22, r26
    1104:	11 24       	eor	r1, r1
    1106:	9f 57       	subi	r25, 0x7F	; 127
    1108:	50 40       	sbci	r21, 0x00	; 0
    110a:	9a f0       	brmi	.+38     	; 0x1132 <__mulsf3_pse+0x88>
    110c:	f1 f0       	breq	.+60     	; 0x114a <__mulsf3_pse+0xa0>
    110e:	88 23       	and	r24, r24
    1110:	4a f0       	brmi	.+18     	; 0x1124 <__mulsf3_pse+0x7a>
    1112:	ee 0f       	add	r30, r30
    1114:	ff 1f       	adc	r31, r31
    1116:	bb 1f       	adc	r27, r27
    1118:	66 1f       	adc	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	88 1f       	adc	r24, r24
    111e:	91 50       	subi	r25, 0x01	; 1
    1120:	50 40       	sbci	r21, 0x00	; 0
    1122:	a9 f7       	brne	.-22     	; 0x110e <__mulsf3_pse+0x64>
    1124:	9e 3f       	cpi	r25, 0xFE	; 254
    1126:	51 05       	cpc	r21, r1
    1128:	80 f0       	brcs	.+32     	; 0x114a <__mulsf3_pse+0xa0>
    112a:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>
    112e:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_szero>
    1132:	5f 3f       	cpi	r21, 0xFF	; 255
    1134:	e4 f3       	brlt	.-8      	; 0x112e <__mulsf3_pse+0x84>
    1136:	98 3e       	cpi	r25, 0xE8	; 232
    1138:	d4 f3       	brlt	.-12     	; 0x112e <__mulsf3_pse+0x84>
    113a:	86 95       	lsr	r24
    113c:	77 95       	ror	r23
    113e:	67 95       	ror	r22
    1140:	b7 95       	ror	r27
    1142:	f7 95       	ror	r31
    1144:	e7 95       	ror	r30
    1146:	9f 5f       	subi	r25, 0xFF	; 255
    1148:	c1 f7       	brne	.-16     	; 0x113a <__mulsf3_pse+0x90>
    114a:	fe 2b       	or	r31, r30
    114c:	88 0f       	add	r24, r24
    114e:	91 1d       	adc	r25, r1
    1150:	96 95       	lsr	r25
    1152:	87 95       	ror	r24
    1154:	97 f9       	bld	r25, 7
    1156:	08 95       	ret

00001158 <pow>:
    1158:	fa 01       	movw	r30, r20
    115a:	ee 0f       	add	r30, r30
    115c:	ff 1f       	adc	r31, r31
    115e:	30 96       	adiw	r30, 0x00	; 0
    1160:	21 05       	cpc	r18, r1
    1162:	31 05       	cpc	r19, r1
    1164:	a1 f1       	breq	.+104    	; 0x11ce <pow+0x76>
    1166:	61 15       	cp	r22, r1
    1168:	71 05       	cpc	r23, r1
    116a:	61 f4       	brne	.+24     	; 0x1184 <pow+0x2c>
    116c:	80 38       	cpi	r24, 0x80	; 128
    116e:	bf e3       	ldi	r27, 0x3F	; 63
    1170:	9b 07       	cpc	r25, r27
    1172:	49 f1       	breq	.+82     	; 0x11c6 <pow+0x6e>
    1174:	68 94       	set
    1176:	90 38       	cpi	r25, 0x80	; 128
    1178:	81 05       	cpc	r24, r1
    117a:	61 f0       	breq	.+24     	; 0x1194 <pow+0x3c>
    117c:	80 38       	cpi	r24, 0x80	; 128
    117e:	bf ef       	ldi	r27, 0xFF	; 255
    1180:	9b 07       	cpc	r25, r27
    1182:	41 f0       	breq	.+16     	; 0x1194 <pow+0x3c>
    1184:	99 23       	and	r25, r25
    1186:	4a f5       	brpl	.+82     	; 0x11da <pow+0x82>
    1188:	ff 3f       	cpi	r31, 0xFF	; 255
    118a:	e1 05       	cpc	r30, r1
    118c:	31 05       	cpc	r19, r1
    118e:	21 05       	cpc	r18, r1
    1190:	19 f1       	breq	.+70     	; 0x11d8 <pow+0x80>
    1192:	e8 94       	clt
    1194:	08 94       	sec
    1196:	e7 95       	ror	r30
    1198:	d9 01       	movw	r26, r18
    119a:	aa 23       	and	r26, r26
    119c:	29 f4       	brne	.+10     	; 0x11a8 <pow+0x50>
    119e:	ab 2f       	mov	r26, r27
    11a0:	be 2f       	mov	r27, r30
    11a2:	f8 5f       	subi	r31, 0xF8	; 248
    11a4:	d0 f3       	brcs	.-12     	; 0x119a <pow+0x42>
    11a6:	10 c0       	rjmp	.+32     	; 0x11c8 <pow+0x70>
    11a8:	ff 5f       	subi	r31, 0xFF	; 255
    11aa:	70 f4       	brcc	.+28     	; 0x11c8 <pow+0x70>
    11ac:	a6 95       	lsr	r26
    11ae:	e0 f7       	brcc	.-8      	; 0x11a8 <pow+0x50>
    11b0:	f7 39       	cpi	r31, 0x97	; 151
    11b2:	50 f0       	brcs	.+20     	; 0x11c8 <pow+0x70>
    11b4:	19 f0       	breq	.+6      	; 0x11bc <pow+0x64>
    11b6:	ff 3a       	cpi	r31, 0xAF	; 175
    11b8:	38 f4       	brcc	.+14     	; 0x11c8 <pow+0x70>
    11ba:	9f 77       	andi	r25, 0x7F	; 127
    11bc:	9f 93       	push	r25
    11be:	0d d0       	rcall	.+26     	; 0x11da <pow+0x82>
    11c0:	0f 90       	pop	r0
    11c2:	07 fc       	sbrc	r0, 7
    11c4:	90 58       	subi	r25, 0x80	; 128
    11c6:	08 95       	ret
    11c8:	46 f0       	brts	.+16     	; 0x11da <pow+0x82>
    11ca:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_nan>
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	80 e8       	ldi	r24, 0x80	; 128
    11d4:	9f e3       	ldi	r25, 0x3F	; 63
    11d6:	08 95       	ret
    11d8:	4f e7       	ldi	r20, 0x7F	; 127
    11da:	9f 77       	andi	r25, 0x7F	; 127
    11dc:	5f 93       	push	r21
    11de:	4f 93       	push	r20
    11e0:	3f 93       	push	r19
    11e2:	2f 93       	push	r18
    11e4:	0e 94 41 0a 	call	0x1482	; 0x1482 <log>
    11e8:	2f 91       	pop	r18
    11ea:	3f 91       	pop	r19
    11ec:	4f 91       	pop	r20
    11ee:	5f 91       	pop	r21
    11f0:	0e 94 3f 08 	call	0x107e	; 0x107e <__mulsf3>
    11f4:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <exp>

000011f8 <round>:
    11f8:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_splitA>
    11fc:	e8 f0       	brcs	.+58     	; 0x1238 <round+0x40>
    11fe:	9e 37       	cpi	r25, 0x7E	; 126
    1200:	e8 f0       	brcs	.+58     	; 0x123c <round+0x44>
    1202:	96 39       	cpi	r25, 0x96	; 150
    1204:	b8 f4       	brcc	.+46     	; 0x1234 <round+0x3c>
    1206:	9e 38       	cpi	r25, 0x8E	; 142
    1208:	48 f4       	brcc	.+18     	; 0x121c <round+0x24>
    120a:	67 2f       	mov	r22, r23
    120c:	78 2f       	mov	r23, r24
    120e:	88 27       	eor	r24, r24
    1210:	98 5f       	subi	r25, 0xF8	; 248
    1212:	f9 cf       	rjmp	.-14     	; 0x1206 <round+0xe>
    1214:	86 95       	lsr	r24
    1216:	77 95       	ror	r23
    1218:	67 95       	ror	r22
    121a:	93 95       	inc	r25
    121c:	95 39       	cpi	r25, 0x95	; 149
    121e:	d0 f3       	brcs	.-12     	; 0x1214 <round+0x1c>
    1220:	b6 2f       	mov	r27, r22
    1222:	b1 70       	andi	r27, 0x01	; 1
    1224:	6b 0f       	add	r22, r27
    1226:	71 1d       	adc	r23, r1
    1228:	81 1d       	adc	r24, r1
    122a:	20 f4       	brcc	.+8      	; 0x1234 <round+0x3c>
    122c:	87 95       	ror	r24
    122e:	77 95       	ror	r23
    1230:	67 95       	ror	r22
    1232:	93 95       	inc	r25
    1234:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_mintl>
    1238:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__fp_mpack>
    123c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_szero>
    1240:	19 f4       	brne	.+6      	; 0x1248 <round+0x50>
    1242:	16 f4       	brtc	.+4      	; 0x1248 <round+0x50>
    1244:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_nan>
    1248:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__fp_mpack>

0000124c <sqrt>:
    124c:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_splitA>
    1250:	b8 f3       	brcs	.-18     	; 0x1240 <round+0x48>
    1252:	99 23       	and	r25, r25
    1254:	c9 f3       	breq	.-14     	; 0x1248 <round+0x50>
    1256:	b6 f3       	brts	.-20     	; 0x1244 <round+0x4c>
    1258:	9f 57       	subi	r25, 0x7F	; 127
    125a:	55 0b       	sbc	r21, r21
    125c:	87 ff       	sbrs	r24, 7
    125e:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fp_norm2>
    1262:	00 24       	eor	r0, r0
    1264:	a0 e6       	ldi	r26, 0x60	; 96
    1266:	40 ea       	ldi	r20, 0xA0	; 160
    1268:	90 01       	movw	r18, r0
    126a:	80 58       	subi	r24, 0x80	; 128
    126c:	56 95       	lsr	r21
    126e:	97 95       	ror	r25
    1270:	28 f4       	brcc	.+10     	; 0x127c <sqrt+0x30>
    1272:	80 5c       	subi	r24, 0xC0	; 192
    1274:	66 0f       	add	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	88 1f       	adc	r24, r24
    127a:	20 f0       	brcs	.+8      	; 0x1284 <sqrt+0x38>
    127c:	26 17       	cp	r18, r22
    127e:	37 07       	cpc	r19, r23
    1280:	48 07       	cpc	r20, r24
    1282:	30 f4       	brcc	.+12     	; 0x1290 <sqrt+0x44>
    1284:	62 1b       	sub	r22, r18
    1286:	73 0b       	sbc	r23, r19
    1288:	84 0b       	sbc	r24, r20
    128a:	20 29       	or	r18, r0
    128c:	31 29       	or	r19, r1
    128e:	4a 2b       	or	r20, r26
    1290:	a6 95       	lsr	r26
    1292:	17 94       	ror	r1
    1294:	07 94       	ror	r0
    1296:	20 25       	eor	r18, r0
    1298:	31 25       	eor	r19, r1
    129a:	4a 27       	eor	r20, r26
    129c:	58 f7       	brcc	.-42     	; 0x1274 <sqrt+0x28>
    129e:	66 0f       	add	r22, r22
    12a0:	77 1f       	adc	r23, r23
    12a2:	88 1f       	adc	r24, r24
    12a4:	20 f0       	brcs	.+8      	; 0x12ae <sqrt+0x62>
    12a6:	26 17       	cp	r18, r22
    12a8:	37 07       	cpc	r19, r23
    12aa:	48 07       	cpc	r20, r24
    12ac:	30 f4       	brcc	.+12     	; 0x12ba <sqrt+0x6e>
    12ae:	62 0b       	sbc	r22, r18
    12b0:	73 0b       	sbc	r23, r19
    12b2:	84 0b       	sbc	r24, r20
    12b4:	20 0d       	add	r18, r0
    12b6:	31 1d       	adc	r19, r1
    12b8:	41 1d       	adc	r20, r1
    12ba:	a0 95       	com	r26
    12bc:	81 f7       	brne	.-32     	; 0x129e <sqrt+0x52>
    12be:	b9 01       	movw	r22, r18
    12c0:	84 2f       	mov	r24, r20
    12c2:	91 58       	subi	r25, 0x81	; 129
    12c4:	88 0f       	add	r24, r24
    12c6:	96 95       	lsr	r25
    12c8:	87 95       	ror	r24
    12ca:	08 95       	ret
    12cc:	29 f4       	brne	.+10     	; 0x12d8 <sqrt+0x8c>
    12ce:	16 f0       	brts	.+4      	; 0x12d4 <sqrt+0x88>
    12d0:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>
    12d4:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__fp_zero>
    12d8:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_nan>

000012dc <exp>:
    12dc:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_splitA>
    12e0:	a8 f3       	brcs	.-22     	; 0x12cc <sqrt+0x80>
    12e2:	96 38       	cpi	r25, 0x86	; 134
    12e4:	a0 f7       	brcc	.-24     	; 0x12ce <sqrt+0x82>
    12e6:	07 f8       	bld	r0, 7
    12e8:	0f 92       	push	r0
    12ea:	e8 94       	clt
    12ec:	2b e3       	ldi	r18, 0x3B	; 59
    12ee:	3a ea       	ldi	r19, 0xAA	; 170
    12f0:	48 eb       	ldi	r20, 0xB8	; 184
    12f2:	5f e7       	ldi	r21, 0x7F	; 127
    12f4:	0e 94 55 08 	call	0x10aa	; 0x10aa <__mulsf3_pse>
    12f8:	0f 92       	push	r0
    12fa:	0f 92       	push	r0
    12fc:	0f 92       	push	r0
    12fe:	4d b7       	in	r20, 0x3d	; 61
    1300:	5e b7       	in	r21, 0x3e	; 62
    1302:	0f 92       	push	r0
    1304:	0e 94 89 0a 	call	0x1512	; 0x1512 <modf>
    1308:	e8 e6       	ldi	r30, 0x68	; 104
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__fp_powser>
    1310:	4f 91       	pop	r20
    1312:	5f 91       	pop	r21
    1314:	ef 91       	pop	r30
    1316:	ff 91       	pop	r31
    1318:	e5 95       	asr	r30
    131a:	ee 1f       	adc	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	49 f0       	breq	.+18     	; 0x1332 <exp+0x56>
    1320:	fe 57       	subi	r31, 0x7E	; 126
    1322:	e0 68       	ori	r30, 0x80	; 128
    1324:	44 27       	eor	r20, r20
    1326:	ee 0f       	add	r30, r30
    1328:	44 1f       	adc	r20, r20
    132a:	fa 95       	dec	r31
    132c:	e1 f7       	brne	.-8      	; 0x1326 <exp+0x4a>
    132e:	41 95       	neg	r20
    1330:	55 0b       	sbc	r21, r21
    1332:	0e 94 03 0a 	call	0x1406	; 0x1406 <ldexp>
    1336:	0f 90       	pop	r0
    1338:	07 fe       	sbrs	r0, 7
    133a:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <inverse>
    133e:	08 95       	ret

00001340 <__fp_mintl>:
    1340:	88 23       	and	r24, r24
    1342:	71 f4       	brne	.+28     	; 0x1360 <__fp_mintl+0x20>
    1344:	77 23       	and	r23, r23
    1346:	21 f0       	breq	.+8      	; 0x1350 <__fp_mintl+0x10>
    1348:	98 50       	subi	r25, 0x08	; 8
    134a:	87 2b       	or	r24, r23
    134c:	76 2f       	mov	r23, r22
    134e:	07 c0       	rjmp	.+14     	; 0x135e <__fp_mintl+0x1e>
    1350:	66 23       	and	r22, r22
    1352:	11 f4       	brne	.+4      	; 0x1358 <__fp_mintl+0x18>
    1354:	99 27       	eor	r25, r25
    1356:	0d c0       	rjmp	.+26     	; 0x1372 <__fp_mintl+0x32>
    1358:	90 51       	subi	r25, 0x10	; 16
    135a:	86 2b       	or	r24, r22
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	2a f0       	brmi	.+10     	; 0x136c <__fp_mintl+0x2c>
    1362:	9a 95       	dec	r25
    1364:	66 0f       	add	r22, r22
    1366:	77 1f       	adc	r23, r23
    1368:	88 1f       	adc	r24, r24
    136a:	da f7       	brpl	.-10     	; 0x1362 <__fp_mintl+0x22>
    136c:	88 0f       	add	r24, r24
    136e:	96 95       	lsr	r25
    1370:	87 95       	ror	r24
    1372:	97 f9       	bld	r25, 7
    1374:	08 95       	ret

00001376 <__fp_mpack>:
    1376:	9f 3f       	cpi	r25, 0xFF	; 255
    1378:	31 f0       	breq	.+12     	; 0x1386 <__fp_mpack_finite+0xc>

0000137a <__fp_mpack_finite>:
    137a:	91 50       	subi	r25, 0x01	; 1
    137c:	20 f4       	brcc	.+8      	; 0x1386 <__fp_mpack_finite+0xc>
    137e:	87 95       	ror	r24
    1380:	77 95       	ror	r23
    1382:	67 95       	ror	r22
    1384:	b7 95       	ror	r27
    1386:	88 0f       	add	r24, r24
    1388:	91 1d       	adc	r25, r1
    138a:	96 95       	lsr	r25
    138c:	87 95       	ror	r24
    138e:	97 f9       	bld	r25, 7
    1390:	08 95       	ret

00001392 <__fp_norm2>:
    1392:	91 50       	subi	r25, 0x01	; 1
    1394:	50 40       	sbci	r21, 0x00	; 0
    1396:	66 0f       	add	r22, r22
    1398:	77 1f       	adc	r23, r23
    139a:	88 1f       	adc	r24, r24
    139c:	d2 f7       	brpl	.-12     	; 0x1392 <__fp_norm2>
    139e:	08 95       	ret

000013a0 <__fp_powser>:
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	1f 93       	push	r17
    13a6:	0f 93       	push	r16
    13a8:	ff 92       	push	r15
    13aa:	ef 92       	push	r14
    13ac:	df 92       	push	r13
    13ae:	7b 01       	movw	r14, r22
    13b0:	8c 01       	movw	r16, r24
    13b2:	68 94       	set
    13b4:	06 c0       	rjmp	.+12     	; 0x13c2 <__fp_powser+0x22>
    13b6:	da 2e       	mov	r13, r26
    13b8:	ef 01       	movw	r28, r30
    13ba:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3x>
    13be:	fe 01       	movw	r30, r28
    13c0:	e8 94       	clt
    13c2:	a5 91       	lpm	r26, Z+
    13c4:	25 91       	lpm	r18, Z+
    13c6:	35 91       	lpm	r19, Z+
    13c8:	45 91       	lpm	r20, Z+
    13ca:	55 91       	lpm	r21, Z+
    13cc:	a6 f3       	brts	.-24     	; 0x13b6 <__fp_powser+0x16>
    13ce:	ef 01       	movw	r28, r30
    13d0:	0e 94 86 06 	call	0xd0c	; 0xd0c <__addsf3x>
    13d4:	fe 01       	movw	r30, r28
    13d6:	97 01       	movw	r18, r14
    13d8:	a8 01       	movw	r20, r16
    13da:	da 94       	dec	r13
    13dc:	69 f7       	brne	.-38     	; 0x13b8 <__fp_powser+0x18>
    13de:	df 90       	pop	r13
    13e0:	ef 90       	pop	r14
    13e2:	ff 90       	pop	r15
    13e4:	0f 91       	pop	r16
    13e6:	1f 91       	pop	r17
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <inverse>:
    13ee:	9b 01       	movw	r18, r22
    13f0:	ac 01       	movw	r20, r24
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	80 e8       	ldi	r24, 0x80	; 128
    13f8:	9f e3       	ldi	r25, 0x3F	; 63
    13fa:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__divsf3>
    13fe:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>
    1402:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__fp_mpack>

00001406 <ldexp>:
    1406:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_splitA>
    140a:	d8 f3       	brcs	.-10     	; 0x1402 <inverse+0x14>
    140c:	99 23       	and	r25, r25
    140e:	c9 f3       	breq	.-14     	; 0x1402 <inverse+0x14>
    1410:	94 0f       	add	r25, r20
    1412:	51 1d       	adc	r21, r1
    1414:	a3 f3       	brvs	.-24     	; 0x13fe <inverse+0x10>
    1416:	91 50       	subi	r25, 0x01	; 1
    1418:	50 40       	sbci	r21, 0x00	; 0
    141a:	94 f0       	brlt	.+36     	; 0x1440 <ldexp+0x3a>
    141c:	59 f0       	breq	.+22     	; 0x1434 <ldexp+0x2e>
    141e:	88 23       	and	r24, r24
    1420:	32 f0       	brmi	.+12     	; 0x142e <ldexp+0x28>
    1422:	66 0f       	add	r22, r22
    1424:	77 1f       	adc	r23, r23
    1426:	88 1f       	adc	r24, r24
    1428:	91 50       	subi	r25, 0x01	; 1
    142a:	50 40       	sbci	r21, 0x00	; 0
    142c:	c1 f7       	brne	.-16     	; 0x141e <ldexp+0x18>
    142e:	9e 3f       	cpi	r25, 0xFE	; 254
    1430:	51 05       	cpc	r21, r1
    1432:	2c f7       	brge	.-54     	; 0x13fe <inverse+0x10>
    1434:	88 0f       	add	r24, r24
    1436:	91 1d       	adc	r25, r1
    1438:	96 95       	lsr	r25
    143a:	87 95       	ror	r24
    143c:	97 f9       	bld	r25, 7
    143e:	08 95       	ret
    1440:	5f 3f       	cpi	r21, 0xFF	; 255
    1442:	ac f0       	brlt	.+42     	; 0x146e <ldexp+0x68>
    1444:	98 3e       	cpi	r25, 0xE8	; 232
    1446:	9c f0       	brlt	.+38     	; 0x146e <ldexp+0x68>
    1448:	bb 27       	eor	r27, r27
    144a:	86 95       	lsr	r24
    144c:	77 95       	ror	r23
    144e:	67 95       	ror	r22
    1450:	b7 95       	ror	r27
    1452:	08 f4       	brcc	.+2      	; 0x1456 <ldexp+0x50>
    1454:	b1 60       	ori	r27, 0x01	; 1
    1456:	93 95       	inc	r25
    1458:	c1 f7       	brne	.-16     	; 0x144a <ldexp+0x44>
    145a:	bb 0f       	add	r27, r27
    145c:	58 f7       	brcc	.-42     	; 0x1434 <ldexp+0x2e>
    145e:	11 f4       	brne	.+4      	; 0x1464 <ldexp+0x5e>
    1460:	60 ff       	sbrs	r22, 0
    1462:	e8 cf       	rjmp	.-48     	; 0x1434 <ldexp+0x2e>
    1464:	6f 5f       	subi	r22, 0xFF	; 255
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	8f 4f       	sbci	r24, 0xFF	; 255
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	e3 cf       	rjmp	.-58     	; 0x1434 <ldexp+0x2e>
    146e:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__fp_szero>
    1472:	16 f0       	brts	.+4      	; 0x1478 <ldexp+0x72>
    1474:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__fp_mpack>
    1478:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_nan>
    147c:	68 94       	set
    147e:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_inf>

00001482 <log>:
    1482:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_splitA>
    1486:	a8 f3       	brcs	.-22     	; 0x1472 <ldexp+0x6c>
    1488:	99 23       	and	r25, r25
    148a:	c1 f3       	breq	.-16     	; 0x147c <ldexp+0x76>
    148c:	ae f3       	brts	.-22     	; 0x1478 <ldexp+0x72>
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	1f 93       	push	r17
    1494:	0f 93       	push	r16
    1496:	ff 92       	push	r15
    1498:	c9 2f       	mov	r28, r25
    149a:	dd 27       	eor	r29, r29
    149c:	88 23       	and	r24, r24
    149e:	2a f0       	brmi	.+10     	; 0x14aa <log+0x28>
    14a0:	21 97       	sbiw	r28, 0x01	; 1
    14a2:	66 0f       	add	r22, r22
    14a4:	77 1f       	adc	r23, r23
    14a6:	88 1f       	adc	r24, r24
    14a8:	da f7       	brpl	.-10     	; 0x14a0 <log+0x1e>
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e8       	ldi	r20, 0x80	; 128
    14b0:	5f eb       	ldi	r21, 0xBF	; 191
    14b2:	9f e3       	ldi	r25, 0x3F	; 63
    14b4:	88 39       	cpi	r24, 0x98	; 152
    14b6:	20 f0       	brcs	.+8      	; 0x14c0 <log+0x3e>
    14b8:	80 3e       	cpi	r24, 0xE0	; 224
    14ba:	38 f0       	brcs	.+14     	; 0x14ca <log+0x48>
    14bc:	21 96       	adiw	r28, 0x01	; 1
    14be:	8f 77       	andi	r24, 0x7F	; 127
    14c0:	0e 94 6f 06 	call	0xcde	; 0xcde <__addsf3>
    14c4:	e0 e9       	ldi	r30, 0x90	; 144
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <log+0x50>
    14ca:	0e 94 6f 06 	call	0xcde	; 0xcde <__addsf3>
    14ce:	ed eb       	ldi	r30, 0xBD	; 189
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__fp_powser>
    14d6:	8b 01       	movw	r16, r22
    14d8:	be 01       	movw	r22, r28
    14da:	ec 01       	movw	r28, r24
    14dc:	fb 2e       	mov	r15, r27
    14de:	6f 57       	subi	r22, 0x7F	; 127
    14e0:	71 09       	sbc	r23, r1
    14e2:	75 95       	asr	r23
    14e4:	77 1f       	adc	r23, r23
    14e6:	88 0b       	sbc	r24, r24
    14e8:	99 0b       	sbc	r25, r25
    14ea:	0e 94 8a 07 	call	0xf14	; 0xf14 <__floatsisf>
    14ee:	28 e1       	ldi	r18, 0x18	; 24
    14f0:	32 e7       	ldi	r19, 0x72	; 114
    14f2:	41 e3       	ldi	r20, 0x31	; 49
    14f4:	5f e3       	ldi	r21, 0x3F	; 63
    14f6:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3x>
    14fa:	af 2d       	mov	r26, r15
    14fc:	98 01       	movw	r18, r16
    14fe:	ae 01       	movw	r20, r28
    1500:	ff 90       	pop	r15
    1502:	0f 91       	pop	r16
    1504:	1f 91       	pop	r17
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	0e 94 86 06 	call	0xd0c	; 0xd0c <__addsf3x>
    150e:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__fp_round>

00001512 <modf>:
    1512:	fa 01       	movw	r30, r20
    1514:	dc 01       	movw	r26, r24
    1516:	aa 0f       	add	r26, r26
    1518:	bb 1f       	adc	r27, r27
    151a:	9b 01       	movw	r18, r22
    151c:	ac 01       	movw	r20, r24
    151e:	bf 57       	subi	r27, 0x7F	; 127
    1520:	28 f4       	brcc	.+10     	; 0x152c <modf+0x1a>
    1522:	22 27       	eor	r18, r18
    1524:	33 27       	eor	r19, r19
    1526:	44 27       	eor	r20, r20
    1528:	50 78       	andi	r21, 0x80	; 128
    152a:	20 c0       	rjmp	.+64     	; 0x156c <modf+0x5a>
    152c:	b7 51       	subi	r27, 0x17	; 23
    152e:	90 f4       	brcc	.+36     	; 0x1554 <modf+0x42>
    1530:	ab 2f       	mov	r26, r27
    1532:	00 24       	eor	r0, r0
    1534:	46 95       	lsr	r20
    1536:	37 95       	ror	r19
    1538:	27 95       	ror	r18
    153a:	01 1c       	adc	r0, r1
    153c:	a3 95       	inc	r26
    153e:	d2 f3       	brmi	.-12     	; 0x1534 <modf+0x22>
    1540:	00 20       	and	r0, r0
    1542:	71 f0       	breq	.+28     	; 0x1560 <modf+0x4e>
    1544:	22 0f       	add	r18, r18
    1546:	33 1f       	adc	r19, r19
    1548:	44 1f       	adc	r20, r20
    154a:	b3 95       	inc	r27
    154c:	da f3       	brmi	.-10     	; 0x1544 <modf+0x32>
    154e:	0e d0       	rcall	.+28     	; 0x156c <modf+0x5a>
    1550:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__subsf3>
    1554:	61 30       	cpi	r22, 0x01	; 1
    1556:	71 05       	cpc	r23, r1
    1558:	a0 e8       	ldi	r26, 0x80	; 128
    155a:	8a 07       	cpc	r24, r26
    155c:	b9 46       	sbci	r27, 0x69	; 105
    155e:	30 f4       	brcc	.+12     	; 0x156c <modf+0x5a>
    1560:	9b 01       	movw	r18, r22
    1562:	ac 01       	movw	r20, r24
    1564:	66 27       	eor	r22, r22
    1566:	77 27       	eor	r23, r23
    1568:	88 27       	eor	r24, r24
    156a:	90 78       	andi	r25, 0x80	; 128
    156c:	30 96       	adiw	r30, 0x00	; 0
    156e:	21 f0       	breq	.+8      	; 0x1578 <modf+0x66>
    1570:	20 83       	st	Z, r18
    1572:	31 83       	std	Z+1, r19	; 0x01
    1574:	42 83       	std	Z+2, r20	; 0x02
    1576:	53 83       	std	Z+3, r21	; 0x03
    1578:	08 95       	ret

0000157a <__udivmodsi4>:
    157a:	a1 e2       	ldi	r26, 0x21	; 33
    157c:	1a 2e       	mov	r1, r26
    157e:	aa 1b       	sub	r26, r26
    1580:	bb 1b       	sub	r27, r27
    1582:	fd 01       	movw	r30, r26
    1584:	0d c0       	rjmp	.+26     	; 0x15a0 <__udivmodsi4_ep>

00001586 <__udivmodsi4_loop>:
    1586:	aa 1f       	adc	r26, r26
    1588:	bb 1f       	adc	r27, r27
    158a:	ee 1f       	adc	r30, r30
    158c:	ff 1f       	adc	r31, r31
    158e:	a2 17       	cp	r26, r18
    1590:	b3 07       	cpc	r27, r19
    1592:	e4 07       	cpc	r30, r20
    1594:	f5 07       	cpc	r31, r21
    1596:	20 f0       	brcs	.+8      	; 0x15a0 <__udivmodsi4_ep>
    1598:	a2 1b       	sub	r26, r18
    159a:	b3 0b       	sbc	r27, r19
    159c:	e4 0b       	sbc	r30, r20
    159e:	f5 0b       	sbc	r31, r21

000015a0 <__udivmodsi4_ep>:
    15a0:	66 1f       	adc	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	88 1f       	adc	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	1a 94       	dec	r1
    15aa:	69 f7       	brne	.-38     	; 0x1586 <__udivmodsi4_loop>
    15ac:	60 95       	com	r22
    15ae:	70 95       	com	r23
    15b0:	80 95       	com	r24
    15b2:	90 95       	com	r25
    15b4:	9b 01       	movw	r18, r22
    15b6:	ac 01       	movw	r20, r24
    15b8:	bd 01       	movw	r22, r26
    15ba:	cf 01       	movw	r24, r30
    15bc:	08 95       	ret

000015be <__umulhisi3>:
    15be:	a2 9f       	mul	r26, r18
    15c0:	b0 01       	movw	r22, r0
    15c2:	b3 9f       	mul	r27, r19
    15c4:	c0 01       	movw	r24, r0
    15c6:	a3 9f       	mul	r26, r19
    15c8:	70 0d       	add	r23, r0
    15ca:	81 1d       	adc	r24, r1
    15cc:	11 24       	eor	r1, r1
    15ce:	91 1d       	adc	r25, r1
    15d0:	b2 9f       	mul	r27, r18
    15d2:	70 0d       	add	r23, r0
    15d4:	81 1d       	adc	r24, r1
    15d6:	11 24       	eor	r1, r1
    15d8:	91 1d       	adc	r25, r1
    15da:	08 95       	ret

000015dc <_exit>:
    15dc:	f8 94       	cli

000015de <__stop_program>:
    15de:	ff cf       	rjmp	.-2      	; 0x15de <__stop_program>
