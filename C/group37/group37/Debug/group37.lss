
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000014a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001430  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000014a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c16  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000408  00000000  00000000  000021f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ab  00000000  00000000  000025fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00002ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e1  00000000  00000000  00003128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe2  00000000  00000000  00003509  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000044eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 75 05 	jmp	0xaea	; 0xaea <__vector_1>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__vector_11>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <main+0x268>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
      f6:	21 e0       	ldi	r18, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a2 30       	cpi	r26, 0x02	; 2
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 3e 03 	call	0x67c	; 0x67c <main>
     10a:	0c 94 16 0a 	jmp	0x142c	; 0x142c <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <uart_init>:

 //Approximates a data value based on the two nearest data points
 float linearApproximate(float higher, float lower) {
	float approximation = (higher + lower) / 2;
	return approximation;
 }
     112:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     116:	87 e6       	ldi	r24, 0x67	; 103
     118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     11c:	e1 ec       	ldi	r30, 0xC1	; 193
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	88 60       	ori	r24, 0x08	; 8
     124:	80 83       	st	Z, r24
     126:	e2 ec       	ldi	r30, 0xC2	; 194
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	86 60       	ori	r24, 0x06	; 6
     12e:	80 83       	st	Z, r24
     130:	08 95       	ret

00000132 <uart_transmit>:
     132:	e0 ec       	ldi	r30, 0xC0	; 192
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	90 81       	ld	r25, Z
     138:	99 23       	and	r25, r25
     13a:	e9 f3       	breq	.-6      	; 0x136 <uart_transmit+0x4>
     13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     140:	08 95       	ret

00000142 <timer0_init>:
     142:	85 b5       	in	r24, 0x25	; 37
     144:	85 60       	ori	r24, 0x05	; 5
     146:	85 bd       	out	0x25, r24	; 37
     148:	16 bc       	out	0x26, r1	; 38
     14a:	08 95       	ret

0000014c <timer1_init>:
     14c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     150:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     154:	e1 e8       	ldi	r30, 0x81	; 129
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	88 60       	ori	r24, 0x08	; 8
     15c:	80 83       	st	Z, r24
     15e:	af e6       	ldi	r26, 0x6F	; 111
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	8c 91       	ld	r24, X
     164:	82 60       	ori	r24, 0x02	; 2
     166:	8c 93       	st	X, r24
     168:	80 81       	ld	r24, Z
     16a:	85 60       	ori	r24, 0x05	; 5
     16c:	80 83       	st	Z, r24
     16e:	08 95       	ret

00000170 <int_init>:
     170:	e9 e6       	ldi	r30, 0x69	; 105
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	83 60       	ori	r24, 0x03	; 3
     178:	80 83       	st	Z, r24
     17a:	e8 9a       	sbi	0x1d, 0	; 29
     17c:	08 95       	ret

0000017e <find_decimal>:
     17e:	cf 92       	push	r12
     180:	df 92       	push	r13
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	6b 01       	movw	r12, r22
     188:	7c 01       	movw	r14, r24
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 e2       	ldi	r20, 0x20	; 32
     190:	51 e4       	ldi	r21, 0x41	; 65
     192:	0e 94 03 06 	call	0xc06	; 0xc06 <__cmpsf2>
     196:	88 23       	and	r24, r24
     198:	b4 f0       	brlt	.+44     	; 0x1c6 <find_decimal+0x48>
     19a:	20 e0       	ldi	r18, 0x00	; 0
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	48 ec       	ldi	r20, 0xC8	; 200
     1a0:	52 e4       	ldi	r21, 0x42	; 66
     1a2:	c7 01       	movw	r24, r14
     1a4:	b6 01       	movw	r22, r12
     1a6:	0e 94 03 06 	call	0xc06	; 0xc06 <__cmpsf2>
     1aa:	08 2e       	mov	r0, r24
     1ac:	00 0c       	add	r0, r0
     1ae:	99 0b       	sbc	r25, r25
     1b0:	88 27       	eor	r24, r24
     1b2:	99 0f       	add	r25, r25
     1b4:	88 1f       	adc	r24, r24
     1b6:	99 27       	eor	r25, r25
     1b8:	22 e0       	ldi	r18, 0x02	; 2
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	a9 01       	movw	r20, r18
     1be:	48 1b       	sub	r20, r24
     1c0:	59 0b       	sbc	r21, r25
     1c2:	ca 01       	movw	r24, r20
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <find_decimal+0x4c>
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	08 95       	ret

000001d4 <wololo>:
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	41 30       	cpi	r20, 0x01	; 1
     1d8:	09 f4       	brne	.+2      	; 0x1dc <wololo+0x8>
     1da:	40 96       	adiw	r24, 0x10	; 16
     1dc:	61 11       	cpse	r22, r1
     1de:	03 c0       	rjmp	.+6      	; 0x1e6 <wololo+0x12>
     1e0:	80 5a       	subi	r24, 0xA0	; 160
     1e2:	9f 4f       	sbci	r25, 0xFF	; 255
     1e4:	08 95       	ret
     1e6:	61 30       	cpi	r22, 0x01	; 1
     1e8:	19 f4       	brne	.+6      	; 0x1f0 <wololo+0x1c>
     1ea:	80 5c       	subi	r24, 0xC0	; 192
     1ec:	9f 4f       	sbci	r25, 0xFF	; 255
     1ee:	08 95       	ret
     1f0:	62 30       	cpi	r22, 0x02	; 2
     1f2:	09 f4       	brne	.+2      	; 0x1f6 <wololo+0x22>
     1f4:	80 96       	adiw	r24, 0x20	; 32
     1f6:	08 95       	ret

000001f8 <calcVoltageRMS>:
     1f8:	8f 92       	push	r8
     1fa:	9f 92       	push	r9
     1fc:	af 92       	push	r10
     1fe:	bf 92       	push	r11
     200:	cf 92       	push	r12
     202:	df 92       	push	r13
     204:	ef 92       	push	r14
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	c4 57       	subi	r28, 0x74	; 116
     216:	d1 09       	sbc	r29, r1
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	cd bf       	out	0x3d, r28	; 61
     222:	fc 01       	movw	r30, r24
     224:	de 01       	movw	r26, r28
     226:	11 96       	adiw	r26, 0x01	; 1
     228:	88 96       	adiw	r24, 0x28	; 40
     22a:	41 91       	ld	r20, Z+
     22c:	51 91       	ld	r21, Z+
     22e:	61 91       	ld	r22, Z+
     230:	71 91       	ld	r23, Z+
     232:	4d 93       	st	X+, r20
     234:	5d 93       	st	X+, r21
     236:	6d 93       	st	X+, r22
     238:	7d 93       	st	X+, r23
     23a:	e8 17       	cp	r30, r24
     23c:	f9 07       	cpc	r31, r25
     23e:	a9 f7       	brne	.-22     	; 0x22a <calcVoltageRMS+0x32>
     240:	7e 01       	movw	r14, r28
     242:	29 e2       	ldi	r18, 0x29	; 41
     244:	e2 0e       	add	r14, r18
     246:	f1 1c       	adc	r15, r1
     248:	67 01       	movw	r12, r14
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	10 e0       	ldi	r17, 0x00	; 0
     24e:	00 fd       	sbrc	r16, 0
     250:	1b c0       	rjmp	.+54     	; 0x288 <calcVoltageRMS+0x90>
     252:	c8 01       	movw	r24, r16
     254:	11 23       	and	r17, r17
     256:	0c f4       	brge	.+2      	; 0x25a <calcVoltageRMS+0x62>
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	fc 01       	movw	r30, r24
     25c:	f5 95       	asr	r31
     25e:	e7 95       	ror	r30
     260:	ee 0f       	add	r30, r30
     262:	ff 1f       	adc	r31, r31
     264:	ee 0f       	add	r30, r30
     266:	ff 1f       	adc	r31, r31
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	8c 0f       	add	r24, r28
     26e:	9d 1f       	adc	r25, r29
     270:	e8 0f       	add	r30, r24
     272:	f9 1f       	adc	r31, r25
     274:	80 81       	ld	r24, Z
     276:	91 81       	ldd	r25, Z+1	; 0x01
     278:	a2 81       	ldd	r26, Z+2	; 0x02
     27a:	b3 81       	ldd	r27, Z+3	; 0x03
     27c:	f6 01       	movw	r30, r12
     27e:	80 83       	st	Z, r24
     280:	91 83       	std	Z+1, r25	; 0x01
     282:	a2 83       	std	Z+2, r26	; 0x02
     284:	b3 83       	std	Z+3, r27	; 0x03
     286:	31 c0       	rjmp	.+98     	; 0x2ea <calcVoltageRMS+0xf2>
     288:	98 01       	movw	r18, r16
     28a:	2f 5f       	subi	r18, 0xFF	; 255
     28c:	3f 4f       	sbci	r19, 0xFF	; 255
     28e:	c9 01       	movw	r24, r18
     290:	99 23       	and	r25, r25
     292:	0c f4       	brge	.+2      	; 0x296 <calcVoltageRMS+0x9e>
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	dc 01       	movw	r26, r24
     29c:	11 97       	sbiw	r26, 0x01	; 1
     29e:	aa 0f       	add	r26, r26
     2a0:	bb 1f       	adc	r27, r27
     2a2:	aa 0f       	add	r26, r26
     2a4:	bb 1f       	adc	r27, r27
     2a6:	21 e0       	ldi	r18, 0x01	; 1
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	2c 0f       	add	r18, r28
     2ac:	3d 1f       	adc	r19, r29
     2ae:	a2 0f       	add	r26, r18
     2b0:	b3 1f       	adc	r27, r19
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	88 0f       	add	r24, r24
     2b8:	99 1f       	adc	r25, r25
     2ba:	f9 01       	movw	r30, r18
     2bc:	e8 0f       	add	r30, r24
     2be:	f9 1f       	adc	r31, r25
     2c0:	20 81       	ld	r18, Z
     2c2:	31 81       	ldd	r19, Z+1	; 0x01
     2c4:	42 81       	ldd	r20, Z+2	; 0x02
     2c6:	53 81       	ldd	r21, Z+3	; 0x03
     2c8:	6d 91       	ld	r22, X+
     2ca:	7d 91       	ld	r23, X+
     2cc:	8d 91       	ld	r24, X+
     2ce:	9c 91       	ld	r25, X
     2d0:	0e 94 97 05 	call	0xb2e	; 0xb2e <__addsf3>
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	5f e3       	ldi	r21, 0x3F	; 63
     2dc:	0e 94 67 07 	call	0xece	; 0xece <__mulsf3>
     2e0:	f6 01       	movw	r30, r12
     2e2:	60 83       	st	Z, r22
     2e4:	71 83       	std	Z+1, r23	; 0x01
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	93 83       	std	Z+3, r25	; 0x03
     2ea:	0f 5f       	subi	r16, 0xFF	; 255
     2ec:	1f 4f       	sbci	r17, 0xFF	; 255
     2ee:	f4 e0       	ldi	r31, 0x04	; 4
     2f0:	cf 0e       	add	r12, r31
     2f2:	d1 1c       	adc	r13, r1
     2f4:	03 31       	cpi	r16, 0x13	; 19
     2f6:	11 05       	cpc	r17, r1
     2f8:	09 f0       	breq	.+2      	; 0x2fc <calcVoltageRMS+0x104>
     2fa:	a9 cf       	rjmp	.-174    	; 0x24e <calcVoltageRMS+0x56>
     2fc:	8e 01       	movw	r16, r28
     2fe:	0b 58       	subi	r16, 0x8B	; 139
     300:	1f 4f       	sbci	r17, 0xFF	; 255
     302:	81 2c       	mov	r8, r1
     304:	91 2c       	mov	r9, r1
     306:	54 01       	movw	r10, r8
     308:	f7 01       	movw	r30, r14
     30a:	61 91       	ld	r22, Z+
     30c:	71 91       	ld	r23, Z+
     30e:	81 91       	ld	r24, Z+
     310:	91 91       	ld	r25, Z+
     312:	7f 01       	movw	r14, r30
     314:	9b 01       	movw	r18, r22
     316:	ac 01       	movw	r20, r24
     318:	0e 94 67 07 	call	0xece	; 0xece <__mulsf3>
     31c:	9b 01       	movw	r18, r22
     31e:	ac 01       	movw	r20, r24
     320:	c5 01       	movw	r24, r10
     322:	b4 01       	movw	r22, r8
     324:	0e 94 97 05 	call	0xb2e	; 0xb2e <__addsf3>
     328:	4b 01       	movw	r8, r22
     32a:	5c 01       	movw	r10, r24
     32c:	e0 16       	cp	r14, r16
     32e:	f1 06       	cpc	r15, r17
     330:	59 f7       	brne	.-42     	; 0x308 <calcVoltageRMS+0x110>
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	48 e9       	ldi	r20, 0x98	; 152
     338:	51 e4       	ldi	r21, 0x41	; 65
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	0e 94 08 06 	call	0xc10	; 0xc10 <__divsf3>
     342:	0e 94 4e 08 	call	0x109c	; 0x109c <sqrt>
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	48 e5       	ldi	r20, 0x58	; 88
     34c:	51 e4       	ldi	r21, 0x41	; 65
     34e:	0e 94 67 07 	call	0xece	; 0xece <__mulsf3>
     352:	cc 58       	subi	r28, 0x8C	; 140
     354:	df 4f       	sbci	r29, 0xFF	; 255
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	cf 90       	pop	r12
     370:	bf 90       	pop	r11
     372:	af 90       	pop	r10
     374:	9f 90       	pop	r9
     376:	8f 90       	pop	r8
     378:	08 95       	ret

0000037a <calcCurrentRMS>:
     37a:	8f 92       	push	r8
     37c:	9f 92       	push	r9
     37e:	af 92       	push	r10
     380:	bf 92       	push	r11
     382:	cf 92       	push	r12
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
     396:	c4 57       	subi	r28, 0x74	; 116
     398:	d1 09       	sbc	r29, r1
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	fc 01       	movw	r30, r24
     3a6:	de 01       	movw	r26, r28
     3a8:	11 96       	adiw	r26, 0x01	; 1
     3aa:	88 96       	adiw	r24, 0x28	; 40
     3ac:	41 91       	ld	r20, Z+
     3ae:	51 91       	ld	r21, Z+
     3b0:	61 91       	ld	r22, Z+
     3b2:	71 91       	ld	r23, Z+
     3b4:	4d 93       	st	X+, r20
     3b6:	5d 93       	st	X+, r21
     3b8:	6d 93       	st	X+, r22
     3ba:	7d 93       	st	X+, r23
     3bc:	e8 17       	cp	r30, r24
     3be:	f9 07       	cpc	r31, r25
     3c0:	a9 f7       	brne	.-22     	; 0x3ac <calcCurrentRMS+0x32>
     3c2:	7e 01       	movw	r14, r28
     3c4:	29 e2       	ldi	r18, 0x29	; 41
     3c6:	e2 0e       	add	r14, r18
     3c8:	f1 1c       	adc	r15, r1
     3ca:	67 01       	movw	r12, r14
     3cc:	00 e0       	ldi	r16, 0x00	; 0
     3ce:	10 e0       	ldi	r17, 0x00	; 0
     3d0:	00 fd       	sbrc	r16, 0
     3d2:	50 c0       	rjmp	.+160    	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
     3d4:	01 15       	cp	r16, r1
     3d6:	11 05       	cpc	r17, r1
     3d8:	19 f0       	breq	.+6      	; 0x3e0 <calcCurrentRMS+0x66>
     3da:	02 31       	cpi	r16, 0x12	; 18
     3dc:	11 05       	cpc	r17, r1
     3de:	d9 f4       	brne	.+54     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
     3e0:	c8 01       	movw	r24, r16
     3e2:	11 23       	and	r17, r17
     3e4:	0c f4       	brge	.+2      	; 0x3e8 <calcCurrentRMS+0x6e>
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	fc 01       	movw	r30, r24
     3ea:	f5 95       	asr	r31
     3ec:	e7 95       	ror	r30
     3ee:	ee 0f       	add	r30, r30
     3f0:	ff 1f       	adc	r31, r31
     3f2:	ee 0f       	add	r30, r30
     3f4:	ff 1f       	adc	r31, r31
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	8c 0f       	add	r24, r28
     3fc:	9d 1f       	adc	r25, r29
     3fe:	e8 0f       	add	r30, r24
     400:	f9 1f       	adc	r31, r25
     402:	80 81       	ld	r24, Z
     404:	91 81       	ldd	r25, Z+1	; 0x01
     406:	a2 81       	ldd	r26, Z+2	; 0x02
     408:	b3 81       	ldd	r27, Z+3	; 0x03
     40a:	f6 01       	movw	r30, r12
     40c:	80 83       	st	Z, r24
     40e:	91 83       	std	Z+1, r25	; 0x01
     410:	a2 83       	std	Z+2, r26	; 0x02
     412:	b3 83       	std	Z+3, r27	; 0x03
     414:	4c c0       	rjmp	.+152    	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
     416:	c8 01       	movw	r24, r16
     418:	11 23       	and	r17, r17
     41a:	0c f4       	brge	.+2      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	95 95       	asr	r25
     420:	87 95       	ror	r24
     422:	dc 01       	movw	r26, r24
     424:	11 97       	sbiw	r26, 0x01	; 1
     426:	aa 0f       	add	r26, r26
     428:	bb 1f       	adc	r27, r27
     42a:	aa 0f       	add	r26, r26
     42c:	bb 1f       	adc	r27, r27
     42e:	21 e0       	ldi	r18, 0x01	; 1
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	2c 0f       	add	r18, r28
     434:	3d 1f       	adc	r19, r29
     436:	a2 0f       	add	r26, r18
     438:	b3 1f       	adc	r27, r19
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	f9 01       	movw	r30, r18
     444:	e8 0f       	add	r30, r24
     446:	f9 1f       	adc	r31, r25
     448:	20 81       	ld	r18, Z
     44a:	31 81       	ldd	r19, Z+1	; 0x01
     44c:	42 81       	ldd	r20, Z+2	; 0x02
     44e:	53 81       	ldd	r21, Z+3	; 0x03
     450:	6d 91       	ld	r22, X+
     452:	7d 91       	ld	r23, X+
     454:	8d 91       	ld	r24, X+
     456:	9c 91       	ld	r25, X
     458:	0e 94 97 05 	call	0xb2e	; 0xb2e <__addsf3>
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	5f e3       	ldi	r21, 0x3F	; 63
     464:	0e 94 67 07 	call	0xece	; 0xece <__mulsf3>
     468:	f6 01       	movw	r30, r12
     46a:	60 83       	st	Z, r22
     46c:	71 83       	std	Z+1, r23	; 0x01
     46e:	82 83       	std	Z+2, r24	; 0x02
     470:	93 83       	std	Z+3, r25	; 0x03
     472:	1d c0       	rjmp	.+58     	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
     474:	98 01       	movw	r18, r16
     476:	21 50       	subi	r18, 0x01	; 1
     478:	31 09       	sbc	r19, r1
     47a:	c9 01       	movw	r24, r18
     47c:	99 23       	and	r25, r25
     47e:	0c f4       	brge	.+2      	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	fc 01       	movw	r30, r24
     484:	f5 95       	asr	r31
     486:	e7 95       	ror	r30
     488:	ee 0f       	add	r30, r30
     48a:	ff 1f       	adc	r31, r31
     48c:	ee 0f       	add	r30, r30
     48e:	ff 1f       	adc	r31, r31
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	2c 0f       	add	r18, r28
     496:	3d 1f       	adc	r19, r29
     498:	e2 0f       	add	r30, r18
     49a:	f3 1f       	adc	r31, r19
     49c:	80 81       	ld	r24, Z
     49e:	91 81       	ldd	r25, Z+1	; 0x01
     4a0:	a2 81       	ldd	r26, Z+2	; 0x02
     4a2:	b3 81       	ldd	r27, Z+3	; 0x03
     4a4:	f6 01       	movw	r30, r12
     4a6:	80 83       	st	Z, r24
     4a8:	91 83       	std	Z+1, r25	; 0x01
     4aa:	a2 83       	std	Z+2, r26	; 0x02
     4ac:	b3 83       	std	Z+3, r27	; 0x03
     4ae:	0f 5f       	subi	r16, 0xFF	; 255
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	f4 e0       	ldi	r31, 0x04	; 4
     4b4:	cf 0e       	add	r12, r31
     4b6:	d1 1c       	adc	r13, r1
     4b8:	03 31       	cpi	r16, 0x13	; 19
     4ba:	11 05       	cpc	r17, r1
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <__FUSE_REGION_LENGTH__+0xc0>
     4be:	88 cf       	rjmp	.-240    	; 0x3d0 <calcCurrentRMS+0x56>
     4c0:	8e 01       	movw	r16, r28
     4c2:	0b 58       	subi	r16, 0x8B	; 139
     4c4:	1f 4f       	sbci	r17, 0xFF	; 255
     4c6:	81 2c       	mov	r8, r1
     4c8:	91 2c       	mov	r9, r1
     4ca:	54 01       	movw	r10, r8
     4cc:	f7 01       	movw	r30, r14
     4ce:	61 91       	ld	r22, Z+
     4d0:	71 91       	ld	r23, Z+
     4d2:	81 91       	ld	r24, Z+
     4d4:	91 91       	ld	r25, Z+
     4d6:	7f 01       	movw	r14, r30
     4d8:	9b 01       	movw	r18, r22
     4da:	ac 01       	movw	r20, r24
     4dc:	0e 94 67 07 	call	0xece	; 0xece <__mulsf3>
     4e0:	9b 01       	movw	r18, r22
     4e2:	ac 01       	movw	r20, r24
     4e4:	c5 01       	movw	r24, r10
     4e6:	b4 01       	movw	r22, r8
     4e8:	0e 94 97 05 	call	0xb2e	; 0xb2e <__addsf3>
     4ec:	4b 01       	movw	r8, r22
     4ee:	5c 01       	movw	r10, r24
     4f0:	e0 16       	cp	r14, r16
     4f2:	f1 06       	cpc	r15, r17
     4f4:	59 f7       	brne	.-42     	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	48 e9       	ldi	r20, 0x98	; 152
     4fc:	51 e4       	ldi	r21, 0x41	; 65
     4fe:	c5 01       	movw	r24, r10
     500:	b4 01       	movw	r22, r8
     502:	0e 94 08 06 	call	0xc10	; 0xc10 <__divsf3>
     506:	0e 94 4e 08 	call	0x109c	; 0x109c <sqrt>
     50a:	cc 58       	subi	r28, 0x8C	; 140
     50c:	df 4f       	sbci	r29, 0xFF	; 255
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	f8 94       	cli
     512:	de bf       	out	0x3e, r29	; 62
     514:	0f be       	out	0x3f, r0	; 63
     516:	cd bf       	out	0x3d, r28	; 61
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	ff 90       	pop	r15
     522:	ef 90       	pop	r14
     524:	df 90       	pop	r13
     526:	cf 90       	pop	r12
     528:	bf 90       	pop	r11
     52a:	af 90       	pop	r10
     52c:	9f 90       	pop	r9
     52e:	8f 90       	pop	r8
     530:	08 95       	ret

00000532 <adc_init>:

 //Initialises the ADC
 void adc_init() {
	DDRC = 0x00; //Set port c as input
     532:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADEN); //Set Prescaler to 128 and enable the ADC 
     534:	ea e7       	ldi	r30, 0x7A	; 122
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	87 68       	ori	r24, 0x87	; 135
     53c:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //Set reference voltage to VCC
     53e:	ec e7       	ldi	r30, 0x7C	; 124
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	80 81       	ld	r24, Z
     544:	80 64       	ori	r24, 0x40	; 64
     546:	80 83       	st	Z, r24
     548:	08 95       	ret

0000054a <adc_read_voltage>:
 }

 //Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_voltage() {
	ADMUX &= ~(1<<MUX0);
     54a:	ec e7       	ldi	r30, 0x7C	; 124
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	8e 7f       	andi	r24, 0xFE	; 254
     552:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX1);
     554:	80 81       	ld	r24, Z
     556:	8d 7f       	andi	r24, 0xFD	; 253
     558:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX2);
     55a:	80 81       	ld	r24, Z
     55c:	8b 7f       	andi	r24, 0xFB	; 251
     55e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start conversion
     560:	ea e7       	ldi	r30, 0x7A	; 122
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	80 64       	ori	r24, 0x40	; 64
     568:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
     56a:	80 81       	ld	r24, Z
     56c:	84 ff       	sbrs	r24, 4
     56e:	fd cf       	rjmp	.-6      	; 0x56a <adc_read_voltage+0x20>
	unsigned int adcRead = ADC;
     570:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     574:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     578:	08 95       	ret

0000057a <adc_read_current>:

  //Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_current(unsigned int highLow) {
	if (highLow == 1) { //High gain current
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	61 f4       	brne	.+24     	; 0x596 <adc_read_current+0x1c>
		ADMUX |= (1<<MUX0);
     57e:	ec e7       	ldi	r30, 0x7C	; 124
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	81 60       	ori	r24, 0x01	; 1
     586:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX1);
     588:	80 81       	ld	r24, Z
     58a:	82 60       	ori	r24, 0x02	; 2
     58c:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX2);
     58e:	80 81       	ld	r24, Z
     590:	8b 7f       	andi	r24, 0xFB	; 251
     592:	80 83       	st	Z, r24
     594:	0b c0       	rjmp	.+22     	; 0x5ac <adc_read_current+0x32>
	} else { //Low gain current
		ADMUX |= (1<<MUX0);
     596:	ec e7       	ldi	r30, 0x7C	; 124
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	80 81       	ld	r24, Z
     59c:	81 60       	ori	r24, 0x01	; 1
     59e:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX1);
     5a0:	80 81       	ld	r24, Z
     5a2:	8d 7f       	andi	r24, 0xFD	; 253
     5a4:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX2);
     5a6:	80 81       	ld	r24, Z
     5a8:	84 60       	ori	r24, 0x04	; 4
     5aa:	80 83       	st	Z, r24
	}
	ADCSRA |= (1<<ADSC); //Start conversion
     5ac:	ea e7       	ldi	r30, 0x7A	; 122
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	80 64       	ori	r24, 0x40	; 64
     5b4:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
     5b6:	80 81       	ld	r24, Z
     5b8:	84 ff       	sbrs	r24, 4
     5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <adc_read_current+0x3c>
	unsigned int adcRead = ADC;
     5bc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     5c0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     5c4:	08 95       	ret

000005c6 <adc_calculation>:

 //Converts an ADC integer into the actual voltage measured by the ADC pin
 float adc_calculation(unsigned int adcValue) {
	float calculatedValue;
	calculatedValue = ((float)adcValue / 1023) * 5; //Digital value to analogue voltage measured
     5c6:	bc 01       	movw	r22, r24
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 b0 06 	call	0xd60	; 0xd60 <__floatunsisf>
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 ec       	ldi	r19, 0xC0	; 192
     5d4:	4f e7       	ldi	r20, 0x7F	; 127
     5d6:	54 e4       	ldi	r21, 0x44	; 68
     5d8:	0e 94 08 06 	call	0xc10	; 0xc10 <__divsf3>
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	40 ea       	ldi	r20, 0xA0	; 160
     5e2:	50 e4       	ldi	r21, 0x40	; 64
     5e4:	0e 94 67 07 	call	0xece	; 0xece <__mulsf3>
	return calculatedValue; 
 }
     5e8:	08 95       	ret

000005ea <voltage_real>:
 This function figures out what the actual voltage being measured was based on reversing the process 
 that the signal went through. Option 0 for voltage, 1 for regular current, 2 for high gain current
 */
 float voltage_real(float adcValue, unsigned int option) {
	float output;
	if (option == 0) {
     5ea:	41 15       	cp	r20, r1
     5ec:	51 05       	cpc	r21, r1
     5ee:	a9 f4       	brne	.+42     	; 0x61a <voltage_real+0x30>
		output = -(adcValue - 1.7) + 0.27; //Remove offset voltage and then invert
     5f0:	2a e9       	ldi	r18, 0x9A	; 154
     5f2:	39 e9       	ldi	r19, 0x99	; 153
     5f4:	49 ed       	ldi	r20, 0xD9	; 217
     5f6:	5f e3       	ldi	r21, 0x3F	; 63
     5f8:	0e 94 96 05 	call	0xb2c	; 0xb2c <__subsf3>
     5fc:	9b 01       	movw	r18, r22
     5fe:	ac 01       	movw	r20, r24
     600:	61 e7       	ldi	r22, 0x71	; 113
     602:	7d e3       	ldi	r23, 0x3D	; 61
     604:	8a e8       	ldi	r24, 0x8A	; 138
     606:	9e e3       	ldi	r25, 0x3E	; 62
     608:	0e 94 96 05 	call	0xb2c	; 0xb2c <__subsf3>
		output = output * 0.98; //Revert to value from before the op amp
     60c:	28 e4       	ldi	r18, 0x48	; 72
     60e:	31 ee       	ldi	r19, 0xE1	; 225
     610:	4a e7       	ldi	r20, 0x7A	; 122
     612:	5f e3       	ldi	r21, 0x3F	; 63
     614:	0e 94 67 07 	call	0xece	; 0xece <__mulsf3>
     618:	08 95       	ret
	} else if (option == 1) {
     61a:	41 30       	cpi	r20, 0x01	; 1
     61c:	51 05       	cpc	r21, r1
     61e:	d1 f4       	brne	.+52     	; 0x654 <voltage_real+0x6a>
		output = -(adcValue - 1.64);
     620:	25 e8       	ldi	r18, 0x85	; 133
     622:	3b ee       	ldi	r19, 0xEB	; 235
     624:	41 ed       	ldi	r20, 0xD1	; 209
     626:	5f e3       	ldi	r21, 0x3F	; 63
     628:	0e 94 96 05 	call	0xb2c	; 0xb2c <__subsf3>
     62c:	90 58       	subi	r25, 0x80	; 128
		output = output / 5;
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	40 ea       	ldi	r20, 0xA0	; 160
     634:	50 e4       	ldi	r21, 0x40	; 64
     636:	0e 94 08 06 	call	0xc10	; 0xc10 <__divsf3>
		output = output / 0.30; //Divide by R to get I
     63a:	2a e9       	ldi	r18, 0x9A	; 154
     63c:	39 e9       	ldi	r19, 0x99	; 153
     63e:	49 e9       	ldi	r20, 0x99	; 153
     640:	5e e3       	ldi	r21, 0x3E	; 62
     642:	0e 94 08 06 	call	0xc10	; 0xc10 <__divsf3>
		output = output * 1.08;
     646:	21 e7       	ldi	r18, 0x71	; 113
     648:	3d e3       	ldi	r19, 0x3D	; 61
     64a:	4a e8       	ldi	r20, 0x8A	; 138
     64c:	5f e3       	ldi	r21, 0x3F	; 63
     64e:	0e 94 67 07 	call	0xece	; 0xece <__mulsf3>
     652:	08 95       	ret
	} else {
		output = -(adcValue - 1.64);
     654:	25 e8       	ldi	r18, 0x85	; 133
     656:	3b ee       	ldi	r19, 0xEB	; 235
     658:	41 ed       	ldi	r20, 0xD1	; 209
     65a:	5f e3       	ldi	r21, 0x3F	; 63
     65c:	0e 94 96 05 	call	0xb2c	; 0xb2c <__subsf3>
     660:	90 58       	subi	r25, 0x80	; 128
		output = output / 12.4;
     662:	26 e6       	ldi	r18, 0x66	; 102
     664:	36 e6       	ldi	r19, 0x66	; 102
     666:	46 e4       	ldi	r20, 0x46	; 70
     668:	51 e4       	ldi	r21, 0x41	; 65
     66a:	0e 94 08 06 	call	0xc10	; 0xc10 <__divsf3>
		output = output / 0.30; //Divide by R to get I
     66e:	2a e9       	ldi	r18, 0x9A	; 154
     670:	39 e9       	ldi	r19, 0x99	; 153
     672:	49 e9       	ldi	r20, 0x99	; 153
     674:	5e e3       	ldi	r21, 0x3E	; 62
     676:	0e 94 08 06 	call	0xc10	; 0xc10 <__divsf3>
	}
	return output;
     67a:	08 95       	ret

0000067c <main>:
#include <avr/interrupt.h>

volatile uint8_t counter = 0; //Counter for the number of times the TCNT0 compares correctly
volatile uint8_t flag = 0;

int main(void) {
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	c4 56       	subi	r28, 0x64	; 100
     686:	d1 09       	sbc	r29, r1
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
	sei();
     692:	78 94       	sei
	adc_init();
     694:	0e 94 99 02 	call	0x532	; 0x532 <adc_init>
	uart_init();	
     698:	0e 94 89 00 	call	0x112	; 0x112 <uart_init>
	timer0_init();
     69c:	0e 94 a1 00 	call	0x142	; 0x142 <timer0_init>
	timer1_init();
     6a0:	0e 94 a6 00 	call	0x14c	; 0x14c <timer1_init>
	int_init();
     6a4:	0e 94 b8 00 	call	0x170	; 0x170 <int_init>
	DDRB |= (1<<5);
     6a8:	25 9a       	sbi	0x04, 5	; 4
	uint32_t displayCount = 0;
	uint8_t currentFlag = 1;
     6aa:	99 24       	eor	r9, r9
     6ac:	93 94       	inc	r9
	uart_init();	
	timer0_init();
	timer1_init();
	int_init();
	DDRB |= (1<<5);
	uint32_t displayCount = 0;
     6ae:	6e 96       	adiw	r28, 0x1e	; 30
     6b0:	1c ae       	std	Y+60, r1	; 0x3c
     6b2:	1d ae       	std	Y+61, r1	; 0x3d
     6b4:	1e ae       	std	Y+62, r1	; 0x3e
     6b6:	1f ae       	std	Y+63, r1	; 0x3f
     6b8:	6e 97       	sbiw	r28, 0x1e	; 30
     6ba:	a1 2c       	mov	r10, r1
     6bc:	b1 2c       	mov	r11, r1
				voltageArray[i/2] = voltage;
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); // Regular Current
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
				currentArray[(i-1)/2] = current;
     6be:	9e 01       	movw	r18, r28
     6c0:	2f 5f       	subi	r18, 0xFF	; 255
     6c2:	3f 4f       	sbci	r19, 0xFF	; 255
     6c4:	19 01       	movw	r2, r18
     6c6:	6f 96       	adiw	r28, 0x1f	; 31
     6c8:	2f af       	std	Y+63, r18	; 0x3f
     6ca:	6f 97       	sbiw	r28, 0x1f	; 31
     6cc:	a0 96       	adiw	r28, 0x20	; 32
     6ce:	3f ae       	std	Y+63, r3	; 0x3f
     6d0:	a0 97       	sbiw	r28, 0x20	; 32
     6d2:	81 e5       	ldi	r24, 0x51	; 81
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	8c 0f       	add	r24, r28
     6d8:	9d 1f       	adc	r25, r29
     6da:	03 96       	adiw	r24, 0x03	; 3
     6dc:	a4 96       	adiw	r28, 0x24	; 36
     6de:	9f af       	std	Y+63, r25	; 0x3f
     6e0:	8e af       	std	Y+62, r24	; 0x3e
     6e2:	a4 97       	sbiw	r28, 0x24	; 36
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	a5 96       	adiw	r28, 0x25	; 37
     6e8:	9f af       	std	Y+63, r25	; 0x3f
     6ea:	a5 97       	sbiw	r28, 0x25	; 37
			//dataFloat = calcPower(&voltageArray, &currentArray);
			dataFloat = calcVoltageRMS(&voltageArray); 
			if (dataFloat >= maxPower*0.75) { OCR1A = 0x001; }
			else if ((dataFloat < maxPower*0.75 ) && (dataFloat >= maxPower*0.5)) { OCR1A = 0xA2C; }
			else if ((dataFloat < maxPower*0.5 ) && (dataFloat >= maxPower*0.25)) { OCR1A = 0xF42; }
			else { OCR1A = 0x1E84; }
     6ec:	66 96       	adiw	r28, 0x16	; 22
     6ee:	9f ae       	std	Y+63, r9	; 0x3f
     6f0:	66 97       	sbiw	r28, 0x16	; 22
		uint8_t hasDecimal = 0;
		uint8_t dataArray[4];
		uint8_t index = 0;
		float dataFloat = 0;
		
		flag = 0;
     6f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		while (flag == 0); //Wait for Zero Crossing Detector to signal a rising zero crossing
     6f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     6fa:	88 23       	and	r24, r24
     6fc:	e1 f3       	breq	.-8      	; 0x6f6 <main+0x7a>
     6fe:	0a 2d       	mov	r16, r10
     700:	1b 2d       	mov	r17, r11
				unsigned int adcValue = adc_read_voltage();
				float adcVoltage = adc_calculation(adcValue);
				float voltage = voltage_real(adcVoltage, 0);
				voltageArray[i/2] = voltage;
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); // Regular Current
     702:	66 96       	adiw	r28, 0x16	; 22
     704:	af ad       	ldd	r26, Y+63	; 0x3f
     706:	66 97       	sbiw	r28, 0x16	; 22
     708:	ea 2e       	mov	r14, r26
     70a:	f1 2c       	mov	r15, r1
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
     70c:	67 01       	movw	r12, r14
     70e:	bf ef       	ldi	r27, 0xFF	; 255
     710:	cb 1a       	sub	r12, r27
     712:	db 0a       	sbc	r13, r27
		
		//Reading from the ADC, calculating and converting
		float voltageArray[10];
		float currentArray[10];
		for (int i=0;i<19;i++) {
			if (i%2 == 0) {
     714:	00 fd       	sbrc	r16, 0
     716:	1b c0       	rjmp	.+54     	; 0x74e <main+0xd2>
				unsigned int adcValue = adc_read_voltage();
     718:	0e 94 a5 02 	call	0x54a	; 0x54a <adc_read_voltage>
				float adcVoltage = adc_calculation(adcValue);
     71c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <adc_calculation>
				float voltage = voltage_real(adcVoltage, 0);
     720:	4a 2d       	mov	r20, r10
     722:	5b 2d       	mov	r21, r11
     724:	0e 94 f5 02 	call	0x5ea	; 0x5ea <voltage_real>
				voltageArray[i/2] = voltage;
     728:	98 01       	movw	r18, r16
     72a:	11 23       	and	r17, r17
     72c:	14 f4       	brge	.+4      	; 0x732 <main+0xb6>
     72e:	2f 5f       	subi	r18, 0xFF	; 255
     730:	3f 4f       	sbci	r19, 0xFF	; 255
     732:	f9 01       	movw	r30, r18
     734:	f5 95       	asr	r31
     736:	e7 95       	ror	r30
     738:	ee 0f       	add	r30, r30
     73a:	ff 1f       	adc	r31, r31
     73c:	ee 0f       	add	r30, r30
     73e:	ff 1f       	adc	r31, r31
     740:	e2 0d       	add	r30, r2
     742:	f3 1d       	adc	r31, r3
     744:	60 a7       	std	Z+40, r22	; 0x28
     746:	71 a7       	std	Z+41, r23	; 0x29
     748:	82 a7       	std	Z+42, r24	; 0x2a
     74a:	93 a7       	std	Z+43, r25	; 0x2b
     74c:	1c c0       	rjmp	.+56     	; 0x786 <main+0x10a>
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); // Regular Current
     74e:	c7 01       	movw	r24, r14
     750:	0e 94 bd 02 	call	0x57a	; 0x57a <adc_read_current>
				float adcCurrent = adc_calculation(adcValue);
     754:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <adc_calculation>
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
     758:	a6 01       	movw	r20, r12
     75a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <voltage_real>
     75e:	a8 01       	movw	r20, r16
     760:	41 50       	subi	r20, 0x01	; 1
     762:	51 09       	sbc	r21, r1
				currentArray[(i-1)/2] = current;
     764:	9a 01       	movw	r18, r20
     766:	12 f4       	brpl	.+4      	; 0x76c <main+0xf0>
     768:	2f 5f       	subi	r18, 0xFF	; 255
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	f9 01       	movw	r30, r18
     76e:	f5 95       	asr	r31
     770:	e7 95       	ror	r30
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	ee 0f       	add	r30, r30
     778:	ff 1f       	adc	r31, r31
     77a:	e2 0d       	add	r30, r2
     77c:	f3 1d       	adc	r31, r3
     77e:	60 83       	st	Z, r22
     780:	71 83       	std	Z+1, r23	; 0x01
     782:	82 83       	std	Z+2, r24	; 0x02
     784:	93 83       	std	Z+3, r25	; 0x03
		while (flag == 0); //Wait for Zero Crossing Detector to signal a rising zero crossing
		
		//Reading from the ADC, calculating and converting
		float voltageArray[10];
		float currentArray[10];
		for (int i=0;i<19;i++) {
     786:	0f 5f       	subi	r16, 0xFF	; 255
     788:	1f 4f       	sbci	r17, 0xFF	; 255
     78a:	03 31       	cpi	r16, 0x13	; 19
     78c:	11 05       	cpc	r17, r1
     78e:	11 f6       	brne	.-124    	; 0x714 <main+0x98>
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
				currentArray[(i-1)/2] = current;
			}
		}
		float test = calcCurrentRMS(&currentArray);
     790:	6f 96       	adiw	r28, 0x1f	; 31
     792:	8f ad       	ldd	r24, Y+63	; 0x3f
     794:	6f 97       	sbiw	r28, 0x1f	; 31
     796:	a0 96       	adiw	r28, 0x20	; 32
     798:	9f ad       	ldd	r25, Y+63	; 0x3f
     79a:	a0 97       	sbiw	r28, 0x20	; 32
     79c:	0e 94 bd 01 	call	0x37a	; 0x37a <calcCurrentRMS>
		if (test > 0.21) {
     7a0:	2d e3       	ldi	r18, 0x3D	; 61
     7a2:	3a e0       	ldi	r19, 0x0A	; 10
     7a4:	47 e5       	ldi	r20, 0x57	; 87
     7a6:	5e e3       	ldi	r21, 0x3E	; 62
     7a8:	0e 94 62 07 	call	0xec4	; 0xec4 <__gesf2>
     7ac:	18 16       	cp	r1, r24
     7ae:	34 f4       	brge	.+12     	; 0x7bc <main+0x140>
			if (currentFlag != 0) {
     7b0:	66 96       	adiw	r28, 0x16	; 22
     7b2:	ef ad       	ldd	r30, Y+63	; 0x3f
     7b4:	66 97       	sbiw	r28, 0x16	; 22
     7b6:	e1 11       	cpse	r30, r1
     7b8:	8f c1       	rjmp	.+798    	; 0xad8 <__stack+0x1d9>
     7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <main+0x14c>
				currentFlag = 0;
				continue;
			}
		} else {
			if (currentFlag != 1) {
     7bc:	66 96       	adiw	r28, 0x16	; 22
     7be:	ff ad       	ldd	r31, Y+63	; 0x3f
     7c0:	66 97       	sbiw	r28, 0x16	; 22
     7c2:	f1 30       	cpi	r31, 0x01	; 1
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <main+0x14c>
     7c6:	8c c1       	rjmp	.+792    	; 0xae0 <__stack+0x1e1>
				currentFlag = 1;
				continue;
			}
		}
		
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { 
     7c8:	6e 96       	adiw	r28, 0x1e	; 30
     7ca:	6c ad       	ldd	r22, Y+60	; 0x3c
     7cc:	7d ad       	ldd	r23, Y+61	; 0x3d
     7ce:	8e ad       	ldd	r24, Y+62	; 0x3e
     7d0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7d2:	6e 97       	sbiw	r28, 0x1e	; 30
     7d4:	2a e0       	ldi	r18, 0x0A	; 10
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__udivmodsi4>
     7e0:	6a 96       	adiw	r28, 0x1a	; 26
     7e2:	6c af       	std	Y+60, r22	; 0x3c
     7e4:	7d af       	std	Y+61, r23	; 0x3d
     7e6:	8e af       	std	Y+62, r24	; 0x3e
     7e8:	9f af       	std	Y+63, r25	; 0x3f
     7ea:	6a 97       	sbiw	r28, 0x1a	; 26
     7ec:	2b 01       	movw	r4, r22
     7ee:	3c 01       	movw	r6, r24
     7f0:	64 30       	cpi	r22, 0x04	; 4
     7f2:	71 05       	cpc	r23, r1
     7f4:	81 05       	cpc	r24, r1
     7f6:	91 05       	cpc	r25, r1
     7f8:	08 f0       	brcs	.+2      	; 0x7fc <main+0x180>
     7fa:	5e c0       	rjmp	.+188    	; 0x8b8 <main+0x23c>
			//dataFloat = calcPower(&voltageArray, &currentArray);
			dataFloat = calcVoltageRMS(&voltageArray); 
     7fc:	ce 01       	movw	r24, r28
     7fe:	89 96       	adiw	r24, 0x29	; 41
     800:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <calcVoltageRMS>
     804:	16 2f       	mov	r17, r22
     806:	07 2f       	mov	r16, r23
     808:	f8 2e       	mov	r15, r24
     80a:	e9 2e       	mov	r14, r25
			if (dataFloat >= maxPower*0.75) { OCR1A = 0x001; }
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	4c ec       	ldi	r20, 0xCC	; 204
     812:	50 e4       	ldi	r21, 0x40	; 64
     814:	0e 94 62 07 	call	0xec4	; 0xec4 <__gesf2>
     818:	88 23       	and	r24, r24
     81a:	44 f0       	brlt	.+16     	; 0x82c <main+0x1b0>
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	a8 e8       	ldi	r26, 0x88	; 136
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	11 96       	adiw	r26, 0x01	; 1
     826:	9c 93       	st	X, r25
     828:	8e 93       	st	-X, r24
     82a:	6f c0       	rjmp	.+222    	; 0x90a <__stack+0xb>
			else if ((dataFloat < maxPower*0.75 ) && (dataFloat >= maxPower*0.5)) { OCR1A = 0xA2C; }
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	4c ec       	ldi	r20, 0xCC	; 204
     832:	50 e4       	ldi	r21, 0x40	; 64
     834:	61 2f       	mov	r22, r17
     836:	70 2f       	mov	r23, r16
     838:	8f 2d       	mov	r24, r15
     83a:	9e 2d       	mov	r25, r14
     83c:	0e 94 03 06 	call	0xc06	; 0xc06 <__cmpsf2>
     840:	88 23       	and	r24, r24
     842:	9c f4       	brge	.+38     	; 0x86a <main+0x1ee>
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	48 e8       	ldi	r20, 0x88	; 136
     84a:	50 e4       	ldi	r21, 0x40	; 64
     84c:	61 2f       	mov	r22, r17
     84e:	70 2f       	mov	r23, r16
     850:	8f 2d       	mov	r24, r15
     852:	9e 2d       	mov	r25, r14
     854:	0e 94 62 07 	call	0xec4	; 0xec4 <__gesf2>
     858:	88 23       	and	r24, r24
     85a:	3c f0       	brlt	.+14     	; 0x86a <main+0x1ee>
     85c:	8c e2       	ldi	r24, 0x2C	; 44
     85e:	9a e0       	ldi	r25, 0x0A	; 10
     860:	e8 e8       	ldi	r30, 0x88	; 136
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	80 83       	st	Z, r24
     868:	50 c0       	rjmp	.+160    	; 0x90a <__stack+0xb>
			else if ((dataFloat < maxPower*0.5 ) && (dataFloat >= maxPower*0.25)) { OCR1A = 0xF42; }
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	48 e8       	ldi	r20, 0x88	; 136
     870:	50 e4       	ldi	r21, 0x40	; 64
     872:	61 2f       	mov	r22, r17
     874:	70 2f       	mov	r23, r16
     876:	8f 2d       	mov	r24, r15
     878:	9e 2d       	mov	r25, r14
     87a:	0e 94 03 06 	call	0xc06	; 0xc06 <__cmpsf2>
     87e:	88 23       	and	r24, r24
     880:	a4 f4       	brge	.+40     	; 0x8aa <main+0x22e>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	48 e0       	ldi	r20, 0x08	; 8
     888:	50 e4       	ldi	r21, 0x40	; 64
     88a:	61 2f       	mov	r22, r17
     88c:	70 2f       	mov	r23, r16
     88e:	8f 2d       	mov	r24, r15
     890:	9e 2d       	mov	r25, r14
     892:	0e 94 62 07 	call	0xec4	; 0xec4 <__gesf2>
     896:	88 23       	and	r24, r24
     898:	44 f0       	brlt	.+16     	; 0x8aa <main+0x22e>
     89a:	82 e4       	ldi	r24, 0x42	; 66
     89c:	9f e0       	ldi	r25, 0x0F	; 15
     89e:	a8 e8       	ldi	r26, 0x88	; 136
     8a0:	b0 e0       	ldi	r27, 0x00	; 0
     8a2:	11 96       	adiw	r26, 0x01	; 1
     8a4:	9c 93       	st	X, r25
     8a6:	8e 93       	st	-X, r24
     8a8:	30 c0       	rjmp	.+96     	; 0x90a <__stack+0xb>
			else { OCR1A = 0x1E84; }
     8aa:	84 e8       	ldi	r24, 0x84	; 132
     8ac:	9e e1       	ldi	r25, 0x1E	; 30
     8ae:	e8 e8       	ldi	r30, 0x88	; 136
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	91 83       	std	Z+1, r25	; 0x01
     8b4:	80 83       	st	Z, r24
     8b6:	29 c0       	rjmp	.+82     	; 0x90a <__stack+0xb>
		} 
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataFloat = dataFloat = calcVoltageRMS(&voltageArray); }
     8b8:	6a 96       	adiw	r28, 0x1a	; 26
     8ba:	8c ad       	ldd	r24, Y+60	; 0x3c
     8bc:	9d ad       	ldd	r25, Y+61	; 0x3d
     8be:	ae ad       	ldd	r26, Y+62	; 0x3e
     8c0:	bf ad       	ldd	r27, Y+63	; 0x3f
     8c2:	6a 97       	sbiw	r28, 0x1a	; 26
     8c4:	04 97       	sbiw	r24, 0x04	; 4
     8c6:	a1 09       	sbc	r26, r1
     8c8:	b1 09       	sbc	r27, r1
     8ca:	03 97       	sbiw	r24, 0x03	; 3
     8cc:	a1 05       	cpc	r26, r1
     8ce:	b1 05       	cpc	r27, r1
     8d0:	48 f4       	brcc	.+18     	; 0x8e4 <main+0x268>
     8d2:	ce 01       	movw	r24, r28
     8d4:	89 96       	adiw	r24, 0x29	; 41
     8d6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <calcVoltageRMS>
     8da:	16 2f       	mov	r17, r22
     8dc:	07 2f       	mov	r16, r23
     8de:	f8 2e       	mov	r15, r24
     8e0:	e9 2e       	mov	r14, r25
     8e2:	13 c0       	rjmp	.+38     	; 0x90a <__stack+0xb>
		else if (displayCount%10 > 6) { dataFloat = calcVoltageRMS(&voltageArray); }
     8e4:	f7 e0       	ldi	r31, 0x07	; 7
     8e6:	4f 16       	cp	r4, r31
     8e8:	51 04       	cpc	r5, r1
     8ea:	61 04       	cpc	r6, r1
     8ec:	71 04       	cpc	r7, r1
     8ee:	48 f0       	brcs	.+18     	; 0x902 <__stack+0x3>
     8f0:	ce 01       	movw	r24, r28
     8f2:	89 96       	adiw	r24, 0x29	; 41
     8f4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <calcVoltageRMS>
     8f8:	16 2f       	mov	r17, r22
     8fa:	07 2f       	mov	r16, r23
     8fc:	f8 2e       	mov	r15, r24
     8fe:	e9 2e       	mov	r14, r25
     900:	04 c0       	rjmp	.+8      	; 0x90a <__stack+0xb>

	while(1) {
		uint8_t hasDecimal = 0;
		uint8_t dataArray[4];
		uint8_t index = 0;
		float dataFloat = 0;
     902:	10 e0       	ldi	r17, 0x00	; 0
     904:	00 e0       	ldi	r16, 0x00	; 0
     906:	f1 2c       	mov	r15, r1
     908:	e1 2c       	mov	r14, r1
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataFloat = dataFloat = calcVoltageRMS(&voltageArray); }
		else if (displayCount%10 > 6) { dataFloat = calcVoltageRMS(&voltageArray); }
		
		// if A > 0.21 use low gain

		dataFloat = roundf(dataFloat * 100) / 100;
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	48 ec       	ldi	r20, 0xC8	; 200
     910:	52 e4       	ldi	r21, 0x42	; 66
     912:	61 2f       	mov	r22, r17
     914:	70 2f       	mov	r23, r16
     916:	8f 2d       	mov	r24, r15
     918:	9e 2d       	mov	r25, r14
     91a:	0e 94 67 07 	call	0xece	; 0xece <__mulsf3>
     91e:	0e 94 24 08 	call	0x1048	; 0x1048 <round>
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	48 ec       	ldi	r20, 0xC8	; 200
     928:	52 e4       	ldi	r21, 0x42	; 66
     92a:	0e 94 08 06 	call	0xc10	; 0xc10 <__divsf3>
     92e:	6b 01       	movw	r12, r22
     930:	7c 01       	movw	r14, r24
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
     932:	0e 94 bf 00 	call	0x17e	; 0x17e <find_decimal>
     936:	4c 01       	movw	r8, r24
     938:	99 24       	eor	r9, r9
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
     93a:	22 e0       	ldi	r18, 0x02	; 2
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	28 19       	sub	r18, r8
     940:	39 09       	sbc	r19, r9
     942:	a2 96       	adiw	r28, 0x22	; 34
     944:	3f af       	std	Y+63, r19	; 0x3f
     946:	2e af       	std	Y+62, r18	; 0x3e
     948:	a2 97       	sbiw	r28, 0x22	; 34
     94a:	b9 01       	movw	r22, r18
     94c:	33 0f       	add	r19, r19
     94e:	88 0b       	sbc	r24, r24
     950:	99 0b       	sbc	r25, r25
     952:	0e 94 b2 06 	call	0xd64	; 0xd64 <__floatsisf>
     956:	9b 01       	movw	r18, r22
     958:	ac 01       	movw	r20, r24
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	80 e2       	ldi	r24, 0x20	; 32
     960:	91 e4       	ldi	r25, 0x41	; 65
     962:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <pow>
     966:	a7 01       	movw	r20, r14
     968:	96 01       	movw	r18, r12
     96a:	0e 94 67 07 	call	0xece	; 0xece <__mulsf3>
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	5f e3       	ldi	r21, 0x3F	; 63
     976:	0e 94 97 05 	call	0xb2e	; 0xb2e <__addsf3>
     97a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fixsfsi>
     97e:	7b 01       	movw	r14, r22
     980:	a4 96       	adiw	r28, 0x24	; 36
     982:	ce ac       	ldd	r12, Y+62	; 0x3e
     984:	df ac       	ldd	r13, Y+63	; 0x3f
     986:	a4 97       	sbiw	r28, 0x24	; 36
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     988:	02 e0       	ldi	r16, 0x02	; 2
     98a:	10 e0       	ldi	r17, 0x00	; 0
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     98c:	08 15       	cp	r16, r8
     98e:	19 05       	cpc	r17, r9
     990:	61 f4       	brne	.+24     	; 0x9aa <__stack+0xab>
     992:	a5 96       	adiw	r28, 0x25	; 37
     994:	4f ad       	ldd	r20, Y+63	; 0x3f
     996:	a5 97       	sbiw	r28, 0x25	; 37
     998:	a2 96       	adiw	r28, 0x22	; 34
     99a:	8e ad       	ldd	r24, Y+62	; 0x3e
     99c:	9f ad       	ldd	r25, Y+63	; 0x3f
     99e:	a2 97       	sbiw	r28, 0x22	; 34
     9a0:	18 16       	cp	r1, r24
     9a2:	19 06       	cpc	r1, r25
     9a4:	1c f0       	brlt	.+6      	; 0x9ac <__stack+0xad>
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <__stack+0xad>
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
     9aa:	40 e0       	ldi	r20, 0x00	; 0
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
     9ac:	97 01       	movw	r18, r14
     9ae:	ad ec       	ldi	r26, 0xCD	; 205
     9b0:	bc ec       	ldi	r27, 0xCC	; 204
     9b2:	0e 94 07 0a 	call	0x140e	; 0x140e <__umulhisi3>
     9b6:	96 95       	lsr	r25
     9b8:	87 95       	ror	r24
     9ba:	96 95       	lsr	r25
     9bc:	87 95       	ror	r24
     9be:	96 95       	lsr	r25
     9c0:	87 95       	ror	r24
     9c2:	9c 01       	movw	r18, r24
     9c4:	22 0f       	add	r18, r18
     9c6:	33 1f       	adc	r19, r19
     9c8:	88 0f       	add	r24, r24
     9ca:	99 1f       	adc	r25, r25
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	82 0f       	add	r24, r18
     9d6:	93 1f       	adc	r25, r19
     9d8:	60 2f       	mov	r22, r16
     9da:	ae 2d       	mov	r26, r14
     9dc:	a8 1b       	sub	r26, r24
     9de:	8a 2f       	mov	r24, r26
     9e0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <wololo>
     9e4:	f6 01       	movw	r30, r12
     9e6:	82 93       	st	-Z, r24
     9e8:	6f 01       	movw	r12, r30
			dataInt = dataInt/10;
     9ea:	97 01       	movw	r18, r14
     9ec:	ad ec       	ldi	r26, 0xCD	; 205
     9ee:	bc ec       	ldi	r27, 0xCC	; 204
     9f0:	0e 94 07 0a 	call	0x140e	; 0x140e <__umulhisi3>
     9f4:	7c 01       	movw	r14, r24
     9f6:	f6 94       	lsr	r15
     9f8:	e7 94       	ror	r14
     9fa:	f6 94       	lsr	r15
     9fc:	e7 94       	ror	r14
     9fe:	f6 94       	lsr	r15
     a00:	e7 94       	ror	r14
		dataFloat = roundf(dataFloat * 100) / 100;
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     a02:	01 50       	subi	r16, 0x01	; 1
     a04:	11 09       	sbc	r17, r1
     a06:	10 f6       	brcc	.-124    	; 0x98c <__stack+0x8d>
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
			dataInt = dataInt/10;
		}
		
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { dataArray[3] = 15; }
     a08:	24 e0       	ldi	r18, 0x04	; 4
     a0a:	42 16       	cp	r4, r18
     a0c:	51 04       	cpc	r5, r1
     a0e:	61 04       	cpc	r6, r1
     a10:	71 04       	cpc	r7, r1
     a12:	28 f4       	brcc	.+10     	; 0xa1e <__stack+0x11f>
     a14:	8f e0       	ldi	r24, 0x0F	; 15
     a16:	65 96       	adiw	r28, 0x15	; 21
     a18:	8f af       	std	Y+63, r24	; 0x3f
     a1a:	65 97       	sbiw	r28, 0x15	; 21
     a1c:	1c c0       	rjmp	.+56     	; 0xa56 <__stack+0x157>
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataArray[3] = 13; }
     a1e:	6a 96       	adiw	r28, 0x1a	; 26
     a20:	8c ad       	ldd	r24, Y+60	; 0x3c
     a22:	9d ad       	ldd	r25, Y+61	; 0x3d
     a24:	ae ad       	ldd	r26, Y+62	; 0x3e
     a26:	bf ad       	ldd	r27, Y+63	; 0x3f
     a28:	6a 97       	sbiw	r28, 0x1a	; 26
     a2a:	04 97       	sbiw	r24, 0x04	; 4
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	03 97       	sbiw	r24, 0x03	; 3
     a32:	a1 05       	cpc	r26, r1
     a34:	b1 05       	cpc	r27, r1
     a36:	28 f4       	brcc	.+10     	; 0xa42 <__stack+0x143>
     a38:	8d e0       	ldi	r24, 0x0D	; 13
     a3a:	65 96       	adiw	r28, 0x15	; 21
     a3c:	8f af       	std	Y+63, r24	; 0x3f
     a3e:	65 97       	sbiw	r28, 0x15	; 21
     a40:	0a c0       	rjmp	.+20     	; 0xa56 <__stack+0x157>
		else if (displayCount%10 > 6) { dataArray[3] = 14; }
     a42:	37 e0       	ldi	r19, 0x07	; 7
     a44:	43 16       	cp	r4, r19
     a46:	51 04       	cpc	r5, r1
     a48:	61 04       	cpc	r6, r1
     a4a:	71 04       	cpc	r7, r1
     a4c:	20 f0       	brcs	.+8      	; 0xa56 <__stack+0x157>
     a4e:	8e e0       	ldi	r24, 0x0E	; 14
     a50:	65 96       	adiw	r28, 0x15	; 21
     a52:	8f af       	std	Y+63, r24	; 0x3f
     a54:	65 97       	sbiw	r28, 0x15	; 21

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
			uart_transmit(data);
     a56:	62 96       	adiw	r28, 0x12	; 18
     a58:	8f ad       	ldd	r24, Y+63	; 0x3f
     a5a:	62 97       	sbiw	r28, 0x12	; 18
     a5c:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a60:	8f ed       	ldi	r24, 0xDF	; 223
     a62:	9e e2       	ldi	r25, 0x2E	; 46
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <__stack+0x165>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <__stack+0x16b>
     a6a:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
     a6c:	11 e0       	ldi	r17, 0x01	; 1
			//Select next integer to send
			if (index == 4) {
				index = 0;
     a6e:	00 e0       	ldi	r16, 0x00	; 0
     a70:	13 c0       	rjmp	.+38     	; 0xa98 <__stack+0x199>
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataArray[3] = 13; }
		else if (displayCount%10 > 6) { dataArray[3] = 14; }

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
     a72:	e1 e5       	ldi	r30, 0x51	; 81
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	ec 0f       	add	r30, r28
     a78:	fd 1f       	adc	r31, r29
     a7a:	e1 0f       	add	r30, r17
     a7c:	f1 1d       	adc	r31, r1
			uart_transmit(data);
     a7e:	80 81       	ld	r24, Z
     a80:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
     a84:	af ed       	ldi	r26, 0xDF	; 223
     a86:	be e2       	ldi	r27, 0x2E	; 46
     a88:	11 97       	sbiw	r26, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <__stack+0x189>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <__stack+0x18f>
     a8e:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
     a90:	1f 5f       	subi	r17, 0xFF	; 255
			//Select next integer to send
			if (index == 4) {
     a92:	14 30       	cpi	r17, 0x04	; 4
     a94:	09 f4       	brne	.+2      	; 0xa98 <__stack+0x199>
				index = 0;
     a96:	10 2f       	mov	r17, r16
			}
			//Polling mechanism
			if(TCNT0>=156) {
     a98:	86 b5       	in	r24, 0x26	; 38
     a9a:	8c 39       	cpi	r24, 0x9C	; 156
     a9c:	50 f3       	brcs	.-44     	; 0xa72 <__stack+0x173>
				TCNT0 = 0;
     a9e:	16 bc       	out	0x26, r1	; 38
				if (counter == 50) {
     aa0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
     aa4:	82 33       	cpi	r24, 0x32	; 50
     aa6:	91 f4       	brne	.+36     	; 0xacc <__stack+0x1cd>
					counter = 0;
     aa8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter>
				} else {
					counter++;
				}
			}
		}
		displayCount++;
     aac:	6e 96       	adiw	r28, 0x1e	; 30
     aae:	8c ad       	ldd	r24, Y+60	; 0x3c
     ab0:	9d ad       	ldd	r25, Y+61	; 0x3d
     ab2:	ae ad       	ldd	r26, Y+62	; 0x3e
     ab4:	bf ad       	ldd	r27, Y+63	; 0x3f
     ab6:	6e 97       	sbiw	r28, 0x1e	; 30
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	a1 1d       	adc	r26, r1
     abc:	b1 1d       	adc	r27, r1
     abe:	6e 96       	adiw	r28, 0x1e	; 30
     ac0:	8c af       	std	Y+60, r24	; 0x3c
     ac2:	9d af       	std	Y+61, r25	; 0x3d
     ac4:	ae af       	std	Y+62, r26	; 0x3e
     ac6:	bf af       	std	Y+63, r27	; 0x3f
     ac8:	6e 97       	sbiw	r28, 0x1e	; 30
     aca:	13 ce       	rjmp	.-986    	; 0x6f2 <main+0x76>
				TCNT0 = 0;
				if (counter == 50) {
					counter = 0;
					break;
				} else {
					counter++;
     acc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
     ad0:	8f 5f       	subi	r24, 0xFF	; 255
     ad2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter>
     ad6:	cd cf       	rjmp	.-102    	; 0xa72 <__stack+0x173>
			}
		}
		float test = calcCurrentRMS(&currentArray);
		if (test > 0.21) {
			if (currentFlag != 0) {
				currentFlag = 0;
     ad8:	66 96       	adiw	r28, 0x16	; 22
     ada:	1f ae       	std	Y+63, r1	; 0x3f
     adc:	66 97       	sbiw	r28, 0x16	; 22
     ade:	09 ce       	rjmp	.-1006   	; 0x6f2 <main+0x76>
				continue;
			}
		} else {
			if (currentFlag != 1) {
				currentFlag = 1;
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	66 96       	adiw	r28, 0x16	; 22
     ae4:	9f af       	std	Y+63, r25	; 0x3f
     ae6:	66 97       	sbiw	r28, 0x16	; 22
     ae8:	04 ce       	rjmp	.-1016   	; 0x6f2 <main+0x76>

00000aea <__vector_1>:
		displayCount++;
	}
	return 0;
}

ISR (INT0_vect) {
     aea:	1f 92       	push	r1
     aec:	0f 92       	push	r0
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	0f 92       	push	r0
     af2:	11 24       	eor	r1, r1
     af4:	8f 93       	push	r24
	flag = 1;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
     afc:	8f 91       	pop	r24
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <__vector_11>:

ISR (TIMER1_COMPA_vect) {
     b08:	1f 92       	push	r1
     b0a:	0f 92       	push	r0
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	0f 92       	push	r0
     b10:	11 24       	eor	r1, r1
     b12:	8f 93       	push	r24
     b14:	9f 93       	push	r25
	PORTB ^= (1<<5);
     b16:	95 b1       	in	r25, 0x05	; 5
     b18:	80 e2       	ldi	r24, 0x20	; 32
     b1a:	89 27       	eor	r24, r25
     b1c:	85 b9       	out	0x05, r24	; 5
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <__subsf3>:
     b2c:	50 58       	subi	r21, 0x80	; 128

00000b2e <__addsf3>:
     b2e:	bb 27       	eor	r27, r27
     b30:	aa 27       	eor	r26, r26
     b32:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__addsf3x>
     b36:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_round>
     b3a:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fp_pscA>
     b3e:	38 f0       	brcs	.+14     	; 0xb4e <__addsf3+0x20>
     b40:	0e 94 21 07 	call	0xe42	; 0xe42 <__fp_pscB>
     b44:	20 f0       	brcs	.+8      	; 0xb4e <__addsf3+0x20>
     b46:	39 f4       	brne	.+14     	; 0xb56 <__addsf3+0x28>
     b48:	9f 3f       	cpi	r25, 0xFF	; 255
     b4a:	19 f4       	brne	.+6      	; 0xb52 <__addsf3+0x24>
     b4c:	26 f4       	brtc	.+8      	; 0xb56 <__addsf3+0x28>
     b4e:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_nan>
     b52:	0e f4       	brtc	.+2      	; 0xb56 <__addsf3+0x28>
     b54:	e0 95       	com	r30
     b56:	e7 fb       	bst	r30, 7
     b58:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_inf>

00000b5c <__addsf3x>:
     b5c:	e9 2f       	mov	r30, r25
     b5e:	0e 94 39 07 	call	0xe72	; 0xe72 <__fp_split3>
     b62:	58 f3       	brcs	.-42     	; 0xb3a <__addsf3+0xc>
     b64:	ba 17       	cp	r27, r26
     b66:	62 07       	cpc	r22, r18
     b68:	73 07       	cpc	r23, r19
     b6a:	84 07       	cpc	r24, r20
     b6c:	95 07       	cpc	r25, r21
     b6e:	20 f0       	brcs	.+8      	; 0xb78 <__addsf3x+0x1c>
     b70:	79 f4       	brne	.+30     	; 0xb90 <__addsf3x+0x34>
     b72:	a6 f5       	brtc	.+104    	; 0xbdc <__addsf3x+0x80>
     b74:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__fp_zero>
     b78:	0e f4       	brtc	.+2      	; 0xb7c <__addsf3x+0x20>
     b7a:	e0 95       	com	r30
     b7c:	0b 2e       	mov	r0, r27
     b7e:	ba 2f       	mov	r27, r26
     b80:	a0 2d       	mov	r26, r0
     b82:	0b 01       	movw	r0, r22
     b84:	b9 01       	movw	r22, r18
     b86:	90 01       	movw	r18, r0
     b88:	0c 01       	movw	r0, r24
     b8a:	ca 01       	movw	r24, r20
     b8c:	a0 01       	movw	r20, r0
     b8e:	11 24       	eor	r1, r1
     b90:	ff 27       	eor	r31, r31
     b92:	59 1b       	sub	r21, r25
     b94:	99 f0       	breq	.+38     	; 0xbbc <__addsf3x+0x60>
     b96:	59 3f       	cpi	r21, 0xF9	; 249
     b98:	50 f4       	brcc	.+20     	; 0xbae <__addsf3x+0x52>
     b9a:	50 3e       	cpi	r21, 0xE0	; 224
     b9c:	68 f1       	brcs	.+90     	; 0xbf8 <__addsf3x+0x9c>
     b9e:	1a 16       	cp	r1, r26
     ba0:	f0 40       	sbci	r31, 0x00	; 0
     ba2:	a2 2f       	mov	r26, r18
     ba4:	23 2f       	mov	r18, r19
     ba6:	34 2f       	mov	r19, r20
     ba8:	44 27       	eor	r20, r20
     baa:	58 5f       	subi	r21, 0xF8	; 248
     bac:	f3 cf       	rjmp	.-26     	; 0xb94 <__addsf3x+0x38>
     bae:	46 95       	lsr	r20
     bb0:	37 95       	ror	r19
     bb2:	27 95       	ror	r18
     bb4:	a7 95       	ror	r26
     bb6:	f0 40       	sbci	r31, 0x00	; 0
     bb8:	53 95       	inc	r21
     bba:	c9 f7       	brne	.-14     	; 0xbae <__addsf3x+0x52>
     bbc:	7e f4       	brtc	.+30     	; 0xbdc <__addsf3x+0x80>
     bbe:	1f 16       	cp	r1, r31
     bc0:	ba 0b       	sbc	r27, r26
     bc2:	62 0b       	sbc	r22, r18
     bc4:	73 0b       	sbc	r23, r19
     bc6:	84 0b       	sbc	r24, r20
     bc8:	ba f0       	brmi	.+46     	; 0xbf8 <__addsf3x+0x9c>
     bca:	91 50       	subi	r25, 0x01	; 1
     bcc:	a1 f0       	breq	.+40     	; 0xbf6 <__addsf3x+0x9a>
     bce:	ff 0f       	add	r31, r31
     bd0:	bb 1f       	adc	r27, r27
     bd2:	66 1f       	adc	r22, r22
     bd4:	77 1f       	adc	r23, r23
     bd6:	88 1f       	adc	r24, r24
     bd8:	c2 f7       	brpl	.-16     	; 0xbca <__addsf3x+0x6e>
     bda:	0e c0       	rjmp	.+28     	; 0xbf8 <__addsf3x+0x9c>
     bdc:	ba 0f       	add	r27, r26
     bde:	62 1f       	adc	r22, r18
     be0:	73 1f       	adc	r23, r19
     be2:	84 1f       	adc	r24, r20
     be4:	48 f4       	brcc	.+18     	; 0xbf8 <__addsf3x+0x9c>
     be6:	87 95       	ror	r24
     be8:	77 95       	ror	r23
     bea:	67 95       	ror	r22
     bec:	b7 95       	ror	r27
     bee:	f7 95       	ror	r31
     bf0:	9e 3f       	cpi	r25, 0xFE	; 254
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <__addsf3x+0x9a>
     bf4:	b0 cf       	rjmp	.-160    	; 0xb56 <__addsf3+0x28>
     bf6:	93 95       	inc	r25
     bf8:	88 0f       	add	r24, r24
     bfa:	08 f0       	brcs	.+2      	; 0xbfe <__addsf3x+0xa2>
     bfc:	99 27       	eor	r25, r25
     bfe:	ee 0f       	add	r30, r30
     c00:	97 95       	ror	r25
     c02:	87 95       	ror	r24
     c04:	08 95       	ret

00000c06 <__cmpsf2>:
     c06:	0e 94 ed 06 	call	0xdda	; 0xdda <__fp_cmp>
     c0a:	08 f4       	brcc	.+2      	; 0xc0e <__cmpsf2+0x8>
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	08 95       	ret

00000c10 <__divsf3>:
     c10:	0e 94 1c 06 	call	0xc38	; 0xc38 <__divsf3x>
     c14:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_round>
     c18:	0e 94 21 07 	call	0xe42	; 0xe42 <__fp_pscB>
     c1c:	58 f0       	brcs	.+22     	; 0xc34 <__divsf3+0x24>
     c1e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fp_pscA>
     c22:	40 f0       	brcs	.+16     	; 0xc34 <__divsf3+0x24>
     c24:	29 f4       	brne	.+10     	; 0xc30 <__divsf3+0x20>
     c26:	5f 3f       	cpi	r21, 0xFF	; 255
     c28:	29 f0       	breq	.+10     	; 0xc34 <__divsf3+0x24>
     c2a:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_inf>
     c2e:	51 11       	cpse	r21, r1
     c30:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_szero>
     c34:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_nan>

00000c38 <__divsf3x>:
     c38:	0e 94 39 07 	call	0xe72	; 0xe72 <__fp_split3>
     c3c:	68 f3       	brcs	.-38     	; 0xc18 <__divsf3+0x8>

00000c3e <__divsf3_pse>:
     c3e:	99 23       	and	r25, r25
     c40:	b1 f3       	breq	.-20     	; 0xc2e <__divsf3+0x1e>
     c42:	55 23       	and	r21, r21
     c44:	91 f3       	breq	.-28     	; 0xc2a <__divsf3+0x1a>
     c46:	95 1b       	sub	r25, r21
     c48:	55 0b       	sbc	r21, r21
     c4a:	bb 27       	eor	r27, r27
     c4c:	aa 27       	eor	r26, r26
     c4e:	62 17       	cp	r22, r18
     c50:	73 07       	cpc	r23, r19
     c52:	84 07       	cpc	r24, r20
     c54:	38 f0       	brcs	.+14     	; 0xc64 <__divsf3_pse+0x26>
     c56:	9f 5f       	subi	r25, 0xFF	; 255
     c58:	5f 4f       	sbci	r21, 0xFF	; 255
     c5a:	22 0f       	add	r18, r18
     c5c:	33 1f       	adc	r19, r19
     c5e:	44 1f       	adc	r20, r20
     c60:	aa 1f       	adc	r26, r26
     c62:	a9 f3       	breq	.-22     	; 0xc4e <__divsf3_pse+0x10>
     c64:	35 d0       	rcall	.+106    	; 0xcd0 <__divsf3_pse+0x92>
     c66:	0e 2e       	mov	r0, r30
     c68:	3a f0       	brmi	.+14     	; 0xc78 <__divsf3_pse+0x3a>
     c6a:	e0 e8       	ldi	r30, 0x80	; 128
     c6c:	32 d0       	rcall	.+100    	; 0xcd2 <__divsf3_pse+0x94>
     c6e:	91 50       	subi	r25, 0x01	; 1
     c70:	50 40       	sbci	r21, 0x00	; 0
     c72:	e6 95       	lsr	r30
     c74:	00 1c       	adc	r0, r0
     c76:	ca f7       	brpl	.-14     	; 0xc6a <__divsf3_pse+0x2c>
     c78:	2b d0       	rcall	.+86     	; 0xcd0 <__divsf3_pse+0x92>
     c7a:	fe 2f       	mov	r31, r30
     c7c:	29 d0       	rcall	.+82     	; 0xcd0 <__divsf3_pse+0x92>
     c7e:	66 0f       	add	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	88 1f       	adc	r24, r24
     c84:	bb 1f       	adc	r27, r27
     c86:	26 17       	cp	r18, r22
     c88:	37 07       	cpc	r19, r23
     c8a:	48 07       	cpc	r20, r24
     c8c:	ab 07       	cpc	r26, r27
     c8e:	b0 e8       	ldi	r27, 0x80	; 128
     c90:	09 f0       	breq	.+2      	; 0xc94 <__divsf3_pse+0x56>
     c92:	bb 0b       	sbc	r27, r27
     c94:	80 2d       	mov	r24, r0
     c96:	bf 01       	movw	r22, r30
     c98:	ff 27       	eor	r31, r31
     c9a:	93 58       	subi	r25, 0x83	; 131
     c9c:	5f 4f       	sbci	r21, 0xFF	; 255
     c9e:	3a f0       	brmi	.+14     	; 0xcae <__divsf3_pse+0x70>
     ca0:	9e 3f       	cpi	r25, 0xFE	; 254
     ca2:	51 05       	cpc	r21, r1
     ca4:	78 f0       	brcs	.+30     	; 0xcc4 <__divsf3_pse+0x86>
     ca6:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_inf>
     caa:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_szero>
     cae:	5f 3f       	cpi	r21, 0xFF	; 255
     cb0:	e4 f3       	brlt	.-8      	; 0xcaa <__divsf3_pse+0x6c>
     cb2:	98 3e       	cpi	r25, 0xE8	; 232
     cb4:	d4 f3       	brlt	.-12     	; 0xcaa <__divsf3_pse+0x6c>
     cb6:	86 95       	lsr	r24
     cb8:	77 95       	ror	r23
     cba:	67 95       	ror	r22
     cbc:	b7 95       	ror	r27
     cbe:	f7 95       	ror	r31
     cc0:	9f 5f       	subi	r25, 0xFF	; 255
     cc2:	c9 f7       	brne	.-14     	; 0xcb6 <__divsf3_pse+0x78>
     cc4:	88 0f       	add	r24, r24
     cc6:	91 1d       	adc	r25, r1
     cc8:	96 95       	lsr	r25
     cca:	87 95       	ror	r24
     ccc:	97 f9       	bld	r25, 7
     cce:	08 95       	ret
     cd0:	e1 e0       	ldi	r30, 0x01	; 1
     cd2:	66 0f       	add	r22, r22
     cd4:	77 1f       	adc	r23, r23
     cd6:	88 1f       	adc	r24, r24
     cd8:	bb 1f       	adc	r27, r27
     cda:	62 17       	cp	r22, r18
     cdc:	73 07       	cpc	r23, r19
     cde:	84 07       	cpc	r24, r20
     ce0:	ba 07       	cpc	r27, r26
     ce2:	20 f0       	brcs	.+8      	; 0xcec <__divsf3_pse+0xae>
     ce4:	62 1b       	sub	r22, r18
     ce6:	73 0b       	sbc	r23, r19
     ce8:	84 0b       	sbc	r24, r20
     cea:	ba 0b       	sbc	r27, r26
     cec:	ee 1f       	adc	r30, r30
     cee:	88 f7       	brcc	.-30     	; 0xcd2 <__divsf3_pse+0x94>
     cf0:	e0 95       	com	r30
     cf2:	08 95       	ret

00000cf4 <__fixsfsi>:
     cf4:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixunssfsi>
     cf8:	68 94       	set
     cfa:	b1 11       	cpse	r27, r1
     cfc:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_szero>
     d00:	08 95       	ret

00000d02 <__fixunssfsi>:
     d02:	0e 94 41 07 	call	0xe82	; 0xe82 <__fp_splitA>
     d06:	88 f0       	brcs	.+34     	; 0xd2a <__fixunssfsi+0x28>
     d08:	9f 57       	subi	r25, 0x7F	; 127
     d0a:	98 f0       	brcs	.+38     	; 0xd32 <__fixunssfsi+0x30>
     d0c:	b9 2f       	mov	r27, r25
     d0e:	99 27       	eor	r25, r25
     d10:	b7 51       	subi	r27, 0x17	; 23
     d12:	b0 f0       	brcs	.+44     	; 0xd40 <__fixunssfsi+0x3e>
     d14:	e1 f0       	breq	.+56     	; 0xd4e <__fixunssfsi+0x4c>
     d16:	66 0f       	add	r22, r22
     d18:	77 1f       	adc	r23, r23
     d1a:	88 1f       	adc	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	1a f0       	brmi	.+6      	; 0xd26 <__fixunssfsi+0x24>
     d20:	ba 95       	dec	r27
     d22:	c9 f7       	brne	.-14     	; 0xd16 <__fixunssfsi+0x14>
     d24:	14 c0       	rjmp	.+40     	; 0xd4e <__fixunssfsi+0x4c>
     d26:	b1 30       	cpi	r27, 0x01	; 1
     d28:	91 f0       	breq	.+36     	; 0xd4e <__fixunssfsi+0x4c>
     d2a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_zero>
     d2e:	b1 e0       	ldi	r27, 0x01	; 1
     d30:	08 95       	ret
     d32:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__fp_zero>
     d36:	67 2f       	mov	r22, r23
     d38:	78 2f       	mov	r23, r24
     d3a:	88 27       	eor	r24, r24
     d3c:	b8 5f       	subi	r27, 0xF8	; 248
     d3e:	39 f0       	breq	.+14     	; 0xd4e <__fixunssfsi+0x4c>
     d40:	b9 3f       	cpi	r27, 0xF9	; 249
     d42:	cc f3       	brlt	.-14     	; 0xd36 <__fixunssfsi+0x34>
     d44:	86 95       	lsr	r24
     d46:	77 95       	ror	r23
     d48:	67 95       	ror	r22
     d4a:	b3 95       	inc	r27
     d4c:	d9 f7       	brne	.-10     	; 0xd44 <__fixunssfsi+0x42>
     d4e:	3e f4       	brtc	.+14     	; 0xd5e <__fixunssfsi+0x5c>
     d50:	90 95       	com	r25
     d52:	80 95       	com	r24
     d54:	70 95       	com	r23
     d56:	61 95       	neg	r22
     d58:	7f 4f       	sbci	r23, 0xFF	; 255
     d5a:	8f 4f       	sbci	r24, 0xFF	; 255
     d5c:	9f 4f       	sbci	r25, 0xFF	; 255
     d5e:	08 95       	ret

00000d60 <__floatunsisf>:
     d60:	e8 94       	clt
     d62:	09 c0       	rjmp	.+18     	; 0xd76 <__floatsisf+0x12>

00000d64 <__floatsisf>:
     d64:	97 fb       	bst	r25, 7
     d66:	3e f4       	brtc	.+14     	; 0xd76 <__floatsisf+0x12>
     d68:	90 95       	com	r25
     d6a:	80 95       	com	r24
     d6c:	70 95       	com	r23
     d6e:	61 95       	neg	r22
     d70:	7f 4f       	sbci	r23, 0xFF	; 255
     d72:	8f 4f       	sbci	r24, 0xFF	; 255
     d74:	9f 4f       	sbci	r25, 0xFF	; 255
     d76:	99 23       	and	r25, r25
     d78:	a9 f0       	breq	.+42     	; 0xda4 <__floatsisf+0x40>
     d7a:	f9 2f       	mov	r31, r25
     d7c:	96 e9       	ldi	r25, 0x96	; 150
     d7e:	bb 27       	eor	r27, r27
     d80:	93 95       	inc	r25
     d82:	f6 95       	lsr	r31
     d84:	87 95       	ror	r24
     d86:	77 95       	ror	r23
     d88:	67 95       	ror	r22
     d8a:	b7 95       	ror	r27
     d8c:	f1 11       	cpse	r31, r1
     d8e:	f8 cf       	rjmp	.-16     	; 0xd80 <__floatsisf+0x1c>
     d90:	fa f4       	brpl	.+62     	; 0xdd0 <__floatsisf+0x6c>
     d92:	bb 0f       	add	r27, r27
     d94:	11 f4       	brne	.+4      	; 0xd9a <__floatsisf+0x36>
     d96:	60 ff       	sbrs	r22, 0
     d98:	1b c0       	rjmp	.+54     	; 0xdd0 <__floatsisf+0x6c>
     d9a:	6f 5f       	subi	r22, 0xFF	; 255
     d9c:	7f 4f       	sbci	r23, 0xFF	; 255
     d9e:	8f 4f       	sbci	r24, 0xFF	; 255
     da0:	9f 4f       	sbci	r25, 0xFF	; 255
     da2:	16 c0       	rjmp	.+44     	; 0xdd0 <__floatsisf+0x6c>
     da4:	88 23       	and	r24, r24
     da6:	11 f0       	breq	.+4      	; 0xdac <__floatsisf+0x48>
     da8:	96 e9       	ldi	r25, 0x96	; 150
     daa:	11 c0       	rjmp	.+34     	; 0xdce <__floatsisf+0x6a>
     dac:	77 23       	and	r23, r23
     dae:	21 f0       	breq	.+8      	; 0xdb8 <__floatsisf+0x54>
     db0:	9e e8       	ldi	r25, 0x8E	; 142
     db2:	87 2f       	mov	r24, r23
     db4:	76 2f       	mov	r23, r22
     db6:	05 c0       	rjmp	.+10     	; 0xdc2 <__floatsisf+0x5e>
     db8:	66 23       	and	r22, r22
     dba:	71 f0       	breq	.+28     	; 0xdd8 <__floatsisf+0x74>
     dbc:	96 e8       	ldi	r25, 0x86	; 134
     dbe:	86 2f       	mov	r24, r22
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	2a f0       	brmi	.+10     	; 0xdd0 <__floatsisf+0x6c>
     dc6:	9a 95       	dec	r25
     dc8:	66 0f       	add	r22, r22
     dca:	77 1f       	adc	r23, r23
     dcc:	88 1f       	adc	r24, r24
     dce:	da f7       	brpl	.-10     	; 0xdc6 <__floatsisf+0x62>
     dd0:	88 0f       	add	r24, r24
     dd2:	96 95       	lsr	r25
     dd4:	87 95       	ror	r24
     dd6:	97 f9       	bld	r25, 7
     dd8:	08 95       	ret

00000dda <__fp_cmp>:
     dda:	99 0f       	add	r25, r25
     ddc:	00 08       	sbc	r0, r0
     dde:	55 0f       	add	r21, r21
     de0:	aa 0b       	sbc	r26, r26
     de2:	e0 e8       	ldi	r30, 0x80	; 128
     de4:	fe ef       	ldi	r31, 0xFE	; 254
     de6:	16 16       	cp	r1, r22
     de8:	17 06       	cpc	r1, r23
     dea:	e8 07       	cpc	r30, r24
     dec:	f9 07       	cpc	r31, r25
     dee:	c0 f0       	brcs	.+48     	; 0xe20 <__fp_cmp+0x46>
     df0:	12 16       	cp	r1, r18
     df2:	13 06       	cpc	r1, r19
     df4:	e4 07       	cpc	r30, r20
     df6:	f5 07       	cpc	r31, r21
     df8:	98 f0       	brcs	.+38     	; 0xe20 <__fp_cmp+0x46>
     dfa:	62 1b       	sub	r22, r18
     dfc:	73 0b       	sbc	r23, r19
     dfe:	84 0b       	sbc	r24, r20
     e00:	95 0b       	sbc	r25, r21
     e02:	39 f4       	brne	.+14     	; 0xe12 <__fp_cmp+0x38>
     e04:	0a 26       	eor	r0, r26
     e06:	61 f0       	breq	.+24     	; 0xe20 <__fp_cmp+0x46>
     e08:	23 2b       	or	r18, r19
     e0a:	24 2b       	or	r18, r20
     e0c:	25 2b       	or	r18, r21
     e0e:	21 f4       	brne	.+8      	; 0xe18 <__fp_cmp+0x3e>
     e10:	08 95       	ret
     e12:	0a 26       	eor	r0, r26
     e14:	09 f4       	brne	.+2      	; 0xe18 <__fp_cmp+0x3e>
     e16:	a1 40       	sbci	r26, 0x01	; 1
     e18:	a6 95       	lsr	r26
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	81 1d       	adc	r24, r1
     e1e:	81 1d       	adc	r24, r1
     e20:	08 95       	ret

00000e22 <__fp_inf>:
     e22:	97 f9       	bld	r25, 7
     e24:	9f 67       	ori	r25, 0x7F	; 127
     e26:	80 e8       	ldi	r24, 0x80	; 128
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	08 95       	ret

00000e2e <__fp_nan>:
     e2e:	9f ef       	ldi	r25, 0xFF	; 255
     e30:	80 ec       	ldi	r24, 0xC0	; 192
     e32:	08 95       	ret

00000e34 <__fp_pscA>:
     e34:	00 24       	eor	r0, r0
     e36:	0a 94       	dec	r0
     e38:	16 16       	cp	r1, r22
     e3a:	17 06       	cpc	r1, r23
     e3c:	18 06       	cpc	r1, r24
     e3e:	09 06       	cpc	r0, r25
     e40:	08 95       	ret

00000e42 <__fp_pscB>:
     e42:	00 24       	eor	r0, r0
     e44:	0a 94       	dec	r0
     e46:	12 16       	cp	r1, r18
     e48:	13 06       	cpc	r1, r19
     e4a:	14 06       	cpc	r1, r20
     e4c:	05 06       	cpc	r0, r21
     e4e:	08 95       	ret

00000e50 <__fp_round>:
     e50:	09 2e       	mov	r0, r25
     e52:	03 94       	inc	r0
     e54:	00 0c       	add	r0, r0
     e56:	11 f4       	brne	.+4      	; 0xe5c <__fp_round+0xc>
     e58:	88 23       	and	r24, r24
     e5a:	52 f0       	brmi	.+20     	; 0xe70 <__fp_round+0x20>
     e5c:	bb 0f       	add	r27, r27
     e5e:	40 f4       	brcc	.+16     	; 0xe70 <__fp_round+0x20>
     e60:	bf 2b       	or	r27, r31
     e62:	11 f4       	brne	.+4      	; 0xe68 <__fp_round+0x18>
     e64:	60 ff       	sbrs	r22, 0
     e66:	04 c0       	rjmp	.+8      	; 0xe70 <__fp_round+0x20>
     e68:	6f 5f       	subi	r22, 0xFF	; 255
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255
     e6c:	8f 4f       	sbci	r24, 0xFF	; 255
     e6e:	9f 4f       	sbci	r25, 0xFF	; 255
     e70:	08 95       	ret

00000e72 <__fp_split3>:
     e72:	57 fd       	sbrc	r21, 7
     e74:	90 58       	subi	r25, 0x80	; 128
     e76:	44 0f       	add	r20, r20
     e78:	55 1f       	adc	r21, r21
     e7a:	59 f0       	breq	.+22     	; 0xe92 <__fp_splitA+0x10>
     e7c:	5f 3f       	cpi	r21, 0xFF	; 255
     e7e:	71 f0       	breq	.+28     	; 0xe9c <__fp_splitA+0x1a>
     e80:	47 95       	ror	r20

00000e82 <__fp_splitA>:
     e82:	88 0f       	add	r24, r24
     e84:	97 fb       	bst	r25, 7
     e86:	99 1f       	adc	r25, r25
     e88:	61 f0       	breq	.+24     	; 0xea2 <__fp_splitA+0x20>
     e8a:	9f 3f       	cpi	r25, 0xFF	; 255
     e8c:	79 f0       	breq	.+30     	; 0xeac <__fp_splitA+0x2a>
     e8e:	87 95       	ror	r24
     e90:	08 95       	ret
     e92:	12 16       	cp	r1, r18
     e94:	13 06       	cpc	r1, r19
     e96:	14 06       	cpc	r1, r20
     e98:	55 1f       	adc	r21, r21
     e9a:	f2 cf       	rjmp	.-28     	; 0xe80 <__fp_split3+0xe>
     e9c:	46 95       	lsr	r20
     e9e:	f1 df       	rcall	.-30     	; 0xe82 <__fp_splitA>
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <__fp_splitA+0x30>
     ea2:	16 16       	cp	r1, r22
     ea4:	17 06       	cpc	r1, r23
     ea6:	18 06       	cpc	r1, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	f1 cf       	rjmp	.-30     	; 0xe8e <__fp_splitA+0xc>
     eac:	86 95       	lsr	r24
     eae:	71 05       	cpc	r23, r1
     eb0:	61 05       	cpc	r22, r1
     eb2:	08 94       	sec
     eb4:	08 95       	ret

00000eb6 <__fp_zero>:
     eb6:	e8 94       	clt

00000eb8 <__fp_szero>:
     eb8:	bb 27       	eor	r27, r27
     eba:	66 27       	eor	r22, r22
     ebc:	77 27       	eor	r23, r23
     ebe:	cb 01       	movw	r24, r22
     ec0:	97 f9       	bld	r25, 7
     ec2:	08 95       	ret

00000ec4 <__gesf2>:
     ec4:	0e 94 ed 06 	call	0xdda	; 0xdda <__fp_cmp>
     ec8:	08 f4       	brcc	.+2      	; 0xecc <__gesf2+0x8>
     eca:	8f ef       	ldi	r24, 0xFF	; 255
     ecc:	08 95       	ret

00000ece <__mulsf3>:
     ece:	0e 94 7a 07 	call	0xef4	; 0xef4 <__mulsf3x>
     ed2:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_round>
     ed6:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fp_pscA>
     eda:	38 f0       	brcs	.+14     	; 0xeea <__mulsf3+0x1c>
     edc:	0e 94 21 07 	call	0xe42	; 0xe42 <__fp_pscB>
     ee0:	20 f0       	brcs	.+8      	; 0xeea <__mulsf3+0x1c>
     ee2:	95 23       	and	r25, r21
     ee4:	11 f0       	breq	.+4      	; 0xeea <__mulsf3+0x1c>
     ee6:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_inf>
     eea:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_nan>
     eee:	11 24       	eor	r1, r1
     ef0:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_szero>

00000ef4 <__mulsf3x>:
     ef4:	0e 94 39 07 	call	0xe72	; 0xe72 <__fp_split3>
     ef8:	70 f3       	brcs	.-36     	; 0xed6 <__mulsf3+0x8>

00000efa <__mulsf3_pse>:
     efa:	95 9f       	mul	r25, r21
     efc:	c1 f3       	breq	.-16     	; 0xeee <__mulsf3+0x20>
     efe:	95 0f       	add	r25, r21
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	55 1f       	adc	r21, r21
     f04:	62 9f       	mul	r22, r18
     f06:	f0 01       	movw	r30, r0
     f08:	72 9f       	mul	r23, r18
     f0a:	bb 27       	eor	r27, r27
     f0c:	f0 0d       	add	r31, r0
     f0e:	b1 1d       	adc	r27, r1
     f10:	63 9f       	mul	r22, r19
     f12:	aa 27       	eor	r26, r26
     f14:	f0 0d       	add	r31, r0
     f16:	b1 1d       	adc	r27, r1
     f18:	aa 1f       	adc	r26, r26
     f1a:	64 9f       	mul	r22, r20
     f1c:	66 27       	eor	r22, r22
     f1e:	b0 0d       	add	r27, r0
     f20:	a1 1d       	adc	r26, r1
     f22:	66 1f       	adc	r22, r22
     f24:	82 9f       	mul	r24, r18
     f26:	22 27       	eor	r18, r18
     f28:	b0 0d       	add	r27, r0
     f2a:	a1 1d       	adc	r26, r1
     f2c:	62 1f       	adc	r22, r18
     f2e:	73 9f       	mul	r23, r19
     f30:	b0 0d       	add	r27, r0
     f32:	a1 1d       	adc	r26, r1
     f34:	62 1f       	adc	r22, r18
     f36:	83 9f       	mul	r24, r19
     f38:	a0 0d       	add	r26, r0
     f3a:	61 1d       	adc	r22, r1
     f3c:	22 1f       	adc	r18, r18
     f3e:	74 9f       	mul	r23, r20
     f40:	33 27       	eor	r19, r19
     f42:	a0 0d       	add	r26, r0
     f44:	61 1d       	adc	r22, r1
     f46:	23 1f       	adc	r18, r19
     f48:	84 9f       	mul	r24, r20
     f4a:	60 0d       	add	r22, r0
     f4c:	21 1d       	adc	r18, r1
     f4e:	82 2f       	mov	r24, r18
     f50:	76 2f       	mov	r23, r22
     f52:	6a 2f       	mov	r22, r26
     f54:	11 24       	eor	r1, r1
     f56:	9f 57       	subi	r25, 0x7F	; 127
     f58:	50 40       	sbci	r21, 0x00	; 0
     f5a:	9a f0       	brmi	.+38     	; 0xf82 <__mulsf3_pse+0x88>
     f5c:	f1 f0       	breq	.+60     	; 0xf9a <__mulsf3_pse+0xa0>
     f5e:	88 23       	and	r24, r24
     f60:	4a f0       	brmi	.+18     	; 0xf74 <__mulsf3_pse+0x7a>
     f62:	ee 0f       	add	r30, r30
     f64:	ff 1f       	adc	r31, r31
     f66:	bb 1f       	adc	r27, r27
     f68:	66 1f       	adc	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	88 1f       	adc	r24, r24
     f6e:	91 50       	subi	r25, 0x01	; 1
     f70:	50 40       	sbci	r21, 0x00	; 0
     f72:	a9 f7       	brne	.-22     	; 0xf5e <__mulsf3_pse+0x64>
     f74:	9e 3f       	cpi	r25, 0xFE	; 254
     f76:	51 05       	cpc	r21, r1
     f78:	80 f0       	brcs	.+32     	; 0xf9a <__mulsf3_pse+0xa0>
     f7a:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_inf>
     f7e:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_szero>
     f82:	5f 3f       	cpi	r21, 0xFF	; 255
     f84:	e4 f3       	brlt	.-8      	; 0xf7e <__mulsf3_pse+0x84>
     f86:	98 3e       	cpi	r25, 0xE8	; 232
     f88:	d4 f3       	brlt	.-12     	; 0xf7e <__mulsf3_pse+0x84>
     f8a:	86 95       	lsr	r24
     f8c:	77 95       	ror	r23
     f8e:	67 95       	ror	r22
     f90:	b7 95       	ror	r27
     f92:	f7 95       	ror	r31
     f94:	e7 95       	ror	r30
     f96:	9f 5f       	subi	r25, 0xFF	; 255
     f98:	c1 f7       	brne	.-16     	; 0xf8a <__mulsf3_pse+0x90>
     f9a:	fe 2b       	or	r31, r30
     f9c:	88 0f       	add	r24, r24
     f9e:	91 1d       	adc	r25, r1
     fa0:	96 95       	lsr	r25
     fa2:	87 95       	ror	r24
     fa4:	97 f9       	bld	r25, 7
     fa6:	08 95       	ret

00000fa8 <pow>:
     fa8:	fa 01       	movw	r30, r20
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	30 96       	adiw	r30, 0x00	; 0
     fb0:	21 05       	cpc	r18, r1
     fb2:	31 05       	cpc	r19, r1
     fb4:	a1 f1       	breq	.+104    	; 0x101e <pow+0x76>
     fb6:	61 15       	cp	r22, r1
     fb8:	71 05       	cpc	r23, r1
     fba:	61 f4       	brne	.+24     	; 0xfd4 <pow+0x2c>
     fbc:	80 38       	cpi	r24, 0x80	; 128
     fbe:	bf e3       	ldi	r27, 0x3F	; 63
     fc0:	9b 07       	cpc	r25, r27
     fc2:	49 f1       	breq	.+82     	; 0x1016 <pow+0x6e>
     fc4:	68 94       	set
     fc6:	90 38       	cpi	r25, 0x80	; 128
     fc8:	81 05       	cpc	r24, r1
     fca:	61 f0       	breq	.+24     	; 0xfe4 <pow+0x3c>
     fcc:	80 38       	cpi	r24, 0x80	; 128
     fce:	bf ef       	ldi	r27, 0xFF	; 255
     fd0:	9b 07       	cpc	r25, r27
     fd2:	41 f0       	breq	.+16     	; 0xfe4 <pow+0x3c>
     fd4:	99 23       	and	r25, r25
     fd6:	4a f5       	brpl	.+82     	; 0x102a <pow+0x82>
     fd8:	ff 3f       	cpi	r31, 0xFF	; 255
     fda:	e1 05       	cpc	r30, r1
     fdc:	31 05       	cpc	r19, r1
     fde:	21 05       	cpc	r18, r1
     fe0:	19 f1       	breq	.+70     	; 0x1028 <pow+0x80>
     fe2:	e8 94       	clt
     fe4:	08 94       	sec
     fe6:	e7 95       	ror	r30
     fe8:	d9 01       	movw	r26, r18
     fea:	aa 23       	and	r26, r26
     fec:	29 f4       	brne	.+10     	; 0xff8 <pow+0x50>
     fee:	ab 2f       	mov	r26, r27
     ff0:	be 2f       	mov	r27, r30
     ff2:	f8 5f       	subi	r31, 0xF8	; 248
     ff4:	d0 f3       	brcs	.-12     	; 0xfea <pow+0x42>
     ff6:	10 c0       	rjmp	.+32     	; 0x1018 <pow+0x70>
     ff8:	ff 5f       	subi	r31, 0xFF	; 255
     ffa:	70 f4       	brcc	.+28     	; 0x1018 <pow+0x70>
     ffc:	a6 95       	lsr	r26
     ffe:	e0 f7       	brcc	.-8      	; 0xff8 <pow+0x50>
    1000:	f7 39       	cpi	r31, 0x97	; 151
    1002:	50 f0       	brcs	.+20     	; 0x1018 <pow+0x70>
    1004:	19 f0       	breq	.+6      	; 0x100c <pow+0x64>
    1006:	ff 3a       	cpi	r31, 0xAF	; 175
    1008:	38 f4       	brcc	.+14     	; 0x1018 <pow+0x70>
    100a:	9f 77       	andi	r25, 0x7F	; 127
    100c:	9f 93       	push	r25
    100e:	0d d0       	rcall	.+26     	; 0x102a <pow+0x82>
    1010:	0f 90       	pop	r0
    1012:	07 fc       	sbrc	r0, 7
    1014:	90 58       	subi	r25, 0x80	; 128
    1016:	08 95       	ret
    1018:	46 f0       	brts	.+16     	; 0x102a <pow+0x82>
    101a:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_nan>
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	80 e8       	ldi	r24, 0x80	; 128
    1024:	9f e3       	ldi	r25, 0x3F	; 63
    1026:	08 95       	ret
    1028:	4f e7       	ldi	r20, 0x7F	; 127
    102a:	9f 77       	andi	r25, 0x7F	; 127
    102c:	5f 93       	push	r21
    102e:	4f 93       	push	r20
    1030:	3f 93       	push	r19
    1032:	2f 93       	push	r18
    1034:	0e 94 69 09 	call	0x12d2	; 0x12d2 <log>
    1038:	2f 91       	pop	r18
    103a:	3f 91       	pop	r19
    103c:	4f 91       	pop	r20
    103e:	5f 91       	pop	r21
    1040:	0e 94 67 07 	call	0xece	; 0xece <__mulsf3>
    1044:	0c 94 96 08 	jmp	0x112c	; 0x112c <exp>

00001048 <round>:
    1048:	0e 94 41 07 	call	0xe82	; 0xe82 <__fp_splitA>
    104c:	e8 f0       	brcs	.+58     	; 0x1088 <round+0x40>
    104e:	9e 37       	cpi	r25, 0x7E	; 126
    1050:	e8 f0       	brcs	.+58     	; 0x108c <round+0x44>
    1052:	96 39       	cpi	r25, 0x96	; 150
    1054:	b8 f4       	brcc	.+46     	; 0x1084 <round+0x3c>
    1056:	9e 38       	cpi	r25, 0x8E	; 142
    1058:	48 f4       	brcc	.+18     	; 0x106c <round+0x24>
    105a:	67 2f       	mov	r22, r23
    105c:	78 2f       	mov	r23, r24
    105e:	88 27       	eor	r24, r24
    1060:	98 5f       	subi	r25, 0xF8	; 248
    1062:	f9 cf       	rjmp	.-14     	; 0x1056 <round+0xe>
    1064:	86 95       	lsr	r24
    1066:	77 95       	ror	r23
    1068:	67 95       	ror	r22
    106a:	93 95       	inc	r25
    106c:	95 39       	cpi	r25, 0x95	; 149
    106e:	d0 f3       	brcs	.-12     	; 0x1064 <round+0x1c>
    1070:	b6 2f       	mov	r27, r22
    1072:	b1 70       	andi	r27, 0x01	; 1
    1074:	6b 0f       	add	r22, r27
    1076:	71 1d       	adc	r23, r1
    1078:	81 1d       	adc	r24, r1
    107a:	20 f4       	brcc	.+8      	; 0x1084 <round+0x3c>
    107c:	87 95       	ror	r24
    107e:	77 95       	ror	r23
    1080:	67 95       	ror	r22
    1082:	93 95       	inc	r25
    1084:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__fp_mintl>
    1088:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__fp_mpack>
    108c:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_szero>
    1090:	19 f4       	brne	.+6      	; 0x1098 <round+0x50>
    1092:	16 f4       	brtc	.+4      	; 0x1098 <round+0x50>
    1094:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_nan>
    1098:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__fp_mpack>

0000109c <sqrt>:
    109c:	0e 94 41 07 	call	0xe82	; 0xe82 <__fp_splitA>
    10a0:	b8 f3       	brcs	.-18     	; 0x1090 <round+0x48>
    10a2:	99 23       	and	r25, r25
    10a4:	c9 f3       	breq	.-14     	; 0x1098 <round+0x50>
    10a6:	b6 f3       	brts	.-20     	; 0x1094 <round+0x4c>
    10a8:	9f 57       	subi	r25, 0x7F	; 127
    10aa:	55 0b       	sbc	r21, r21
    10ac:	87 ff       	sbrs	r24, 7
    10ae:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__fp_norm2>
    10b2:	00 24       	eor	r0, r0
    10b4:	a0 e6       	ldi	r26, 0x60	; 96
    10b6:	40 ea       	ldi	r20, 0xA0	; 160
    10b8:	90 01       	movw	r18, r0
    10ba:	80 58       	subi	r24, 0x80	; 128
    10bc:	56 95       	lsr	r21
    10be:	97 95       	ror	r25
    10c0:	28 f4       	brcc	.+10     	; 0x10cc <sqrt+0x30>
    10c2:	80 5c       	subi	r24, 0xC0	; 192
    10c4:	66 0f       	add	r22, r22
    10c6:	77 1f       	adc	r23, r23
    10c8:	88 1f       	adc	r24, r24
    10ca:	20 f0       	brcs	.+8      	; 0x10d4 <sqrt+0x38>
    10cc:	26 17       	cp	r18, r22
    10ce:	37 07       	cpc	r19, r23
    10d0:	48 07       	cpc	r20, r24
    10d2:	30 f4       	brcc	.+12     	; 0x10e0 <sqrt+0x44>
    10d4:	62 1b       	sub	r22, r18
    10d6:	73 0b       	sbc	r23, r19
    10d8:	84 0b       	sbc	r24, r20
    10da:	20 29       	or	r18, r0
    10dc:	31 29       	or	r19, r1
    10de:	4a 2b       	or	r20, r26
    10e0:	a6 95       	lsr	r26
    10e2:	17 94       	ror	r1
    10e4:	07 94       	ror	r0
    10e6:	20 25       	eor	r18, r0
    10e8:	31 25       	eor	r19, r1
    10ea:	4a 27       	eor	r20, r26
    10ec:	58 f7       	brcc	.-42     	; 0x10c4 <sqrt+0x28>
    10ee:	66 0f       	add	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	88 1f       	adc	r24, r24
    10f4:	20 f0       	brcs	.+8      	; 0x10fe <sqrt+0x62>
    10f6:	26 17       	cp	r18, r22
    10f8:	37 07       	cpc	r19, r23
    10fa:	48 07       	cpc	r20, r24
    10fc:	30 f4       	brcc	.+12     	; 0x110a <sqrt+0x6e>
    10fe:	62 0b       	sbc	r22, r18
    1100:	73 0b       	sbc	r23, r19
    1102:	84 0b       	sbc	r24, r20
    1104:	20 0d       	add	r18, r0
    1106:	31 1d       	adc	r19, r1
    1108:	41 1d       	adc	r20, r1
    110a:	a0 95       	com	r26
    110c:	81 f7       	brne	.-32     	; 0x10ee <sqrt+0x52>
    110e:	b9 01       	movw	r22, r18
    1110:	84 2f       	mov	r24, r20
    1112:	91 58       	subi	r25, 0x81	; 129
    1114:	88 0f       	add	r24, r24
    1116:	96 95       	lsr	r25
    1118:	87 95       	ror	r24
    111a:	08 95       	ret
    111c:	29 f4       	brne	.+10     	; 0x1128 <sqrt+0x8c>
    111e:	16 f0       	brts	.+4      	; 0x1124 <sqrt+0x88>
    1120:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_inf>
    1124:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__fp_zero>
    1128:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_nan>

0000112c <exp>:
    112c:	0e 94 41 07 	call	0xe82	; 0xe82 <__fp_splitA>
    1130:	a8 f3       	brcs	.-22     	; 0x111c <sqrt+0x80>
    1132:	96 38       	cpi	r25, 0x86	; 134
    1134:	a0 f7       	brcc	.-24     	; 0x111e <sqrt+0x82>
    1136:	07 f8       	bld	r0, 7
    1138:	0f 92       	push	r0
    113a:	e8 94       	clt
    113c:	2b e3       	ldi	r18, 0x3B	; 59
    113e:	3a ea       	ldi	r19, 0xAA	; 170
    1140:	48 eb       	ldi	r20, 0xB8	; 184
    1142:	5f e7       	ldi	r21, 0x7F	; 127
    1144:	0e 94 7d 07 	call	0xefa	; 0xefa <__mulsf3_pse>
    1148:	0f 92       	push	r0
    114a:	0f 92       	push	r0
    114c:	0f 92       	push	r0
    114e:	4d b7       	in	r20, 0x3d	; 61
    1150:	5e b7       	in	r21, 0x3e	; 62
    1152:	0f 92       	push	r0
    1154:	0e 94 b1 09 	call	0x1362	; 0x1362 <modf>
    1158:	e8 e6       	ldi	r30, 0x68	; 104
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__fp_powser>
    1160:	4f 91       	pop	r20
    1162:	5f 91       	pop	r21
    1164:	ef 91       	pop	r30
    1166:	ff 91       	pop	r31
    1168:	e5 95       	asr	r30
    116a:	ee 1f       	adc	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	49 f0       	breq	.+18     	; 0x1182 <exp+0x56>
    1170:	fe 57       	subi	r31, 0x7E	; 126
    1172:	e0 68       	ori	r30, 0x80	; 128
    1174:	44 27       	eor	r20, r20
    1176:	ee 0f       	add	r30, r30
    1178:	44 1f       	adc	r20, r20
    117a:	fa 95       	dec	r31
    117c:	e1 f7       	brne	.-8      	; 0x1176 <exp+0x4a>
    117e:	41 95       	neg	r20
    1180:	55 0b       	sbc	r21, r21
    1182:	0e 94 2b 09 	call	0x1256	; 0x1256 <ldexp>
    1186:	0f 90       	pop	r0
    1188:	07 fe       	sbrs	r0, 7
    118a:	0c 94 1f 09 	jmp	0x123e	; 0x123e <inverse>
    118e:	08 95       	ret

00001190 <__fp_mintl>:
    1190:	88 23       	and	r24, r24
    1192:	71 f4       	brne	.+28     	; 0x11b0 <__fp_mintl+0x20>
    1194:	77 23       	and	r23, r23
    1196:	21 f0       	breq	.+8      	; 0x11a0 <__fp_mintl+0x10>
    1198:	98 50       	subi	r25, 0x08	; 8
    119a:	87 2b       	or	r24, r23
    119c:	76 2f       	mov	r23, r22
    119e:	07 c0       	rjmp	.+14     	; 0x11ae <__fp_mintl+0x1e>
    11a0:	66 23       	and	r22, r22
    11a2:	11 f4       	brne	.+4      	; 0x11a8 <__fp_mintl+0x18>
    11a4:	99 27       	eor	r25, r25
    11a6:	0d c0       	rjmp	.+26     	; 0x11c2 <__fp_mintl+0x32>
    11a8:	90 51       	subi	r25, 0x10	; 16
    11aa:	86 2b       	or	r24, r22
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	2a f0       	brmi	.+10     	; 0x11bc <__fp_mintl+0x2c>
    11b2:	9a 95       	dec	r25
    11b4:	66 0f       	add	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	88 1f       	adc	r24, r24
    11ba:	da f7       	brpl	.-10     	; 0x11b2 <__fp_mintl+0x22>
    11bc:	88 0f       	add	r24, r24
    11be:	96 95       	lsr	r25
    11c0:	87 95       	ror	r24
    11c2:	97 f9       	bld	r25, 7
    11c4:	08 95       	ret

000011c6 <__fp_mpack>:
    11c6:	9f 3f       	cpi	r25, 0xFF	; 255
    11c8:	31 f0       	breq	.+12     	; 0x11d6 <__fp_mpack_finite+0xc>

000011ca <__fp_mpack_finite>:
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	20 f4       	brcc	.+8      	; 0x11d6 <__fp_mpack_finite+0xc>
    11ce:	87 95       	ror	r24
    11d0:	77 95       	ror	r23
    11d2:	67 95       	ror	r22
    11d4:	b7 95       	ror	r27
    11d6:	88 0f       	add	r24, r24
    11d8:	91 1d       	adc	r25, r1
    11da:	96 95       	lsr	r25
    11dc:	87 95       	ror	r24
    11de:	97 f9       	bld	r25, 7
    11e0:	08 95       	ret

000011e2 <__fp_norm2>:
    11e2:	91 50       	subi	r25, 0x01	; 1
    11e4:	50 40       	sbci	r21, 0x00	; 0
    11e6:	66 0f       	add	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	88 1f       	adc	r24, r24
    11ec:	d2 f7       	brpl	.-12     	; 0x11e2 <__fp_norm2>
    11ee:	08 95       	ret

000011f0 <__fp_powser>:
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	1f 93       	push	r17
    11f6:	0f 93       	push	r16
    11f8:	ff 92       	push	r15
    11fa:	ef 92       	push	r14
    11fc:	df 92       	push	r13
    11fe:	7b 01       	movw	r14, r22
    1200:	8c 01       	movw	r16, r24
    1202:	68 94       	set
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <__fp_powser+0x22>
    1206:	da 2e       	mov	r13, r26
    1208:	ef 01       	movw	r28, r30
    120a:	0e 94 7a 07 	call	0xef4	; 0xef4 <__mulsf3x>
    120e:	fe 01       	movw	r30, r28
    1210:	e8 94       	clt
    1212:	a5 91       	lpm	r26, Z+
    1214:	25 91       	lpm	r18, Z+
    1216:	35 91       	lpm	r19, Z+
    1218:	45 91       	lpm	r20, Z+
    121a:	55 91       	lpm	r21, Z+
    121c:	a6 f3       	brts	.-24     	; 0x1206 <__fp_powser+0x16>
    121e:	ef 01       	movw	r28, r30
    1220:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__addsf3x>
    1224:	fe 01       	movw	r30, r28
    1226:	97 01       	movw	r18, r14
    1228:	a8 01       	movw	r20, r16
    122a:	da 94       	dec	r13
    122c:	69 f7       	brne	.-38     	; 0x1208 <__fp_powser+0x18>
    122e:	df 90       	pop	r13
    1230:	ef 90       	pop	r14
    1232:	ff 90       	pop	r15
    1234:	0f 91       	pop	r16
    1236:	1f 91       	pop	r17
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <inverse>:
    123e:	9b 01       	movw	r18, r22
    1240:	ac 01       	movw	r20, r24
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	80 e8       	ldi	r24, 0x80	; 128
    1248:	9f e3       	ldi	r25, 0x3F	; 63
    124a:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__divsf3>
    124e:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_inf>
    1252:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__fp_mpack>

00001256 <ldexp>:
    1256:	0e 94 41 07 	call	0xe82	; 0xe82 <__fp_splitA>
    125a:	d8 f3       	brcs	.-10     	; 0x1252 <inverse+0x14>
    125c:	99 23       	and	r25, r25
    125e:	c9 f3       	breq	.-14     	; 0x1252 <inverse+0x14>
    1260:	94 0f       	add	r25, r20
    1262:	51 1d       	adc	r21, r1
    1264:	a3 f3       	brvs	.-24     	; 0x124e <inverse+0x10>
    1266:	91 50       	subi	r25, 0x01	; 1
    1268:	50 40       	sbci	r21, 0x00	; 0
    126a:	94 f0       	brlt	.+36     	; 0x1290 <ldexp+0x3a>
    126c:	59 f0       	breq	.+22     	; 0x1284 <ldexp+0x2e>
    126e:	88 23       	and	r24, r24
    1270:	32 f0       	brmi	.+12     	; 0x127e <ldexp+0x28>
    1272:	66 0f       	add	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	88 1f       	adc	r24, r24
    1278:	91 50       	subi	r25, 0x01	; 1
    127a:	50 40       	sbci	r21, 0x00	; 0
    127c:	c1 f7       	brne	.-16     	; 0x126e <ldexp+0x18>
    127e:	9e 3f       	cpi	r25, 0xFE	; 254
    1280:	51 05       	cpc	r21, r1
    1282:	2c f7       	brge	.-54     	; 0x124e <inverse+0x10>
    1284:	88 0f       	add	r24, r24
    1286:	91 1d       	adc	r25, r1
    1288:	96 95       	lsr	r25
    128a:	87 95       	ror	r24
    128c:	97 f9       	bld	r25, 7
    128e:	08 95       	ret
    1290:	5f 3f       	cpi	r21, 0xFF	; 255
    1292:	ac f0       	brlt	.+42     	; 0x12be <ldexp+0x68>
    1294:	98 3e       	cpi	r25, 0xE8	; 232
    1296:	9c f0       	brlt	.+38     	; 0x12be <ldexp+0x68>
    1298:	bb 27       	eor	r27, r27
    129a:	86 95       	lsr	r24
    129c:	77 95       	ror	r23
    129e:	67 95       	ror	r22
    12a0:	b7 95       	ror	r27
    12a2:	08 f4       	brcc	.+2      	; 0x12a6 <ldexp+0x50>
    12a4:	b1 60       	ori	r27, 0x01	; 1
    12a6:	93 95       	inc	r25
    12a8:	c1 f7       	brne	.-16     	; 0x129a <ldexp+0x44>
    12aa:	bb 0f       	add	r27, r27
    12ac:	58 f7       	brcc	.-42     	; 0x1284 <ldexp+0x2e>
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <ldexp+0x5e>
    12b0:	60 ff       	sbrs	r22, 0
    12b2:	e8 cf       	rjmp	.-48     	; 0x1284 <ldexp+0x2e>
    12b4:	6f 5f       	subi	r22, 0xFF	; 255
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	e3 cf       	rjmp	.-58     	; 0x1284 <ldexp+0x2e>
    12be:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_szero>
    12c2:	16 f0       	brts	.+4      	; 0x12c8 <ldexp+0x72>
    12c4:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__fp_mpack>
    12c8:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_nan>
    12cc:	68 94       	set
    12ce:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_inf>

000012d2 <log>:
    12d2:	0e 94 41 07 	call	0xe82	; 0xe82 <__fp_splitA>
    12d6:	a8 f3       	brcs	.-22     	; 0x12c2 <ldexp+0x6c>
    12d8:	99 23       	and	r25, r25
    12da:	c1 f3       	breq	.-16     	; 0x12cc <ldexp+0x76>
    12dc:	ae f3       	brts	.-22     	; 0x12c8 <ldexp+0x72>
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	1f 93       	push	r17
    12e4:	0f 93       	push	r16
    12e6:	ff 92       	push	r15
    12e8:	c9 2f       	mov	r28, r25
    12ea:	dd 27       	eor	r29, r29
    12ec:	88 23       	and	r24, r24
    12ee:	2a f0       	brmi	.+10     	; 0x12fa <log+0x28>
    12f0:	21 97       	sbiw	r28, 0x01	; 1
    12f2:	66 0f       	add	r22, r22
    12f4:	77 1f       	adc	r23, r23
    12f6:	88 1f       	adc	r24, r24
    12f8:	da f7       	brpl	.-10     	; 0x12f0 <log+0x1e>
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e8       	ldi	r20, 0x80	; 128
    1300:	5f eb       	ldi	r21, 0xBF	; 191
    1302:	9f e3       	ldi	r25, 0x3F	; 63
    1304:	88 39       	cpi	r24, 0x98	; 152
    1306:	20 f0       	brcs	.+8      	; 0x1310 <log+0x3e>
    1308:	80 3e       	cpi	r24, 0xE0	; 224
    130a:	38 f0       	brcs	.+14     	; 0x131a <log+0x48>
    130c:	21 96       	adiw	r28, 0x01	; 1
    130e:	8f 77       	andi	r24, 0x7F	; 127
    1310:	0e 94 97 05 	call	0xb2e	; 0xb2e <__addsf3>
    1314:	e0 e9       	ldi	r30, 0x90	; 144
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <log+0x50>
    131a:	0e 94 97 05 	call	0xb2e	; 0xb2e <__addsf3>
    131e:	ed eb       	ldi	r30, 0xBD	; 189
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__fp_powser>
    1326:	8b 01       	movw	r16, r22
    1328:	be 01       	movw	r22, r28
    132a:	ec 01       	movw	r28, r24
    132c:	fb 2e       	mov	r15, r27
    132e:	6f 57       	subi	r22, 0x7F	; 127
    1330:	71 09       	sbc	r23, r1
    1332:	75 95       	asr	r23
    1334:	77 1f       	adc	r23, r23
    1336:	88 0b       	sbc	r24, r24
    1338:	99 0b       	sbc	r25, r25
    133a:	0e 94 b2 06 	call	0xd64	; 0xd64 <__floatsisf>
    133e:	28 e1       	ldi	r18, 0x18	; 24
    1340:	32 e7       	ldi	r19, 0x72	; 114
    1342:	41 e3       	ldi	r20, 0x31	; 49
    1344:	5f e3       	ldi	r21, 0x3F	; 63
    1346:	0e 94 7a 07 	call	0xef4	; 0xef4 <__mulsf3x>
    134a:	af 2d       	mov	r26, r15
    134c:	98 01       	movw	r18, r16
    134e:	ae 01       	movw	r20, r28
    1350:	ff 90       	pop	r15
    1352:	0f 91       	pop	r16
    1354:	1f 91       	pop	r17
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__addsf3x>
    135e:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_round>

00001362 <modf>:
    1362:	fa 01       	movw	r30, r20
    1364:	dc 01       	movw	r26, r24
    1366:	aa 0f       	add	r26, r26
    1368:	bb 1f       	adc	r27, r27
    136a:	9b 01       	movw	r18, r22
    136c:	ac 01       	movw	r20, r24
    136e:	bf 57       	subi	r27, 0x7F	; 127
    1370:	28 f4       	brcc	.+10     	; 0x137c <modf+0x1a>
    1372:	22 27       	eor	r18, r18
    1374:	33 27       	eor	r19, r19
    1376:	44 27       	eor	r20, r20
    1378:	50 78       	andi	r21, 0x80	; 128
    137a:	20 c0       	rjmp	.+64     	; 0x13bc <modf+0x5a>
    137c:	b7 51       	subi	r27, 0x17	; 23
    137e:	90 f4       	brcc	.+36     	; 0x13a4 <modf+0x42>
    1380:	ab 2f       	mov	r26, r27
    1382:	00 24       	eor	r0, r0
    1384:	46 95       	lsr	r20
    1386:	37 95       	ror	r19
    1388:	27 95       	ror	r18
    138a:	01 1c       	adc	r0, r1
    138c:	a3 95       	inc	r26
    138e:	d2 f3       	brmi	.-12     	; 0x1384 <modf+0x22>
    1390:	00 20       	and	r0, r0
    1392:	71 f0       	breq	.+28     	; 0x13b0 <modf+0x4e>
    1394:	22 0f       	add	r18, r18
    1396:	33 1f       	adc	r19, r19
    1398:	44 1f       	adc	r20, r20
    139a:	b3 95       	inc	r27
    139c:	da f3       	brmi	.-10     	; 0x1394 <modf+0x32>
    139e:	0e d0       	rcall	.+28     	; 0x13bc <modf+0x5a>
    13a0:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__subsf3>
    13a4:	61 30       	cpi	r22, 0x01	; 1
    13a6:	71 05       	cpc	r23, r1
    13a8:	a0 e8       	ldi	r26, 0x80	; 128
    13aa:	8a 07       	cpc	r24, r26
    13ac:	b9 46       	sbci	r27, 0x69	; 105
    13ae:	30 f4       	brcc	.+12     	; 0x13bc <modf+0x5a>
    13b0:	9b 01       	movw	r18, r22
    13b2:	ac 01       	movw	r20, r24
    13b4:	66 27       	eor	r22, r22
    13b6:	77 27       	eor	r23, r23
    13b8:	88 27       	eor	r24, r24
    13ba:	90 78       	andi	r25, 0x80	; 128
    13bc:	30 96       	adiw	r30, 0x00	; 0
    13be:	21 f0       	breq	.+8      	; 0x13c8 <modf+0x66>
    13c0:	20 83       	st	Z, r18
    13c2:	31 83       	std	Z+1, r19	; 0x01
    13c4:	42 83       	std	Z+2, r20	; 0x02
    13c6:	53 83       	std	Z+3, r21	; 0x03
    13c8:	08 95       	ret

000013ca <__udivmodsi4>:
    13ca:	a1 e2       	ldi	r26, 0x21	; 33
    13cc:	1a 2e       	mov	r1, r26
    13ce:	aa 1b       	sub	r26, r26
    13d0:	bb 1b       	sub	r27, r27
    13d2:	fd 01       	movw	r30, r26
    13d4:	0d c0       	rjmp	.+26     	; 0x13f0 <__udivmodsi4_ep>

000013d6 <__udivmodsi4_loop>:
    13d6:	aa 1f       	adc	r26, r26
    13d8:	bb 1f       	adc	r27, r27
    13da:	ee 1f       	adc	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	a2 17       	cp	r26, r18
    13e0:	b3 07       	cpc	r27, r19
    13e2:	e4 07       	cpc	r30, r20
    13e4:	f5 07       	cpc	r31, r21
    13e6:	20 f0       	brcs	.+8      	; 0x13f0 <__udivmodsi4_ep>
    13e8:	a2 1b       	sub	r26, r18
    13ea:	b3 0b       	sbc	r27, r19
    13ec:	e4 0b       	sbc	r30, r20
    13ee:	f5 0b       	sbc	r31, r21

000013f0 <__udivmodsi4_ep>:
    13f0:	66 1f       	adc	r22, r22
    13f2:	77 1f       	adc	r23, r23
    13f4:	88 1f       	adc	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	1a 94       	dec	r1
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <__udivmodsi4_loop>
    13fc:	60 95       	com	r22
    13fe:	70 95       	com	r23
    1400:	80 95       	com	r24
    1402:	90 95       	com	r25
    1404:	9b 01       	movw	r18, r22
    1406:	ac 01       	movw	r20, r24
    1408:	bd 01       	movw	r22, r26
    140a:	cf 01       	movw	r24, r30
    140c:	08 95       	ret

0000140e <__umulhisi3>:
    140e:	a2 9f       	mul	r26, r18
    1410:	b0 01       	movw	r22, r0
    1412:	b3 9f       	mul	r27, r19
    1414:	c0 01       	movw	r24, r0
    1416:	a3 9f       	mul	r26, r19
    1418:	70 0d       	add	r23, r0
    141a:	81 1d       	adc	r24, r1
    141c:	11 24       	eor	r1, r1
    141e:	91 1d       	adc	r25, r1
    1420:	b2 9f       	mul	r27, r18
    1422:	70 0d       	add	r23, r0
    1424:	81 1d       	adc	r24, r1
    1426:	11 24       	eor	r1, r1
    1428:	91 1d       	adc	r25, r1
    142a:	08 95       	ret

0000142c <_exit>:
    142c:	f8 94       	cli

0000142e <__stop_program>:
    142e:	ff cf       	rjmp	.-2      	; 0x142e <__stop_program>
