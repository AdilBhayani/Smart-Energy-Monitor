
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00001742  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001742  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c35  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000408  00000000  00000000  000024b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ab  00000000  00000000  000028b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00003164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e9  00000000  00000000  000033e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe2  00000000  00000000  000037cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000047af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__vector_1>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__vector_11>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <voltage_real+0x60>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
      f6:	21 e0       	ldi	r18, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a2 30       	cpi	r26, 0x02	; 2
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 8b 04 	call	0x916	; 0x916 <main>
     10a:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <uart_init>:

 //Approximates a data value based on the two nearest data points
 float linearApproximate(float higher, float lower) {
	float approximation = (higher + lower) / 2;
	return approximation;
 }
     112:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     116:	87 e6       	ldi	r24, 0x67	; 103
     118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     11c:	e1 ec       	ldi	r30, 0xC1	; 193
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	88 60       	ori	r24, 0x08	; 8
     124:	80 83       	st	Z, r24
     126:	e2 ec       	ldi	r30, 0xC2	; 194
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	86 60       	ori	r24, 0x06	; 6
     12e:	80 83       	st	Z, r24
     130:	08 95       	ret

00000132 <uart_transmit>:
     132:	e0 ec       	ldi	r30, 0xC0	; 192
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	90 81       	ld	r25, Z
     138:	99 23       	and	r25, r25
     13a:	e9 f3       	breq	.-6      	; 0x136 <uart_transmit+0x4>
     13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     140:	08 95       	ret

00000142 <timer0_init>:
     142:	85 b5       	in	r24, 0x25	; 37
     144:	85 60       	ori	r24, 0x05	; 5
     146:	85 bd       	out	0x25, r24	; 37
     148:	16 bc       	out	0x26, r1	; 38
     14a:	08 95       	ret

0000014c <timer1_init>:
     14c:	88 e0       	ldi	r24, 0x08	; 8
     14e:	9d e3       	ldi	r25, 0x3D	; 61
     150:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     154:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     158:	e1 e8       	ldi	r30, 0x81	; 129
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	88 60       	ori	r24, 0x08	; 8
     160:	80 83       	st	Z, r24
     162:	af e6       	ldi	r26, 0x6F	; 111
     164:	b0 e0       	ldi	r27, 0x00	; 0
     166:	8c 91       	ld	r24, X
     168:	82 60       	ori	r24, 0x02	; 2
     16a:	8c 93       	st	X, r24
     16c:	80 81       	ld	r24, Z
     16e:	85 60       	ori	r24, 0x05	; 5
     170:	80 83       	st	Z, r24
     172:	08 95       	ret

00000174 <int_init>:
     174:	e9 e6       	ldi	r30, 0x69	; 105
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 81       	ld	r24, Z
     17a:	83 60       	ori	r24, 0x03	; 3
     17c:	80 83       	st	Z, r24
     17e:	e8 9a       	sbi	0x1d, 0	; 29
     180:	08 95       	ret

00000182 <find_decimal>:
     182:	cf 92       	push	r12
     184:	df 92       	push	r13
     186:	ef 92       	push	r14
     188:	ff 92       	push	r15
     18a:	6b 01       	movw	r12, r22
     18c:	7c 01       	movw	r14, r24
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	40 e2       	ldi	r20, 0x20	; 32
     194:	51 e4       	ldi	r21, 0x41	; 65
     196:	0e 94 52 07 	call	0xea4	; 0xea4 <__cmpsf2>
     19a:	88 23       	and	r24, r24
     19c:	b4 f0       	brlt	.+44     	; 0x1ca <find_decimal+0x48>
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	48 ec       	ldi	r20, 0xC8	; 200
     1a4:	52 e4       	ldi	r21, 0x42	; 66
     1a6:	c7 01       	movw	r24, r14
     1a8:	b6 01       	movw	r22, r12
     1aa:	0e 94 52 07 	call	0xea4	; 0xea4 <__cmpsf2>
     1ae:	08 2e       	mov	r0, r24
     1b0:	00 0c       	add	r0, r0
     1b2:	99 0b       	sbc	r25, r25
     1b4:	88 27       	eor	r24, r24
     1b6:	99 0f       	add	r25, r25
     1b8:	88 1f       	adc	r24, r24
     1ba:	99 27       	eor	r25, r25
     1bc:	22 e0       	ldi	r18, 0x02	; 2
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	a9 01       	movw	r20, r18
     1c2:	48 1b       	sub	r20, r24
     1c4:	59 0b       	sbc	r21, r25
     1c6:	ca 01       	movw	r24, r20
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <find_decimal+0x4c>
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	df 90       	pop	r13
     1d4:	cf 90       	pop	r12
     1d6:	08 95       	ret

000001d8 <wololo>:
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	41 30       	cpi	r20, 0x01	; 1
     1dc:	09 f4       	brne	.+2      	; 0x1e0 <wololo+0x8>
     1de:	40 96       	adiw	r24, 0x10	; 16
     1e0:	61 11       	cpse	r22, r1
     1e2:	03 c0       	rjmp	.+6      	; 0x1ea <wololo+0x12>
     1e4:	80 5a       	subi	r24, 0xA0	; 160
     1e6:	9f 4f       	sbci	r25, 0xFF	; 255
     1e8:	08 95       	ret
     1ea:	61 30       	cpi	r22, 0x01	; 1
     1ec:	19 f4       	brne	.+6      	; 0x1f4 <wololo+0x1c>
     1ee:	80 5c       	subi	r24, 0xC0	; 192
     1f0:	9f 4f       	sbci	r25, 0xFF	; 255
     1f2:	08 95       	ret
     1f4:	62 30       	cpi	r22, 0x02	; 2
     1f6:	09 f4       	brne	.+2      	; 0x1fa <wololo+0x22>
     1f8:	80 96       	adiw	r24, 0x20	; 32
     1fa:	08 95       	ret

000001fc <calcPower>:
     1fc:	4f 92       	push	r4
     1fe:	5f 92       	push	r5
     200:	6f 92       	push	r6
     202:	7f 92       	push	r7
     204:	8f 92       	push	r8
     206:	9f 92       	push	r9
     208:	af 92       	push	r10
     20a:	bf 92       	push	r11
     20c:	cf 92       	push	r12
     20e:	df 92       	push	r13
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	c8 5e       	subi	r28, 0xE8	; 232
     222:	d1 09       	sbc	r29, r1
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	fe 01       	movw	r30, r28
     230:	31 96       	adiw	r30, 0x01	; 1
     232:	e6 2e       	mov	r14, r22
     234:	f7 2e       	mov	r15, r23
     236:	9e 01       	movw	r18, r28
     238:	27 5d       	subi	r18, 0xD7	; 215
     23a:	3f 4f       	sbci	r19, 0xFF	; 255
     23c:	89 01       	movw	r16, r18
     23e:	dc 01       	movw	r26, r24
     240:	4d 91       	ld	r20, X+
     242:	5d 91       	ld	r21, X+
     244:	6d 91       	ld	r22, X+
     246:	7d 91       	ld	r23, X+
     248:	cd 01       	movw	r24, r26
     24a:	41 93       	st	Z+, r20
     24c:	51 93       	st	Z+, r21
     24e:	61 93       	st	Z+, r22
     250:	71 93       	st	Z+, r23
     252:	d7 01       	movw	r26, r14
     254:	4d 91       	ld	r20, X+
     256:	5d 91       	ld	r21, X+
     258:	6d 91       	ld	r22, X+
     25a:	7d 91       	ld	r23, X+
     25c:	7d 01       	movw	r14, r26
     25e:	d9 01       	movw	r26, r18
     260:	4d 93       	st	X+, r20
     262:	5d 93       	st	X+, r21
     264:	6d 93       	st	X+, r22
     266:	7d 93       	st	X+, r23
     268:	9d 01       	movw	r18, r26
     26a:	e0 17       	cp	r30, r16
     26c:	f1 07       	cpc	r31, r17
     26e:	39 f7       	brne	.-50     	; 0x23e <calcPower+0x42>
     270:	4e 01       	movw	r8, r28
     272:	bd e9       	ldi	r27, 0x9D	; 157
     274:	8b 0e       	add	r8, r27
     276:	91 1c       	adc	r9, r1
     278:	7e 01       	movw	r14, r28
     27a:	e1 e5       	ldi	r30, 0x51	; 81
     27c:	ee 0e       	add	r14, r30
     27e:	f1 1c       	adc	r15, r1
     280:	57 01       	movw	r10, r14
     282:	64 01       	movw	r12, r8
     284:	00 e0       	ldi	r16, 0x00	; 0
     286:	10 e0       	ldi	r17, 0x00	; 0
     288:	38 01       	movw	r6, r16
     28a:	00 fd       	sbrc	r16, 0
     28c:	61 c0       	rjmp	.+194    	; 0x350 <calcPower+0x154>
     28e:	c8 01       	movw	r24, r16
     290:	11 23       	and	r17, r17
     292:	0c f4       	brge	.+2      	; 0x296 <calcPower+0x9a>
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	fc 01       	movw	r30, r24
     29c:	ee 0f       	add	r30, r30
     29e:	ff 1f       	adc	r31, r31
     2a0:	ee 0f       	add	r30, r30
     2a2:	ff 1f       	adc	r31, r31
     2a4:	21 e0       	ldi	r18, 0x01	; 1
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	2c 0f       	add	r18, r28
     2aa:	3d 1f       	adc	r19, r29
     2ac:	e2 0f       	add	r30, r18
     2ae:	f3 1f       	adc	r31, r19
     2b0:	40 81       	ld	r20, Z
     2b2:	51 81       	ldd	r21, Z+1	; 0x01
     2b4:	62 81       	ldd	r22, Z+2	; 0x02
     2b6:	73 81       	ldd	r23, Z+3	; 0x03
     2b8:	d5 01       	movw	r26, r10
     2ba:	4d 93       	st	X+, r20
     2bc:	5d 93       	st	X+, r21
     2be:	6d 93       	st	X+, r22
     2c0:	7c 93       	st	X, r23
     2c2:	13 97       	sbiw	r26, 0x03	; 3
     2c4:	01 15       	cp	r16, r1
     2c6:	11 05       	cpc	r17, r1
     2c8:	19 f0       	breq	.+6      	; 0x2d0 <calcPower+0xd4>
     2ca:	02 31       	cpi	r16, 0x12	; 18
     2cc:	11 05       	cpc	r17, r1
     2ce:	a1 f4       	brne	.+40     	; 0x2f8 <calcPower+0xfc>
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	88 0f       	add	r24, r24
     2d6:	99 1f       	adc	r25, r25
     2d8:	e1 e0       	ldi	r30, 0x01	; 1
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	ec 0f       	add	r30, r28
     2de:	fd 1f       	adc	r31, r29
     2e0:	e8 0f       	add	r30, r24
     2e2:	f9 1f       	adc	r31, r25
     2e4:	80 a5       	ldd	r24, Z+40	; 0x28
     2e6:	91 a5       	ldd	r25, Z+41	; 0x29
     2e8:	a2 a5       	ldd	r26, Z+42	; 0x2a
     2ea:	b3 a5       	ldd	r27, Z+43	; 0x2b
     2ec:	f6 01       	movw	r30, r12
     2ee:	80 83       	st	Z, r24
     2f0:	91 83       	std	Z+1, r25	; 0x01
     2f2:	a2 83       	std	Z+2, r26	; 0x02
     2f4:	b3 83       	std	Z+3, r27	; 0x03
     2f6:	7e c0       	rjmp	.+252    	; 0x3f4 <calcPower+0x1f8>
     2f8:	dc 01       	movw	r26, r24
     2fa:	11 97       	sbiw	r26, 0x01	; 1
     2fc:	aa 0f       	add	r26, r26
     2fe:	bb 1f       	adc	r27, r27
     300:	aa 0f       	add	r26, r26
     302:	bb 1f       	adc	r27, r27
     304:	21 e0       	ldi	r18, 0x01	; 1
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	2c 0f       	add	r18, r28
     30a:	3d 1f       	adc	r19, r29
     30c:	a2 0f       	add	r26, r18
     30e:	b3 1f       	adc	r27, r19
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	f9 01       	movw	r30, r18
     31a:	e8 0f       	add	r30, r24
     31c:	f9 1f       	adc	r31, r25
     31e:	20 a5       	ldd	r18, Z+40	; 0x28
     320:	31 a5       	ldd	r19, Z+41	; 0x29
     322:	42 a5       	ldd	r20, Z+42	; 0x2a
     324:	53 a5       	ldd	r21, Z+43	; 0x2b
     326:	98 96       	adiw	r26, 0x28	; 40
     328:	6d 91       	ld	r22, X+
     32a:	7d 91       	ld	r23, X+
     32c:	8d 91       	ld	r24, X+
     32e:	9c 91       	ld	r25, X
     330:	9b 97       	sbiw	r26, 0x2b	; 43
     332:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__addsf3>
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	5f e3       	ldi	r21, 0x3F	; 63
     33e:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     342:	d6 01       	movw	r26, r12
     344:	6d 93       	st	X+, r22
     346:	7d 93       	st	X+, r23
     348:	8d 93       	st	X+, r24
     34a:	9c 93       	st	X, r25
     34c:	13 97       	sbiw	r26, 0x03	; 3
     34e:	52 c0       	rjmp	.+164    	; 0x3f4 <calcPower+0x1f8>
     350:	98 01       	movw	r18, r16
     352:	2f 5f       	subi	r18, 0xFF	; 255
     354:	3f 4f       	sbci	r19, 0xFF	; 255
     356:	c9 01       	movw	r24, r18
     358:	99 23       	and	r25, r25
     35a:	0c f4       	brge	.+2      	; 0x35e <calcPower+0x162>
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	95 95       	asr	r25
     360:	87 95       	ror	r24
     362:	dc 01       	movw	r26, r24
     364:	11 97       	sbiw	r26, 0x01	; 1
     366:	aa 0f       	add	r26, r26
     368:	bb 1f       	adc	r27, r27
     36a:	aa 0f       	add	r26, r26
     36c:	bb 1f       	adc	r27, r27
     36e:	e1 e0       	ldi	r30, 0x01	; 1
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	ec 0f       	add	r30, r28
     374:	fd 1f       	adc	r31, r29
     376:	ae 0f       	add	r26, r30
     378:	bf 1f       	adc	r27, r31
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	88 0f       	add	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	e1 e0       	ldi	r30, 0x01	; 1
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	ec 0f       	add	r30, r28
     388:	fd 1f       	adc	r31, r29
     38a:	e8 0f       	add	r30, r24
     38c:	f9 1f       	adc	r31, r25
     38e:	20 81       	ld	r18, Z
     390:	31 81       	ldd	r19, Z+1	; 0x01
     392:	42 81       	ldd	r20, Z+2	; 0x02
     394:	53 81       	ldd	r21, Z+3	; 0x03
     396:	6d 91       	ld	r22, X+
     398:	7d 91       	ld	r23, X+
     39a:	8d 91       	ld	r24, X+
     39c:	9c 91       	ld	r25, X
     39e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__addsf3>
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	5f e3       	ldi	r21, 0x3F	; 63
     3aa:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     3ae:	d5 01       	movw	r26, r10
     3b0:	6d 93       	st	X+, r22
     3b2:	7d 93       	st	X+, r23
     3b4:	8d 93       	st	X+, r24
     3b6:	9c 93       	st	X, r25
     3b8:	13 97       	sbiw	r26, 0x03	; 3
     3ba:	b1 e0       	ldi	r27, 0x01	; 1
     3bc:	6b 1a       	sub	r6, r27
     3be:	71 08       	sbc	r7, r1
     3c0:	c3 01       	movw	r24, r6
     3c2:	99 23       	and	r25, r25
     3c4:	0c f4       	brge	.+2      	; 0x3c8 <calcPower+0x1cc>
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	fc 01       	movw	r30, r24
     3ca:	f5 95       	asr	r31
     3cc:	e7 95       	ror	r30
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	ee 0f       	add	r30, r30
     3d4:	ff 1f       	adc	r31, r31
     3d6:	21 e0       	ldi	r18, 0x01	; 1
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	2c 0f       	add	r18, r28
     3dc:	3d 1f       	adc	r19, r29
     3de:	e2 0f       	add	r30, r18
     3e0:	f3 1f       	adc	r31, r19
     3e2:	80 a5       	ldd	r24, Z+40	; 0x28
     3e4:	91 a5       	ldd	r25, Z+41	; 0x29
     3e6:	a2 a5       	ldd	r26, Z+42	; 0x2a
     3e8:	b3 a5       	ldd	r27, Z+43	; 0x2b
     3ea:	f6 01       	movw	r30, r12
     3ec:	80 83       	st	Z, r24
     3ee:	91 83       	std	Z+1, r25	; 0x01
     3f0:	a2 83       	std	Z+2, r26	; 0x02
     3f2:	b3 83       	std	Z+3, r27	; 0x03
     3f4:	0f 5f       	subi	r16, 0xFF	; 255
     3f6:	1f 4f       	sbci	r17, 0xFF	; 255
     3f8:	f4 e0       	ldi	r31, 0x04	; 4
     3fa:	cf 0e       	add	r12, r31
     3fc:	d1 1c       	adc	r13, r1
     3fe:	24 e0       	ldi	r18, 0x04	; 4
     400:	a2 0e       	add	r10, r18
     402:	b1 1c       	adc	r11, r1
     404:	03 31       	cpi	r16, 0x13	; 19
     406:	11 05       	cpc	r17, r1
     408:	09 f0       	breq	.+2      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
     40a:	3e cf       	rjmp	.-388    	; 0x288 <calcPower+0x8c>
     40c:	8e 01       	movw	r16, r28
     40e:	03 56       	subi	r16, 0x63	; 99
     410:	1f 4f       	sbci	r17, 0xFF	; 255
     412:	41 2c       	mov	r4, r1
     414:	51 2c       	mov	r5, r1
     416:	32 01       	movw	r6, r4
     418:	d7 01       	movw	r26, r14
     41a:	6d 91       	ld	r22, X+
     41c:	7d 91       	ld	r23, X+
     41e:	8d 91       	ld	r24, X+
     420:	9d 91       	ld	r25, X+
     422:	7d 01       	movw	r14, r26
     424:	f4 01       	movw	r30, r8
     426:	21 91       	ld	r18, Z+
     428:	31 91       	ld	r19, Z+
     42a:	41 91       	ld	r20, Z+
     42c:	51 91       	ld	r21, Z+
     42e:	4f 01       	movw	r8, r30
     430:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	48 e5       	ldi	r20, 0x58	; 88
     43a:	51 e4       	ldi	r21, 0x41	; 65
     43c:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     440:	9b 01       	movw	r18, r22
     442:	ac 01       	movw	r20, r24
     444:	c3 01       	movw	r24, r6
     446:	b2 01       	movw	r22, r4
     448:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__addsf3>
     44c:	2b 01       	movw	r4, r22
     44e:	3c 01       	movw	r6, r24
     450:	e0 16       	cp	r14, r16
     452:	f1 06       	cpc	r15, r17
     454:	09 f7       	brne	.-62     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	48 e9       	ldi	r20, 0x98	; 152
     45c:	51 e4       	ldi	r21, 0x41	; 65
     45e:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
     462:	c8 51       	subi	r28, 0x18	; 24
     464:	df 4f       	sbci	r29, 0xFF	; 255
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	ff 90       	pop	r15
     47a:	ef 90       	pop	r14
     47c:	df 90       	pop	r13
     47e:	cf 90       	pop	r12
     480:	bf 90       	pop	r11
     482:	af 90       	pop	r10
     484:	9f 90       	pop	r9
     486:	8f 90       	pop	r8
     488:	7f 90       	pop	r7
     48a:	6f 90       	pop	r6
     48c:	5f 90       	pop	r5
     48e:	4f 90       	pop	r4
     490:	08 95       	ret

00000492 <calcVoltageRMS>:
     492:	8f 92       	push	r8
     494:	9f 92       	push	r9
     496:	af 92       	push	r10
     498:	bf 92       	push	r11
     49a:	cf 92       	push	r12
     49c:	df 92       	push	r13
     49e:	ef 92       	push	r14
     4a0:	ff 92       	push	r15
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	c4 57       	subi	r28, 0x74	; 116
     4b0:	d1 09       	sbc	r29, r1
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	fc 01       	movw	r30, r24
     4be:	de 01       	movw	r26, r28
     4c0:	11 96       	adiw	r26, 0x01	; 1
     4c2:	88 96       	adiw	r24, 0x28	; 40
     4c4:	41 91       	ld	r20, Z+
     4c6:	51 91       	ld	r21, Z+
     4c8:	61 91       	ld	r22, Z+
     4ca:	71 91       	ld	r23, Z+
     4cc:	4d 93       	st	X+, r20
     4ce:	5d 93       	st	X+, r21
     4d0:	6d 93       	st	X+, r22
     4d2:	7d 93       	st	X+, r23
     4d4:	e8 17       	cp	r30, r24
     4d6:	f9 07       	cpc	r31, r25
     4d8:	a9 f7       	brne	.-22     	; 0x4c4 <calcVoltageRMS+0x32>
     4da:	7e 01       	movw	r14, r28
     4dc:	29 e2       	ldi	r18, 0x29	; 41
     4de:	e2 0e       	add	r14, r18
     4e0:	f1 1c       	adc	r15, r1
     4e2:	67 01       	movw	r12, r14
     4e4:	00 e0       	ldi	r16, 0x00	; 0
     4e6:	10 e0       	ldi	r17, 0x00	; 0
     4e8:	00 fd       	sbrc	r16, 0
     4ea:	1b c0       	rjmp	.+54     	; 0x522 <calcVoltageRMS+0x90>
     4ec:	c8 01       	movw	r24, r16
     4ee:	11 23       	and	r17, r17
     4f0:	0c f4       	brge	.+2      	; 0x4f4 <calcVoltageRMS+0x62>
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	fc 01       	movw	r30, r24
     4f6:	f5 95       	asr	r31
     4f8:	e7 95       	ror	r30
     4fa:	ee 0f       	add	r30, r30
     4fc:	ff 1f       	adc	r31, r31
     4fe:	ee 0f       	add	r30, r30
     500:	ff 1f       	adc	r31, r31
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	8c 0f       	add	r24, r28
     508:	9d 1f       	adc	r25, r29
     50a:	e8 0f       	add	r30, r24
     50c:	f9 1f       	adc	r31, r25
     50e:	80 81       	ld	r24, Z
     510:	91 81       	ldd	r25, Z+1	; 0x01
     512:	a2 81       	ldd	r26, Z+2	; 0x02
     514:	b3 81       	ldd	r27, Z+3	; 0x03
     516:	f6 01       	movw	r30, r12
     518:	80 83       	st	Z, r24
     51a:	91 83       	std	Z+1, r25	; 0x01
     51c:	a2 83       	std	Z+2, r26	; 0x02
     51e:	b3 83       	std	Z+3, r27	; 0x03
     520:	31 c0       	rjmp	.+98     	; 0x584 <calcVoltageRMS+0xf2>
     522:	98 01       	movw	r18, r16
     524:	2f 5f       	subi	r18, 0xFF	; 255
     526:	3f 4f       	sbci	r19, 0xFF	; 255
     528:	c9 01       	movw	r24, r18
     52a:	99 23       	and	r25, r25
     52c:	0c f4       	brge	.+2      	; 0x530 <calcVoltageRMS+0x9e>
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	95 95       	asr	r25
     532:	87 95       	ror	r24
     534:	dc 01       	movw	r26, r24
     536:	11 97       	sbiw	r26, 0x01	; 1
     538:	aa 0f       	add	r26, r26
     53a:	bb 1f       	adc	r27, r27
     53c:	aa 0f       	add	r26, r26
     53e:	bb 1f       	adc	r27, r27
     540:	21 e0       	ldi	r18, 0x01	; 1
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	2c 0f       	add	r18, r28
     546:	3d 1f       	adc	r19, r29
     548:	a2 0f       	add	r26, r18
     54a:	b3 1f       	adc	r27, r19
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	f9 01       	movw	r30, r18
     556:	e8 0f       	add	r30, r24
     558:	f9 1f       	adc	r31, r25
     55a:	20 81       	ld	r18, Z
     55c:	31 81       	ldd	r19, Z+1	; 0x01
     55e:	42 81       	ldd	r20, Z+2	; 0x02
     560:	53 81       	ldd	r21, Z+3	; 0x03
     562:	6d 91       	ld	r22, X+
     564:	7d 91       	ld	r23, X+
     566:	8d 91       	ld	r24, X+
     568:	9c 91       	ld	r25, X
     56a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__addsf3>
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 e0       	ldi	r20, 0x00	; 0
     574:	5f e3       	ldi	r21, 0x3F	; 63
     576:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     57a:	f6 01       	movw	r30, r12
     57c:	60 83       	st	Z, r22
     57e:	71 83       	std	Z+1, r23	; 0x01
     580:	82 83       	std	Z+2, r24	; 0x02
     582:	93 83       	std	Z+3, r25	; 0x03
     584:	0f 5f       	subi	r16, 0xFF	; 255
     586:	1f 4f       	sbci	r17, 0xFF	; 255
     588:	f4 e0       	ldi	r31, 0x04	; 4
     58a:	cf 0e       	add	r12, r31
     58c:	d1 1c       	adc	r13, r1
     58e:	03 31       	cpi	r16, 0x13	; 19
     590:	11 05       	cpc	r17, r1
     592:	09 f0       	breq	.+2      	; 0x596 <calcVoltageRMS+0x104>
     594:	a9 cf       	rjmp	.-174    	; 0x4e8 <calcVoltageRMS+0x56>
     596:	8e 01       	movw	r16, r28
     598:	0b 58       	subi	r16, 0x8B	; 139
     59a:	1f 4f       	sbci	r17, 0xFF	; 255
     59c:	81 2c       	mov	r8, r1
     59e:	91 2c       	mov	r9, r1
     5a0:	54 01       	movw	r10, r8
     5a2:	f7 01       	movw	r30, r14
     5a4:	61 91       	ld	r22, Z+
     5a6:	71 91       	ld	r23, Z+
     5a8:	81 91       	ld	r24, Z+
     5aa:	91 91       	ld	r25, Z+
     5ac:	7f 01       	movw	r14, r30
     5ae:	9b 01       	movw	r18, r22
     5b0:	ac 01       	movw	r20, r24
     5b2:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     5b6:	9b 01       	movw	r18, r22
     5b8:	ac 01       	movw	r20, r24
     5ba:	c5 01       	movw	r24, r10
     5bc:	b4 01       	movw	r22, r8
     5be:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__addsf3>
     5c2:	4b 01       	movw	r8, r22
     5c4:	5c 01       	movw	r10, r24
     5c6:	e0 16       	cp	r14, r16
     5c8:	f1 06       	cpc	r15, r17
     5ca:	59 f7       	brne	.-42     	; 0x5a2 <calcVoltageRMS+0x110>
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	48 e9       	ldi	r20, 0x98	; 152
     5d2:	51 e4       	ldi	r21, 0x41	; 65
     5d4:	c5 01       	movw	r24, r10
     5d6:	b4 01       	movw	r22, r8
     5d8:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
     5dc:	0e 94 9d 09 	call	0x133a	; 0x133a <sqrt>
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	48 e5       	ldi	r20, 0x58	; 88
     5e6:	51 e4       	ldi	r21, 0x41	; 65
     5e8:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     5ec:	cc 58       	subi	r28, 0x8C	; 140
     5ee:	df 4f       	sbci	r29, 0xFF	; 255
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	bf 90       	pop	r11
     60c:	af 90       	pop	r10
     60e:	9f 90       	pop	r9
     610:	8f 90       	pop	r8
     612:	08 95       	ret

00000614 <calcCurrentRMS>:
     614:	8f 92       	push	r8
     616:	9f 92       	push	r9
     618:	af 92       	push	r10
     61a:	bf 92       	push	r11
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	c4 57       	subi	r28, 0x74	; 116
     632:	d1 09       	sbc	r29, r1
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	fc 01       	movw	r30, r24
     640:	de 01       	movw	r26, r28
     642:	11 96       	adiw	r26, 0x01	; 1
     644:	88 96       	adiw	r24, 0x28	; 40
     646:	41 91       	ld	r20, Z+
     648:	51 91       	ld	r21, Z+
     64a:	61 91       	ld	r22, Z+
     64c:	71 91       	ld	r23, Z+
     64e:	4d 93       	st	X+, r20
     650:	5d 93       	st	X+, r21
     652:	6d 93       	st	X+, r22
     654:	7d 93       	st	X+, r23
     656:	e8 17       	cp	r30, r24
     658:	f9 07       	cpc	r31, r25
     65a:	a9 f7       	brne	.-22     	; 0x646 <calcCurrentRMS+0x32>
     65c:	7e 01       	movw	r14, r28
     65e:	29 e2       	ldi	r18, 0x29	; 41
     660:	e2 0e       	add	r14, r18
     662:	f1 1c       	adc	r15, r1
     664:	67 01       	movw	r12, r14
     666:	00 e0       	ldi	r16, 0x00	; 0
     668:	10 e0       	ldi	r17, 0x00	; 0
     66a:	00 fd       	sbrc	r16, 0
     66c:	50 c0       	rjmp	.+160    	; 0x70e <calcCurrentRMS+0xfa>
     66e:	01 15       	cp	r16, r1
     670:	11 05       	cpc	r17, r1
     672:	19 f0       	breq	.+6      	; 0x67a <calcCurrentRMS+0x66>
     674:	02 31       	cpi	r16, 0x12	; 18
     676:	11 05       	cpc	r17, r1
     678:	d9 f4       	brne	.+54     	; 0x6b0 <calcCurrentRMS+0x9c>
     67a:	c8 01       	movw	r24, r16
     67c:	11 23       	and	r17, r17
     67e:	0c f4       	brge	.+2      	; 0x682 <calcCurrentRMS+0x6e>
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	fc 01       	movw	r30, r24
     684:	f5 95       	asr	r31
     686:	e7 95       	ror	r30
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	8c 0f       	add	r24, r28
     696:	9d 1f       	adc	r25, r29
     698:	e8 0f       	add	r30, r24
     69a:	f9 1f       	adc	r31, r25
     69c:	80 81       	ld	r24, Z
     69e:	91 81       	ldd	r25, Z+1	; 0x01
     6a0:	a2 81       	ldd	r26, Z+2	; 0x02
     6a2:	b3 81       	ldd	r27, Z+3	; 0x03
     6a4:	f6 01       	movw	r30, r12
     6a6:	80 83       	st	Z, r24
     6a8:	91 83       	std	Z+1, r25	; 0x01
     6aa:	a2 83       	std	Z+2, r26	; 0x02
     6ac:	b3 83       	std	Z+3, r27	; 0x03
     6ae:	4c c0       	rjmp	.+152    	; 0x748 <calcCurrentRMS+0x134>
     6b0:	c8 01       	movw	r24, r16
     6b2:	11 23       	and	r17, r17
     6b4:	0c f4       	brge	.+2      	; 0x6b8 <calcCurrentRMS+0xa4>
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	95 95       	asr	r25
     6ba:	87 95       	ror	r24
     6bc:	dc 01       	movw	r26, r24
     6be:	11 97       	sbiw	r26, 0x01	; 1
     6c0:	aa 0f       	add	r26, r26
     6c2:	bb 1f       	adc	r27, r27
     6c4:	aa 0f       	add	r26, r26
     6c6:	bb 1f       	adc	r27, r27
     6c8:	21 e0       	ldi	r18, 0x01	; 1
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	2c 0f       	add	r18, r28
     6ce:	3d 1f       	adc	r19, r29
     6d0:	a2 0f       	add	r26, r18
     6d2:	b3 1f       	adc	r27, r19
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	f9 01       	movw	r30, r18
     6de:	e8 0f       	add	r30, r24
     6e0:	f9 1f       	adc	r31, r25
     6e2:	20 81       	ld	r18, Z
     6e4:	31 81       	ldd	r19, Z+1	; 0x01
     6e6:	42 81       	ldd	r20, Z+2	; 0x02
     6e8:	53 81       	ldd	r21, Z+3	; 0x03
     6ea:	6d 91       	ld	r22, X+
     6ec:	7d 91       	ld	r23, X+
     6ee:	8d 91       	ld	r24, X+
     6f0:	9c 91       	ld	r25, X
     6f2:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__addsf3>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	5f e3       	ldi	r21, 0x3F	; 63
     6fe:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     702:	f6 01       	movw	r30, r12
     704:	60 83       	st	Z, r22
     706:	71 83       	std	Z+1, r23	; 0x01
     708:	82 83       	std	Z+2, r24	; 0x02
     70a:	93 83       	std	Z+3, r25	; 0x03
     70c:	1d c0       	rjmp	.+58     	; 0x748 <calcCurrentRMS+0x134>
     70e:	98 01       	movw	r18, r16
     710:	21 50       	subi	r18, 0x01	; 1
     712:	31 09       	sbc	r19, r1
     714:	c9 01       	movw	r24, r18
     716:	99 23       	and	r25, r25
     718:	0c f4       	brge	.+2      	; 0x71c <calcCurrentRMS+0x108>
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	fc 01       	movw	r30, r24
     71e:	f5 95       	asr	r31
     720:	e7 95       	ror	r30
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ee 0f       	add	r30, r30
     728:	ff 1f       	adc	r31, r31
     72a:	21 e0       	ldi	r18, 0x01	; 1
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	2c 0f       	add	r18, r28
     730:	3d 1f       	adc	r19, r29
     732:	e2 0f       	add	r30, r18
     734:	f3 1f       	adc	r31, r19
     736:	80 81       	ld	r24, Z
     738:	91 81       	ldd	r25, Z+1	; 0x01
     73a:	a2 81       	ldd	r26, Z+2	; 0x02
     73c:	b3 81       	ldd	r27, Z+3	; 0x03
     73e:	f6 01       	movw	r30, r12
     740:	80 83       	st	Z, r24
     742:	91 83       	std	Z+1, r25	; 0x01
     744:	a2 83       	std	Z+2, r26	; 0x02
     746:	b3 83       	std	Z+3, r27	; 0x03
     748:	0f 5f       	subi	r16, 0xFF	; 255
     74a:	1f 4f       	sbci	r17, 0xFF	; 255
     74c:	f4 e0       	ldi	r31, 0x04	; 4
     74e:	cf 0e       	add	r12, r31
     750:	d1 1c       	adc	r13, r1
     752:	03 31       	cpi	r16, 0x13	; 19
     754:	11 05       	cpc	r17, r1
     756:	09 f0       	breq	.+2      	; 0x75a <calcCurrentRMS+0x146>
     758:	88 cf       	rjmp	.-240    	; 0x66a <calcCurrentRMS+0x56>
     75a:	8e 01       	movw	r16, r28
     75c:	0b 58       	subi	r16, 0x8B	; 139
     75e:	1f 4f       	sbci	r17, 0xFF	; 255
     760:	81 2c       	mov	r8, r1
     762:	91 2c       	mov	r9, r1
     764:	54 01       	movw	r10, r8
     766:	f7 01       	movw	r30, r14
     768:	61 91       	ld	r22, Z+
     76a:	71 91       	ld	r23, Z+
     76c:	81 91       	ld	r24, Z+
     76e:	91 91       	ld	r25, Z+
     770:	7f 01       	movw	r14, r30
     772:	9b 01       	movw	r18, r22
     774:	ac 01       	movw	r20, r24
     776:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	c5 01       	movw	r24, r10
     780:	b4 01       	movw	r22, r8
     782:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__addsf3>
     786:	4b 01       	movw	r8, r22
     788:	5c 01       	movw	r10, r24
     78a:	e0 16       	cp	r14, r16
     78c:	f1 06       	cpc	r15, r17
     78e:	59 f7       	brne	.-42     	; 0x766 <calcCurrentRMS+0x152>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	48 e9       	ldi	r20, 0x98	; 152
     796:	51 e4       	ldi	r21, 0x41	; 65
     798:	c5 01       	movw	r24, r10
     79a:	b4 01       	movw	r22, r8
     79c:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
     7a0:	0e 94 9d 09 	call	0x133a	; 0x133a <sqrt>
     7a4:	cc 58       	subi	r28, 0x8C	; 140
     7a6:	df 4f       	sbci	r29, 0xFF	; 255
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	bf 90       	pop	r11
     7c4:	af 90       	pop	r10
     7c6:	9f 90       	pop	r9
     7c8:	8f 90       	pop	r8
     7ca:	08 95       	ret

000007cc <adc_init>:

 //Initialises the ADC
 void adc_init() {
	DDRC = 0x00; //Set port c as input
     7cc:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADEN); //Set Prescaler to 128 and enable the ADC 
     7ce:	ea e7       	ldi	r30, 0x7A	; 122
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	87 68       	ori	r24, 0x87	; 135
     7d6:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //Set reference voltage to VCC
     7d8:	ec e7       	ldi	r30, 0x7C	; 124
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	80 81       	ld	r24, Z
     7de:	80 64       	ori	r24, 0x40	; 64
     7e0:	80 83       	st	Z, r24
     7e2:	08 95       	ret

000007e4 <adc_read_voltage>:
 }

 //Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_voltage() {
	ADMUX &= ~(1<<MUX0);
     7e4:	ec e7       	ldi	r30, 0x7C	; 124
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 81       	ld	r24, Z
     7ea:	8e 7f       	andi	r24, 0xFE	; 254
     7ec:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX1);
     7ee:	80 81       	ld	r24, Z
     7f0:	8d 7f       	andi	r24, 0xFD	; 253
     7f2:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX2);
     7f4:	80 81       	ld	r24, Z
     7f6:	8b 7f       	andi	r24, 0xFB	; 251
     7f8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start conversion
     7fa:	ea e7       	ldi	r30, 0x7A	; 122
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	80 64       	ori	r24, 0x40	; 64
     802:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
     804:	80 81       	ld	r24, Z
     806:	84 ff       	sbrs	r24, 4
     808:	fd cf       	rjmp	.-6      	; 0x804 <adc_read_voltage+0x20>
	unsigned int adcRead = ADC;
     80a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     80e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     812:	08 95       	ret

00000814 <adc_read_current>:

  //Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_current(unsigned int highLow) {
	if (highLow == 1) { //High gain current
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	61 f4       	brne	.+24     	; 0x830 <adc_read_current+0x1c>
		ADMUX |= (1<<MUX0);
     818:	ec e7       	ldi	r30, 0x7C	; 124
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	81 60       	ori	r24, 0x01	; 1
     820:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX1);
     822:	80 81       	ld	r24, Z
     824:	82 60       	ori	r24, 0x02	; 2
     826:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX2);
     828:	80 81       	ld	r24, Z
     82a:	8b 7f       	andi	r24, 0xFB	; 251
     82c:	80 83       	st	Z, r24
     82e:	0b c0       	rjmp	.+22     	; 0x846 <adc_read_current+0x32>
	} else { //Low gain current
		ADMUX |= (1<<MUX0);
     830:	ec e7       	ldi	r30, 0x7C	; 124
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	81 60       	ori	r24, 0x01	; 1
     838:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX1);
     83a:	80 81       	ld	r24, Z
     83c:	8d 7f       	andi	r24, 0xFD	; 253
     83e:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX2);
     840:	80 81       	ld	r24, Z
     842:	84 60       	ori	r24, 0x04	; 4
     844:	80 83       	st	Z, r24
	}
	ADCSRA |= (1<<ADSC); //Start conversion
     846:	ea e7       	ldi	r30, 0x7A	; 122
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	80 64       	ori	r24, 0x40	; 64
     84e:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
     850:	80 81       	ld	r24, Z
     852:	84 ff       	sbrs	r24, 4
     854:	fd cf       	rjmp	.-6      	; 0x850 <adc_read_current+0x3c>
	unsigned int adcRead = ADC;
     856:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     85a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     85e:	08 95       	ret

00000860 <adc_calculation>:

 //Converts an ADC integer into the actual voltage measured by the ADC pin
 float adc_calculation(unsigned int adcValue) {
	float calculatedValue;
	calculatedValue = ((float)adcValue / 1023) * 5; //Digital value to analogue voltage measured
     860:	bc 01       	movw	r22, r24
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 ff 07 	call	0xffe	; 0xffe <__floatunsisf>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 ec       	ldi	r19, 0xC0	; 192
     86e:	4f e7       	ldi	r20, 0x7F	; 127
     870:	54 e4       	ldi	r21, 0x44	; 68
     872:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 ea       	ldi	r20, 0xA0	; 160
     87c:	50 e4       	ldi	r21, 0x40	; 64
     87e:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
	return calculatedValue; 
 }
     882:	08 95       	ret

00000884 <voltage_real>:
 This function figures out what the actual voltage being measured was based on reversing the process 
 that the signal went through. Option 0 for voltage, 1 for regular current, 2 for high gain current
 */
 float voltage_real(float adcValue, unsigned int option) {
	float output;
	if (option == 0) {
     884:	41 15       	cp	r20, r1
     886:	51 05       	cpc	r21, r1
     888:	a9 f4       	brne	.+42     	; 0x8b4 <voltage_real+0x30>
		output = -(adcValue - 1.7) + 0.27; //Remove offset voltage and then invert
     88a:	2a e9       	ldi	r18, 0x9A	; 154
     88c:	39 e9       	ldi	r19, 0x99	; 153
     88e:	49 ed       	ldi	r20, 0xD9	; 217
     890:	5f e3       	ldi	r21, 0x3F	; 63
     892:	0e 94 e5 06 	call	0xdca	; 0xdca <__subsf3>
     896:	9b 01       	movw	r18, r22
     898:	ac 01       	movw	r20, r24
     89a:	61 e7       	ldi	r22, 0x71	; 113
     89c:	7d e3       	ldi	r23, 0x3D	; 61
     89e:	8a e8       	ldi	r24, 0x8A	; 138
     8a0:	9e e3       	ldi	r25, 0x3E	; 62
     8a2:	0e 94 e5 06 	call	0xdca	; 0xdca <__subsf3>
		output = output * 0.98; //Revert to value from before the op amp
     8a6:	28 e4       	ldi	r18, 0x48	; 72
     8a8:	31 ee       	ldi	r19, 0xE1	; 225
     8aa:	4a e7       	ldi	r20, 0x7A	; 122
     8ac:	5f e3       	ldi	r21, 0x3F	; 63
     8ae:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     8b2:	08 95       	ret
	} else if (option == 1) {
     8b4:	41 30       	cpi	r20, 0x01	; 1
     8b6:	51 05       	cpc	r21, r1
     8b8:	d1 f4       	brne	.+52     	; 0x8ee <voltage_real+0x6a>
		output = -(adcValue - 1.64);
     8ba:	25 e8       	ldi	r18, 0x85	; 133
     8bc:	3b ee       	ldi	r19, 0xEB	; 235
     8be:	41 ed       	ldi	r20, 0xD1	; 209
     8c0:	5f e3       	ldi	r21, 0x3F	; 63
     8c2:	0e 94 e5 06 	call	0xdca	; 0xdca <__subsf3>
     8c6:	90 58       	subi	r25, 0x80	; 128
		output = output / 5;
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	40 ea       	ldi	r20, 0xA0	; 160
     8ce:	50 e4       	ldi	r21, 0x40	; 64
     8d0:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
		output = output / 0.30; //Divide by R to get I
     8d4:	2a e9       	ldi	r18, 0x9A	; 154
     8d6:	39 e9       	ldi	r19, 0x99	; 153
     8d8:	49 e9       	ldi	r20, 0x99	; 153
     8da:	5e e3       	ldi	r21, 0x3E	; 62
     8dc:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
		output = output * 1.08;
     8e0:	21 e7       	ldi	r18, 0x71	; 113
     8e2:	3d e3       	ldi	r19, 0x3D	; 61
     8e4:	4a e8       	ldi	r20, 0x8A	; 138
     8e6:	5f e3       	ldi	r21, 0x3F	; 63
     8e8:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     8ec:	08 95       	ret
	} else {
		output = -(adcValue - 1.64);
     8ee:	25 e8       	ldi	r18, 0x85	; 133
     8f0:	3b ee       	ldi	r19, 0xEB	; 235
     8f2:	41 ed       	ldi	r20, 0xD1	; 209
     8f4:	5f e3       	ldi	r21, 0x3F	; 63
     8f6:	0e 94 e5 06 	call	0xdca	; 0xdca <__subsf3>
     8fa:	90 58       	subi	r25, 0x80	; 128
		output = output / 12.4;
     8fc:	26 e6       	ldi	r18, 0x66	; 102
     8fe:	36 e6       	ldi	r19, 0x66	; 102
     900:	46 e4       	ldi	r20, 0x46	; 70
     902:	51 e4       	ldi	r21, 0x41	; 65
     904:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
		output = output / 0.30; //Divide by R to get I
     908:	2a e9       	ldi	r18, 0x9A	; 154
     90a:	39 e9       	ldi	r19, 0x99	; 153
     90c:	49 e9       	ldi	r20, 0x99	; 153
     90e:	5e e3       	ldi	r21, 0x3E	; 62
     910:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
	}
	return output;
     914:	08 95       	ret

00000916 <main>:

volatile uint8_t counter = 0; //Counter for the number of times the TCNT0 compares correctly
volatile uint8_t flag = 0;
volatile uint8_t ledFlag = 0;

int main(void) {
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	c4 56       	subi	r28, 0x64	; 100
     920:	d1 09       	sbc	r29, r1
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
	sei();
     92c:	78 94       	sei
	adc_init();
     92e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <adc_init>
	uart_init();	
     932:	0e 94 89 00 	call	0x112	; 0x112 <uart_init>
	timer0_init();
     936:	0e 94 a1 00 	call	0x142	; 0x142 <timer0_init>
	timer1_init();
     93a:	0e 94 a6 00 	call	0x14c	; 0x14c <timer1_init>
	int_init();
     93e:	0e 94 ba 00 	call	0x174	; 0x174 <int_init>
	DDRB |= (1<<5);
     942:	25 9a       	sbi	0x04, 5	; 4
	uint32_t displayCount = 0;
	uint8_t currentFlag = 1;
     944:	99 24       	eor	r9, r9
     946:	93 94       	inc	r9
	uart_init();	
	timer0_init();
	timer1_init();
	int_init();
	DDRB |= (1<<5);
	uint32_t displayCount = 0;
     948:	a0 96       	adiw	r28, 0x20	; 32
     94a:	1c ae       	std	Y+60, r1	; 0x3c
     94c:	1d ae       	std	Y+61, r1	; 0x3d
     94e:	1e ae       	std	Y+62, r1	; 0x3e
     950:	1f ae       	std	Y+63, r1	; 0x3f
     952:	a0 97       	sbiw	r28, 0x20	; 32
     954:	a1 2c       	mov	r10, r1
     956:	b1 2c       	mov	r11, r1
				voltageArray[i/2] = voltage;
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); // Regular Current
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
				currentArray[(i-1)/2] = current;
     958:	9e 01       	movw	r18, r28
     95a:	2f 5f       	subi	r18, 0xFF	; 255
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	19 01       	movw	r2, r18
     960:	6b 96       	adiw	r28, 0x1b	; 27
     962:	2f af       	std	Y+63, r18	; 0x3f
     964:	6b 97       	sbiw	r28, 0x1b	; 27
     966:	6c 96       	adiw	r28, 0x1c	; 28
     968:	3f ae       	std	Y+63, r3	; 0x3f
     96a:	6c 97       	sbiw	r28, 0x1c	; 28
     96c:	81 e5       	ldi	r24, 0x51	; 81
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	8c 0f       	add	r24, r28
     972:	9d 1f       	adc	r25, r29
     974:	03 96       	adiw	r24, 0x03	; 3
     976:	a4 96       	adiw	r28, 0x24	; 36
     978:	9f af       	std	Y+63, r25	; 0x3f
     97a:	8e af       	std	Y+62, r24	; 0x3e
     97c:	a4 97       	sbiw	r28, 0x24	; 36
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	a5 96       	adiw	r28, 0x25	; 37
     982:	9f af       	std	Y+63, r25	; 0x3f
     984:	a5 97       	sbiw	r28, 0x25	; 37
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { 
			dataFloat = calcPower(&voltageArray, &currentArray); 
			if (dataFloat >= maxPower*0.75) { OCR1A = 0x00; }
			else if ((dataFloat < maxPower*0.75 ) && (dataFloat >= maxPower*0.5)) { OCR1A = 0x00; }
			else if ((dataFloat < maxPower*0.5 ) && (dataFloat >= maxPower*0.25)) { OCR1A = 0x00; }
			else { OCR1A = 0x00; }
     986:	66 96       	adiw	r28, 0x16	; 22
     988:	9f ae       	std	Y+63, r9	; 0x3f
     98a:	66 97       	sbiw	r28, 0x16	; 22
		uint8_t hasDecimal = 0;
		uint8_t dataArray[4];
		uint8_t index = 0;
		float dataFloat = 0;
		
		flag = 0;
     98c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		while (flag == 0); //Wait for Zero Crossing Detector to signal a rising zero crossing
     990:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     994:	88 23       	and	r24, r24
     996:	e1 f3       	breq	.-8      	; 0x990 <main+0x7a>
     998:	0a 2d       	mov	r16, r10
     99a:	1b 2d       	mov	r17, r11
				unsigned int adcValue = adc_read_voltage();
				float adcVoltage = adc_calculation(adcValue);
				float voltage = voltage_real(adcVoltage, 0);
				voltageArray[i/2] = voltage;
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); // Regular Current
     99c:	66 96       	adiw	r28, 0x16	; 22
     99e:	af ad       	ldd	r26, Y+63	; 0x3f
     9a0:	66 97       	sbiw	r28, 0x16	; 22
     9a2:	ea 2e       	mov	r14, r26
     9a4:	f1 2c       	mov	r15, r1
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
     9a6:	67 01       	movw	r12, r14
     9a8:	bf ef       	ldi	r27, 0xFF	; 255
     9aa:	cb 1a       	sub	r12, r27
     9ac:	db 0a       	sbc	r13, r27
		
		//Reading from the ADC, calculating and converting
		float voltageArray[10];
		float currentArray[10];
		for (int i=0;i<19;i++) {
			if (i%2 == 0) {
     9ae:	00 fd       	sbrc	r16, 0
     9b0:	1b c0       	rjmp	.+54     	; 0x9e8 <main+0xd2>
				unsigned int adcValue = adc_read_voltage();
     9b2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <adc_read_voltage>
				float adcVoltage = adc_calculation(adcValue);
     9b6:	0e 94 30 04 	call	0x860	; 0x860 <adc_calculation>
				float voltage = voltage_real(adcVoltage, 0);
     9ba:	4a 2d       	mov	r20, r10
     9bc:	5b 2d       	mov	r21, r11
     9be:	0e 94 42 04 	call	0x884	; 0x884 <voltage_real>
				voltageArray[i/2] = voltage;
     9c2:	98 01       	movw	r18, r16
     9c4:	11 23       	and	r17, r17
     9c6:	14 f4       	brge	.+4      	; 0x9cc <main+0xb6>
     9c8:	2f 5f       	subi	r18, 0xFF	; 255
     9ca:	3f 4f       	sbci	r19, 0xFF	; 255
     9cc:	f9 01       	movw	r30, r18
     9ce:	f5 95       	asr	r31
     9d0:	e7 95       	ror	r30
     9d2:	ee 0f       	add	r30, r30
     9d4:	ff 1f       	adc	r31, r31
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	e2 0d       	add	r30, r2
     9dc:	f3 1d       	adc	r31, r3
     9de:	60 a7       	std	Z+40, r22	; 0x28
     9e0:	71 a7       	std	Z+41, r23	; 0x29
     9e2:	82 a7       	std	Z+42, r24	; 0x2a
     9e4:	93 a7       	std	Z+43, r25	; 0x2b
     9e6:	1c c0       	rjmp	.+56     	; 0xa20 <main+0x10a>
			} else {
				unsigned int adcValue = adc_read_current(currentFlag); // Regular Current
     9e8:	c7 01       	movw	r24, r14
     9ea:	0e 94 0a 04 	call	0x814	; 0x814 <adc_read_current>
				float adcCurrent = adc_calculation(adcValue);
     9ee:	0e 94 30 04 	call	0x860	; 0x860 <adc_calculation>
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
     9f2:	a6 01       	movw	r20, r12
     9f4:	0e 94 42 04 	call	0x884	; 0x884 <voltage_real>
     9f8:	a8 01       	movw	r20, r16
     9fa:	41 50       	subi	r20, 0x01	; 1
     9fc:	51 09       	sbc	r21, r1
				currentArray[(i-1)/2] = current;
     9fe:	9a 01       	movw	r18, r20
     a00:	12 f4       	brpl	.+4      	; 0xa06 <main+0xf0>
     a02:	2f 5f       	subi	r18, 0xFF	; 255
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
     a06:	f9 01       	movw	r30, r18
     a08:	f5 95       	asr	r31
     a0a:	e7 95       	ror	r30
     a0c:	ee 0f       	add	r30, r30
     a0e:	ff 1f       	adc	r31, r31
     a10:	ee 0f       	add	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	e2 0d       	add	r30, r2
     a16:	f3 1d       	adc	r31, r3
     a18:	60 83       	st	Z, r22
     a1a:	71 83       	std	Z+1, r23	; 0x01
     a1c:	82 83       	std	Z+2, r24	; 0x02
     a1e:	93 83       	std	Z+3, r25	; 0x03
		while (flag == 0); //Wait for Zero Crossing Detector to signal a rising zero crossing
		
		//Reading from the ADC, calculating and converting
		float voltageArray[10];
		float currentArray[10];
		for (int i=0;i<19;i++) {
     a20:	0f 5f       	subi	r16, 0xFF	; 255
     a22:	1f 4f       	sbci	r17, 0xFF	; 255
     a24:	03 31       	cpi	r16, 0x13	; 19
     a26:	11 05       	cpc	r17, r1
     a28:	11 f6       	brne	.-124    	; 0x9ae <main+0x98>
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, currentFlag+1); // Regular Current
				currentArray[(i-1)/2] = current;
			}
		}
		float test = calcCurrentRMS(&currentArray);
     a2a:	6b 96       	adiw	r28, 0x1b	; 27
     a2c:	8f ad       	ldd	r24, Y+63	; 0x3f
     a2e:	6b 97       	sbiw	r28, 0x1b	; 27
     a30:	6c 96       	adiw	r28, 0x1c	; 28
     a32:	9f ad       	ldd	r25, Y+63	; 0x3f
     a34:	6c 97       	sbiw	r28, 0x1c	; 28
     a36:	0e 94 0a 03 	call	0x614	; 0x614 <calcCurrentRMS>
		if (test > 0.21) {
     a3a:	2d e3       	ldi	r18, 0x3D	; 61
     a3c:	3a e0       	ldi	r19, 0x0A	; 10
     a3e:	47 e5       	ldi	r20, 0x57	; 87
     a40:	5e e3       	ldi	r21, 0x3E	; 62
     a42:	0e 94 b1 08 	call	0x1162	; 0x1162 <__gesf2>
     a46:	18 16       	cp	r1, r24
     a48:	34 f4       	brge	.+12     	; 0xa56 <main+0x140>
			if (currentFlag != 0) {
     a4a:	66 96       	adiw	r28, 0x16	; 22
     a4c:	ef ad       	ldd	r30, Y+63	; 0x3f
     a4e:	66 97       	sbiw	r28, 0x16	; 22
     a50:	e1 11       	cpse	r30, r1
     a52:	91 c1       	rjmp	.+802    	; 0xd76 <main+0x460>
     a54:	06 c0       	rjmp	.+12     	; 0xa62 <main+0x14c>
				currentFlag = 0;
				continue;
			}
		} else {
			if (currentFlag != 1) {
     a56:	66 96       	adiw	r28, 0x16	; 22
     a58:	ff ad       	ldd	r31, Y+63	; 0x3f
     a5a:	66 97       	sbiw	r28, 0x16	; 22
     a5c:	f1 30       	cpi	r31, 0x01	; 1
     a5e:	09 f0       	breq	.+2      	; 0xa62 <main+0x14c>
     a60:	8e c1       	rjmp	.+796    	; 0xd7e <main+0x468>
				currentFlag = 1;
				continue;
			}
		}
		
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { 
     a62:	a0 96       	adiw	r28, 0x20	; 32
     a64:	6c ad       	ldd	r22, Y+60	; 0x3c
     a66:	7d ad       	ldd	r23, Y+61	; 0x3d
     a68:	8e ad       	ldd	r24, Y+62	; 0x3e
     a6a:	9f ad       	ldd	r25, Y+63	; 0x3f
     a6c:	a0 97       	sbiw	r28, 0x20	; 32
     a6e:	2a e0       	ldi	r18, 0x0A	; 10
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	0e 94 34 0b 	call	0x1668	; 0x1668 <__udivmodsi4>
     a7a:	6a 96       	adiw	r28, 0x1a	; 26
     a7c:	6c af       	std	Y+60, r22	; 0x3c
     a7e:	7d af       	std	Y+61, r23	; 0x3d
     a80:	8e af       	std	Y+62, r24	; 0x3e
     a82:	9f af       	std	Y+63, r25	; 0x3f
     a84:	6a 97       	sbiw	r28, 0x1a	; 26
     a86:	2b 01       	movw	r4, r22
     a88:	3c 01       	movw	r6, r24
     a8a:	64 30       	cpi	r22, 0x04	; 4
     a8c:	71 05       	cpc	r23, r1
     a8e:	81 05       	cpc	r24, r1
     a90:	91 05       	cpc	r25, r1
     a92:	08 f0       	brcs	.+2      	; 0xa96 <main+0x180>
     a94:	5c c0       	rjmp	.+184    	; 0xb4e <main+0x238>
			dataFloat = calcPower(&voltageArray, &currentArray); 
     a96:	6b 96       	adiw	r28, 0x1b	; 27
     a98:	6f ad       	ldd	r22, Y+63	; 0x3f
     a9a:	6b 97       	sbiw	r28, 0x1b	; 27
     a9c:	6c 96       	adiw	r28, 0x1c	; 28
     a9e:	7f ad       	ldd	r23, Y+63	; 0x3f
     aa0:	6c 97       	sbiw	r28, 0x1c	; 28
     aa2:	ce 01       	movw	r24, r28
     aa4:	89 96       	adiw	r24, 0x29	; 41
     aa6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <calcPower>
     aaa:	16 2f       	mov	r17, r22
     aac:	07 2f       	mov	r16, r23
     aae:	f8 2e       	mov	r15, r24
     ab0:	e9 2e       	mov	r14, r25
			if (dataFloat >= maxPower*0.75) { OCR1A = 0x00; }
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 ef       	ldi	r20, 0xF0	; 240
     ab8:	50 e4       	ldi	r21, 0x40	; 64
     aba:	0e 94 b1 08 	call	0x1162	; 0x1162 <__gesf2>
     abe:	88 23       	and	r24, r24
     ac0:	34 f0       	brlt	.+12     	; 0xace <main+0x1b8>
     ac2:	a8 e8       	ldi	r26, 0x88	; 136
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 92       	st	X, r1
     aca:	1e 92       	st	-X, r1
     acc:	6d c0       	rjmp	.+218    	; 0xba8 <main+0x292>
			else if ((dataFloat < maxPower*0.75 ) && (dataFloat >= maxPower*0.5)) { OCR1A = 0x00; }
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	40 ef       	ldi	r20, 0xF0	; 240
     ad4:	50 e4       	ldi	r21, 0x40	; 64
     ad6:	61 2f       	mov	r22, r17
     ad8:	70 2f       	mov	r23, r16
     ada:	8f 2d       	mov	r24, r15
     adc:	9e 2d       	mov	r25, r14
     ade:	0e 94 52 07 	call	0xea4	; 0xea4 <__cmpsf2>
     ae2:	88 23       	and	r24, r24
     ae4:	8c f4       	brge	.+34     	; 0xb08 <main+0x1f2>
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	40 ea       	ldi	r20, 0xA0	; 160
     aec:	50 e4       	ldi	r21, 0x40	; 64
     aee:	61 2f       	mov	r22, r17
     af0:	70 2f       	mov	r23, r16
     af2:	8f 2d       	mov	r24, r15
     af4:	9e 2d       	mov	r25, r14
     af6:	0e 94 b1 08 	call	0x1162	; 0x1162 <__gesf2>
     afa:	88 23       	and	r24, r24
     afc:	2c f0       	brlt	.+10     	; 0xb08 <main+0x1f2>
     afe:	e8 e8       	ldi	r30, 0x88	; 136
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	11 82       	std	Z+1, r1	; 0x01
     b04:	10 82       	st	Z, r1
     b06:	50 c0       	rjmp	.+160    	; 0xba8 <main+0x292>
			else if ((dataFloat < maxPower*0.5 ) && (dataFloat >= maxPower*0.25)) { OCR1A = 0x00; }
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 ea       	ldi	r20, 0xA0	; 160
     b0e:	50 e4       	ldi	r21, 0x40	; 64
     b10:	61 2f       	mov	r22, r17
     b12:	70 2f       	mov	r23, r16
     b14:	8f 2d       	mov	r24, r15
     b16:	9e 2d       	mov	r25, r14
     b18:	0e 94 52 07 	call	0xea4	; 0xea4 <__cmpsf2>
     b1c:	88 23       	and	r24, r24
     b1e:	94 f4       	brge	.+36     	; 0xb44 <main+0x22e>
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	40 e2       	ldi	r20, 0x20	; 32
     b26:	50 e4       	ldi	r21, 0x40	; 64
     b28:	61 2f       	mov	r22, r17
     b2a:	70 2f       	mov	r23, r16
     b2c:	8f 2d       	mov	r24, r15
     b2e:	9e 2d       	mov	r25, r14
     b30:	0e 94 b1 08 	call	0x1162	; 0x1162 <__gesf2>
     b34:	88 23       	and	r24, r24
     b36:	34 f0       	brlt	.+12     	; 0xb44 <main+0x22e>
     b38:	a8 e8       	ldi	r26, 0x88	; 136
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	11 96       	adiw	r26, 0x01	; 1
     b3e:	1c 92       	st	X, r1
     b40:	1e 92       	st	-X, r1
     b42:	32 c0       	rjmp	.+100    	; 0xba8 <main+0x292>
			else { OCR1A = 0x00; }
     b44:	e8 e8       	ldi	r30, 0x88	; 136
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	11 82       	std	Z+1, r1	; 0x01
     b4a:	10 82       	st	Z, r1
     b4c:	2d c0       	rjmp	.+90     	; 0xba8 <main+0x292>

		} 
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataFloat = dataFloat = calcCurrentRMS(&currentArray); }
     b4e:	6a 96       	adiw	r28, 0x1a	; 26
     b50:	8c ad       	ldd	r24, Y+60	; 0x3c
     b52:	9d ad       	ldd	r25, Y+61	; 0x3d
     b54:	ae ad       	ldd	r26, Y+62	; 0x3e
     b56:	bf ad       	ldd	r27, Y+63	; 0x3f
     b58:	6a 97       	sbiw	r28, 0x1a	; 26
     b5a:	04 97       	sbiw	r24, 0x04	; 4
     b5c:	a1 09       	sbc	r26, r1
     b5e:	b1 09       	sbc	r27, r1
     b60:	03 97       	sbiw	r24, 0x03	; 3
     b62:	a1 05       	cpc	r26, r1
     b64:	b1 05       	cpc	r27, r1
     b66:	68 f4       	brcc	.+26     	; 0xb82 <main+0x26c>
     b68:	6b 96       	adiw	r28, 0x1b	; 27
     b6a:	8f ad       	ldd	r24, Y+63	; 0x3f
     b6c:	6b 97       	sbiw	r28, 0x1b	; 27
     b6e:	6c 96       	adiw	r28, 0x1c	; 28
     b70:	9f ad       	ldd	r25, Y+63	; 0x3f
     b72:	6c 97       	sbiw	r28, 0x1c	; 28
     b74:	0e 94 0a 03 	call	0x614	; 0x614 <calcCurrentRMS>
     b78:	16 2f       	mov	r17, r22
     b7a:	07 2f       	mov	r16, r23
     b7c:	f8 2e       	mov	r15, r24
     b7e:	e9 2e       	mov	r14, r25
     b80:	13 c0       	rjmp	.+38     	; 0xba8 <main+0x292>
		else if (displayCount%10 > 6) { dataFloat = calcVoltageRMS(&voltageArray); }
     b82:	f7 e0       	ldi	r31, 0x07	; 7
     b84:	4f 16       	cp	r4, r31
     b86:	51 04       	cpc	r5, r1
     b88:	61 04       	cpc	r6, r1
     b8a:	71 04       	cpc	r7, r1
     b8c:	48 f0       	brcs	.+18     	; 0xba0 <main+0x28a>
     b8e:	ce 01       	movw	r24, r28
     b90:	89 96       	adiw	r24, 0x29	; 41
     b92:	0e 94 49 02 	call	0x492	; 0x492 <calcVoltageRMS>
     b96:	16 2f       	mov	r17, r22
     b98:	07 2f       	mov	r16, r23
     b9a:	f8 2e       	mov	r15, r24
     b9c:	e9 2e       	mov	r14, r25
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <main+0x292>

	while(1) {
		uint8_t hasDecimal = 0;
		uint8_t dataArray[4];
		uint8_t index = 0;
		float dataFloat = 0;
     ba0:	10 e0       	ldi	r17, 0x00	; 0
     ba2:	00 e0       	ldi	r16, 0x00	; 0
     ba4:	f1 2c       	mov	r15, r1
     ba6:	e1 2c       	mov	r14, r1
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataFloat = dataFloat = calcCurrentRMS(&currentArray); }
		else if (displayCount%10 > 6) { dataFloat = calcVoltageRMS(&voltageArray); }
		
		// if A > 0.21 use low gain

		dataFloat = roundf(dataFloat * 100) / 100;
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	48 ec       	ldi	r20, 0xC8	; 200
     bae:	52 e4       	ldi	r21, 0x42	; 66
     bb0:	61 2f       	mov	r22, r17
     bb2:	70 2f       	mov	r23, r16
     bb4:	8f 2d       	mov	r24, r15
     bb6:	9e 2d       	mov	r25, r14
     bb8:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     bbc:	0e 94 73 09 	call	0x12e6	; 0x12e6 <round>
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	48 ec       	ldi	r20, 0xC8	; 200
     bc6:	52 e4       	ldi	r21, 0x42	; 66
     bc8:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
     bcc:	6b 01       	movw	r12, r22
     bce:	7c 01       	movw	r14, r24
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
     bd0:	0e 94 c1 00 	call	0x182	; 0x182 <find_decimal>
     bd4:	4c 01       	movw	r8, r24
     bd6:	99 24       	eor	r9, r9
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
     bd8:	22 e0       	ldi	r18, 0x02	; 2
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	28 19       	sub	r18, r8
     bde:	39 09       	sbc	r19, r9
     be0:	a2 96       	adiw	r28, 0x22	; 34
     be2:	3f af       	std	Y+63, r19	; 0x3f
     be4:	2e af       	std	Y+62, r18	; 0x3e
     be6:	a2 97       	sbiw	r28, 0x22	; 34
     be8:	b9 01       	movw	r22, r18
     bea:	33 0f       	add	r19, r19
     bec:	88 0b       	sbc	r24, r24
     bee:	99 0b       	sbc	r25, r25
     bf0:	0e 94 01 08 	call	0x1002	; 0x1002 <__floatsisf>
     bf4:	9b 01       	movw	r18, r22
     bf6:	ac 01       	movw	r20, r24
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	80 e2       	ldi	r24, 0x20	; 32
     bfe:	91 e4       	ldi	r25, 0x41	; 65
     c00:	0e 94 23 09 	call	0x1246	; 0x1246 <pow>
     c04:	a7 01       	movw	r20, r14
     c06:	96 01       	movw	r18, r12
     c08:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	5f e3       	ldi	r21, 0x3F	; 63
     c14:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__addsf3>
     c18:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixsfsi>
     c1c:	7b 01       	movw	r14, r22
     c1e:	a4 96       	adiw	r28, 0x24	; 36
     c20:	ce ac       	ldd	r12, Y+62	; 0x3e
     c22:	df ac       	ldd	r13, Y+63	; 0x3f
     c24:	a4 97       	sbiw	r28, 0x24	; 36
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     c26:	02 e0       	ldi	r16, 0x02	; 2
     c28:	10 e0       	ldi	r17, 0x00	; 0
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     c2a:	08 15       	cp	r16, r8
     c2c:	19 05       	cpc	r17, r9
     c2e:	61 f4       	brne	.+24     	; 0xc48 <main+0x332>
     c30:	a5 96       	adiw	r28, 0x25	; 37
     c32:	4f ad       	ldd	r20, Y+63	; 0x3f
     c34:	a5 97       	sbiw	r28, 0x25	; 37
     c36:	a2 96       	adiw	r28, 0x22	; 34
     c38:	8e ad       	ldd	r24, Y+62	; 0x3e
     c3a:	9f ad       	ldd	r25, Y+63	; 0x3f
     c3c:	a2 97       	sbiw	r28, 0x22	; 34
     c3e:	18 16       	cp	r1, r24
     c40:	19 06       	cpc	r1, r25
     c42:	1c f0       	brlt	.+6      	; 0xc4a <main+0x334>
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <main+0x334>
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
     c48:	40 e0       	ldi	r20, 0x00	; 0
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
     c4a:	97 01       	movw	r18, r14
     c4c:	ad ec       	ldi	r26, 0xCD	; 205
     c4e:	bc ec       	ldi	r27, 0xCC	; 204
     c50:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__umulhisi3>
     c54:	96 95       	lsr	r25
     c56:	87 95       	ror	r24
     c58:	96 95       	lsr	r25
     c5a:	87 95       	ror	r24
     c5c:	96 95       	lsr	r25
     c5e:	87 95       	ror	r24
     c60:	9c 01       	movw	r18, r24
     c62:	22 0f       	add	r18, r18
     c64:	33 1f       	adc	r19, r19
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	82 0f       	add	r24, r18
     c74:	93 1f       	adc	r25, r19
     c76:	60 2f       	mov	r22, r16
     c78:	ae 2d       	mov	r26, r14
     c7a:	a8 1b       	sub	r26, r24
     c7c:	8a 2f       	mov	r24, r26
     c7e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <wololo>
     c82:	f6 01       	movw	r30, r12
     c84:	82 93       	st	-Z, r24
     c86:	6f 01       	movw	r12, r30
			dataInt = dataInt/10;
     c88:	97 01       	movw	r18, r14
     c8a:	ad ec       	ldi	r26, 0xCD	; 205
     c8c:	bc ec       	ldi	r27, 0xCC	; 204
     c8e:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__umulhisi3>
     c92:	7c 01       	movw	r14, r24
     c94:	f6 94       	lsr	r15
     c96:	e7 94       	ror	r14
     c98:	f6 94       	lsr	r15
     c9a:	e7 94       	ror	r14
     c9c:	f6 94       	lsr	r15
     c9e:	e7 94       	ror	r14
		dataFloat = roundf(dataFloat * 100) / 100;
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     ca0:	01 50       	subi	r16, 0x01	; 1
     ca2:	11 09       	sbc	r17, r1
     ca4:	10 f6       	brcc	.-124    	; 0xc2a <main+0x314>
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
			dataInt = dataInt/10;
		}
		
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { dataArray[3] = 15; }
     ca6:	24 e0       	ldi	r18, 0x04	; 4
     ca8:	42 16       	cp	r4, r18
     caa:	51 04       	cpc	r5, r1
     cac:	61 04       	cpc	r6, r1
     cae:	71 04       	cpc	r7, r1
     cb0:	28 f4       	brcc	.+10     	; 0xcbc <main+0x3a6>
     cb2:	8f e0       	ldi	r24, 0x0F	; 15
     cb4:	65 96       	adiw	r28, 0x15	; 21
     cb6:	8f af       	std	Y+63, r24	; 0x3f
     cb8:	65 97       	sbiw	r28, 0x15	; 21
     cba:	1c c0       	rjmp	.+56     	; 0xcf4 <main+0x3de>
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataArray[3] = 13; }
     cbc:	6a 96       	adiw	r28, 0x1a	; 26
     cbe:	8c ad       	ldd	r24, Y+60	; 0x3c
     cc0:	9d ad       	ldd	r25, Y+61	; 0x3d
     cc2:	ae ad       	ldd	r26, Y+62	; 0x3e
     cc4:	bf ad       	ldd	r27, Y+63	; 0x3f
     cc6:	6a 97       	sbiw	r28, 0x1a	; 26
     cc8:	04 97       	sbiw	r24, 0x04	; 4
     cca:	a1 09       	sbc	r26, r1
     ccc:	b1 09       	sbc	r27, r1
     cce:	03 97       	sbiw	r24, 0x03	; 3
     cd0:	a1 05       	cpc	r26, r1
     cd2:	b1 05       	cpc	r27, r1
     cd4:	28 f4       	brcc	.+10     	; 0xce0 <main+0x3ca>
     cd6:	8d e0       	ldi	r24, 0x0D	; 13
     cd8:	65 96       	adiw	r28, 0x15	; 21
     cda:	8f af       	std	Y+63, r24	; 0x3f
     cdc:	65 97       	sbiw	r28, 0x15	; 21
     cde:	0a c0       	rjmp	.+20     	; 0xcf4 <main+0x3de>
		else if (displayCount%10 > 6) { dataArray[3] = 14; }
     ce0:	37 e0       	ldi	r19, 0x07	; 7
     ce2:	43 16       	cp	r4, r19
     ce4:	51 04       	cpc	r5, r1
     ce6:	61 04       	cpc	r6, r1
     ce8:	71 04       	cpc	r7, r1
     cea:	20 f0       	brcs	.+8      	; 0xcf4 <main+0x3de>
     cec:	8e e0       	ldi	r24, 0x0E	; 14
     cee:	65 96       	adiw	r28, 0x15	; 21
     cf0:	8f af       	std	Y+63, r24	; 0x3f
     cf2:	65 97       	sbiw	r28, 0x15	; 21

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
			uart_transmit(data);
     cf4:	62 96       	adiw	r28, 0x12	; 18
     cf6:	8f ad       	ldd	r24, Y+63	; 0x3f
     cf8:	62 97       	sbiw	r28, 0x12	; 18
     cfa:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cfe:	8f ed       	ldi	r24, 0xDF	; 223
     d00:	9e e2       	ldi	r25, 0x2E	; 46
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <main+0x3ec>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <main+0x3f2>
     d08:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
     d0a:	11 e0       	ldi	r17, 0x01	; 1
			//Select next integer to send
			if (index == 4) {
				index = 0;
     d0c:	00 e0       	ldi	r16, 0x00	; 0
     d0e:	13 c0       	rjmp	.+38     	; 0xd36 <main+0x420>
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataArray[3] = 13; }
		else if (displayCount%10 > 6) { dataArray[3] = 14; }

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
     d10:	e1 e5       	ldi	r30, 0x51	; 81
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	ec 0f       	add	r30, r28
     d16:	fd 1f       	adc	r31, r29
     d18:	e1 0f       	add	r30, r17
     d1a:	f1 1d       	adc	r31, r1
			uart_transmit(data);
     d1c:	80 81       	ld	r24, Z
     d1e:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
     d22:	af ed       	ldi	r26, 0xDF	; 223
     d24:	be e2       	ldi	r27, 0x2E	; 46
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <main+0x410>
     d2a:	00 c0       	rjmp	.+0      	; 0xd2c <main+0x416>
     d2c:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
     d2e:	1f 5f       	subi	r17, 0xFF	; 255
			//Select next integer to send
			if (index == 4) {
     d30:	14 30       	cpi	r17, 0x04	; 4
     d32:	09 f4       	brne	.+2      	; 0xd36 <main+0x420>
				index = 0;
     d34:	10 2f       	mov	r17, r16
			}
			//Polling mechanism
			if(TCNT0>=156) {
     d36:	86 b5       	in	r24, 0x26	; 38
     d38:	8c 39       	cpi	r24, 0x9C	; 156
     d3a:	50 f3       	brcs	.-44     	; 0xd10 <main+0x3fa>
				TCNT0 = 0;
     d3c:	16 bc       	out	0x26, r1	; 38
				if (counter == 50) {
     d3e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
     d42:	82 33       	cpi	r24, 0x32	; 50
     d44:	91 f4       	brne	.+36     	; 0xd6a <main+0x454>
					counter = 0;
     d46:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter>
				} else {
					counter++;
				}
			}
		}
		displayCount++;
     d4a:	a0 96       	adiw	r28, 0x20	; 32
     d4c:	8c ad       	ldd	r24, Y+60	; 0x3c
     d4e:	9d ad       	ldd	r25, Y+61	; 0x3d
     d50:	ae ad       	ldd	r26, Y+62	; 0x3e
     d52:	bf ad       	ldd	r27, Y+63	; 0x3f
     d54:	a0 97       	sbiw	r28, 0x20	; 32
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	a1 1d       	adc	r26, r1
     d5a:	b1 1d       	adc	r27, r1
     d5c:	a0 96       	adiw	r28, 0x20	; 32
     d5e:	8c af       	std	Y+60, r24	; 0x3c
     d60:	9d af       	std	Y+61, r25	; 0x3d
     d62:	ae af       	std	Y+62, r26	; 0x3e
     d64:	bf af       	std	Y+63, r27	; 0x3f
     d66:	a0 97       	sbiw	r28, 0x20	; 32
     d68:	11 ce       	rjmp	.-990    	; 0x98c <main+0x76>
				TCNT0 = 0;
				if (counter == 50) {
					counter = 0;
					break;
				} else {
					counter++;
     d6a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter>
     d6e:	8f 5f       	subi	r24, 0xFF	; 255
     d70:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter>
     d74:	cd cf       	rjmp	.-102    	; 0xd10 <main+0x3fa>
			}
		}
		float test = calcCurrentRMS(&currentArray);
		if (test > 0.21) {
			if (currentFlag != 0) {
				currentFlag = 0;
     d76:	66 96       	adiw	r28, 0x16	; 22
     d78:	1f ae       	std	Y+63, r1	; 0x3f
     d7a:	66 97       	sbiw	r28, 0x16	; 22
     d7c:	07 ce       	rjmp	.-1010   	; 0x98c <main+0x76>
				continue;
			}
		} else {
			if (currentFlag != 1) {
				currentFlag = 1;
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	66 96       	adiw	r28, 0x16	; 22
     d82:	9f af       	std	Y+63, r25	; 0x3f
     d84:	66 97       	sbiw	r28, 0x16	; 22
     d86:	02 ce       	rjmp	.-1020   	; 0x98c <main+0x76>

00000d88 <__vector_1>:
		displayCount++;
	}
	return 0;
}

ISR (INT0_vect) {
     d88:	1f 92       	push	r1
     d8a:	0f 92       	push	r0
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	0f 92       	push	r0
     d90:	11 24       	eor	r1, r1
     d92:	8f 93       	push	r24
	flag = 1;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
     d9a:	8f 91       	pop	r24
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <__vector_11>:

ISR (TIMER1_COMPA_vect) {
     da6:	1f 92       	push	r1
     da8:	0f 92       	push	r0
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	0f 92       	push	r0
     dae:	11 24       	eor	r1, r1
     db0:	8f 93       	push	r24
     db2:	9f 93       	push	r25
	PORTB ^= (1<<5);
     db4:	95 b1       	in	r25, 0x05	; 5
     db6:	80 e2       	ldi	r24, 0x20	; 32
     db8:	89 27       	eor	r24, r25
     dba:	85 b9       	out	0x05, r24	; 5
     dbc:	9f 91       	pop	r25
     dbe:	8f 91       	pop	r24
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	0f 90       	pop	r0
     dc6:	1f 90       	pop	r1
     dc8:	18 95       	reti

00000dca <__subsf3>:
     dca:	50 58       	subi	r21, 0x80	; 128

00000dcc <__addsf3>:
     dcc:	bb 27       	eor	r27, r27
     dce:	aa 27       	eor	r26, r26
     dd0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__addsf3x>
     dd4:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__fp_round>
     dd8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_pscA>
     ddc:	38 f0       	brcs	.+14     	; 0xdec <__addsf3+0x20>
     dde:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__fp_pscB>
     de2:	20 f0       	brcs	.+8      	; 0xdec <__addsf3+0x20>
     de4:	39 f4       	brne	.+14     	; 0xdf4 <__addsf3+0x28>
     de6:	9f 3f       	cpi	r25, 0xFF	; 255
     de8:	19 f4       	brne	.+6      	; 0xdf0 <__addsf3+0x24>
     dea:	26 f4       	brtc	.+8      	; 0xdf4 <__addsf3+0x28>
     dec:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_nan>
     df0:	0e f4       	brtc	.+2      	; 0xdf4 <__addsf3+0x28>
     df2:	e0 95       	com	r30
     df4:	e7 fb       	bst	r30, 7
     df6:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_inf>

00000dfa <__addsf3x>:
     dfa:	e9 2f       	mov	r30, r25
     dfc:	0e 94 88 08 	call	0x1110	; 0x1110 <__fp_split3>
     e00:	58 f3       	brcs	.-42     	; 0xdd8 <__addsf3+0xc>
     e02:	ba 17       	cp	r27, r26
     e04:	62 07       	cpc	r22, r18
     e06:	73 07       	cpc	r23, r19
     e08:	84 07       	cpc	r24, r20
     e0a:	95 07       	cpc	r25, r21
     e0c:	20 f0       	brcs	.+8      	; 0xe16 <__addsf3x+0x1c>
     e0e:	79 f4       	brne	.+30     	; 0xe2e <__addsf3x+0x34>
     e10:	a6 f5       	brtc	.+104    	; 0xe7a <__addsf3x+0x80>
     e12:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__fp_zero>
     e16:	0e f4       	brtc	.+2      	; 0xe1a <__addsf3x+0x20>
     e18:	e0 95       	com	r30
     e1a:	0b 2e       	mov	r0, r27
     e1c:	ba 2f       	mov	r27, r26
     e1e:	a0 2d       	mov	r26, r0
     e20:	0b 01       	movw	r0, r22
     e22:	b9 01       	movw	r22, r18
     e24:	90 01       	movw	r18, r0
     e26:	0c 01       	movw	r0, r24
     e28:	ca 01       	movw	r24, r20
     e2a:	a0 01       	movw	r20, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	ff 27       	eor	r31, r31
     e30:	59 1b       	sub	r21, r25
     e32:	99 f0       	breq	.+38     	; 0xe5a <__addsf3x+0x60>
     e34:	59 3f       	cpi	r21, 0xF9	; 249
     e36:	50 f4       	brcc	.+20     	; 0xe4c <__addsf3x+0x52>
     e38:	50 3e       	cpi	r21, 0xE0	; 224
     e3a:	68 f1       	brcs	.+90     	; 0xe96 <__addsf3x+0x9c>
     e3c:	1a 16       	cp	r1, r26
     e3e:	f0 40       	sbci	r31, 0x00	; 0
     e40:	a2 2f       	mov	r26, r18
     e42:	23 2f       	mov	r18, r19
     e44:	34 2f       	mov	r19, r20
     e46:	44 27       	eor	r20, r20
     e48:	58 5f       	subi	r21, 0xF8	; 248
     e4a:	f3 cf       	rjmp	.-26     	; 0xe32 <__addsf3x+0x38>
     e4c:	46 95       	lsr	r20
     e4e:	37 95       	ror	r19
     e50:	27 95       	ror	r18
     e52:	a7 95       	ror	r26
     e54:	f0 40       	sbci	r31, 0x00	; 0
     e56:	53 95       	inc	r21
     e58:	c9 f7       	brne	.-14     	; 0xe4c <__addsf3x+0x52>
     e5a:	7e f4       	brtc	.+30     	; 0xe7a <__addsf3x+0x80>
     e5c:	1f 16       	cp	r1, r31
     e5e:	ba 0b       	sbc	r27, r26
     e60:	62 0b       	sbc	r22, r18
     e62:	73 0b       	sbc	r23, r19
     e64:	84 0b       	sbc	r24, r20
     e66:	ba f0       	brmi	.+46     	; 0xe96 <__addsf3x+0x9c>
     e68:	91 50       	subi	r25, 0x01	; 1
     e6a:	a1 f0       	breq	.+40     	; 0xe94 <__addsf3x+0x9a>
     e6c:	ff 0f       	add	r31, r31
     e6e:	bb 1f       	adc	r27, r27
     e70:	66 1f       	adc	r22, r22
     e72:	77 1f       	adc	r23, r23
     e74:	88 1f       	adc	r24, r24
     e76:	c2 f7       	brpl	.-16     	; 0xe68 <__addsf3x+0x6e>
     e78:	0e c0       	rjmp	.+28     	; 0xe96 <__addsf3x+0x9c>
     e7a:	ba 0f       	add	r27, r26
     e7c:	62 1f       	adc	r22, r18
     e7e:	73 1f       	adc	r23, r19
     e80:	84 1f       	adc	r24, r20
     e82:	48 f4       	brcc	.+18     	; 0xe96 <__addsf3x+0x9c>
     e84:	87 95       	ror	r24
     e86:	77 95       	ror	r23
     e88:	67 95       	ror	r22
     e8a:	b7 95       	ror	r27
     e8c:	f7 95       	ror	r31
     e8e:	9e 3f       	cpi	r25, 0xFE	; 254
     e90:	08 f0       	brcs	.+2      	; 0xe94 <__addsf3x+0x9a>
     e92:	b0 cf       	rjmp	.-160    	; 0xdf4 <__addsf3+0x28>
     e94:	93 95       	inc	r25
     e96:	88 0f       	add	r24, r24
     e98:	08 f0       	brcs	.+2      	; 0xe9c <__addsf3x+0xa2>
     e9a:	99 27       	eor	r25, r25
     e9c:	ee 0f       	add	r30, r30
     e9e:	97 95       	ror	r25
     ea0:	87 95       	ror	r24
     ea2:	08 95       	ret

00000ea4 <__cmpsf2>:
     ea4:	0e 94 3c 08 	call	0x1078	; 0x1078 <__fp_cmp>
     ea8:	08 f4       	brcc	.+2      	; 0xeac <__cmpsf2+0x8>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	08 95       	ret

00000eae <__divsf3>:
     eae:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divsf3x>
     eb2:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__fp_round>
     eb6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__fp_pscB>
     eba:	58 f0       	brcs	.+22     	; 0xed2 <__divsf3+0x24>
     ebc:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_pscA>
     ec0:	40 f0       	brcs	.+16     	; 0xed2 <__divsf3+0x24>
     ec2:	29 f4       	brne	.+10     	; 0xece <__divsf3+0x20>
     ec4:	5f 3f       	cpi	r21, 0xFF	; 255
     ec6:	29 f0       	breq	.+10     	; 0xed2 <__divsf3+0x24>
     ec8:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_inf>
     ecc:	51 11       	cpse	r21, r1
     ece:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__fp_szero>
     ed2:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_nan>

00000ed6 <__divsf3x>:
     ed6:	0e 94 88 08 	call	0x1110	; 0x1110 <__fp_split3>
     eda:	68 f3       	brcs	.-38     	; 0xeb6 <__divsf3+0x8>

00000edc <__divsf3_pse>:
     edc:	99 23       	and	r25, r25
     ede:	b1 f3       	breq	.-20     	; 0xecc <__divsf3+0x1e>
     ee0:	55 23       	and	r21, r21
     ee2:	91 f3       	breq	.-28     	; 0xec8 <__divsf3+0x1a>
     ee4:	95 1b       	sub	r25, r21
     ee6:	55 0b       	sbc	r21, r21
     ee8:	bb 27       	eor	r27, r27
     eea:	aa 27       	eor	r26, r26
     eec:	62 17       	cp	r22, r18
     eee:	73 07       	cpc	r23, r19
     ef0:	84 07       	cpc	r24, r20
     ef2:	38 f0       	brcs	.+14     	; 0xf02 <__divsf3_pse+0x26>
     ef4:	9f 5f       	subi	r25, 0xFF	; 255
     ef6:	5f 4f       	sbci	r21, 0xFF	; 255
     ef8:	22 0f       	add	r18, r18
     efa:	33 1f       	adc	r19, r19
     efc:	44 1f       	adc	r20, r20
     efe:	aa 1f       	adc	r26, r26
     f00:	a9 f3       	breq	.-22     	; 0xeec <__divsf3_pse+0x10>
     f02:	35 d0       	rcall	.+106    	; 0xf6e <__divsf3_pse+0x92>
     f04:	0e 2e       	mov	r0, r30
     f06:	3a f0       	brmi	.+14     	; 0xf16 <__divsf3_pse+0x3a>
     f08:	e0 e8       	ldi	r30, 0x80	; 128
     f0a:	32 d0       	rcall	.+100    	; 0xf70 <__divsf3_pse+0x94>
     f0c:	91 50       	subi	r25, 0x01	; 1
     f0e:	50 40       	sbci	r21, 0x00	; 0
     f10:	e6 95       	lsr	r30
     f12:	00 1c       	adc	r0, r0
     f14:	ca f7       	brpl	.-14     	; 0xf08 <__divsf3_pse+0x2c>
     f16:	2b d0       	rcall	.+86     	; 0xf6e <__divsf3_pse+0x92>
     f18:	fe 2f       	mov	r31, r30
     f1a:	29 d0       	rcall	.+82     	; 0xf6e <__divsf3_pse+0x92>
     f1c:	66 0f       	add	r22, r22
     f1e:	77 1f       	adc	r23, r23
     f20:	88 1f       	adc	r24, r24
     f22:	bb 1f       	adc	r27, r27
     f24:	26 17       	cp	r18, r22
     f26:	37 07       	cpc	r19, r23
     f28:	48 07       	cpc	r20, r24
     f2a:	ab 07       	cpc	r26, r27
     f2c:	b0 e8       	ldi	r27, 0x80	; 128
     f2e:	09 f0       	breq	.+2      	; 0xf32 <__divsf3_pse+0x56>
     f30:	bb 0b       	sbc	r27, r27
     f32:	80 2d       	mov	r24, r0
     f34:	bf 01       	movw	r22, r30
     f36:	ff 27       	eor	r31, r31
     f38:	93 58       	subi	r25, 0x83	; 131
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
     f3c:	3a f0       	brmi	.+14     	; 0xf4c <__divsf3_pse+0x70>
     f3e:	9e 3f       	cpi	r25, 0xFE	; 254
     f40:	51 05       	cpc	r21, r1
     f42:	78 f0       	brcs	.+30     	; 0xf62 <__divsf3_pse+0x86>
     f44:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_inf>
     f48:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__fp_szero>
     f4c:	5f 3f       	cpi	r21, 0xFF	; 255
     f4e:	e4 f3       	brlt	.-8      	; 0xf48 <__divsf3_pse+0x6c>
     f50:	98 3e       	cpi	r25, 0xE8	; 232
     f52:	d4 f3       	brlt	.-12     	; 0xf48 <__divsf3_pse+0x6c>
     f54:	86 95       	lsr	r24
     f56:	77 95       	ror	r23
     f58:	67 95       	ror	r22
     f5a:	b7 95       	ror	r27
     f5c:	f7 95       	ror	r31
     f5e:	9f 5f       	subi	r25, 0xFF	; 255
     f60:	c9 f7       	brne	.-14     	; 0xf54 <__divsf3_pse+0x78>
     f62:	88 0f       	add	r24, r24
     f64:	91 1d       	adc	r25, r1
     f66:	96 95       	lsr	r25
     f68:	87 95       	ror	r24
     f6a:	97 f9       	bld	r25, 7
     f6c:	08 95       	ret
     f6e:	e1 e0       	ldi	r30, 0x01	; 1
     f70:	66 0f       	add	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	88 1f       	adc	r24, r24
     f76:	bb 1f       	adc	r27, r27
     f78:	62 17       	cp	r22, r18
     f7a:	73 07       	cpc	r23, r19
     f7c:	84 07       	cpc	r24, r20
     f7e:	ba 07       	cpc	r27, r26
     f80:	20 f0       	brcs	.+8      	; 0xf8a <__divsf3_pse+0xae>
     f82:	62 1b       	sub	r22, r18
     f84:	73 0b       	sbc	r23, r19
     f86:	84 0b       	sbc	r24, r20
     f88:	ba 0b       	sbc	r27, r26
     f8a:	ee 1f       	adc	r30, r30
     f8c:	88 f7       	brcc	.-30     	; 0xf70 <__divsf3_pse+0x94>
     f8e:	e0 95       	com	r30
     f90:	08 95       	ret

00000f92 <__fixsfsi>:
     f92:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__fixunssfsi>
     f96:	68 94       	set
     f98:	b1 11       	cpse	r27, r1
     f9a:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__fp_szero>
     f9e:	08 95       	ret

00000fa0 <__fixunssfsi>:
     fa0:	0e 94 90 08 	call	0x1120	; 0x1120 <__fp_splitA>
     fa4:	88 f0       	brcs	.+34     	; 0xfc8 <__fixunssfsi+0x28>
     fa6:	9f 57       	subi	r25, 0x7F	; 127
     fa8:	98 f0       	brcs	.+38     	; 0xfd0 <__fixunssfsi+0x30>
     faa:	b9 2f       	mov	r27, r25
     fac:	99 27       	eor	r25, r25
     fae:	b7 51       	subi	r27, 0x17	; 23
     fb0:	b0 f0       	brcs	.+44     	; 0xfde <__fixunssfsi+0x3e>
     fb2:	e1 f0       	breq	.+56     	; 0xfec <__fixunssfsi+0x4c>
     fb4:	66 0f       	add	r22, r22
     fb6:	77 1f       	adc	r23, r23
     fb8:	88 1f       	adc	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	1a f0       	brmi	.+6      	; 0xfc4 <__fixunssfsi+0x24>
     fbe:	ba 95       	dec	r27
     fc0:	c9 f7       	brne	.-14     	; 0xfb4 <__fixunssfsi+0x14>
     fc2:	14 c0       	rjmp	.+40     	; 0xfec <__fixunssfsi+0x4c>
     fc4:	b1 30       	cpi	r27, 0x01	; 1
     fc6:	91 f0       	breq	.+36     	; 0xfec <__fixunssfsi+0x4c>
     fc8:	0e 94 aa 08 	call	0x1154	; 0x1154 <__fp_zero>
     fcc:	b1 e0       	ldi	r27, 0x01	; 1
     fce:	08 95       	ret
     fd0:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__fp_zero>
     fd4:	67 2f       	mov	r22, r23
     fd6:	78 2f       	mov	r23, r24
     fd8:	88 27       	eor	r24, r24
     fda:	b8 5f       	subi	r27, 0xF8	; 248
     fdc:	39 f0       	breq	.+14     	; 0xfec <__fixunssfsi+0x4c>
     fde:	b9 3f       	cpi	r27, 0xF9	; 249
     fe0:	cc f3       	brlt	.-14     	; 0xfd4 <__fixunssfsi+0x34>
     fe2:	86 95       	lsr	r24
     fe4:	77 95       	ror	r23
     fe6:	67 95       	ror	r22
     fe8:	b3 95       	inc	r27
     fea:	d9 f7       	brne	.-10     	; 0xfe2 <__fixunssfsi+0x42>
     fec:	3e f4       	brtc	.+14     	; 0xffc <__fixunssfsi+0x5c>
     fee:	90 95       	com	r25
     ff0:	80 95       	com	r24
     ff2:	70 95       	com	r23
     ff4:	61 95       	neg	r22
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255
     ff8:	8f 4f       	sbci	r24, 0xFF	; 255
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	08 95       	ret

00000ffe <__floatunsisf>:
     ffe:	e8 94       	clt
    1000:	09 c0       	rjmp	.+18     	; 0x1014 <__floatsisf+0x12>

00001002 <__floatsisf>:
    1002:	97 fb       	bst	r25, 7
    1004:	3e f4       	brtc	.+14     	; 0x1014 <__floatsisf+0x12>
    1006:	90 95       	com	r25
    1008:	80 95       	com	r24
    100a:	70 95       	com	r23
    100c:	61 95       	neg	r22
    100e:	7f 4f       	sbci	r23, 0xFF	; 255
    1010:	8f 4f       	sbci	r24, 0xFF	; 255
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	99 23       	and	r25, r25
    1016:	a9 f0       	breq	.+42     	; 0x1042 <__floatsisf+0x40>
    1018:	f9 2f       	mov	r31, r25
    101a:	96 e9       	ldi	r25, 0x96	; 150
    101c:	bb 27       	eor	r27, r27
    101e:	93 95       	inc	r25
    1020:	f6 95       	lsr	r31
    1022:	87 95       	ror	r24
    1024:	77 95       	ror	r23
    1026:	67 95       	ror	r22
    1028:	b7 95       	ror	r27
    102a:	f1 11       	cpse	r31, r1
    102c:	f8 cf       	rjmp	.-16     	; 0x101e <__floatsisf+0x1c>
    102e:	fa f4       	brpl	.+62     	; 0x106e <__floatsisf+0x6c>
    1030:	bb 0f       	add	r27, r27
    1032:	11 f4       	brne	.+4      	; 0x1038 <__floatsisf+0x36>
    1034:	60 ff       	sbrs	r22, 0
    1036:	1b c0       	rjmp	.+54     	; 0x106e <__floatsisf+0x6c>
    1038:	6f 5f       	subi	r22, 0xFF	; 255
    103a:	7f 4f       	sbci	r23, 0xFF	; 255
    103c:	8f 4f       	sbci	r24, 0xFF	; 255
    103e:	9f 4f       	sbci	r25, 0xFF	; 255
    1040:	16 c0       	rjmp	.+44     	; 0x106e <__floatsisf+0x6c>
    1042:	88 23       	and	r24, r24
    1044:	11 f0       	breq	.+4      	; 0x104a <__floatsisf+0x48>
    1046:	96 e9       	ldi	r25, 0x96	; 150
    1048:	11 c0       	rjmp	.+34     	; 0x106c <__floatsisf+0x6a>
    104a:	77 23       	and	r23, r23
    104c:	21 f0       	breq	.+8      	; 0x1056 <__floatsisf+0x54>
    104e:	9e e8       	ldi	r25, 0x8E	; 142
    1050:	87 2f       	mov	r24, r23
    1052:	76 2f       	mov	r23, r22
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <__floatsisf+0x5e>
    1056:	66 23       	and	r22, r22
    1058:	71 f0       	breq	.+28     	; 0x1076 <__floatsisf+0x74>
    105a:	96 e8       	ldi	r25, 0x86	; 134
    105c:	86 2f       	mov	r24, r22
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	2a f0       	brmi	.+10     	; 0x106e <__floatsisf+0x6c>
    1064:	9a 95       	dec	r25
    1066:	66 0f       	add	r22, r22
    1068:	77 1f       	adc	r23, r23
    106a:	88 1f       	adc	r24, r24
    106c:	da f7       	brpl	.-10     	; 0x1064 <__floatsisf+0x62>
    106e:	88 0f       	add	r24, r24
    1070:	96 95       	lsr	r25
    1072:	87 95       	ror	r24
    1074:	97 f9       	bld	r25, 7
    1076:	08 95       	ret

00001078 <__fp_cmp>:
    1078:	99 0f       	add	r25, r25
    107a:	00 08       	sbc	r0, r0
    107c:	55 0f       	add	r21, r21
    107e:	aa 0b       	sbc	r26, r26
    1080:	e0 e8       	ldi	r30, 0x80	; 128
    1082:	fe ef       	ldi	r31, 0xFE	; 254
    1084:	16 16       	cp	r1, r22
    1086:	17 06       	cpc	r1, r23
    1088:	e8 07       	cpc	r30, r24
    108a:	f9 07       	cpc	r31, r25
    108c:	c0 f0       	brcs	.+48     	; 0x10be <__fp_cmp+0x46>
    108e:	12 16       	cp	r1, r18
    1090:	13 06       	cpc	r1, r19
    1092:	e4 07       	cpc	r30, r20
    1094:	f5 07       	cpc	r31, r21
    1096:	98 f0       	brcs	.+38     	; 0x10be <__fp_cmp+0x46>
    1098:	62 1b       	sub	r22, r18
    109a:	73 0b       	sbc	r23, r19
    109c:	84 0b       	sbc	r24, r20
    109e:	95 0b       	sbc	r25, r21
    10a0:	39 f4       	brne	.+14     	; 0x10b0 <__fp_cmp+0x38>
    10a2:	0a 26       	eor	r0, r26
    10a4:	61 f0       	breq	.+24     	; 0x10be <__fp_cmp+0x46>
    10a6:	23 2b       	or	r18, r19
    10a8:	24 2b       	or	r18, r20
    10aa:	25 2b       	or	r18, r21
    10ac:	21 f4       	brne	.+8      	; 0x10b6 <__fp_cmp+0x3e>
    10ae:	08 95       	ret
    10b0:	0a 26       	eor	r0, r26
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <__fp_cmp+0x3e>
    10b4:	a1 40       	sbci	r26, 0x01	; 1
    10b6:	a6 95       	lsr	r26
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	81 1d       	adc	r24, r1
    10bc:	81 1d       	adc	r24, r1
    10be:	08 95       	ret

000010c0 <__fp_inf>:
    10c0:	97 f9       	bld	r25, 7
    10c2:	9f 67       	ori	r25, 0x7F	; 127
    10c4:	80 e8       	ldi	r24, 0x80	; 128
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	08 95       	ret

000010cc <__fp_nan>:
    10cc:	9f ef       	ldi	r25, 0xFF	; 255
    10ce:	80 ec       	ldi	r24, 0xC0	; 192
    10d0:	08 95       	ret

000010d2 <__fp_pscA>:
    10d2:	00 24       	eor	r0, r0
    10d4:	0a 94       	dec	r0
    10d6:	16 16       	cp	r1, r22
    10d8:	17 06       	cpc	r1, r23
    10da:	18 06       	cpc	r1, r24
    10dc:	09 06       	cpc	r0, r25
    10de:	08 95       	ret

000010e0 <__fp_pscB>:
    10e0:	00 24       	eor	r0, r0
    10e2:	0a 94       	dec	r0
    10e4:	12 16       	cp	r1, r18
    10e6:	13 06       	cpc	r1, r19
    10e8:	14 06       	cpc	r1, r20
    10ea:	05 06       	cpc	r0, r21
    10ec:	08 95       	ret

000010ee <__fp_round>:
    10ee:	09 2e       	mov	r0, r25
    10f0:	03 94       	inc	r0
    10f2:	00 0c       	add	r0, r0
    10f4:	11 f4       	brne	.+4      	; 0x10fa <__fp_round+0xc>
    10f6:	88 23       	and	r24, r24
    10f8:	52 f0       	brmi	.+20     	; 0x110e <__fp_round+0x20>
    10fa:	bb 0f       	add	r27, r27
    10fc:	40 f4       	brcc	.+16     	; 0x110e <__fp_round+0x20>
    10fe:	bf 2b       	or	r27, r31
    1100:	11 f4       	brne	.+4      	; 0x1106 <__fp_round+0x18>
    1102:	60 ff       	sbrs	r22, 0
    1104:	04 c0       	rjmp	.+8      	; 0x110e <__fp_round+0x20>
    1106:	6f 5f       	subi	r22, 0xFF	; 255
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	8f 4f       	sbci	r24, 0xFF	; 255
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	08 95       	ret

00001110 <__fp_split3>:
    1110:	57 fd       	sbrc	r21, 7
    1112:	90 58       	subi	r25, 0x80	; 128
    1114:	44 0f       	add	r20, r20
    1116:	55 1f       	adc	r21, r21
    1118:	59 f0       	breq	.+22     	; 0x1130 <__fp_splitA+0x10>
    111a:	5f 3f       	cpi	r21, 0xFF	; 255
    111c:	71 f0       	breq	.+28     	; 0x113a <__fp_splitA+0x1a>
    111e:	47 95       	ror	r20

00001120 <__fp_splitA>:
    1120:	88 0f       	add	r24, r24
    1122:	97 fb       	bst	r25, 7
    1124:	99 1f       	adc	r25, r25
    1126:	61 f0       	breq	.+24     	; 0x1140 <__fp_splitA+0x20>
    1128:	9f 3f       	cpi	r25, 0xFF	; 255
    112a:	79 f0       	breq	.+30     	; 0x114a <__fp_splitA+0x2a>
    112c:	87 95       	ror	r24
    112e:	08 95       	ret
    1130:	12 16       	cp	r1, r18
    1132:	13 06       	cpc	r1, r19
    1134:	14 06       	cpc	r1, r20
    1136:	55 1f       	adc	r21, r21
    1138:	f2 cf       	rjmp	.-28     	; 0x111e <__fp_split3+0xe>
    113a:	46 95       	lsr	r20
    113c:	f1 df       	rcall	.-30     	; 0x1120 <__fp_splitA>
    113e:	08 c0       	rjmp	.+16     	; 0x1150 <__fp_splitA+0x30>
    1140:	16 16       	cp	r1, r22
    1142:	17 06       	cpc	r1, r23
    1144:	18 06       	cpc	r1, r24
    1146:	99 1f       	adc	r25, r25
    1148:	f1 cf       	rjmp	.-30     	; 0x112c <__fp_splitA+0xc>
    114a:	86 95       	lsr	r24
    114c:	71 05       	cpc	r23, r1
    114e:	61 05       	cpc	r22, r1
    1150:	08 94       	sec
    1152:	08 95       	ret

00001154 <__fp_zero>:
    1154:	e8 94       	clt

00001156 <__fp_szero>:
    1156:	bb 27       	eor	r27, r27
    1158:	66 27       	eor	r22, r22
    115a:	77 27       	eor	r23, r23
    115c:	cb 01       	movw	r24, r22
    115e:	97 f9       	bld	r25, 7
    1160:	08 95       	ret

00001162 <__gesf2>:
    1162:	0e 94 3c 08 	call	0x1078	; 0x1078 <__fp_cmp>
    1166:	08 f4       	brcc	.+2      	; 0x116a <__gesf2+0x8>
    1168:	8f ef       	ldi	r24, 0xFF	; 255
    116a:	08 95       	ret

0000116c <__mulsf3>:
    116c:	0e 94 c9 08 	call	0x1192	; 0x1192 <__mulsf3x>
    1170:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__fp_round>
    1174:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_pscA>
    1178:	38 f0       	brcs	.+14     	; 0x1188 <__mulsf3+0x1c>
    117a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__fp_pscB>
    117e:	20 f0       	brcs	.+8      	; 0x1188 <__mulsf3+0x1c>
    1180:	95 23       	and	r25, r21
    1182:	11 f0       	breq	.+4      	; 0x1188 <__mulsf3+0x1c>
    1184:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_inf>
    1188:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_nan>
    118c:	11 24       	eor	r1, r1
    118e:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__fp_szero>

00001192 <__mulsf3x>:
    1192:	0e 94 88 08 	call	0x1110	; 0x1110 <__fp_split3>
    1196:	70 f3       	brcs	.-36     	; 0x1174 <__mulsf3+0x8>

00001198 <__mulsf3_pse>:
    1198:	95 9f       	mul	r25, r21
    119a:	c1 f3       	breq	.-16     	; 0x118c <__mulsf3+0x20>
    119c:	95 0f       	add	r25, r21
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	55 1f       	adc	r21, r21
    11a2:	62 9f       	mul	r22, r18
    11a4:	f0 01       	movw	r30, r0
    11a6:	72 9f       	mul	r23, r18
    11a8:	bb 27       	eor	r27, r27
    11aa:	f0 0d       	add	r31, r0
    11ac:	b1 1d       	adc	r27, r1
    11ae:	63 9f       	mul	r22, r19
    11b0:	aa 27       	eor	r26, r26
    11b2:	f0 0d       	add	r31, r0
    11b4:	b1 1d       	adc	r27, r1
    11b6:	aa 1f       	adc	r26, r26
    11b8:	64 9f       	mul	r22, r20
    11ba:	66 27       	eor	r22, r22
    11bc:	b0 0d       	add	r27, r0
    11be:	a1 1d       	adc	r26, r1
    11c0:	66 1f       	adc	r22, r22
    11c2:	82 9f       	mul	r24, r18
    11c4:	22 27       	eor	r18, r18
    11c6:	b0 0d       	add	r27, r0
    11c8:	a1 1d       	adc	r26, r1
    11ca:	62 1f       	adc	r22, r18
    11cc:	73 9f       	mul	r23, r19
    11ce:	b0 0d       	add	r27, r0
    11d0:	a1 1d       	adc	r26, r1
    11d2:	62 1f       	adc	r22, r18
    11d4:	83 9f       	mul	r24, r19
    11d6:	a0 0d       	add	r26, r0
    11d8:	61 1d       	adc	r22, r1
    11da:	22 1f       	adc	r18, r18
    11dc:	74 9f       	mul	r23, r20
    11de:	33 27       	eor	r19, r19
    11e0:	a0 0d       	add	r26, r0
    11e2:	61 1d       	adc	r22, r1
    11e4:	23 1f       	adc	r18, r19
    11e6:	84 9f       	mul	r24, r20
    11e8:	60 0d       	add	r22, r0
    11ea:	21 1d       	adc	r18, r1
    11ec:	82 2f       	mov	r24, r18
    11ee:	76 2f       	mov	r23, r22
    11f0:	6a 2f       	mov	r22, r26
    11f2:	11 24       	eor	r1, r1
    11f4:	9f 57       	subi	r25, 0x7F	; 127
    11f6:	50 40       	sbci	r21, 0x00	; 0
    11f8:	9a f0       	brmi	.+38     	; 0x1220 <__mulsf3_pse+0x88>
    11fa:	f1 f0       	breq	.+60     	; 0x1238 <__mulsf3_pse+0xa0>
    11fc:	88 23       	and	r24, r24
    11fe:	4a f0       	brmi	.+18     	; 0x1212 <__mulsf3_pse+0x7a>
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	bb 1f       	adc	r27, r27
    1206:	66 1f       	adc	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	88 1f       	adc	r24, r24
    120c:	91 50       	subi	r25, 0x01	; 1
    120e:	50 40       	sbci	r21, 0x00	; 0
    1210:	a9 f7       	brne	.-22     	; 0x11fc <__mulsf3_pse+0x64>
    1212:	9e 3f       	cpi	r25, 0xFE	; 254
    1214:	51 05       	cpc	r21, r1
    1216:	80 f0       	brcs	.+32     	; 0x1238 <__mulsf3_pse+0xa0>
    1218:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_inf>
    121c:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__fp_szero>
    1220:	5f 3f       	cpi	r21, 0xFF	; 255
    1222:	e4 f3       	brlt	.-8      	; 0x121c <__mulsf3_pse+0x84>
    1224:	98 3e       	cpi	r25, 0xE8	; 232
    1226:	d4 f3       	brlt	.-12     	; 0x121c <__mulsf3_pse+0x84>
    1228:	86 95       	lsr	r24
    122a:	77 95       	ror	r23
    122c:	67 95       	ror	r22
    122e:	b7 95       	ror	r27
    1230:	f7 95       	ror	r31
    1232:	e7 95       	ror	r30
    1234:	9f 5f       	subi	r25, 0xFF	; 255
    1236:	c1 f7       	brne	.-16     	; 0x1228 <__mulsf3_pse+0x90>
    1238:	fe 2b       	or	r31, r30
    123a:	88 0f       	add	r24, r24
    123c:	91 1d       	adc	r25, r1
    123e:	96 95       	lsr	r25
    1240:	87 95       	ror	r24
    1242:	97 f9       	bld	r25, 7
    1244:	08 95       	ret

00001246 <pow>:
    1246:	fa 01       	movw	r30, r20
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	30 96       	adiw	r30, 0x00	; 0
    124e:	21 05       	cpc	r18, r1
    1250:	31 05       	cpc	r19, r1
    1252:	a1 f1       	breq	.+104    	; 0x12bc <pow+0x76>
    1254:	61 15       	cp	r22, r1
    1256:	71 05       	cpc	r23, r1
    1258:	61 f4       	brne	.+24     	; 0x1272 <pow+0x2c>
    125a:	80 38       	cpi	r24, 0x80	; 128
    125c:	bf e3       	ldi	r27, 0x3F	; 63
    125e:	9b 07       	cpc	r25, r27
    1260:	49 f1       	breq	.+82     	; 0x12b4 <pow+0x6e>
    1262:	68 94       	set
    1264:	90 38       	cpi	r25, 0x80	; 128
    1266:	81 05       	cpc	r24, r1
    1268:	61 f0       	breq	.+24     	; 0x1282 <pow+0x3c>
    126a:	80 38       	cpi	r24, 0x80	; 128
    126c:	bf ef       	ldi	r27, 0xFF	; 255
    126e:	9b 07       	cpc	r25, r27
    1270:	41 f0       	breq	.+16     	; 0x1282 <pow+0x3c>
    1272:	99 23       	and	r25, r25
    1274:	4a f5       	brpl	.+82     	; 0x12c8 <pow+0x82>
    1276:	ff 3f       	cpi	r31, 0xFF	; 255
    1278:	e1 05       	cpc	r30, r1
    127a:	31 05       	cpc	r19, r1
    127c:	21 05       	cpc	r18, r1
    127e:	19 f1       	breq	.+70     	; 0x12c6 <pow+0x80>
    1280:	e8 94       	clt
    1282:	08 94       	sec
    1284:	e7 95       	ror	r30
    1286:	d9 01       	movw	r26, r18
    1288:	aa 23       	and	r26, r26
    128a:	29 f4       	brne	.+10     	; 0x1296 <pow+0x50>
    128c:	ab 2f       	mov	r26, r27
    128e:	be 2f       	mov	r27, r30
    1290:	f8 5f       	subi	r31, 0xF8	; 248
    1292:	d0 f3       	brcs	.-12     	; 0x1288 <pow+0x42>
    1294:	10 c0       	rjmp	.+32     	; 0x12b6 <pow+0x70>
    1296:	ff 5f       	subi	r31, 0xFF	; 255
    1298:	70 f4       	brcc	.+28     	; 0x12b6 <pow+0x70>
    129a:	a6 95       	lsr	r26
    129c:	e0 f7       	brcc	.-8      	; 0x1296 <pow+0x50>
    129e:	f7 39       	cpi	r31, 0x97	; 151
    12a0:	50 f0       	brcs	.+20     	; 0x12b6 <pow+0x70>
    12a2:	19 f0       	breq	.+6      	; 0x12aa <pow+0x64>
    12a4:	ff 3a       	cpi	r31, 0xAF	; 175
    12a6:	38 f4       	brcc	.+14     	; 0x12b6 <pow+0x70>
    12a8:	9f 77       	andi	r25, 0x7F	; 127
    12aa:	9f 93       	push	r25
    12ac:	0d d0       	rcall	.+26     	; 0x12c8 <pow+0x82>
    12ae:	0f 90       	pop	r0
    12b0:	07 fc       	sbrc	r0, 7
    12b2:	90 58       	subi	r25, 0x80	; 128
    12b4:	08 95       	ret
    12b6:	46 f0       	brts	.+16     	; 0x12c8 <pow+0x82>
    12b8:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_nan>
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	80 e8       	ldi	r24, 0x80	; 128
    12c2:	9f e3       	ldi	r25, 0x3F	; 63
    12c4:	08 95       	ret
    12c6:	4f e7       	ldi	r20, 0x7F	; 127
    12c8:	9f 77       	andi	r25, 0x7F	; 127
    12ca:	5f 93       	push	r21
    12cc:	4f 93       	push	r20
    12ce:	3f 93       	push	r19
    12d0:	2f 93       	push	r18
    12d2:	0e 94 b8 0a 	call	0x1570	; 0x1570 <log>
    12d6:	2f 91       	pop	r18
    12d8:	3f 91       	pop	r19
    12da:	4f 91       	pop	r20
    12dc:	5f 91       	pop	r21
    12de:	0e 94 b6 08 	call	0x116c	; 0x116c <__mulsf3>
    12e2:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <exp>

000012e6 <round>:
    12e6:	0e 94 90 08 	call	0x1120	; 0x1120 <__fp_splitA>
    12ea:	e8 f0       	brcs	.+58     	; 0x1326 <round+0x40>
    12ec:	9e 37       	cpi	r25, 0x7E	; 126
    12ee:	e8 f0       	brcs	.+58     	; 0x132a <round+0x44>
    12f0:	96 39       	cpi	r25, 0x96	; 150
    12f2:	b8 f4       	brcc	.+46     	; 0x1322 <round+0x3c>
    12f4:	9e 38       	cpi	r25, 0x8E	; 142
    12f6:	48 f4       	brcc	.+18     	; 0x130a <round+0x24>
    12f8:	67 2f       	mov	r22, r23
    12fa:	78 2f       	mov	r23, r24
    12fc:	88 27       	eor	r24, r24
    12fe:	98 5f       	subi	r25, 0xF8	; 248
    1300:	f9 cf       	rjmp	.-14     	; 0x12f4 <round+0xe>
    1302:	86 95       	lsr	r24
    1304:	77 95       	ror	r23
    1306:	67 95       	ror	r22
    1308:	93 95       	inc	r25
    130a:	95 39       	cpi	r25, 0x95	; 149
    130c:	d0 f3       	brcs	.-12     	; 0x1302 <round+0x1c>
    130e:	b6 2f       	mov	r27, r22
    1310:	b1 70       	andi	r27, 0x01	; 1
    1312:	6b 0f       	add	r22, r27
    1314:	71 1d       	adc	r23, r1
    1316:	81 1d       	adc	r24, r1
    1318:	20 f4       	brcc	.+8      	; 0x1322 <round+0x3c>
    131a:	87 95       	ror	r24
    131c:	77 95       	ror	r23
    131e:	67 95       	ror	r22
    1320:	93 95       	inc	r25
    1322:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__fp_mintl>
    1326:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_mpack>
    132a:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__fp_szero>
    132e:	19 f4       	brne	.+6      	; 0x1336 <round+0x50>
    1330:	16 f4       	brtc	.+4      	; 0x1336 <round+0x50>
    1332:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_nan>
    1336:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_mpack>

0000133a <sqrt>:
    133a:	0e 94 90 08 	call	0x1120	; 0x1120 <__fp_splitA>
    133e:	b8 f3       	brcs	.-18     	; 0x132e <round+0x48>
    1340:	99 23       	and	r25, r25
    1342:	c9 f3       	breq	.-14     	; 0x1336 <round+0x50>
    1344:	b6 f3       	brts	.-20     	; 0x1332 <round+0x4c>
    1346:	9f 57       	subi	r25, 0x7F	; 127
    1348:	55 0b       	sbc	r21, r21
    134a:	87 ff       	sbrs	r24, 7
    134c:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fp_norm2>
    1350:	00 24       	eor	r0, r0
    1352:	a0 e6       	ldi	r26, 0x60	; 96
    1354:	40 ea       	ldi	r20, 0xA0	; 160
    1356:	90 01       	movw	r18, r0
    1358:	80 58       	subi	r24, 0x80	; 128
    135a:	56 95       	lsr	r21
    135c:	97 95       	ror	r25
    135e:	28 f4       	brcc	.+10     	; 0x136a <sqrt+0x30>
    1360:	80 5c       	subi	r24, 0xC0	; 192
    1362:	66 0f       	add	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	88 1f       	adc	r24, r24
    1368:	20 f0       	brcs	.+8      	; 0x1372 <sqrt+0x38>
    136a:	26 17       	cp	r18, r22
    136c:	37 07       	cpc	r19, r23
    136e:	48 07       	cpc	r20, r24
    1370:	30 f4       	brcc	.+12     	; 0x137e <sqrt+0x44>
    1372:	62 1b       	sub	r22, r18
    1374:	73 0b       	sbc	r23, r19
    1376:	84 0b       	sbc	r24, r20
    1378:	20 29       	or	r18, r0
    137a:	31 29       	or	r19, r1
    137c:	4a 2b       	or	r20, r26
    137e:	a6 95       	lsr	r26
    1380:	17 94       	ror	r1
    1382:	07 94       	ror	r0
    1384:	20 25       	eor	r18, r0
    1386:	31 25       	eor	r19, r1
    1388:	4a 27       	eor	r20, r26
    138a:	58 f7       	brcc	.-42     	; 0x1362 <sqrt+0x28>
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	88 1f       	adc	r24, r24
    1392:	20 f0       	brcs	.+8      	; 0x139c <sqrt+0x62>
    1394:	26 17       	cp	r18, r22
    1396:	37 07       	cpc	r19, r23
    1398:	48 07       	cpc	r20, r24
    139a:	30 f4       	brcc	.+12     	; 0x13a8 <sqrt+0x6e>
    139c:	62 0b       	sbc	r22, r18
    139e:	73 0b       	sbc	r23, r19
    13a0:	84 0b       	sbc	r24, r20
    13a2:	20 0d       	add	r18, r0
    13a4:	31 1d       	adc	r19, r1
    13a6:	41 1d       	adc	r20, r1
    13a8:	a0 95       	com	r26
    13aa:	81 f7       	brne	.-32     	; 0x138c <sqrt+0x52>
    13ac:	b9 01       	movw	r22, r18
    13ae:	84 2f       	mov	r24, r20
    13b0:	91 58       	subi	r25, 0x81	; 129
    13b2:	88 0f       	add	r24, r24
    13b4:	96 95       	lsr	r25
    13b6:	87 95       	ror	r24
    13b8:	08 95       	ret
    13ba:	29 f4       	brne	.+10     	; 0x13c6 <sqrt+0x8c>
    13bc:	16 f0       	brts	.+4      	; 0x13c2 <sqrt+0x88>
    13be:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_inf>
    13c2:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__fp_zero>
    13c6:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_nan>

000013ca <exp>:
    13ca:	0e 94 90 08 	call	0x1120	; 0x1120 <__fp_splitA>
    13ce:	a8 f3       	brcs	.-22     	; 0x13ba <sqrt+0x80>
    13d0:	96 38       	cpi	r25, 0x86	; 134
    13d2:	a0 f7       	brcc	.-24     	; 0x13bc <sqrt+0x82>
    13d4:	07 f8       	bld	r0, 7
    13d6:	0f 92       	push	r0
    13d8:	e8 94       	clt
    13da:	2b e3       	ldi	r18, 0x3B	; 59
    13dc:	3a ea       	ldi	r19, 0xAA	; 170
    13de:	48 eb       	ldi	r20, 0xB8	; 184
    13e0:	5f e7       	ldi	r21, 0x7F	; 127
    13e2:	0e 94 cc 08 	call	0x1198	; 0x1198 <__mulsf3_pse>
    13e6:	0f 92       	push	r0
    13e8:	0f 92       	push	r0
    13ea:	0f 92       	push	r0
    13ec:	4d b7       	in	r20, 0x3d	; 61
    13ee:	5e b7       	in	r21, 0x3e	; 62
    13f0:	0f 92       	push	r0
    13f2:	0e 94 00 0b 	call	0x1600	; 0x1600 <modf>
    13f6:	e8 e6       	ldi	r30, 0x68	; 104
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_powser>
    13fe:	4f 91       	pop	r20
    1400:	5f 91       	pop	r21
    1402:	ef 91       	pop	r30
    1404:	ff 91       	pop	r31
    1406:	e5 95       	asr	r30
    1408:	ee 1f       	adc	r30, r30
    140a:	ff 1f       	adc	r31, r31
    140c:	49 f0       	breq	.+18     	; 0x1420 <exp+0x56>
    140e:	fe 57       	subi	r31, 0x7E	; 126
    1410:	e0 68       	ori	r30, 0x80	; 128
    1412:	44 27       	eor	r20, r20
    1414:	ee 0f       	add	r30, r30
    1416:	44 1f       	adc	r20, r20
    1418:	fa 95       	dec	r31
    141a:	e1 f7       	brne	.-8      	; 0x1414 <exp+0x4a>
    141c:	41 95       	neg	r20
    141e:	55 0b       	sbc	r21, r21
    1420:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <ldexp>
    1424:	0f 90       	pop	r0
    1426:	07 fe       	sbrs	r0, 7
    1428:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <inverse>
    142c:	08 95       	ret

0000142e <__fp_mintl>:
    142e:	88 23       	and	r24, r24
    1430:	71 f4       	brne	.+28     	; 0x144e <__fp_mintl+0x20>
    1432:	77 23       	and	r23, r23
    1434:	21 f0       	breq	.+8      	; 0x143e <__fp_mintl+0x10>
    1436:	98 50       	subi	r25, 0x08	; 8
    1438:	87 2b       	or	r24, r23
    143a:	76 2f       	mov	r23, r22
    143c:	07 c0       	rjmp	.+14     	; 0x144c <__fp_mintl+0x1e>
    143e:	66 23       	and	r22, r22
    1440:	11 f4       	brne	.+4      	; 0x1446 <__fp_mintl+0x18>
    1442:	99 27       	eor	r25, r25
    1444:	0d c0       	rjmp	.+26     	; 0x1460 <__fp_mintl+0x32>
    1446:	90 51       	subi	r25, 0x10	; 16
    1448:	86 2b       	or	r24, r22
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	2a f0       	brmi	.+10     	; 0x145a <__fp_mintl+0x2c>
    1450:	9a 95       	dec	r25
    1452:	66 0f       	add	r22, r22
    1454:	77 1f       	adc	r23, r23
    1456:	88 1f       	adc	r24, r24
    1458:	da f7       	brpl	.-10     	; 0x1450 <__fp_mintl+0x22>
    145a:	88 0f       	add	r24, r24
    145c:	96 95       	lsr	r25
    145e:	87 95       	ror	r24
    1460:	97 f9       	bld	r25, 7
    1462:	08 95       	ret

00001464 <__fp_mpack>:
    1464:	9f 3f       	cpi	r25, 0xFF	; 255
    1466:	31 f0       	breq	.+12     	; 0x1474 <__fp_mpack_finite+0xc>

00001468 <__fp_mpack_finite>:
    1468:	91 50       	subi	r25, 0x01	; 1
    146a:	20 f4       	brcc	.+8      	; 0x1474 <__fp_mpack_finite+0xc>
    146c:	87 95       	ror	r24
    146e:	77 95       	ror	r23
    1470:	67 95       	ror	r22
    1472:	b7 95       	ror	r27
    1474:	88 0f       	add	r24, r24
    1476:	91 1d       	adc	r25, r1
    1478:	96 95       	lsr	r25
    147a:	87 95       	ror	r24
    147c:	97 f9       	bld	r25, 7
    147e:	08 95       	ret

00001480 <__fp_norm2>:
    1480:	91 50       	subi	r25, 0x01	; 1
    1482:	50 40       	sbci	r21, 0x00	; 0
    1484:	66 0f       	add	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	88 1f       	adc	r24, r24
    148a:	d2 f7       	brpl	.-12     	; 0x1480 <__fp_norm2>
    148c:	08 95       	ret

0000148e <__fp_powser>:
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	1f 93       	push	r17
    1494:	0f 93       	push	r16
    1496:	ff 92       	push	r15
    1498:	ef 92       	push	r14
    149a:	df 92       	push	r13
    149c:	7b 01       	movw	r14, r22
    149e:	8c 01       	movw	r16, r24
    14a0:	68 94       	set
    14a2:	06 c0       	rjmp	.+12     	; 0x14b0 <__fp_powser+0x22>
    14a4:	da 2e       	mov	r13, r26
    14a6:	ef 01       	movw	r28, r30
    14a8:	0e 94 c9 08 	call	0x1192	; 0x1192 <__mulsf3x>
    14ac:	fe 01       	movw	r30, r28
    14ae:	e8 94       	clt
    14b0:	a5 91       	lpm	r26, Z+
    14b2:	25 91       	lpm	r18, Z+
    14b4:	35 91       	lpm	r19, Z+
    14b6:	45 91       	lpm	r20, Z+
    14b8:	55 91       	lpm	r21, Z+
    14ba:	a6 f3       	brts	.-24     	; 0x14a4 <__fp_powser+0x16>
    14bc:	ef 01       	movw	r28, r30
    14be:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__addsf3x>
    14c2:	fe 01       	movw	r30, r28
    14c4:	97 01       	movw	r18, r14
    14c6:	a8 01       	movw	r20, r16
    14c8:	da 94       	dec	r13
    14ca:	69 f7       	brne	.-38     	; 0x14a6 <__fp_powser+0x18>
    14cc:	df 90       	pop	r13
    14ce:	ef 90       	pop	r14
    14d0:	ff 90       	pop	r15
    14d2:	0f 91       	pop	r16
    14d4:	1f 91       	pop	r17
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <inverse>:
    14dc:	9b 01       	movw	r18, r22
    14de:	ac 01       	movw	r20, r24
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	80 e8       	ldi	r24, 0x80	; 128
    14e6:	9f e3       	ldi	r25, 0x3F	; 63
    14e8:	0c 94 57 07 	jmp	0xeae	; 0xeae <__divsf3>
    14ec:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_inf>
    14f0:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_mpack>

000014f4 <ldexp>:
    14f4:	0e 94 90 08 	call	0x1120	; 0x1120 <__fp_splitA>
    14f8:	d8 f3       	brcs	.-10     	; 0x14f0 <inverse+0x14>
    14fa:	99 23       	and	r25, r25
    14fc:	c9 f3       	breq	.-14     	; 0x14f0 <inverse+0x14>
    14fe:	94 0f       	add	r25, r20
    1500:	51 1d       	adc	r21, r1
    1502:	a3 f3       	brvs	.-24     	; 0x14ec <inverse+0x10>
    1504:	91 50       	subi	r25, 0x01	; 1
    1506:	50 40       	sbci	r21, 0x00	; 0
    1508:	94 f0       	brlt	.+36     	; 0x152e <ldexp+0x3a>
    150a:	59 f0       	breq	.+22     	; 0x1522 <ldexp+0x2e>
    150c:	88 23       	and	r24, r24
    150e:	32 f0       	brmi	.+12     	; 0x151c <ldexp+0x28>
    1510:	66 0f       	add	r22, r22
    1512:	77 1f       	adc	r23, r23
    1514:	88 1f       	adc	r24, r24
    1516:	91 50       	subi	r25, 0x01	; 1
    1518:	50 40       	sbci	r21, 0x00	; 0
    151a:	c1 f7       	brne	.-16     	; 0x150c <ldexp+0x18>
    151c:	9e 3f       	cpi	r25, 0xFE	; 254
    151e:	51 05       	cpc	r21, r1
    1520:	2c f7       	brge	.-54     	; 0x14ec <inverse+0x10>
    1522:	88 0f       	add	r24, r24
    1524:	91 1d       	adc	r25, r1
    1526:	96 95       	lsr	r25
    1528:	87 95       	ror	r24
    152a:	97 f9       	bld	r25, 7
    152c:	08 95       	ret
    152e:	5f 3f       	cpi	r21, 0xFF	; 255
    1530:	ac f0       	brlt	.+42     	; 0x155c <ldexp+0x68>
    1532:	98 3e       	cpi	r25, 0xE8	; 232
    1534:	9c f0       	brlt	.+38     	; 0x155c <ldexp+0x68>
    1536:	bb 27       	eor	r27, r27
    1538:	86 95       	lsr	r24
    153a:	77 95       	ror	r23
    153c:	67 95       	ror	r22
    153e:	b7 95       	ror	r27
    1540:	08 f4       	brcc	.+2      	; 0x1544 <ldexp+0x50>
    1542:	b1 60       	ori	r27, 0x01	; 1
    1544:	93 95       	inc	r25
    1546:	c1 f7       	brne	.-16     	; 0x1538 <ldexp+0x44>
    1548:	bb 0f       	add	r27, r27
    154a:	58 f7       	brcc	.-42     	; 0x1522 <ldexp+0x2e>
    154c:	11 f4       	brne	.+4      	; 0x1552 <ldexp+0x5e>
    154e:	60 ff       	sbrs	r22, 0
    1550:	e8 cf       	rjmp	.-48     	; 0x1522 <ldexp+0x2e>
    1552:	6f 5f       	subi	r22, 0xFF	; 255
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	8f 4f       	sbci	r24, 0xFF	; 255
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	e3 cf       	rjmp	.-58     	; 0x1522 <ldexp+0x2e>
    155c:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__fp_szero>
    1560:	16 f0       	brts	.+4      	; 0x1566 <ldexp+0x72>
    1562:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_mpack>
    1566:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__fp_nan>
    156a:	68 94       	set
    156c:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_inf>

00001570 <log>:
    1570:	0e 94 90 08 	call	0x1120	; 0x1120 <__fp_splitA>
    1574:	a8 f3       	brcs	.-22     	; 0x1560 <ldexp+0x6c>
    1576:	99 23       	and	r25, r25
    1578:	c1 f3       	breq	.-16     	; 0x156a <ldexp+0x76>
    157a:	ae f3       	brts	.-22     	; 0x1566 <ldexp+0x72>
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	1f 93       	push	r17
    1582:	0f 93       	push	r16
    1584:	ff 92       	push	r15
    1586:	c9 2f       	mov	r28, r25
    1588:	dd 27       	eor	r29, r29
    158a:	88 23       	and	r24, r24
    158c:	2a f0       	brmi	.+10     	; 0x1598 <log+0x28>
    158e:	21 97       	sbiw	r28, 0x01	; 1
    1590:	66 0f       	add	r22, r22
    1592:	77 1f       	adc	r23, r23
    1594:	88 1f       	adc	r24, r24
    1596:	da f7       	brpl	.-10     	; 0x158e <log+0x1e>
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5f eb       	ldi	r21, 0xBF	; 191
    15a0:	9f e3       	ldi	r25, 0x3F	; 63
    15a2:	88 39       	cpi	r24, 0x98	; 152
    15a4:	20 f0       	brcs	.+8      	; 0x15ae <log+0x3e>
    15a6:	80 3e       	cpi	r24, 0xE0	; 224
    15a8:	38 f0       	brcs	.+14     	; 0x15b8 <log+0x48>
    15aa:	21 96       	adiw	r28, 0x01	; 1
    15ac:	8f 77       	andi	r24, 0x7F	; 127
    15ae:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__addsf3>
    15b2:	e0 e9       	ldi	r30, 0x90	; 144
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	04 c0       	rjmp	.+8      	; 0x15c0 <log+0x50>
    15b8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__addsf3>
    15bc:	ed eb       	ldi	r30, 0xBD	; 189
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	0e 94 47 0a 	call	0x148e	; 0x148e <__fp_powser>
    15c4:	8b 01       	movw	r16, r22
    15c6:	be 01       	movw	r22, r28
    15c8:	ec 01       	movw	r28, r24
    15ca:	fb 2e       	mov	r15, r27
    15cc:	6f 57       	subi	r22, 0x7F	; 127
    15ce:	71 09       	sbc	r23, r1
    15d0:	75 95       	asr	r23
    15d2:	77 1f       	adc	r23, r23
    15d4:	88 0b       	sbc	r24, r24
    15d6:	99 0b       	sbc	r25, r25
    15d8:	0e 94 01 08 	call	0x1002	; 0x1002 <__floatsisf>
    15dc:	28 e1       	ldi	r18, 0x18	; 24
    15de:	32 e7       	ldi	r19, 0x72	; 114
    15e0:	41 e3       	ldi	r20, 0x31	; 49
    15e2:	5f e3       	ldi	r21, 0x3F	; 63
    15e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <__mulsf3x>
    15e8:	af 2d       	mov	r26, r15
    15ea:	98 01       	movw	r18, r16
    15ec:	ae 01       	movw	r20, r28
    15ee:	ff 90       	pop	r15
    15f0:	0f 91       	pop	r16
    15f2:	1f 91       	pop	r17
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__addsf3x>
    15fc:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__fp_round>

00001600 <modf>:
    1600:	fa 01       	movw	r30, r20
    1602:	dc 01       	movw	r26, r24
    1604:	aa 0f       	add	r26, r26
    1606:	bb 1f       	adc	r27, r27
    1608:	9b 01       	movw	r18, r22
    160a:	ac 01       	movw	r20, r24
    160c:	bf 57       	subi	r27, 0x7F	; 127
    160e:	28 f4       	brcc	.+10     	; 0x161a <modf+0x1a>
    1610:	22 27       	eor	r18, r18
    1612:	33 27       	eor	r19, r19
    1614:	44 27       	eor	r20, r20
    1616:	50 78       	andi	r21, 0x80	; 128
    1618:	20 c0       	rjmp	.+64     	; 0x165a <modf+0x5a>
    161a:	b7 51       	subi	r27, 0x17	; 23
    161c:	90 f4       	brcc	.+36     	; 0x1642 <modf+0x42>
    161e:	ab 2f       	mov	r26, r27
    1620:	00 24       	eor	r0, r0
    1622:	46 95       	lsr	r20
    1624:	37 95       	ror	r19
    1626:	27 95       	ror	r18
    1628:	01 1c       	adc	r0, r1
    162a:	a3 95       	inc	r26
    162c:	d2 f3       	brmi	.-12     	; 0x1622 <modf+0x22>
    162e:	00 20       	and	r0, r0
    1630:	71 f0       	breq	.+28     	; 0x164e <modf+0x4e>
    1632:	22 0f       	add	r18, r18
    1634:	33 1f       	adc	r19, r19
    1636:	44 1f       	adc	r20, r20
    1638:	b3 95       	inc	r27
    163a:	da f3       	brmi	.-10     	; 0x1632 <modf+0x32>
    163c:	0e d0       	rcall	.+28     	; 0x165a <modf+0x5a>
    163e:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__subsf3>
    1642:	61 30       	cpi	r22, 0x01	; 1
    1644:	71 05       	cpc	r23, r1
    1646:	a0 e8       	ldi	r26, 0x80	; 128
    1648:	8a 07       	cpc	r24, r26
    164a:	b9 46       	sbci	r27, 0x69	; 105
    164c:	30 f4       	brcc	.+12     	; 0x165a <modf+0x5a>
    164e:	9b 01       	movw	r18, r22
    1650:	ac 01       	movw	r20, r24
    1652:	66 27       	eor	r22, r22
    1654:	77 27       	eor	r23, r23
    1656:	88 27       	eor	r24, r24
    1658:	90 78       	andi	r25, 0x80	; 128
    165a:	30 96       	adiw	r30, 0x00	; 0
    165c:	21 f0       	breq	.+8      	; 0x1666 <modf+0x66>
    165e:	20 83       	st	Z, r18
    1660:	31 83       	std	Z+1, r19	; 0x01
    1662:	42 83       	std	Z+2, r20	; 0x02
    1664:	53 83       	std	Z+3, r21	; 0x03
    1666:	08 95       	ret

00001668 <__udivmodsi4>:
    1668:	a1 e2       	ldi	r26, 0x21	; 33
    166a:	1a 2e       	mov	r1, r26
    166c:	aa 1b       	sub	r26, r26
    166e:	bb 1b       	sub	r27, r27
    1670:	fd 01       	movw	r30, r26
    1672:	0d c0       	rjmp	.+26     	; 0x168e <__udivmodsi4_ep>

00001674 <__udivmodsi4_loop>:
    1674:	aa 1f       	adc	r26, r26
    1676:	bb 1f       	adc	r27, r27
    1678:	ee 1f       	adc	r30, r30
    167a:	ff 1f       	adc	r31, r31
    167c:	a2 17       	cp	r26, r18
    167e:	b3 07       	cpc	r27, r19
    1680:	e4 07       	cpc	r30, r20
    1682:	f5 07       	cpc	r31, r21
    1684:	20 f0       	brcs	.+8      	; 0x168e <__udivmodsi4_ep>
    1686:	a2 1b       	sub	r26, r18
    1688:	b3 0b       	sbc	r27, r19
    168a:	e4 0b       	sbc	r30, r20
    168c:	f5 0b       	sbc	r31, r21

0000168e <__udivmodsi4_ep>:
    168e:	66 1f       	adc	r22, r22
    1690:	77 1f       	adc	r23, r23
    1692:	88 1f       	adc	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	1a 94       	dec	r1
    1698:	69 f7       	brne	.-38     	; 0x1674 <__udivmodsi4_loop>
    169a:	60 95       	com	r22
    169c:	70 95       	com	r23
    169e:	80 95       	com	r24
    16a0:	90 95       	com	r25
    16a2:	9b 01       	movw	r18, r22
    16a4:	ac 01       	movw	r20, r24
    16a6:	bd 01       	movw	r22, r26
    16a8:	cf 01       	movw	r24, r30
    16aa:	08 95       	ret

000016ac <__umulhisi3>:
    16ac:	a2 9f       	mul	r26, r18
    16ae:	b0 01       	movw	r22, r0
    16b0:	b3 9f       	mul	r27, r19
    16b2:	c0 01       	movw	r24, r0
    16b4:	a3 9f       	mul	r26, r19
    16b6:	70 0d       	add	r23, r0
    16b8:	81 1d       	adc	r24, r1
    16ba:	11 24       	eor	r1, r1
    16bc:	91 1d       	adc	r25, r1
    16be:	b2 9f       	mul	r27, r18
    16c0:	70 0d       	add	r23, r0
    16c2:	81 1d       	adc	r24, r1
    16c4:	11 24       	eor	r1, r1
    16c6:	91 1d       	adc	r25, r1
    16c8:	08 95       	ret

000016ca <_exit>:
    16ca:	f8 94       	cli

000016cc <__stop_program>:
    16cc:	ff cf       	rjmp	.-2      	; 0x16cc <__stop_program>
