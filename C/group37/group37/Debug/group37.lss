
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000b2e  00000bc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  00000bd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000445  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000027f  00000000  00000000  000010e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a9  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000024d  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002da  00000000  00000000  00001a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00001ce7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <ldexp+0x4c>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	11 e0       	ldi	r17, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	ee e2       	ldi	r30, 0x2E	; 46
  fe:	fb e0       	ldi	r31, 0x0B	; 11
 100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	a0 31       	cpi	r26, 0x10	; 16
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	a0 e1       	ldi	r26, 0x10	; 16
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	a1 31       	cpi	r26, 0x11	; 17
 118:	b2 07       	cpc	r27, r18
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
 120:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <uart_init>:
 #define F_CPU 16000000UL
 #include <util/delay.h>

 //Initializes the UART
 void uart_init() {
	UBRR0H = 0;
 128:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 103;
 12c:	87 e6       	ldi	r24, 0x67	; 103
 12e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B|= (1<<TXEN0);	//Sets the Transmit Enable to 1
 132:	e1 ec       	ldi	r30, 0xC1	; 193
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	88 60       	ori	r24, 0x08	; 8
 13a:	80 83       	st	Z, r24
	UCSR0C|= (1<<UCSZ00)|(1<<UCSZ01);	//Sets an 8-bit character
 13c:	e2 ec       	ldi	r30, 0xC2	; 194
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	86 60       	ori	r24, 0x06	; 6
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <uart_transmit>:
 }

 //Transmits the data
 void uart_transmit(uint8_t data) {
	while(!((1<<UDRE0) && UCSR0A));	//When UDRE0 is empty, put data value into buffer to be sent
 148:	e0 ec       	ldi	r30, 0xC0	; 192
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	90 81       	ld	r25, Z
 14e:	99 23       	and	r25, r25
 150:	e9 f3       	breq	.-6      	; 0x14c <uart_transmit+0x4>
		UDR0 = data;
 152:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 156:	08 95       	ret

00000158 <timer0_init>:
 }

 //Initializes the timer
 void timer0_init() {
	TCCR0B |= (1<<CS00)|(1<<CS02); //Prescaler of 1024
 158:	85 b5       	in	r24, 0x25	; 37
 15a:	85 60       	ori	r24, 0x05	; 5
 15c:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0; //Initialize timer0
 15e:	16 bc       	out	0x26, r1	; 38
 160:	08 95       	ret

00000162 <find_decimal>:
 }
 
 //Finds the decimal place in the float
 unsigned int find_decimal(float data) {
 162:	cf 92       	push	r12
 164:	df 92       	push	r13
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	6b 01       	movw	r12, r22
 16c:	7c 01       	movw	r14, r24
	if (data < 10) { return 0; }
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	40 e2       	ldi	r20, 0x20	; 32
 174:	51 e4       	ldi	r21, 0x41	; 65
 176:	0e 94 35 02 	call	0x46a	; 0x46a <__cmpsf2>
 17a:	88 23       	and	r24, r24
 17c:	04 f1       	brlt	.+64     	; 0x1be <find_decimal+0x5c>
	if (data < 100) { return 1; }
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	48 ec       	ldi	r20, 0xC8	; 200
 184:	52 e4       	ldi	r21, 0x42	; 66
 186:	c7 01       	movw	r24, r14
 188:	b6 01       	movw	r22, r12
 18a:	0e 94 35 02 	call	0x46a	; 0x46a <__cmpsf2>
 18e:	88 23       	and	r24, r24
 190:	cc f0       	brlt	.+50     	; 0x1c4 <find_decimal+0x62>
	if (data < 1000) { return 2; }
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	4a e7       	ldi	r20, 0x7A	; 122
 198:	54 e4       	ldi	r21, 0x44	; 68
 19a:	c7 01       	movw	r24, r14
 19c:	b6 01       	movw	r22, r12
 19e:	0e 94 35 02 	call	0x46a	; 0x46a <__cmpsf2>
	return 3;
 1a2:	08 2e       	mov	r0, r24
 1a4:	00 0c       	add	r0, r0
 1a6:	99 0b       	sbc	r25, r25
 1a8:	88 27       	eor	r24, r24
 1aa:	99 0f       	add	r25, r25
 1ac:	88 1f       	adc	r24, r24
 1ae:	99 27       	eor	r25, r25
 1b0:	23 e0       	ldi	r18, 0x03	; 3
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	a9 01       	movw	r20, r18
 1b6:	48 1b       	sub	r20, r24
 1b8:	59 0b       	sbc	r21, r25
 1ba:	ca 01       	movw	r24, r20
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <find_decimal+0x66>
	TCNT0 = 0; //Initialize timer0
 }
 
 //Finds the decimal place in the float
 unsigned int find_decimal(float data) {
	if (data < 10) { return 0; }
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <find_decimal+0x66>
	if (data < 100) { return 1; }
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
	if (data < 1000) { return 2; }
	return 3;
 }
 1c8:	ff 90       	pop	r15
 1ca:	ef 90       	pop	r14
 1cc:	df 90       	pop	r13
 1ce:	cf 90       	pop	r12
 1d0:	08 95       	ret

000001d2 <wololo>:

 //Converts our parameters into the value to send
 unsigned int wololo(uint8_t input, uint8_t position, uint8_t decimal) {
	unsigned int output = input;
 1d2:	90 e0       	ldi	r25, 0x00	; 0
	if (decimal == 1) { output += 16; }
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	09 f4       	brne	.+2      	; 0x1da <wololo+0x8>
 1d8:	40 96       	adiw	r24, 0x10	; 16
	if (position == 0) { output += 96; }
 1da:	61 11       	cpse	r22, r1
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <wololo+0x12>
 1de:	80 5a       	subi	r24, 0xA0	; 160
 1e0:	9f 4f       	sbci	r25, 0xFF	; 255
 1e2:	08 95       	ret
	if (position == 1) { output += 64; }
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	19 f4       	brne	.+6      	; 0x1ee <wololo+0x1c>
 1e8:	80 5c       	subi	r24, 0xC0	; 192
 1ea:	9f 4f       	sbci	r25, 0xFF	; 255
 1ec:	08 95       	ret
	if (position == 2) { output += 32; }
 1ee:	62 30       	cpi	r22, 0x02	; 2
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <wololo+0x22>
 1f2:	80 96       	adiw	r24, 0x20	; 32
	return output;
 1f4:	08 95       	ret

000001f6 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

volatile uint8_t counter = 0; //Counter for the number of times the TCNT0 compares correctly

int main(void) {
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	65 97       	sbiw	r28, 0x15	; 21
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
	uart_init();	
 20a:	0e 94 94 00 	call	0x128	; 0x128 <uart_init>
	timer0_init();
 20e:	0e 94 ac 00 	call	0x158	; 0x158 <timer0_init>
	float floatArray[4] = { 1234, 1235, 1236, 1237 }; //Array of values to send
 212:	80 e1       	ldi	r24, 0x10	; 16
 214:	e0 e0       	ldi	r30, 0x00	; 0
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	de 01       	movw	r26, r28
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	01 90       	ld	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	8a 95       	dec	r24
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x26>
	unsigned int floatIndex = 0;
 224:	81 2c       	mov	r8, r1
 226:	91 2c       	mov	r9, r1
		uint8_t dataArray[4];
		uint8_t index = 0;
		uint8_t decimalPos = 0;

		decimalPos = find_decimal(dataFloat); //Find the decimal place
		dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
 228:	0f 2e       	mov	r0, r31
 22a:	f3 e0       	ldi	r31, 0x03	; 3
 22c:	6f 2e       	mov	r6, r31
 22e:	71 2c       	mov	r7, r1
 230:	f0 2d       	mov	r31, r0
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
			if ((decimalPos == i) && ((3-decimalPos) > 0)) {
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
 232:	21 2c       	mov	r2, r1
 234:	32 2c       	mov	r3, r2
		decimalPos = find_decimal(dataFloat); //Find the decimal place
		dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
			if ((decimalPos == i) && ((3-decimalPos) > 0)) {
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	2d 8b       	std	Y+21, r18	; 0x15
	timer0_init();
	float floatArray[4] = { 1234, 1235, 1236, 1237 }; //Array of values to send
	unsigned int floatIndex = 0;

	while(1) {
		float dataFloat = floatArray[floatIndex]; //Select the value to send
 23a:	f4 01       	movw	r30, r8
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	8c 0f       	add	r24, r28
 24a:	9d 1f       	adc	r25, r29
 24c:	e8 0f       	add	r30, r24
 24e:	f9 1f       	adc	r31, r25
 250:	c0 80       	ld	r12, Z
 252:	d1 80       	ldd	r13, Z+1	; 0x01
 254:	e2 80       	ldd	r14, Z+2	; 0x02
 256:	f3 80       	ldd	r15, Z+3	; 0x03
		uint8_t hasDecimal = 0;
		uint8_t dataArray[4];
		uint8_t index = 0;
		uint8_t decimalPos = 0;

		decimalPos = find_decimal(dataFloat); //Find the decimal place
 258:	c7 01       	movw	r24, r14
 25a:	b6 01       	movw	r22, r12
 25c:	0e 94 b1 00 	call	0x162	; 0x162 <find_decimal>
 260:	5c 01       	movw	r10, r24
 262:	bb 24       	eor	r11, r11
		dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
 264:	23 01       	movw	r4, r6
 266:	4a 18       	sub	r4, r10
 268:	5b 08       	sbc	r5, r11
 26a:	b2 01       	movw	r22, r4
 26c:	05 2c       	mov	r0, r5
 26e:	00 0c       	add	r0, r0
 270:	88 0b       	sbc	r24, r24
 272:	99 0b       	sbc	r25, r25
 274:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__floatsisf>
 278:	9b 01       	movw	r18, r22
 27a:	ac 01       	movw	r20, r24
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	80 e2       	ldi	r24, 0x20	; 32
 282:	91 e4       	ldi	r25, 0x41	; 65
 284:	0e 94 8f 03 	call	0x71e	; 0x71e <pow>
 288:	a7 01       	movw	r20, r14
 28a:	96 01       	movw	r18, r12
 28c:	0e 94 22 03 	call	0x644	; 0x644 <__mulsf3>
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	5f e3       	ldi	r21, 0x3F	; 63
 298:	0e 94 c9 01 	call	0x392	; 0x392 <__addsf3>
 29c:	0e 94 3a 02 	call	0x474	; 0x474 <__fixsfsi>
 2a0:	7b 01       	movw	r14, r22
 2a2:	fe 01       	movw	r30, r28
 2a4:	75 96       	adiw	r30, 0x15	; 21
 2a6:	6f 01       	movw	r12, r30
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
 2a8:	83 01       	movw	r16, r6
			if ((decimalPos == i) && ((3-decimalPos) > 0)) {
 2aa:	0a 15       	cp	r16, r10
 2ac:	1b 05       	cpc	r17, r11
 2ae:	31 f4       	brne	.+12     	; 0x2bc <main+0xc6>
 2b0:	4d 89       	ldd	r20, Y+21	; 0x15
 2b2:	14 14       	cp	r1, r4
 2b4:	15 04       	cpc	r1, r5
 2b6:	1c f0       	brlt	.+6      	; 0x2be <main+0xc8>
 2b8:	43 2d       	mov	r20, r3
 2ba:	01 c0       	rjmp	.+2      	; 0x2be <main+0xc8>
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
 2bc:	43 2d       	mov	r20, r3
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
 2be:	97 01       	movw	r18, r14
 2c0:	ad ec       	ldi	r26, 0xCD	; 205
 2c2:	bc ec       	ldi	r27, 0xCC	; 204
 2c4:	0e 94 86 05 	call	0xb0c	; 0xb0c <__umulhisi3>
 2c8:	96 95       	lsr	r25
 2ca:	87 95       	ror	r24
 2cc:	96 95       	lsr	r25
 2ce:	87 95       	ror	r24
 2d0:	96 95       	lsr	r25
 2d2:	87 95       	ror	r24
 2d4:	9c 01       	movw	r18, r24
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	82 0f       	add	r24, r18
 2e8:	93 1f       	adc	r25, r19
 2ea:	60 2f       	mov	r22, r16
 2ec:	fe 2d       	mov	r31, r14
 2ee:	f8 1b       	sub	r31, r24
 2f0:	8f 2f       	mov	r24, r31
 2f2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <wololo>
 2f6:	f6 01       	movw	r30, r12
 2f8:	82 93       	st	-Z, r24
 2fa:	6f 01       	movw	r12, r30
			dataInt = dataInt/10;
 2fc:	97 01       	movw	r18, r14
 2fe:	ad ec       	ldi	r26, 0xCD	; 205
 300:	bc ec       	ldi	r27, 0xCC	; 204
 302:	0e 94 86 05 	call	0xb0c	; 0xb0c <__umulhisi3>
 306:	7c 01       	movw	r14, r24
 308:	f6 94       	lsr	r15
 30a:	e7 94       	ror	r14
 30c:	f6 94       	lsr	r15
 30e:	e7 94       	ror	r14
 310:	f6 94       	lsr	r15
 312:	e7 94       	ror	r14

		decimalPos = find_decimal(dataFloat); //Find the decimal place
		dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
 314:	01 50       	subi	r16, 0x01	; 1
 316:	11 09       	sbc	r17, r1
 318:	40 f6       	brcc	.-112    	; 0x2aa <main+0xb4>
 31a:	2f c0       	rjmp	.+94     	; 0x37a <main+0x184>
			dataInt = dataInt/10;
		}

		//Transmits data until we get TCNT0 = 191 twenty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
 31c:	e1 e1       	ldi	r30, 0x11	; 17
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	ec 0f       	add	r30, r28
 322:	fd 1f       	adc	r31, r29
 324:	e1 0f       	add	r30, r17
 326:	f1 1d       	adc	r31, r1
			uart_transmit(data);
 328:	80 81       	ld	r24, Z
 32a:	0e 94 a4 00 	call	0x148	; 0x148 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32e:	8f ed       	ldi	r24, 0xDF	; 223
 330:	9e e2       	ldi	r25, 0x2E	; 46
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <main+0x13c>
 336:	00 c0       	rjmp	.+0      	; 0x338 <main+0x142>
 338:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
 33a:	1f 5f       	subi	r17, 0xFF	; 255
			//Select next integer to send
			if (index == 4) {
 33c:	14 30       	cpi	r17, 0x04	; 4
 33e:	09 f4       	brne	.+2      	; 0x342 <main+0x14c>
				index = 0;
 340:	13 2d       	mov	r17, r3
			}
			//Polling mechanism
			if(TCNT0>=211) {
 342:	86 b5       	in	r24, 0x26	; 38
 344:	83 3d       	cpi	r24, 0xD3	; 211
 346:	50 f3       	brcs	.-44     	; 0x31c <main+0x126>
				TCNT0 = 0;
 348:	16 bc       	out	0x26, r1	; 38
				if (counter == 50) {
 34a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 34e:	82 33       	cpi	r24, 0x32	; 50
 350:	39 f4       	brne	.+14     	; 0x360 <main+0x16a>
					counter = 0;
 352:	20 92 10 01 	sts	0x0110, r2	; 0x800110 <__data_end>
					counter++;
				}
			}
		}
		//Select next float to send
		if (floatIndex == 3) { 
 356:	93 e0       	ldi	r25, 0x03	; 3
 358:	89 16       	cp	r8, r25
 35a:	91 04       	cpc	r9, r1
 35c:	39 f4       	brne	.+14     	; 0x36c <main+0x176>
 35e:	0a c0       	rjmp	.+20     	; 0x374 <main+0x17e>
				TCNT0 = 0;
				if (counter == 50) {
					counter = 0;
					break;
				} else {
					counter++;
 360:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 364:	8f 5f       	subi	r24, 0xFF	; 255
 366:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 36a:	d8 cf       	rjmp	.-80     	; 0x31c <main+0x126>
		}
		//Select next float to send
		if (floatIndex == 3) { 
			floatIndex = 0;
		} else {
			floatIndex++;
 36c:	ef ef       	ldi	r30, 0xFF	; 255
 36e:	8e 1a       	sub	r8, r30
 370:	9e 0a       	sbc	r9, r30
 372:	63 cf       	rjmp	.-314    	; 0x23a <main+0x44>
				}
			}
		}
		//Select next float to send
		if (floatIndex == 3) { 
			floatIndex = 0;
 374:	81 2c       	mov	r8, r1
 376:	91 2c       	mov	r9, r1
		} else {
			floatIndex++;
		}
	}
 378:	60 cf       	rjmp	.-320    	; 0x23a <main+0x44>
		}

		//Transmits data until we get TCNT0 = 191 twenty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
			uart_transmit(data);
 37a:	89 89       	ldd	r24, Y+17	; 0x11
 37c:	0e 94 a4 00 	call	0x148	; 0x148 <uart_transmit>
 380:	8f ed       	ldi	r24, 0xDF	; 223
 382:	9e e2       	ldi	r25, 0x2E	; 46
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <main+0x18e>
 388:	00 c0       	rjmp	.+0      	; 0x38a <main+0x194>
 38a:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
 38c:	11 e0       	ldi	r17, 0x01	; 1
 38e:	d9 cf       	rjmp	.-78     	; 0x342 <main+0x14c>

00000390 <__subsf3>:
 390:	50 58       	subi	r21, 0x80	; 128

00000392 <__addsf3>:
 392:	bb 27       	eor	r27, r27
 394:	aa 27       	eor	r26, r26
 396:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__addsf3x>
 39a:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_round>
 39e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fp_pscA>
 3a2:	38 f0       	brcs	.+14     	; 0x3b2 <__addsf3+0x20>
 3a4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fp_pscB>
 3a8:	20 f0       	brcs	.+8      	; 0x3b2 <__addsf3+0x20>
 3aa:	39 f4       	brne	.+14     	; 0x3ba <__addsf3+0x28>
 3ac:	9f 3f       	cpi	r25, 0xFF	; 255
 3ae:	19 f4       	brne	.+6      	; 0x3b6 <__addsf3+0x24>
 3b0:	26 f4       	brtc	.+8      	; 0x3ba <__addsf3+0x28>
 3b2:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_nan>
 3b6:	0e f4       	brtc	.+2      	; 0x3ba <__addsf3+0x28>
 3b8:	e0 95       	com	r30
 3ba:	e7 fb       	bst	r30, 7
 3bc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_inf>

000003c0 <__addsf3x>:
 3c0:	e9 2f       	mov	r30, r25
 3c2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_split3>
 3c6:	58 f3       	brcs	.-42     	; 0x39e <__addsf3+0xc>
 3c8:	ba 17       	cp	r27, r26
 3ca:	62 07       	cpc	r22, r18
 3cc:	73 07       	cpc	r23, r19
 3ce:	84 07       	cpc	r24, r20
 3d0:	95 07       	cpc	r25, r21
 3d2:	20 f0       	brcs	.+8      	; 0x3dc <__addsf3x+0x1c>
 3d4:	79 f4       	brne	.+30     	; 0x3f4 <__addsf3x+0x34>
 3d6:	a6 f5       	brtc	.+104    	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
 3d8:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_zero>
 3dc:	0e f4       	brtc	.+2      	; 0x3e0 <__addsf3x+0x20>
 3de:	e0 95       	com	r30
 3e0:	0b 2e       	mov	r0, r27
 3e2:	ba 2f       	mov	r27, r26
 3e4:	a0 2d       	mov	r26, r0
 3e6:	0b 01       	movw	r0, r22
 3e8:	b9 01       	movw	r22, r18
 3ea:	90 01       	movw	r18, r0
 3ec:	0c 01       	movw	r0, r24
 3ee:	ca 01       	movw	r24, r20
 3f0:	a0 01       	movw	r20, r0
 3f2:	11 24       	eor	r1, r1
 3f4:	ff 27       	eor	r31, r31
 3f6:	59 1b       	sub	r21, r25
 3f8:	99 f0       	breq	.+38     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 3fa:	59 3f       	cpi	r21, 0xF9	; 249
 3fc:	50 f4       	brcc	.+20     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 3fe:	50 3e       	cpi	r21, 0xE0	; 224
 400:	68 f1       	brcs	.+90     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 402:	1a 16       	cp	r1, r26
 404:	f0 40       	sbci	r31, 0x00	; 0
 406:	a2 2f       	mov	r26, r18
 408:	23 2f       	mov	r18, r19
 40a:	34 2f       	mov	r19, r20
 40c:	44 27       	eor	r20, r20
 40e:	58 5f       	subi	r21, 0xF8	; 248
 410:	f3 cf       	rjmp	.-26     	; 0x3f8 <__addsf3x+0x38>
 412:	46 95       	lsr	r20
 414:	37 95       	ror	r19
 416:	27 95       	ror	r18
 418:	a7 95       	ror	r26
 41a:	f0 40       	sbci	r31, 0x00	; 0
 41c:	53 95       	inc	r21
 41e:	c9 f7       	brne	.-14     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 420:	7e f4       	brtc	.+30     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
 422:	1f 16       	cp	r1, r31
 424:	ba 0b       	sbc	r27, r26
 426:	62 0b       	sbc	r22, r18
 428:	73 0b       	sbc	r23, r19
 42a:	84 0b       	sbc	r24, r20
 42c:	ba f0       	brmi	.+46     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 42e:	91 50       	subi	r25, 0x01	; 1
 430:	a1 f0       	breq	.+40     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
 432:	ff 0f       	add	r31, r31
 434:	bb 1f       	adc	r27, r27
 436:	66 1f       	adc	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	88 1f       	adc	r24, r24
 43c:	c2 f7       	brpl	.-16     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
 43e:	0e c0       	rjmp	.+28     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 440:	ba 0f       	add	r27, r26
 442:	62 1f       	adc	r22, r18
 444:	73 1f       	adc	r23, r19
 446:	84 1f       	adc	r24, r20
 448:	48 f4       	brcc	.+18     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 44a:	87 95       	ror	r24
 44c:	77 95       	ror	r23
 44e:	67 95       	ror	r22
 450:	b7 95       	ror	r27
 452:	f7 95       	ror	r31
 454:	9e 3f       	cpi	r25, 0xFE	; 254
 456:	08 f0       	brcs	.+2      	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
 458:	b0 cf       	rjmp	.-160    	; 0x3ba <__addsf3+0x28>
 45a:	93 95       	inc	r25
 45c:	88 0f       	add	r24, r24
 45e:	08 f0       	brcs	.+2      	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
 460:	99 27       	eor	r25, r25
 462:	ee 0f       	add	r30, r30
 464:	97 95       	ror	r25
 466:	87 95       	ror	r24
 468:	08 95       	ret

0000046a <__cmpsf2>:
 46a:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_cmp>
 46e:	08 f4       	brcc	.+2      	; 0x472 <__cmpsf2+0x8>
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	08 95       	ret

00000474 <__fixsfsi>:
 474:	0e 94 41 02 	call	0x482	; 0x482 <__fixunssfsi>
 478:	68 94       	set
 47a:	b1 11       	cpse	r27, r1
 47c:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_szero>
 480:	08 95       	ret

00000482 <__fixunssfsi>:
 482:	0e 94 01 03 	call	0x602	; 0x602 <__fp_splitA>
 486:	88 f0       	brcs	.+34     	; 0x4aa <__fixunssfsi+0x28>
 488:	9f 57       	subi	r25, 0x7F	; 127
 48a:	98 f0       	brcs	.+38     	; 0x4b2 <__fixunssfsi+0x30>
 48c:	b9 2f       	mov	r27, r25
 48e:	99 27       	eor	r25, r25
 490:	b7 51       	subi	r27, 0x17	; 23
 492:	b0 f0       	brcs	.+44     	; 0x4c0 <__fixunssfsi+0x3e>
 494:	e1 f0       	breq	.+56     	; 0x4ce <__fixunssfsi+0x4c>
 496:	66 0f       	add	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	88 1f       	adc	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	1a f0       	brmi	.+6      	; 0x4a6 <__fixunssfsi+0x24>
 4a0:	ba 95       	dec	r27
 4a2:	c9 f7       	brne	.-14     	; 0x496 <__fixunssfsi+0x14>
 4a4:	14 c0       	rjmp	.+40     	; 0x4ce <__fixunssfsi+0x4c>
 4a6:	b1 30       	cpi	r27, 0x01	; 1
 4a8:	91 f0       	breq	.+36     	; 0x4ce <__fixunssfsi+0x4c>
 4aa:	0e 94 1b 03 	call	0x636	; 0x636 <__fp_zero>
 4ae:	b1 e0       	ldi	r27, 0x01	; 1
 4b0:	08 95       	ret
 4b2:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_zero>
 4b6:	67 2f       	mov	r22, r23
 4b8:	78 2f       	mov	r23, r24
 4ba:	88 27       	eor	r24, r24
 4bc:	b8 5f       	subi	r27, 0xF8	; 248
 4be:	39 f0       	breq	.+14     	; 0x4ce <__fixunssfsi+0x4c>
 4c0:	b9 3f       	cpi	r27, 0xF9	; 249
 4c2:	cc f3       	brlt	.-14     	; 0x4b6 <__fixunssfsi+0x34>
 4c4:	86 95       	lsr	r24
 4c6:	77 95       	ror	r23
 4c8:	67 95       	ror	r22
 4ca:	b3 95       	inc	r27
 4cc:	d9 f7       	brne	.-10     	; 0x4c4 <__fixunssfsi+0x42>
 4ce:	3e f4       	brtc	.+14     	; 0x4de <__fixunssfsi+0x5c>
 4d0:	90 95       	com	r25
 4d2:	80 95       	com	r24
 4d4:	70 95       	com	r23
 4d6:	61 95       	neg	r22
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255
 4da:	8f 4f       	sbci	r24, 0xFF	; 255
 4dc:	9f 4f       	sbci	r25, 0xFF	; 255
 4de:	08 95       	ret

000004e0 <__floatunsisf>:
 4e0:	e8 94       	clt
 4e2:	09 c0       	rjmp	.+18     	; 0x4f6 <__floatsisf+0x12>

000004e4 <__floatsisf>:
 4e4:	97 fb       	bst	r25, 7
 4e6:	3e f4       	brtc	.+14     	; 0x4f6 <__floatsisf+0x12>
 4e8:	90 95       	com	r25
 4ea:	80 95       	com	r24
 4ec:	70 95       	com	r23
 4ee:	61 95       	neg	r22
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	8f 4f       	sbci	r24, 0xFF	; 255
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	99 23       	and	r25, r25
 4f8:	a9 f0       	breq	.+42     	; 0x524 <__floatsisf+0x40>
 4fa:	f9 2f       	mov	r31, r25
 4fc:	96 e9       	ldi	r25, 0x96	; 150
 4fe:	bb 27       	eor	r27, r27
 500:	93 95       	inc	r25
 502:	f6 95       	lsr	r31
 504:	87 95       	ror	r24
 506:	77 95       	ror	r23
 508:	67 95       	ror	r22
 50a:	b7 95       	ror	r27
 50c:	f1 11       	cpse	r31, r1
 50e:	f8 cf       	rjmp	.-16     	; 0x500 <__floatsisf+0x1c>
 510:	fa f4       	brpl	.+62     	; 0x550 <__floatsisf+0x6c>
 512:	bb 0f       	add	r27, r27
 514:	11 f4       	brne	.+4      	; 0x51a <__floatsisf+0x36>
 516:	60 ff       	sbrs	r22, 0
 518:	1b c0       	rjmp	.+54     	; 0x550 <__floatsisf+0x6c>
 51a:	6f 5f       	subi	r22, 0xFF	; 255
 51c:	7f 4f       	sbci	r23, 0xFF	; 255
 51e:	8f 4f       	sbci	r24, 0xFF	; 255
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	16 c0       	rjmp	.+44     	; 0x550 <__floatsisf+0x6c>
 524:	88 23       	and	r24, r24
 526:	11 f0       	breq	.+4      	; 0x52c <__floatsisf+0x48>
 528:	96 e9       	ldi	r25, 0x96	; 150
 52a:	11 c0       	rjmp	.+34     	; 0x54e <__floatsisf+0x6a>
 52c:	77 23       	and	r23, r23
 52e:	21 f0       	breq	.+8      	; 0x538 <__floatsisf+0x54>
 530:	9e e8       	ldi	r25, 0x8E	; 142
 532:	87 2f       	mov	r24, r23
 534:	76 2f       	mov	r23, r22
 536:	05 c0       	rjmp	.+10     	; 0x542 <__floatsisf+0x5e>
 538:	66 23       	and	r22, r22
 53a:	71 f0       	breq	.+28     	; 0x558 <__floatsisf+0x74>
 53c:	96 e8       	ldi	r25, 0x86	; 134
 53e:	86 2f       	mov	r24, r22
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	2a f0       	brmi	.+10     	; 0x550 <__floatsisf+0x6c>
 546:	9a 95       	dec	r25
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	88 1f       	adc	r24, r24
 54e:	da f7       	brpl	.-10     	; 0x546 <__floatsisf+0x62>
 550:	88 0f       	add	r24, r24
 552:	96 95       	lsr	r25
 554:	87 95       	ror	r24
 556:	97 f9       	bld	r25, 7
 558:	08 95       	ret

0000055a <__fp_cmp>:
 55a:	99 0f       	add	r25, r25
 55c:	00 08       	sbc	r0, r0
 55e:	55 0f       	add	r21, r21
 560:	aa 0b       	sbc	r26, r26
 562:	e0 e8       	ldi	r30, 0x80	; 128
 564:	fe ef       	ldi	r31, 0xFE	; 254
 566:	16 16       	cp	r1, r22
 568:	17 06       	cpc	r1, r23
 56a:	e8 07       	cpc	r30, r24
 56c:	f9 07       	cpc	r31, r25
 56e:	c0 f0       	brcs	.+48     	; 0x5a0 <__fp_cmp+0x46>
 570:	12 16       	cp	r1, r18
 572:	13 06       	cpc	r1, r19
 574:	e4 07       	cpc	r30, r20
 576:	f5 07       	cpc	r31, r21
 578:	98 f0       	brcs	.+38     	; 0x5a0 <__fp_cmp+0x46>
 57a:	62 1b       	sub	r22, r18
 57c:	73 0b       	sbc	r23, r19
 57e:	84 0b       	sbc	r24, r20
 580:	95 0b       	sbc	r25, r21
 582:	39 f4       	brne	.+14     	; 0x592 <__fp_cmp+0x38>
 584:	0a 26       	eor	r0, r26
 586:	61 f0       	breq	.+24     	; 0x5a0 <__fp_cmp+0x46>
 588:	23 2b       	or	r18, r19
 58a:	24 2b       	or	r18, r20
 58c:	25 2b       	or	r18, r21
 58e:	21 f4       	brne	.+8      	; 0x598 <__fp_cmp+0x3e>
 590:	08 95       	ret
 592:	0a 26       	eor	r0, r26
 594:	09 f4       	brne	.+2      	; 0x598 <__fp_cmp+0x3e>
 596:	a1 40       	sbci	r26, 0x01	; 1
 598:	a6 95       	lsr	r26
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	81 1d       	adc	r24, r1
 59e:	81 1d       	adc	r24, r1
 5a0:	08 95       	ret

000005a2 <__fp_inf>:
 5a2:	97 f9       	bld	r25, 7
 5a4:	9f 67       	ori	r25, 0x7F	; 127
 5a6:	80 e8       	ldi	r24, 0x80	; 128
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	08 95       	ret

000005ae <__fp_nan>:
 5ae:	9f ef       	ldi	r25, 0xFF	; 255
 5b0:	80 ec       	ldi	r24, 0xC0	; 192
 5b2:	08 95       	ret

000005b4 <__fp_pscA>:
 5b4:	00 24       	eor	r0, r0
 5b6:	0a 94       	dec	r0
 5b8:	16 16       	cp	r1, r22
 5ba:	17 06       	cpc	r1, r23
 5bc:	18 06       	cpc	r1, r24
 5be:	09 06       	cpc	r0, r25
 5c0:	08 95       	ret

000005c2 <__fp_pscB>:
 5c2:	00 24       	eor	r0, r0
 5c4:	0a 94       	dec	r0
 5c6:	12 16       	cp	r1, r18
 5c8:	13 06       	cpc	r1, r19
 5ca:	14 06       	cpc	r1, r20
 5cc:	05 06       	cpc	r0, r21
 5ce:	08 95       	ret

000005d0 <__fp_round>:
 5d0:	09 2e       	mov	r0, r25
 5d2:	03 94       	inc	r0
 5d4:	00 0c       	add	r0, r0
 5d6:	11 f4       	brne	.+4      	; 0x5dc <__fp_round+0xc>
 5d8:	88 23       	and	r24, r24
 5da:	52 f0       	brmi	.+20     	; 0x5f0 <__fp_round+0x20>
 5dc:	bb 0f       	add	r27, r27
 5de:	40 f4       	brcc	.+16     	; 0x5f0 <__fp_round+0x20>
 5e0:	bf 2b       	or	r27, r31
 5e2:	11 f4       	brne	.+4      	; 0x5e8 <__fp_round+0x18>
 5e4:	60 ff       	sbrs	r22, 0
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__fp_round+0x20>
 5e8:	6f 5f       	subi	r22, 0xFF	; 255
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	8f 4f       	sbci	r24, 0xFF	; 255
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	08 95       	ret

000005f2 <__fp_split3>:
 5f2:	57 fd       	sbrc	r21, 7
 5f4:	90 58       	subi	r25, 0x80	; 128
 5f6:	44 0f       	add	r20, r20
 5f8:	55 1f       	adc	r21, r21
 5fa:	59 f0       	breq	.+22     	; 0x612 <__fp_splitA+0x10>
 5fc:	5f 3f       	cpi	r21, 0xFF	; 255
 5fe:	71 f0       	breq	.+28     	; 0x61c <__fp_splitA+0x1a>
 600:	47 95       	ror	r20

00000602 <__fp_splitA>:
 602:	88 0f       	add	r24, r24
 604:	97 fb       	bst	r25, 7
 606:	99 1f       	adc	r25, r25
 608:	61 f0       	breq	.+24     	; 0x622 <__fp_splitA+0x20>
 60a:	9f 3f       	cpi	r25, 0xFF	; 255
 60c:	79 f0       	breq	.+30     	; 0x62c <__fp_splitA+0x2a>
 60e:	87 95       	ror	r24
 610:	08 95       	ret
 612:	12 16       	cp	r1, r18
 614:	13 06       	cpc	r1, r19
 616:	14 06       	cpc	r1, r20
 618:	55 1f       	adc	r21, r21
 61a:	f2 cf       	rjmp	.-28     	; 0x600 <__fp_split3+0xe>
 61c:	46 95       	lsr	r20
 61e:	f1 df       	rcall	.-30     	; 0x602 <__fp_splitA>
 620:	08 c0       	rjmp	.+16     	; 0x632 <__fp_splitA+0x30>
 622:	16 16       	cp	r1, r22
 624:	17 06       	cpc	r1, r23
 626:	18 06       	cpc	r1, r24
 628:	99 1f       	adc	r25, r25
 62a:	f1 cf       	rjmp	.-30     	; 0x60e <__fp_splitA+0xc>
 62c:	86 95       	lsr	r24
 62e:	71 05       	cpc	r23, r1
 630:	61 05       	cpc	r22, r1
 632:	08 94       	sec
 634:	08 95       	ret

00000636 <__fp_zero>:
 636:	e8 94       	clt

00000638 <__fp_szero>:
 638:	bb 27       	eor	r27, r27
 63a:	66 27       	eor	r22, r22
 63c:	77 27       	eor	r23, r23
 63e:	cb 01       	movw	r24, r22
 640:	97 f9       	bld	r25, 7
 642:	08 95       	ret

00000644 <__mulsf3>:
 644:	0e 94 35 03 	call	0x66a	; 0x66a <__mulsf3x>
 648:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_round>
 64c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fp_pscA>
 650:	38 f0       	brcs	.+14     	; 0x660 <__mulsf3+0x1c>
 652:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fp_pscB>
 656:	20 f0       	brcs	.+8      	; 0x660 <__mulsf3+0x1c>
 658:	95 23       	and	r25, r21
 65a:	11 f0       	breq	.+4      	; 0x660 <__mulsf3+0x1c>
 65c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_inf>
 660:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_nan>
 664:	11 24       	eor	r1, r1
 666:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_szero>

0000066a <__mulsf3x>:
 66a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_split3>
 66e:	70 f3       	brcs	.-36     	; 0x64c <__mulsf3+0x8>

00000670 <__mulsf3_pse>:
 670:	95 9f       	mul	r25, r21
 672:	c1 f3       	breq	.-16     	; 0x664 <__mulsf3+0x20>
 674:	95 0f       	add	r25, r21
 676:	50 e0       	ldi	r21, 0x00	; 0
 678:	55 1f       	adc	r21, r21
 67a:	62 9f       	mul	r22, r18
 67c:	f0 01       	movw	r30, r0
 67e:	72 9f       	mul	r23, r18
 680:	bb 27       	eor	r27, r27
 682:	f0 0d       	add	r31, r0
 684:	b1 1d       	adc	r27, r1
 686:	63 9f       	mul	r22, r19
 688:	aa 27       	eor	r26, r26
 68a:	f0 0d       	add	r31, r0
 68c:	b1 1d       	adc	r27, r1
 68e:	aa 1f       	adc	r26, r26
 690:	64 9f       	mul	r22, r20
 692:	66 27       	eor	r22, r22
 694:	b0 0d       	add	r27, r0
 696:	a1 1d       	adc	r26, r1
 698:	66 1f       	adc	r22, r22
 69a:	82 9f       	mul	r24, r18
 69c:	22 27       	eor	r18, r18
 69e:	b0 0d       	add	r27, r0
 6a0:	a1 1d       	adc	r26, r1
 6a2:	62 1f       	adc	r22, r18
 6a4:	73 9f       	mul	r23, r19
 6a6:	b0 0d       	add	r27, r0
 6a8:	a1 1d       	adc	r26, r1
 6aa:	62 1f       	adc	r22, r18
 6ac:	83 9f       	mul	r24, r19
 6ae:	a0 0d       	add	r26, r0
 6b0:	61 1d       	adc	r22, r1
 6b2:	22 1f       	adc	r18, r18
 6b4:	74 9f       	mul	r23, r20
 6b6:	33 27       	eor	r19, r19
 6b8:	a0 0d       	add	r26, r0
 6ba:	61 1d       	adc	r22, r1
 6bc:	23 1f       	adc	r18, r19
 6be:	84 9f       	mul	r24, r20
 6c0:	60 0d       	add	r22, r0
 6c2:	21 1d       	adc	r18, r1
 6c4:	82 2f       	mov	r24, r18
 6c6:	76 2f       	mov	r23, r22
 6c8:	6a 2f       	mov	r22, r26
 6ca:	11 24       	eor	r1, r1
 6cc:	9f 57       	subi	r25, 0x7F	; 127
 6ce:	50 40       	sbci	r21, 0x00	; 0
 6d0:	9a f0       	brmi	.+38     	; 0x6f8 <__mulsf3_pse+0x88>
 6d2:	f1 f0       	breq	.+60     	; 0x710 <__mulsf3_pse+0xa0>
 6d4:	88 23       	and	r24, r24
 6d6:	4a f0       	brmi	.+18     	; 0x6ea <__mulsf3_pse+0x7a>
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	bb 1f       	adc	r27, r27
 6de:	66 1f       	adc	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	88 1f       	adc	r24, r24
 6e4:	91 50       	subi	r25, 0x01	; 1
 6e6:	50 40       	sbci	r21, 0x00	; 0
 6e8:	a9 f7       	brne	.-22     	; 0x6d4 <__mulsf3_pse+0x64>
 6ea:	9e 3f       	cpi	r25, 0xFE	; 254
 6ec:	51 05       	cpc	r21, r1
 6ee:	80 f0       	brcs	.+32     	; 0x710 <__mulsf3_pse+0xa0>
 6f0:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_inf>
 6f4:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_szero>
 6f8:	5f 3f       	cpi	r21, 0xFF	; 255
 6fa:	e4 f3       	brlt	.-8      	; 0x6f4 <__mulsf3_pse+0x84>
 6fc:	98 3e       	cpi	r25, 0xE8	; 232
 6fe:	d4 f3       	brlt	.-12     	; 0x6f4 <__mulsf3_pse+0x84>
 700:	86 95       	lsr	r24
 702:	77 95       	ror	r23
 704:	67 95       	ror	r22
 706:	b7 95       	ror	r27
 708:	f7 95       	ror	r31
 70a:	e7 95       	ror	r30
 70c:	9f 5f       	subi	r25, 0xFF	; 255
 70e:	c1 f7       	brne	.-16     	; 0x700 <__mulsf3_pse+0x90>
 710:	fe 2b       	or	r31, r30
 712:	88 0f       	add	r24, r24
 714:	91 1d       	adc	r25, r1
 716:	96 95       	lsr	r25
 718:	87 95       	ror	r24
 71a:	97 f9       	bld	r25, 7
 71c:	08 95       	ret

0000071e <pow>:
 71e:	fa 01       	movw	r30, r20
 720:	ee 0f       	add	r30, r30
 722:	ff 1f       	adc	r31, r31
 724:	30 96       	adiw	r30, 0x00	; 0
 726:	21 05       	cpc	r18, r1
 728:	31 05       	cpc	r19, r1
 72a:	a1 f1       	breq	.+104    	; 0x794 <pow+0x76>
 72c:	61 15       	cp	r22, r1
 72e:	71 05       	cpc	r23, r1
 730:	61 f4       	brne	.+24     	; 0x74a <pow+0x2c>
 732:	80 38       	cpi	r24, 0x80	; 128
 734:	bf e3       	ldi	r27, 0x3F	; 63
 736:	9b 07       	cpc	r25, r27
 738:	49 f1       	breq	.+82     	; 0x78c <pow+0x6e>
 73a:	68 94       	set
 73c:	90 38       	cpi	r25, 0x80	; 128
 73e:	81 05       	cpc	r24, r1
 740:	61 f0       	breq	.+24     	; 0x75a <pow+0x3c>
 742:	80 38       	cpi	r24, 0x80	; 128
 744:	bf ef       	ldi	r27, 0xFF	; 255
 746:	9b 07       	cpc	r25, r27
 748:	41 f0       	breq	.+16     	; 0x75a <pow+0x3c>
 74a:	99 23       	and	r25, r25
 74c:	4a f5       	brpl	.+82     	; 0x7a0 <pow+0x82>
 74e:	ff 3f       	cpi	r31, 0xFF	; 255
 750:	e1 05       	cpc	r30, r1
 752:	31 05       	cpc	r19, r1
 754:	21 05       	cpc	r18, r1
 756:	19 f1       	breq	.+70     	; 0x79e <pow+0x80>
 758:	e8 94       	clt
 75a:	08 94       	sec
 75c:	e7 95       	ror	r30
 75e:	d9 01       	movw	r26, r18
 760:	aa 23       	and	r26, r26
 762:	29 f4       	brne	.+10     	; 0x76e <pow+0x50>
 764:	ab 2f       	mov	r26, r27
 766:	be 2f       	mov	r27, r30
 768:	f8 5f       	subi	r31, 0xF8	; 248
 76a:	d0 f3       	brcs	.-12     	; 0x760 <pow+0x42>
 76c:	10 c0       	rjmp	.+32     	; 0x78e <pow+0x70>
 76e:	ff 5f       	subi	r31, 0xFF	; 255
 770:	70 f4       	brcc	.+28     	; 0x78e <pow+0x70>
 772:	a6 95       	lsr	r26
 774:	e0 f7       	brcc	.-8      	; 0x76e <pow+0x50>
 776:	f7 39       	cpi	r31, 0x97	; 151
 778:	50 f0       	brcs	.+20     	; 0x78e <pow+0x70>
 77a:	19 f0       	breq	.+6      	; 0x782 <pow+0x64>
 77c:	ff 3a       	cpi	r31, 0xAF	; 175
 77e:	38 f4       	brcc	.+14     	; 0x78e <pow+0x70>
 780:	9f 77       	andi	r25, 0x7F	; 127
 782:	9f 93       	push	r25
 784:	0d d0       	rcall	.+26     	; 0x7a0 <pow+0x82>
 786:	0f 90       	pop	r0
 788:	07 fc       	sbrc	r0, 7
 78a:	90 58       	subi	r25, 0x80	; 128
 78c:	08 95       	ret
 78e:	46 f0       	brts	.+16     	; 0x7a0 <pow+0x82>
 790:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_nan>
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	80 e8       	ldi	r24, 0x80	; 128
 79a:	9f e3       	ldi	r25, 0x3F	; 63
 79c:	08 95       	ret
 79e:	4f e7       	ldi	r20, 0x7F	; 127
 7a0:	9f 77       	andi	r25, 0x7F	; 127
 7a2:	5f 93       	push	r21
 7a4:	4f 93       	push	r20
 7a6:	3f 93       	push	r19
 7a8:	2f 93       	push	r18
 7aa:	0e 94 8a 04 	call	0x914	; 0x914 <log>
 7ae:	2f 91       	pop	r18
 7b0:	3f 91       	pop	r19
 7b2:	4f 91       	pop	r20
 7b4:	5f 91       	pop	r21
 7b6:	0e 94 22 03 	call	0x644	; 0x644 <__mulsf3>
 7ba:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <exp>
 7be:	29 f4       	brne	.+10     	; 0x7ca <pow+0xac>
 7c0:	16 f0       	brts	.+4      	; 0x7c6 <pow+0xa8>
 7c2:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_inf>
 7c6:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_zero>
 7ca:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_nan>

000007ce <exp>:
 7ce:	0e 94 01 03 	call	0x602	; 0x602 <__fp_splitA>
 7d2:	a8 f3       	brcs	.-22     	; 0x7be <pow+0xa0>
 7d4:	96 38       	cpi	r25, 0x86	; 134
 7d6:	a0 f7       	brcc	.-24     	; 0x7c0 <pow+0xa2>
 7d8:	07 f8       	bld	r0, 7
 7da:	0f 92       	push	r0
 7dc:	e8 94       	clt
 7de:	2b e3       	ldi	r18, 0x3B	; 59
 7e0:	3a ea       	ldi	r19, 0xAA	; 170
 7e2:	48 eb       	ldi	r20, 0xB8	; 184
 7e4:	5f e7       	ldi	r21, 0x7F	; 127
 7e6:	0e 94 38 03 	call	0x670	; 0x670 <__mulsf3_pse>
 7ea:	0f 92       	push	r0
 7ec:	0f 92       	push	r0
 7ee:	0f 92       	push	r0
 7f0:	4d b7       	in	r20, 0x3d	; 61
 7f2:	5e b7       	in	r21, 0x3e	; 62
 7f4:	0f 92       	push	r0
 7f6:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <modf>
 7fa:	e8 e6       	ldi	r30, 0x68	; 104
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	0e 94 19 04 	call	0x832	; 0x832 <__fp_powser>
 802:	4f 91       	pop	r20
 804:	5f 91       	pop	r21
 806:	ef 91       	pop	r30
 808:	ff 91       	pop	r31
 80a:	e5 95       	asr	r30
 80c:	ee 1f       	adc	r30, r30
 80e:	ff 1f       	adc	r31, r31
 810:	49 f0       	breq	.+18     	; 0x824 <exp+0x56>
 812:	fe 57       	subi	r31, 0x7E	; 126
 814:	e0 68       	ori	r30, 0x80	; 128
 816:	44 27       	eor	r20, r20
 818:	ee 0f       	add	r30, r30
 81a:	44 1f       	adc	r20, r20
 81c:	fa 95       	dec	r31
 81e:	e1 f7       	brne	.-8      	; 0x818 <exp+0x4a>
 820:	41 95       	neg	r20
 822:	55 0b       	sbc	r21, r21
 824:	0e 94 4c 04 	call	0x898	; 0x898 <ldexp>
 828:	0f 90       	pop	r0
 82a:	07 fe       	sbrs	r0, 7
 82c:	0c 94 40 04 	jmp	0x880	; 0x880 <inverse>
 830:	08 95       	ret

00000832 <__fp_powser>:
 832:	df 93       	push	r29
 834:	cf 93       	push	r28
 836:	1f 93       	push	r17
 838:	0f 93       	push	r16
 83a:	ff 92       	push	r15
 83c:	ef 92       	push	r14
 83e:	df 92       	push	r13
 840:	7b 01       	movw	r14, r22
 842:	8c 01       	movw	r16, r24
 844:	68 94       	set
 846:	06 c0       	rjmp	.+12     	; 0x854 <__fp_powser+0x22>
 848:	da 2e       	mov	r13, r26
 84a:	ef 01       	movw	r28, r30
 84c:	0e 94 35 03 	call	0x66a	; 0x66a <__mulsf3x>
 850:	fe 01       	movw	r30, r28
 852:	e8 94       	clt
 854:	a5 91       	lpm	r26, Z+
 856:	25 91       	lpm	r18, Z+
 858:	35 91       	lpm	r19, Z+
 85a:	45 91       	lpm	r20, Z+
 85c:	55 91       	lpm	r21, Z+
 85e:	a6 f3       	brts	.-24     	; 0x848 <__fp_powser+0x16>
 860:	ef 01       	movw	r28, r30
 862:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__addsf3x>
 866:	fe 01       	movw	r30, r28
 868:	97 01       	movw	r18, r14
 86a:	a8 01       	movw	r20, r16
 86c:	da 94       	dec	r13
 86e:	69 f7       	brne	.-38     	; 0x84a <__fp_powser+0x18>
 870:	df 90       	pop	r13
 872:	ef 90       	pop	r14
 874:	ff 90       	pop	r15
 876:	0f 91       	pop	r16
 878:	1f 91       	pop	r17
 87a:	cf 91       	pop	r28
 87c:	df 91       	pop	r29
 87e:	08 95       	ret

00000880 <inverse>:
 880:	9b 01       	movw	r18, r22
 882:	ac 01       	movw	r20, r24
 884:	60 e0       	ldi	r22, 0x00	; 0
 886:	70 e0       	ldi	r23, 0x00	; 0
 888:	80 e8       	ldi	r24, 0x80	; 128
 88a:	9f e3       	ldi	r25, 0x3F	; 63
 88c:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__divsf3>
 890:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_inf>
 894:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__fp_mpack>

00000898 <ldexp>:
 898:	0e 94 01 03 	call	0x602	; 0x602 <__fp_splitA>
 89c:	d8 f3       	brcs	.-10     	; 0x894 <inverse+0x14>
 89e:	99 23       	and	r25, r25
 8a0:	c9 f3       	breq	.-14     	; 0x894 <inverse+0x14>
 8a2:	94 0f       	add	r25, r20
 8a4:	51 1d       	adc	r21, r1
 8a6:	a3 f3       	brvs	.-24     	; 0x890 <inverse+0x10>
 8a8:	91 50       	subi	r25, 0x01	; 1
 8aa:	50 40       	sbci	r21, 0x00	; 0
 8ac:	94 f0       	brlt	.+36     	; 0x8d2 <ldexp+0x3a>
 8ae:	59 f0       	breq	.+22     	; 0x8c6 <ldexp+0x2e>
 8b0:	88 23       	and	r24, r24
 8b2:	32 f0       	brmi	.+12     	; 0x8c0 <ldexp+0x28>
 8b4:	66 0f       	add	r22, r22
 8b6:	77 1f       	adc	r23, r23
 8b8:	88 1f       	adc	r24, r24
 8ba:	91 50       	subi	r25, 0x01	; 1
 8bc:	50 40       	sbci	r21, 0x00	; 0
 8be:	c1 f7       	brne	.-16     	; 0x8b0 <ldexp+0x18>
 8c0:	9e 3f       	cpi	r25, 0xFE	; 254
 8c2:	51 05       	cpc	r21, r1
 8c4:	2c f7       	brge	.-54     	; 0x890 <inverse+0x10>
 8c6:	88 0f       	add	r24, r24
 8c8:	91 1d       	adc	r25, r1
 8ca:	96 95       	lsr	r25
 8cc:	87 95       	ror	r24
 8ce:	97 f9       	bld	r25, 7
 8d0:	08 95       	ret
 8d2:	5f 3f       	cpi	r21, 0xFF	; 255
 8d4:	ac f0       	brlt	.+42     	; 0x900 <__stack+0x1>
 8d6:	98 3e       	cpi	r25, 0xE8	; 232
 8d8:	9c f0       	brlt	.+38     	; 0x900 <__stack+0x1>
 8da:	bb 27       	eor	r27, r27
 8dc:	86 95       	lsr	r24
 8de:	77 95       	ror	r23
 8e0:	67 95       	ror	r22
 8e2:	b7 95       	ror	r27
 8e4:	08 f4       	brcc	.+2      	; 0x8e8 <ldexp+0x50>
 8e6:	b1 60       	ori	r27, 0x01	; 1
 8e8:	93 95       	inc	r25
 8ea:	c1 f7       	brne	.-16     	; 0x8dc <ldexp+0x44>
 8ec:	bb 0f       	add	r27, r27
 8ee:	58 f7       	brcc	.-42     	; 0x8c6 <ldexp+0x2e>
 8f0:	11 f4       	brne	.+4      	; 0x8f6 <ldexp+0x5e>
 8f2:	60 ff       	sbrs	r22, 0
 8f4:	e8 cf       	rjmp	.-48     	; 0x8c6 <ldexp+0x2e>
 8f6:	6f 5f       	subi	r22, 0xFF	; 255
 8f8:	7f 4f       	sbci	r23, 0xFF	; 255
 8fa:	8f 4f       	sbci	r24, 0xFF	; 255
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	e3 cf       	rjmp	.-58     	; 0x8c6 <ldexp+0x2e>
 900:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_szero>
 904:	16 f0       	brts	.+4      	; 0x90a <__stack+0xb>
 906:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__fp_mpack>
 90a:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_nan>
 90e:	68 94       	set
 910:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_inf>

00000914 <log>:
 914:	0e 94 01 03 	call	0x602	; 0x602 <__fp_splitA>
 918:	a8 f3       	brcs	.-22     	; 0x904 <__stack+0x5>
 91a:	99 23       	and	r25, r25
 91c:	c1 f3       	breq	.-16     	; 0x90e <__stack+0xf>
 91e:	ae f3       	brts	.-22     	; 0x90a <__stack+0xb>
 920:	df 93       	push	r29
 922:	cf 93       	push	r28
 924:	1f 93       	push	r17
 926:	0f 93       	push	r16
 928:	ff 92       	push	r15
 92a:	c9 2f       	mov	r28, r25
 92c:	dd 27       	eor	r29, r29
 92e:	88 23       	and	r24, r24
 930:	2a f0       	brmi	.+10     	; 0x93c <log+0x28>
 932:	21 97       	sbiw	r28, 0x01	; 1
 934:	66 0f       	add	r22, r22
 936:	77 1f       	adc	r23, r23
 938:	88 1f       	adc	r24, r24
 93a:	da f7       	brpl	.-10     	; 0x932 <log+0x1e>
 93c:	20 e0       	ldi	r18, 0x00	; 0
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	40 e8       	ldi	r20, 0x80	; 128
 942:	5f eb       	ldi	r21, 0xBF	; 191
 944:	9f e3       	ldi	r25, 0x3F	; 63
 946:	88 39       	cpi	r24, 0x98	; 152
 948:	20 f0       	brcs	.+8      	; 0x952 <log+0x3e>
 94a:	80 3e       	cpi	r24, 0xE0	; 224
 94c:	38 f0       	brcs	.+14     	; 0x95c <log+0x48>
 94e:	21 96       	adiw	r28, 0x01	; 1
 950:	8f 77       	andi	r24, 0x7F	; 127
 952:	0e 94 c9 01 	call	0x392	; 0x392 <__addsf3>
 956:	e0 e9       	ldi	r30, 0x90	; 144
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	04 c0       	rjmp	.+8      	; 0x964 <log+0x50>
 95c:	0e 94 c9 01 	call	0x392	; 0x392 <__addsf3>
 960:	ed eb       	ldi	r30, 0xBD	; 189
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	0e 94 19 04 	call	0x832	; 0x832 <__fp_powser>
 968:	8b 01       	movw	r16, r22
 96a:	be 01       	movw	r22, r28
 96c:	ec 01       	movw	r28, r24
 96e:	fb 2e       	mov	r15, r27
 970:	6f 57       	subi	r22, 0x7F	; 127
 972:	71 09       	sbc	r23, r1
 974:	75 95       	asr	r23
 976:	77 1f       	adc	r23, r23
 978:	88 0b       	sbc	r24, r24
 97a:	99 0b       	sbc	r25, r25
 97c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__floatsisf>
 980:	28 e1       	ldi	r18, 0x18	; 24
 982:	32 e7       	ldi	r19, 0x72	; 114
 984:	41 e3       	ldi	r20, 0x31	; 49
 986:	5f e3       	ldi	r21, 0x3F	; 63
 988:	0e 94 35 03 	call	0x66a	; 0x66a <__mulsf3x>
 98c:	af 2d       	mov	r26, r15
 98e:	98 01       	movw	r18, r16
 990:	ae 01       	movw	r20, r28
 992:	ff 90       	pop	r15
 994:	0f 91       	pop	r16
 996:	1f 91       	pop	r17
 998:	cf 91       	pop	r28
 99a:	df 91       	pop	r29
 99c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__addsf3x>
 9a0:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_round>

000009a4 <modf>:
 9a4:	fa 01       	movw	r30, r20
 9a6:	dc 01       	movw	r26, r24
 9a8:	aa 0f       	add	r26, r26
 9aa:	bb 1f       	adc	r27, r27
 9ac:	9b 01       	movw	r18, r22
 9ae:	ac 01       	movw	r20, r24
 9b0:	bf 57       	subi	r27, 0x7F	; 127
 9b2:	28 f4       	brcc	.+10     	; 0x9be <modf+0x1a>
 9b4:	22 27       	eor	r18, r18
 9b6:	33 27       	eor	r19, r19
 9b8:	44 27       	eor	r20, r20
 9ba:	50 78       	andi	r21, 0x80	; 128
 9bc:	20 c0       	rjmp	.+64     	; 0x9fe <modf+0x5a>
 9be:	b7 51       	subi	r27, 0x17	; 23
 9c0:	90 f4       	brcc	.+36     	; 0x9e6 <modf+0x42>
 9c2:	ab 2f       	mov	r26, r27
 9c4:	00 24       	eor	r0, r0
 9c6:	46 95       	lsr	r20
 9c8:	37 95       	ror	r19
 9ca:	27 95       	ror	r18
 9cc:	01 1c       	adc	r0, r1
 9ce:	a3 95       	inc	r26
 9d0:	d2 f3       	brmi	.-12     	; 0x9c6 <modf+0x22>
 9d2:	00 20       	and	r0, r0
 9d4:	71 f0       	breq	.+28     	; 0x9f2 <modf+0x4e>
 9d6:	22 0f       	add	r18, r18
 9d8:	33 1f       	adc	r19, r19
 9da:	44 1f       	adc	r20, r20
 9dc:	b3 95       	inc	r27
 9de:	da f3       	brmi	.-10     	; 0x9d6 <modf+0x32>
 9e0:	0e d0       	rcall	.+28     	; 0x9fe <modf+0x5a>
 9e2:	0c 94 c8 01 	jmp	0x390	; 0x390 <__subsf3>
 9e6:	61 30       	cpi	r22, 0x01	; 1
 9e8:	71 05       	cpc	r23, r1
 9ea:	a0 e8       	ldi	r26, 0x80	; 128
 9ec:	8a 07       	cpc	r24, r26
 9ee:	b9 46       	sbci	r27, 0x69	; 105
 9f0:	30 f4       	brcc	.+12     	; 0x9fe <modf+0x5a>
 9f2:	9b 01       	movw	r18, r22
 9f4:	ac 01       	movw	r20, r24
 9f6:	66 27       	eor	r22, r22
 9f8:	77 27       	eor	r23, r23
 9fa:	88 27       	eor	r24, r24
 9fc:	90 78       	andi	r25, 0x80	; 128
 9fe:	30 96       	adiw	r30, 0x00	; 0
 a00:	21 f0       	breq	.+8      	; 0xa0a <modf+0x66>
 a02:	20 83       	st	Z, r18
 a04:	31 83       	std	Z+1, r19	; 0x01
 a06:	42 83       	std	Z+2, r20	; 0x02
 a08:	53 83       	std	Z+3, r21	; 0x03
 a0a:	08 95       	ret

00000a0c <__divsf3>:
 a0c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__divsf3x>
 a10:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__fp_round>
 a14:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fp_pscB>
 a18:	58 f0       	brcs	.+22     	; 0xa30 <__divsf3+0x24>
 a1a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fp_pscA>
 a1e:	40 f0       	brcs	.+16     	; 0xa30 <__divsf3+0x24>
 a20:	29 f4       	brne	.+10     	; 0xa2c <__divsf3+0x20>
 a22:	5f 3f       	cpi	r21, 0xFF	; 255
 a24:	29 f0       	breq	.+10     	; 0xa30 <__divsf3+0x24>
 a26:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_inf>
 a2a:	51 11       	cpse	r21, r1
 a2c:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_szero>
 a30:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_nan>

00000a34 <__divsf3x>:
 a34:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_split3>
 a38:	68 f3       	brcs	.-38     	; 0xa14 <__divsf3+0x8>

00000a3a <__divsf3_pse>:
 a3a:	99 23       	and	r25, r25
 a3c:	b1 f3       	breq	.-20     	; 0xa2a <__divsf3+0x1e>
 a3e:	55 23       	and	r21, r21
 a40:	91 f3       	breq	.-28     	; 0xa26 <__divsf3+0x1a>
 a42:	95 1b       	sub	r25, r21
 a44:	55 0b       	sbc	r21, r21
 a46:	bb 27       	eor	r27, r27
 a48:	aa 27       	eor	r26, r26
 a4a:	62 17       	cp	r22, r18
 a4c:	73 07       	cpc	r23, r19
 a4e:	84 07       	cpc	r24, r20
 a50:	38 f0       	brcs	.+14     	; 0xa60 <__divsf3_pse+0x26>
 a52:	9f 5f       	subi	r25, 0xFF	; 255
 a54:	5f 4f       	sbci	r21, 0xFF	; 255
 a56:	22 0f       	add	r18, r18
 a58:	33 1f       	adc	r19, r19
 a5a:	44 1f       	adc	r20, r20
 a5c:	aa 1f       	adc	r26, r26
 a5e:	a9 f3       	breq	.-22     	; 0xa4a <__divsf3_pse+0x10>
 a60:	35 d0       	rcall	.+106    	; 0xacc <__divsf3_pse+0x92>
 a62:	0e 2e       	mov	r0, r30
 a64:	3a f0       	brmi	.+14     	; 0xa74 <__divsf3_pse+0x3a>
 a66:	e0 e8       	ldi	r30, 0x80	; 128
 a68:	32 d0       	rcall	.+100    	; 0xace <__divsf3_pse+0x94>
 a6a:	91 50       	subi	r25, 0x01	; 1
 a6c:	50 40       	sbci	r21, 0x00	; 0
 a6e:	e6 95       	lsr	r30
 a70:	00 1c       	adc	r0, r0
 a72:	ca f7       	brpl	.-14     	; 0xa66 <__divsf3_pse+0x2c>
 a74:	2b d0       	rcall	.+86     	; 0xacc <__divsf3_pse+0x92>
 a76:	fe 2f       	mov	r31, r30
 a78:	29 d0       	rcall	.+82     	; 0xacc <__divsf3_pse+0x92>
 a7a:	66 0f       	add	r22, r22
 a7c:	77 1f       	adc	r23, r23
 a7e:	88 1f       	adc	r24, r24
 a80:	bb 1f       	adc	r27, r27
 a82:	26 17       	cp	r18, r22
 a84:	37 07       	cpc	r19, r23
 a86:	48 07       	cpc	r20, r24
 a88:	ab 07       	cpc	r26, r27
 a8a:	b0 e8       	ldi	r27, 0x80	; 128
 a8c:	09 f0       	breq	.+2      	; 0xa90 <__divsf3_pse+0x56>
 a8e:	bb 0b       	sbc	r27, r27
 a90:	80 2d       	mov	r24, r0
 a92:	bf 01       	movw	r22, r30
 a94:	ff 27       	eor	r31, r31
 a96:	93 58       	subi	r25, 0x83	; 131
 a98:	5f 4f       	sbci	r21, 0xFF	; 255
 a9a:	3a f0       	brmi	.+14     	; 0xaaa <__divsf3_pse+0x70>
 a9c:	9e 3f       	cpi	r25, 0xFE	; 254
 a9e:	51 05       	cpc	r21, r1
 aa0:	78 f0       	brcs	.+30     	; 0xac0 <__divsf3_pse+0x86>
 aa2:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_inf>
 aa6:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_szero>
 aaa:	5f 3f       	cpi	r21, 0xFF	; 255
 aac:	e4 f3       	brlt	.-8      	; 0xaa6 <__divsf3_pse+0x6c>
 aae:	98 3e       	cpi	r25, 0xE8	; 232
 ab0:	d4 f3       	brlt	.-12     	; 0xaa6 <__divsf3_pse+0x6c>
 ab2:	86 95       	lsr	r24
 ab4:	77 95       	ror	r23
 ab6:	67 95       	ror	r22
 ab8:	b7 95       	ror	r27
 aba:	f7 95       	ror	r31
 abc:	9f 5f       	subi	r25, 0xFF	; 255
 abe:	c9 f7       	brne	.-14     	; 0xab2 <__divsf3_pse+0x78>
 ac0:	88 0f       	add	r24, r24
 ac2:	91 1d       	adc	r25, r1
 ac4:	96 95       	lsr	r25
 ac6:	87 95       	ror	r24
 ac8:	97 f9       	bld	r25, 7
 aca:	08 95       	ret
 acc:	e1 e0       	ldi	r30, 0x01	; 1
 ace:	66 0f       	add	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	bb 1f       	adc	r27, r27
 ad6:	62 17       	cp	r22, r18
 ad8:	73 07       	cpc	r23, r19
 ada:	84 07       	cpc	r24, r20
 adc:	ba 07       	cpc	r27, r26
 ade:	20 f0       	brcs	.+8      	; 0xae8 <__divsf3_pse+0xae>
 ae0:	62 1b       	sub	r22, r18
 ae2:	73 0b       	sbc	r23, r19
 ae4:	84 0b       	sbc	r24, r20
 ae6:	ba 0b       	sbc	r27, r26
 ae8:	ee 1f       	adc	r30, r30
 aea:	88 f7       	brcc	.-30     	; 0xace <__divsf3_pse+0x94>
 aec:	e0 95       	com	r30
 aee:	08 95       	ret

00000af0 <__fp_mpack>:
 af0:	9f 3f       	cpi	r25, 0xFF	; 255
 af2:	31 f0       	breq	.+12     	; 0xb00 <__fp_mpack_finite+0xc>

00000af4 <__fp_mpack_finite>:
 af4:	91 50       	subi	r25, 0x01	; 1
 af6:	20 f4       	brcc	.+8      	; 0xb00 <__fp_mpack_finite+0xc>
 af8:	87 95       	ror	r24
 afa:	77 95       	ror	r23
 afc:	67 95       	ror	r22
 afe:	b7 95       	ror	r27
 b00:	88 0f       	add	r24, r24
 b02:	91 1d       	adc	r25, r1
 b04:	96 95       	lsr	r25
 b06:	87 95       	ror	r24
 b08:	97 f9       	bld	r25, 7
 b0a:	08 95       	ret

00000b0c <__umulhisi3>:
 b0c:	a2 9f       	mul	r26, r18
 b0e:	b0 01       	movw	r22, r0
 b10:	b3 9f       	mul	r27, r19
 b12:	c0 01       	movw	r24, r0
 b14:	a3 9f       	mul	r26, r19
 b16:	70 0d       	add	r23, r0
 b18:	81 1d       	adc	r24, r1
 b1a:	11 24       	eor	r1, r1
 b1c:	91 1d       	adc	r25, r1
 b1e:	b2 9f       	mul	r27, r18
 b20:	70 0d       	add	r23, r0
 b22:	81 1d       	adc	r24, r1
 b24:	11 24       	eor	r1, r1
 b26:	91 1d       	adc	r25, r1
 b28:	08 95       	ret

00000b2a <_exit>:
 b2a:	f8 94       	cli

00000b2c <__stop_program>:
 b2c:	ff cf       	rjmp	.-2      	; 0xb2c <__stop_program>
