
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00001136  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001136  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000888  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003d8  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e3  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034e  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085c  00000000  00000000  00002956  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000031b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__addsf3x+0x52>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
      f6:	21 e0       	ldi	r18, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a1 30       	cpi	r26, 0x01	; 1
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 84 02 	call	0x508	; 0x508 <main>
     10a:	0c 94 5f 08 	jmp	0x10be	; 0x10be <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <uart_init>:

 //Approximates a data value based on the two nearest data points
 float linearApproximate(float higher, float lower) {
	float approximation = (higher + lower) / 2;
	return approximation;
 }
     112:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     116:	87 e6       	ldi	r24, 0x67	; 103
     118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     11c:	e1 ec       	ldi	r30, 0xC1	; 193
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	88 60       	ori	r24, 0x08	; 8
     124:	80 83       	st	Z, r24
     126:	e2 ec       	ldi	r30, 0xC2	; 194
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	86 60       	ori	r24, 0x06	; 6
     12e:	80 83       	st	Z, r24
     130:	08 95       	ret

00000132 <uart_transmit>:
     132:	e0 ec       	ldi	r30, 0xC0	; 192
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	90 81       	ld	r25, Z
     138:	99 23       	and	r25, r25
     13a:	e9 f3       	breq	.-6      	; 0x136 <uart_transmit+0x4>
     13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     140:	08 95       	ret

00000142 <timer0_init>:
     142:	85 b5       	in	r24, 0x25	; 37
     144:	85 60       	ori	r24, 0x05	; 5
     146:	85 bd       	out	0x25, r24	; 37
     148:	16 bc       	out	0x26, r1	; 38
     14a:	08 95       	ret

0000014c <find_decimal>:
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	6b 01       	movw	r12, r22
     156:	7c 01       	movw	r14, r24
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	40 e2       	ldi	r20, 0x20	; 32
     15e:	51 e4       	ldi	r21, 0x41	; 65
     160:	0e 94 9e 04 	call	0x93c	; 0x93c <__cmpsf2>
     164:	88 23       	and	r24, r24
     166:	b4 f0       	brlt	.+44     	; 0x194 <find_decimal+0x48>
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	48 ec       	ldi	r20, 0xC8	; 200
     16e:	52 e4       	ldi	r21, 0x42	; 66
     170:	c7 01       	movw	r24, r14
     172:	b6 01       	movw	r22, r12
     174:	0e 94 9e 04 	call	0x93c	; 0x93c <__cmpsf2>
     178:	08 2e       	mov	r0, r24
     17a:	00 0c       	add	r0, r0
     17c:	99 0b       	sbc	r25, r25
     17e:	88 27       	eor	r24, r24
     180:	99 0f       	add	r25, r25
     182:	88 1f       	adc	r24, r24
     184:	99 27       	eor	r25, r25
     186:	22 e0       	ldi	r18, 0x02	; 2
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	a9 01       	movw	r20, r18
     18c:	48 1b       	sub	r20, r24
     18e:	59 0b       	sbc	r21, r25
     190:	ca 01       	movw	r24, r20
     192:	02 c0       	rjmp	.+4      	; 0x198 <find_decimal+0x4c>
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	ff 90       	pop	r15
     19a:	ef 90       	pop	r14
     19c:	df 90       	pop	r13
     19e:	cf 90       	pop	r12
     1a0:	08 95       	ret

000001a2 <wololo>:
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	41 30       	cpi	r20, 0x01	; 1
     1a6:	09 f4       	brne	.+2      	; 0x1aa <wololo+0x8>
     1a8:	40 96       	adiw	r24, 0x10	; 16
     1aa:	61 11       	cpse	r22, r1
     1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <wololo+0x12>
     1ae:	80 5a       	subi	r24, 0xA0	; 160
     1b0:	9f 4f       	sbci	r25, 0xFF	; 255
     1b2:	08 95       	ret
     1b4:	61 30       	cpi	r22, 0x01	; 1
     1b6:	19 f4       	brne	.+6      	; 0x1be <wololo+0x1c>
     1b8:	80 5c       	subi	r24, 0xC0	; 192
     1ba:	9f 4f       	sbci	r25, 0xFF	; 255
     1bc:	08 95       	ret
     1be:	62 30       	cpi	r22, 0x02	; 2
     1c0:	09 f4       	brne	.+2      	; 0x1c4 <wololo+0x22>
     1c2:	80 96       	adiw	r24, 0x20	; 32
     1c4:	08 95       	ret

000001c6 <calcPower>:
     1c6:	2f 92       	push	r2
     1c8:	3f 92       	push	r3
     1ca:	4f 92       	push	r4
     1cc:	5f 92       	push	r5
     1ce:	6f 92       	push	r6
     1d0:	7f 92       	push	r7
     1d2:	8f 92       	push	r8
     1d4:	9f 92       	push	r9
     1d6:	af 92       	push	r10
     1d8:	bf 92       	push	r11
     1da:	cf 92       	push	r12
     1dc:	df 92       	push	r13
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	ca 53       	subi	r28, 0x3A	; 58
     1f0:	d1 40       	sbci	r29, 0x01	; 1
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	2c 01       	movw	r4, r24
     1fe:	4b 01       	movw	r8, r22
     200:	1e 01       	movw	r2, r28
     202:	8d e9       	ldi	r24, 0x9D	; 157
     204:	28 0e       	add	r2, r24
     206:	31 1c       	adc	r3, r1
     208:	fe 01       	movw	r30, r28
     20a:	31 96       	adiw	r30, 0x01	; 1
     20c:	3f 01       	movw	r6, r30
     20e:	5f 01       	movw	r10, r30
     210:	61 01       	movw	r12, r2
     212:	ee 24       	eor	r14, r14
     214:	e3 94       	inc	r14
     216:	f1 2c       	mov	r15, r1
     218:	00 e0       	ldi	r16, 0x00	; 0
     21a:	10 e0       	ldi	r17, 0x00	; 0
     21c:	c7 5c       	subi	r28, 0xC7	; 199
     21e:	de 4f       	sbci	r29, 0xFE	; 254
     220:	19 83       	std	Y+1, r17	; 0x01
     222:	08 83       	st	Y, r16
     224:	c9 53       	subi	r28, 0x39	; 57
     226:	d1 40       	sbci	r29, 0x01	; 1
     228:	00 fd       	sbrc	r16, 0
     22a:	53 c0       	rjmp	.+166    	; 0x2d2 <calcPower+0x10c>
     22c:	c8 01       	movw	r24, r16
     22e:	11 23       	and	r17, r17
     230:	0c f4       	brge	.+2      	; 0x234 <calcPower+0x6e>
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	95 95       	asr	r25
     236:	87 95       	ror	r24
     238:	fc 01       	movw	r30, r24
     23a:	ee 0f       	add	r30, r30
     23c:	ff 1f       	adc	r31, r31
     23e:	ee 0f       	add	r30, r30
     240:	ff 1f       	adc	r31, r31
     242:	e4 0d       	add	r30, r4
     244:	f5 1d       	adc	r31, r5
     246:	40 81       	ld	r20, Z
     248:	51 81       	ldd	r21, Z+1	; 0x01
     24a:	62 81       	ldd	r22, Z+2	; 0x02
     24c:	73 81       	ldd	r23, Z+3	; 0x03
     24e:	f5 01       	movw	r30, r10
     250:	40 83       	st	Z, r20
     252:	51 83       	std	Z+1, r21	; 0x01
     254:	62 83       	std	Z+2, r22	; 0x02
     256:	73 83       	std	Z+3, r23	; 0x03
     258:	01 15       	cp	r16, r1
     25a:	11 05       	cpc	r17, r1
     25c:	19 f0       	breq	.+6      	; 0x264 <calcPower+0x9e>
     25e:	06 32       	cpi	r16, 0x26	; 38
     260:	11 05       	cpc	r17, r1
     262:	89 f4       	brne	.+34     	; 0x286 <calcPower+0xc0>
     264:	88 0f       	add	r24, r24
     266:	99 1f       	adc	r25, r25
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	f4 01       	movw	r30, r8
     26e:	e8 0f       	add	r30, r24
     270:	f9 1f       	adc	r31, r25
     272:	80 81       	ld	r24, Z
     274:	91 81       	ldd	r25, Z+1	; 0x01
     276:	a2 81       	ldd	r26, Z+2	; 0x02
     278:	b3 81       	ldd	r27, Z+3	; 0x03
     27a:	f6 01       	movw	r30, r12
     27c:	80 83       	st	Z, r24
     27e:	91 83       	std	Z+1, r25	; 0x01
     280:	a2 83       	std	Z+2, r26	; 0x02
     282:	b3 83       	std	Z+3, r27	; 0x03
     284:	67 c0       	rjmp	.+206    	; 0x354 <calcPower+0x18e>
     286:	c7 01       	movw	r24, r14
     288:	ff 20       	and	r15, r15
     28a:	0c f4       	brge	.+2      	; 0x28e <calcPower+0xc8>
     28c:	01 96       	adiw	r24, 0x01	; 1
     28e:	95 95       	asr	r25
     290:	87 95       	ror	r24
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	88 0d       	add	r24, r8
     29c:	99 1d       	adc	r25, r9
     29e:	fc 01       	movw	r30, r24
     2a0:	38 97       	sbiw	r30, 0x08	; 8
     2a2:	dc 01       	movw	r26, r24
     2a4:	14 97       	sbiw	r26, 0x04	; 4
     2a6:	2d 91       	ld	r18, X+
     2a8:	3d 91       	ld	r19, X+
     2aa:	4d 91       	ld	r20, X+
     2ac:	5c 91       	ld	r21, X
     2ae:	60 81       	ld	r22, Z
     2b0:	71 81       	ldd	r23, Z+1	; 0x01
     2b2:	82 81       	ldd	r24, Z+2	; 0x02
     2b4:	93 81       	ldd	r25, Z+3	; 0x03
     2b6:	0e 94 32 04 	call	0x864	; 0x864 <__addsf3>
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	5f e3       	ldi	r21, 0x3F	; 63
     2c2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
     2c6:	f6 01       	movw	r30, r12
     2c8:	60 83       	st	Z, r22
     2ca:	71 83       	std	Z+1, r23	; 0x01
     2cc:	82 83       	std	Z+2, r24	; 0x02
     2ce:	93 83       	std	Z+3, r25	; 0x03
     2d0:	41 c0       	rjmp	.+130    	; 0x354 <calcPower+0x18e>
     2d2:	f7 01       	movw	r30, r14
     2d4:	ff 20       	and	r15, r15
     2d6:	0c f4       	brge	.+2      	; 0x2da <calcPower+0x114>
     2d8:	31 96       	adiw	r30, 0x01	; 1
     2da:	f5 95       	asr	r31
     2dc:	e7 95       	ror	r30
     2de:	ee 0f       	add	r30, r30
     2e0:	ff 1f       	adc	r31, r31
     2e2:	ee 0f       	add	r30, r30
     2e4:	ff 1f       	adc	r31, r31
     2e6:	e4 0d       	add	r30, r4
     2e8:	f5 1d       	adc	r31, r5
     2ea:	df 01       	movw	r26, r30
     2ec:	14 97       	sbiw	r26, 0x04	; 4
     2ee:	20 81       	ld	r18, Z
     2f0:	31 81       	ldd	r19, Z+1	; 0x01
     2f2:	42 81       	ldd	r20, Z+2	; 0x02
     2f4:	53 81       	ldd	r21, Z+3	; 0x03
     2f6:	6d 91       	ld	r22, X+
     2f8:	7d 91       	ld	r23, X+
     2fa:	8d 91       	ld	r24, X+
     2fc:	9c 91       	ld	r25, X
     2fe:	0e 94 32 04 	call	0x864	; 0x864 <__addsf3>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	5f e3       	ldi	r21, 0x3F	; 63
     30a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
     30e:	f5 01       	movw	r30, r10
     310:	60 83       	st	Z, r22
     312:	71 83       	std	Z+1, r23	; 0x01
     314:	82 83       	std	Z+2, r24	; 0x02
     316:	93 83       	std	Z+3, r25	; 0x03
     318:	c7 5c       	subi	r28, 0xC7	; 199
     31a:	de 4f       	sbci	r29, 0xFE	; 254
     31c:	28 81       	ld	r18, Y
     31e:	39 81       	ldd	r19, Y+1	; 0x01
     320:	c9 53       	subi	r28, 0x39	; 57
     322:	d1 40       	sbci	r29, 0x01	; 1
     324:	21 50       	subi	r18, 0x01	; 1
     326:	31 09       	sbc	r19, r1
     328:	c9 01       	movw	r24, r18
     32a:	99 23       	and	r25, r25
     32c:	0c f4       	brge	.+2      	; 0x330 <calcPower+0x16a>
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	fc 01       	movw	r30, r24
     332:	f5 95       	asr	r31
     334:	e7 95       	ror	r30
     336:	ee 0f       	add	r30, r30
     338:	ff 1f       	adc	r31, r31
     33a:	ee 0f       	add	r30, r30
     33c:	ff 1f       	adc	r31, r31
     33e:	e8 0d       	add	r30, r8
     340:	f9 1d       	adc	r31, r9
     342:	80 81       	ld	r24, Z
     344:	91 81       	ldd	r25, Z+1	; 0x01
     346:	a2 81       	ldd	r26, Z+2	; 0x02
     348:	b3 81       	ldd	r27, Z+3	; 0x03
     34a:	f6 01       	movw	r30, r12
     34c:	80 83       	st	Z, r24
     34e:	91 83       	std	Z+1, r25	; 0x01
     350:	a2 83       	std	Z+2, r26	; 0x02
     352:	b3 83       	std	Z+3, r27	; 0x03
     354:	0f 5f       	subi	r16, 0xFF	; 255
     356:	1f 4f       	sbci	r17, 0xFF	; 255
     358:	ff ef       	ldi	r31, 0xFF	; 255
     35a:	ef 1a       	sub	r14, r31
     35c:	ff 0a       	sbc	r15, r31
     35e:	84 e0       	ldi	r24, 0x04	; 4
     360:	c8 0e       	add	r12, r24
     362:	d1 1c       	adc	r13, r1
     364:	94 e0       	ldi	r25, 0x04	; 4
     366:	a9 0e       	add	r10, r25
     368:	b1 1c       	adc	r11, r1
     36a:	07 32       	cpi	r16, 0x27	; 39
     36c:	11 05       	cpc	r17, r1
     36e:	09 f0       	breq	.+2      	; 0x372 <calcPower+0x1ac>
     370:	55 cf       	rjmp	.-342    	; 0x21c <calcPower+0x56>
     372:	8e 01       	movw	r16, r28
     374:	03 56       	subi	r16, 0x63	; 99
     376:	1f 4f       	sbci	r17, 0xFF	; 255
     378:	c1 2c       	mov	r12, r1
     37a:	d1 2c       	mov	r13, r1
     37c:	76 01       	movw	r14, r12
     37e:	f3 01       	movw	r30, r6
     380:	61 91       	ld	r22, Z+
     382:	71 91       	ld	r23, Z+
     384:	81 91       	ld	r24, Z+
     386:	91 91       	ld	r25, Z+
     388:	3f 01       	movw	r6, r30
     38a:	f1 01       	movw	r30, r2
     38c:	21 91       	ld	r18, Z+
     38e:	31 91       	ld	r19, Z+
     390:	41 91       	ld	r20, Z+
     392:	51 91       	ld	r21, Z+
     394:	1f 01       	movw	r2, r30
     396:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	c7 01       	movw	r24, r14
     3a0:	b6 01       	movw	r22, r12
     3a2:	0e 94 32 04 	call	0x864	; 0x864 <__addsf3>
     3a6:	6b 01       	movw	r12, r22
     3a8:	7c 01       	movw	r14, r24
     3aa:	60 16       	cp	r6, r16
     3ac:	71 06       	cpc	r7, r17
     3ae:	39 f7       	brne	.-50     	; 0x37e <calcPower+0x1b8>
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	4c e1       	ldi	r20, 0x1C	; 28
     3b6:	52 e4       	ldi	r21, 0x42	; 66
     3b8:	0e 94 a3 04 	call	0x946	; 0x946 <__divsf3>
     3bc:	c6 5c       	subi	r28, 0xC6	; 198
     3be:	de 4f       	sbci	r29, 0xFE	; 254
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	1f 91       	pop	r17
     3d0:	0f 91       	pop	r16
     3d2:	ff 90       	pop	r15
     3d4:	ef 90       	pop	r14
     3d6:	df 90       	pop	r13
     3d8:	cf 90       	pop	r12
     3da:	bf 90       	pop	r11
     3dc:	af 90       	pop	r10
     3de:	9f 90       	pop	r9
     3e0:	8f 90       	pop	r8
     3e2:	7f 90       	pop	r7
     3e4:	6f 90       	pop	r6
     3e6:	5f 90       	pop	r5
     3e8:	4f 90       	pop	r4
     3ea:	3f 90       	pop	r3
     3ec:	2f 90       	pop	r2
     3ee:	08 95       	ret

000003f0 <adc_init>:

 //Initialises the ADC
 void adc_init() {
	DDRC = 0x00; //Set port c as input
     3f0:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADEN); //Set Prescaler to 128 and enable the ADC 
     3f2:	ea e7       	ldi	r30, 0x7A	; 122
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	87 68       	ori	r24, 0x87	; 135
     3fa:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //Set reference voltage to VCC
     3fc:	ec e7       	ldi	r30, 0x7C	; 124
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	80 81       	ld	r24, Z
     402:	80 64       	ori	r24, 0x40	; 64
     404:	80 83       	st	Z, r24
     406:	08 95       	ret

00000408 <adc_read_voltage>:
 }

 //Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_voltage() {
	ADMUX &= ~(1<<MUX0);
     408:	ec e7       	ldi	r30, 0x7C	; 124
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	8e 7f       	andi	r24, 0xFE	; 254
     410:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX1);
     412:	80 81       	ld	r24, Z
     414:	8d 7f       	andi	r24, 0xFD	; 253
     416:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX2);
     418:	80 81       	ld	r24, Z
     41a:	8b 7f       	andi	r24, 0xFB	; 251
     41c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start conversion
     41e:	ea e7       	ldi	r30, 0x7A	; 122
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	80 64       	ori	r24, 0x40	; 64
     426:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
     428:	80 81       	ld	r24, Z
     42a:	84 ff       	sbrs	r24, 4
     42c:	fd cf       	rjmp	.-6      	; 0x428 <adc_read_voltage+0x20>
	unsigned int adcRead = ADC;
     42e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     432:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     436:	08 95       	ret

00000438 <adc_read_current>:

  //Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_current(unsigned int highLow) {
	if (highLow == 1) { // High gain current
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	61 f4       	brne	.+24     	; 0x454 <adc_read_current+0x1c>
		ADMUX |= (1<<MUX0);
     43c:	ec e7       	ldi	r30, 0x7C	; 124
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	81 60       	ori	r24, 0x01	; 1
     444:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX1);
     446:	80 81       	ld	r24, Z
     448:	8d 7f       	andi	r24, 0xFD	; 253
     44a:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX2);
     44c:	80 81       	ld	r24, Z
     44e:	84 60       	ori	r24, 0x04	; 4
     450:	80 83       	st	Z, r24
     452:	0b c0       	rjmp	.+22     	; 0x46a <adc_read_current+0x32>
	} else { // Low gain current
		ADMUX &= ~(1<<MUX0);
     454:	ec e7       	ldi	r30, 0x7C	; 124
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	8e 7f       	andi	r24, 0xFE	; 254
     45c:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX1);
     45e:	80 81       	ld	r24, Z
     460:	8d 7f       	andi	r24, 0xFD	; 253
     462:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX2);
     464:	80 81       	ld	r24, Z
     466:	8b 7f       	andi	r24, 0xFB	; 251
     468:	80 83       	st	Z, r24
	}
	ADCSRA |= (1<<ADSC); //Start conversion
     46a:	ea e7       	ldi	r30, 0x7A	; 122
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	80 81       	ld	r24, Z
     470:	80 64       	ori	r24, 0x40	; 64
     472:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
     474:	80 81       	ld	r24, Z
     476:	84 ff       	sbrs	r24, 4
     478:	fd cf       	rjmp	.-6      	; 0x474 <adc_read_current+0x3c>
	unsigned int adcRead = ADC;
     47a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     47e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     482:	08 95       	ret

00000484 <adc_calculation>:

 //Converts an ADC integer into the actual voltage measured by the ADC pin
 float adc_calculation(unsigned int adcValue) {
	float calculatedValue;
	calculatedValue = ((float)adcValue / 1023) * 5;
     484:	bc 01       	movw	r22, r24
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 4b 05 	call	0xa96	; 0xa96 <__floatunsisf>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 ec       	ldi	r19, 0xC0	; 192
     492:	4f e7       	ldi	r20, 0x7F	; 127
     494:	54 e4       	ldi	r21, 0x44	; 68
     496:	0e 94 a3 04 	call	0x946	; 0x946 <__divsf3>
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	40 ea       	ldi	r20, 0xA0	; 160
     4a0:	50 e4       	ldi	r21, 0x40	; 64
     4a2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
	return calculatedValue; 
 }
     4a6:	08 95       	ret

000004a8 <voltage_real>:
 /*
 This function figures out what the actual voltage being measured was based on reversing the process 
 that the signal went through. Option 0 for voltage, 1 for regular current, 2 for high gain current
 */
 float voltage_real(float adcValue, unsigned int option) {
	if (option == 0) {
     4a8:	41 15       	cp	r20, r1
     4aa:	51 05       	cpc	r21, r1
     4ac:	71 f4       	brne	.+28     	; 0x4ca <voltage_real+0x22>
		return -(adcValue - 1.7) * 98;
     4ae:	2a e9       	ldi	r18, 0x9A	; 154
     4b0:	39 e9       	ldi	r19, 0x99	; 153
     4b2:	49 ed       	ldi	r20, 0xD9	; 217
     4b4:	5f e3       	ldi	r21, 0x3F	; 63
     4b6:	0e 94 31 04 	call	0x862	; 0x862 <__subsf3>
     4ba:	90 58       	subi	r25, 0x80	; 128
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	44 ec       	ldi	r20, 0xC4	; 196
     4c2:	52 e4       	ldi	r21, 0x42	; 66
     4c4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
     4c8:	08 95       	ret
	} else if (option == 1) {
     4ca:	41 30       	cpi	r20, 0x01	; 1
     4cc:	51 05       	cpc	r21, r1
     4ce:	71 f4       	brne	.+28     	; 0x4ec <voltage_real+0x44>
		return -(adcValue - 1.63) / 5.7;
     4d0:	27 ed       	ldi	r18, 0xD7	; 215
     4d2:	33 ea       	ldi	r19, 0xA3	; 163
     4d4:	40 ed       	ldi	r20, 0xD0	; 208
     4d6:	5f e3       	ldi	r21, 0x3F	; 63
     4d8:	0e 94 31 04 	call	0x862	; 0x862 <__subsf3>
     4dc:	90 58       	subi	r25, 0x80	; 128
     4de:	26 e6       	ldi	r18, 0x66	; 102
     4e0:	36 e6       	ldi	r19, 0x66	; 102
     4e2:	46 eb       	ldi	r20, 0xB6	; 182
     4e4:	50 e4       	ldi	r21, 0x40	; 64
     4e6:	0e 94 a3 04 	call	0x946	; 0x946 <__divsf3>
     4ea:	08 95       	ret
	} else {
		return -(adcValue - 1.64) / 32.93;
     4ec:	25 e8       	ldi	r18, 0x85	; 133
     4ee:	3b ee       	ldi	r19, 0xEB	; 235
     4f0:	41 ed       	ldi	r20, 0xD1	; 209
     4f2:	5f e3       	ldi	r21, 0x3F	; 63
     4f4:	0e 94 31 04 	call	0x862	; 0x862 <__subsf3>
     4f8:	90 58       	subi	r25, 0x80	; 128
     4fa:	22 e5       	ldi	r18, 0x52	; 82
     4fc:	38 eb       	ldi	r19, 0xB8	; 184
     4fe:	43 e0       	ldi	r20, 0x03	; 3
     500:	52 e4       	ldi	r21, 0x42	; 66
     502:	0e 94 a3 04 	call	0x946	; 0x946 <__divsf3>
	}
     506:	08 95       	ret

00000508 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

volatile uint8_t counter = 0; //Counter for the number of times the TCNT0 compares correctly

int main(void) {
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	c5 5b       	subi	r28, 0xB5	; 181
     512:	d1 09       	sbc	r29, r1
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
	adc_init();
     51e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <adc_init>
	uart_init();	
     522:	0e 94 89 00 	call	0x112	; 0x112 <uart_init>
	timer0_init();
     526:	0e 94 a1 00 	call	0x142	; 0x142 <timer0_init>
	uint32_t displayCount = 0;
     52a:	c7 55       	subi	r28, 0x57	; 87
     52c:	df 4f       	sbci	r29, 0xFF	; 255
     52e:	18 82       	st	Y, r1
     530:	19 82       	std	Y+1, r1	; 0x01
     532:	1a 82       	std	Y+2, r1	; 0x02
     534:	1b 82       	std	Y+3, r1	; 0x03
     536:	c9 5a       	subi	r28, 0xA9	; 169
     538:	d0 40       	sbci	r29, 0x00	; 0
		uint8_t index = 0;
		
		//Reading from the ADC, calculating and converting
		float voltageArray[20];
		float currentArray[20];
		for (int i=0;i<39;i++) {
     53a:	21 2c       	mov	r2, r1
     53c:	31 2c       	mov	r3, r1
				voltageArray[i/2] = voltage;
			} else {
				unsigned int adcValue = adc_read_current(0); // Regular Current
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, 1); // Regular Current
				currentArray[(i-1)/2] = current;
     53e:	9e 01       	movw	r18, r28
     540:	2f 5f       	subi	r18, 0xFF	; 255
     542:	3f 4f       	sbci	r19, 0xFF	; 255
     544:	39 01       	movw	r6, r18
		for (int i=0;i<39;i++) {
			if (i%2 == 0) {
				unsigned int adcValue = adc_read_voltage();
				float adcVoltage = adc_calculation(adcValue);
				float voltage = voltage_real(adcVoltage, 0);
				voltageArray[i/2] = voltage;
     546:	2e 01       	movw	r4, r28
     548:	31 e5       	ldi	r19, 0x51	; 81
     54a:	43 0e       	add	r4, r19
     54c:	51 1c       	adc	r5, r1
			} else {
				unsigned int adcValue = adc_read_current(0); // Regular Current
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, 1); // Regular Current
				currentArray[(i-1)/2] = current;
     54e:	cf 54       	subi	r28, 0x4F	; 79
     550:	df 4f       	sbci	r29, 0xFF	; 255
     552:	68 82       	st	Y, r6
     554:	c1 5b       	subi	r28, 0xB1	; 177
     556:	d0 40       	sbci	r29, 0x00	; 0
     558:	ce 54       	subi	r28, 0x4E	; 78
     55a:	df 4f       	sbci	r29, 0xFF	; 255
     55c:	78 82       	st	Y, r7
     55e:	c2 5b       	subi	r28, 0xB2	; 178
     560:	d0 40       	sbci	r29, 0x00	; 0
		for (int i=0;i<39;i++) {
			if (i%2 == 0) {
				unsigned int adcValue = adc_read_voltage();
				float adcVoltage = adc_calculation(adcValue);
				float voltage = voltage_real(adcVoltage, 0);
				voltageArray[i/2] = voltage;
     562:	cd 54       	subi	r28, 0x4D	; 77
     564:	df 4f       	sbci	r29, 0xFF	; 255
     566:	48 82       	st	Y, r4
     568:	c3 5b       	subi	r28, 0xB3	; 179
     56a:	d0 40       	sbci	r29, 0x00	; 0
     56c:	cc 54       	subi	r28, 0x4C	; 76
     56e:	df 4f       	sbci	r29, 0xFF	; 255
     570:	58 82       	st	Y, r5
     572:	c4 5b       	subi	r28, 0xB4	; 180
     574:	d0 40       	sbci	r29, 0x00	; 0
     576:	81 ea       	ldi	r24, 0xA1	; 161
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	8c 0f       	add	r24, r28
     57c:	9d 1f       	adc	r25, r29
     57e:	03 96       	adiw	r24, 0x03	; 3
     580:	c1 55       	subi	r28, 0x51	; 81
     582:	df 4f       	sbci	r29, 0xFF	; 255
     584:	99 83       	std	Y+1, r25	; 0x01
     586:	88 83       	st	Y, r24
     588:	cf 5a       	subi	r28, 0xAF	; 175
     58a:	d0 40       	sbci	r29, 0x00	; 0
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
     58c:	81 2c       	mov	r8, r1
     58e:	98 2c       	mov	r9, r8
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	cb 54       	subi	r28, 0x4B	; 75
     594:	df 4f       	sbci	r29, 0xFF	; 255
     596:	98 83       	st	Y, r25
     598:	c5 5b       	subi	r28, 0xB5	; 181
     59a:	d0 40       	sbci	r29, 0x00	; 0
		uint8_t index = 0;
		
		//Reading from the ADC, calculating and converting
		float voltageArray[20];
		float currentArray[20];
		for (int i=0;i<39;i++) {
     59c:	02 2d       	mov	r16, r2
     59e:	13 2d       	mov	r17, r3
			if (i%2 == 0) {
     5a0:	00 fd       	sbrc	r16, 0
     5a2:	1b c0       	rjmp	.+54     	; 0x5da <main+0xd2>
				unsigned int adcValue = adc_read_voltage();
     5a4:	0e 94 04 02 	call	0x408	; 0x408 <adc_read_voltage>
				float adcVoltage = adc_calculation(adcValue);
     5a8:	0e 94 42 02 	call	0x484	; 0x484 <adc_calculation>
				float voltage = voltage_real(adcVoltage, 0);
     5ac:	42 2d       	mov	r20, r2
     5ae:	53 2d       	mov	r21, r3
     5b0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <voltage_real>
				voltageArray[i/2] = voltage;
     5b4:	98 01       	movw	r18, r16
     5b6:	11 23       	and	r17, r17
     5b8:	14 f4       	brge	.+4      	; 0x5be <main+0xb6>
     5ba:	2f 5f       	subi	r18, 0xFF	; 255
     5bc:	3f 4f       	sbci	r19, 0xFF	; 255
     5be:	f9 01       	movw	r30, r18
     5c0:	f5 95       	asr	r31
     5c2:	e7 95       	ror	r30
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	ee 0f       	add	r30, r30
     5ca:	ff 1f       	adc	r31, r31
     5cc:	e4 0d       	add	r30, r4
     5ce:	f5 1d       	adc	r31, r5
     5d0:	60 83       	st	Z, r22
     5d2:	71 83       	std	Z+1, r23	; 0x01
     5d4:	82 83       	std	Z+2, r24	; 0x02
     5d6:	93 83       	std	Z+3, r25	; 0x03
     5d8:	1e c0       	rjmp	.+60     	; 0x616 <main+0x10e>
			} else {
				unsigned int adcValue = adc_read_current(0); // Regular Current
     5da:	82 2d       	mov	r24, r2
     5dc:	93 2d       	mov	r25, r3
     5de:	0e 94 1c 02 	call	0x438	; 0x438 <adc_read_current>
				float adcCurrent = adc_calculation(adcValue);
     5e2:	0e 94 42 02 	call	0x484	; 0x484 <adc_calculation>
				float current = voltage_real(adcCurrent, 1); // Regular Current
     5e6:	41 e0       	ldi	r20, 0x01	; 1
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	0e 94 54 02 	call	0x4a8	; 0x4a8 <voltage_real>
     5ee:	98 01       	movw	r18, r16
     5f0:	21 50       	subi	r18, 0x01	; 1
     5f2:	31 09       	sbc	r19, r1
				currentArray[(i-1)/2] = current;
     5f4:	a9 01       	movw	r20, r18
     5f6:	12 f4       	brpl	.+4      	; 0x5fc <main+0xf4>
     5f8:	4f 5f       	subi	r20, 0xFF	; 255
     5fa:	5f 4f       	sbci	r21, 0xFF	; 255
     5fc:	fa 01       	movw	r30, r20
     5fe:	f5 95       	asr	r31
     600:	e7 95       	ror	r30
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	ee 0f       	add	r30, r30
     608:	ff 1f       	adc	r31, r31
     60a:	e6 0d       	add	r30, r6
     60c:	f7 1d       	adc	r31, r7
     60e:	60 83       	st	Z, r22
     610:	71 83       	std	Z+1, r23	; 0x01
     612:	82 83       	std	Z+2, r24	; 0x02
     614:	93 83       	std	Z+3, r25	; 0x03
		uint8_t index = 0;
		
		//Reading from the ADC, calculating and converting
		float voltageArray[20];
		float currentArray[20];
		for (int i=0;i<39;i++) {
     616:	0f 5f       	subi	r16, 0xFF	; 255
     618:	1f 4f       	sbci	r17, 0xFF	; 255
     61a:	07 32       	cpi	r16, 0x27	; 39
     61c:	11 05       	cpc	r17, r1
     61e:	09 f0       	breq	.+2      	; 0x622 <main+0x11a>
     620:	bf cf       	rjmp	.-130    	; 0x5a0 <main+0x98>
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, 1); // Regular Current
				currentArray[(i-1)/2] = current;
			}
		}
		float power = calcPower(&voltageArray, &currentArray);
     622:	cf 54       	subi	r28, 0x4F	; 79
     624:	df 4f       	sbci	r29, 0xFF	; 255
     626:	68 81       	ld	r22, Y
     628:	c1 5b       	subi	r28, 0xB1	; 177
     62a:	d0 40       	sbci	r29, 0x00	; 0
     62c:	ce 54       	subi	r28, 0x4E	; 78
     62e:	df 4f       	sbci	r29, 0xFF	; 255
     630:	78 81       	ld	r23, Y
     632:	c2 5b       	subi	r28, 0xB2	; 178
     634:	d0 40       	sbci	r29, 0x00	; 0
     636:	cd 54       	subi	r28, 0x4D	; 77
     638:	df 4f       	sbci	r29, 0xFF	; 255
     63a:	88 81       	ld	r24, Y
     63c:	c3 5b       	subi	r28, 0xB3	; 179
     63e:	d0 40       	sbci	r29, 0x00	; 0
     640:	cc 54       	subi	r28, 0x4C	; 76
     642:	df 4f       	sbci	r29, 0xFF	; 255
     644:	98 81       	ld	r25, Y
     646:	c4 5b       	subi	r28, 0xB4	; 180
     648:	d0 40       	sbci	r29, 0x00	; 0
     64a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <calcPower>
		else if (7 > displayCount%10 > 3) { float dataFloat = power; }
		else if (displayCount%10 > 7) { float dataFloat = power;}
		else { float dataFloat = 0; }
		*/
		float dataFloat;
		dataFloat = roundf(dataFloat * 100) / 100;
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	48 ec       	ldi	r20, 0xC8	; 200
     654:	52 e4       	ldi	r21, 0x42	; 66
     656:	cb 55       	subi	r28, 0x5B	; 91
     658:	df 4f       	sbci	r29, 0xFF	; 255
     65a:	68 81       	ld	r22, Y
     65c:	79 81       	ldd	r23, Y+1	; 0x01
     65e:	8a 81       	ldd	r24, Y+2	; 0x02
     660:	9b 81       	ldd	r25, Y+3	; 0x03
     662:	c5 5a       	subi	r28, 0xA5	; 165
     664:	d0 40       	sbci	r29, 0x00	; 0
     666:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
     66a:	0e 94 ba 06 	call	0xd74	; 0xd74 <round>
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	48 ec       	ldi	r20, 0xC8	; 200
     674:	52 e4       	ldi	r21, 0x42	; 66
     676:	0e 94 a3 04 	call	0x946	; 0x946 <__divsf3>
     67a:	cb 55       	subi	r28, 0x5B	; 91
     67c:	df 4f       	sbci	r29, 0xFF	; 255
     67e:	68 83       	st	Y, r22
     680:	79 83       	std	Y+1, r23	; 0x01
     682:	8a 83       	std	Y+2, r24	; 0x02
     684:	9b 83       	std	Y+3, r25	; 0x03
     686:	c5 5a       	subi	r28, 0xA5	; 165
     688:	d0 40       	sbci	r29, 0x00	; 0
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
     68a:	0e 94 a6 00 	call	0x14c	; 0x14c <find_decimal>
     68e:	7c 01       	movw	r14, r24
     690:	ff 24       	eor	r15, r15
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
     692:	a2 e0       	ldi	r26, 0x02	; 2
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ae 19       	sub	r26, r14
     698:	bf 09       	sbc	r27, r15
     69a:	c3 55       	subi	r28, 0x53	; 83
     69c:	df 4f       	sbci	r29, 0xFF	; 255
     69e:	b9 83       	std	Y+1, r27	; 0x01
     6a0:	a8 83       	st	Y, r26
     6a2:	cd 5a       	subi	r28, 0xAD	; 173
     6a4:	d0 40       	sbci	r29, 0x00	; 0
     6a6:	bd 01       	movw	r22, r26
     6a8:	bb 0f       	add	r27, r27
     6aa:	88 0b       	sbc	r24, r24
     6ac:	99 0b       	sbc	r25, r25
     6ae:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__floatsisf>
     6b2:	9b 01       	movw	r18, r22
     6b4:	ac 01       	movw	r20, r24
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	80 e2       	ldi	r24, 0x20	; 32
     6bc:	91 e4       	ldi	r25, 0x41	; 65
     6be:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <pow>
     6c2:	cb 55       	subi	r28, 0x5B	; 91
     6c4:	df 4f       	sbci	r29, 0xFF	; 255
     6c6:	28 81       	ld	r18, Y
     6c8:	39 81       	ldd	r19, Y+1	; 0x01
     6ca:	4a 81       	ldd	r20, Y+2	; 0x02
     6cc:	5b 81       	ldd	r21, Y+3	; 0x03
     6ce:	c5 5a       	subi	r28, 0xA5	; 165
     6d0:	d0 40       	sbci	r29, 0x00	; 0
     6d2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	0e 94 32 04 	call	0x864	; 0x864 <__addsf3>
     6e2:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fixsfsi>
     6e6:	5b 01       	movw	r10, r22
     6e8:	c1 55       	subi	r28, 0x51	; 81
     6ea:	df 4f       	sbci	r29, 0xFF	; 255
     6ec:	c8 80       	ld	r12, Y
     6ee:	d9 80       	ldd	r13, Y+1	; 0x01
     6f0:	cf 5a       	subi	r28, 0xAF	; 175
     6f2:	d0 40       	sbci	r29, 0x00	; 0
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     6f4:	02 e0       	ldi	r16, 0x02	; 2
     6f6:	10 e0       	ldi	r17, 0x00	; 0
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     6f8:	0e 15       	cp	r16, r14
     6fa:	1f 05       	cpc	r17, r15
     6fc:	81 f4       	brne	.+32     	; 0x71e <main+0x216>
     6fe:	cb 54       	subi	r28, 0x4B	; 75
     700:	df 4f       	sbci	r29, 0xFF	; 255
     702:	48 81       	ld	r20, Y
     704:	c5 5b       	subi	r28, 0xB5	; 181
     706:	d0 40       	sbci	r29, 0x00	; 0
     708:	c3 55       	subi	r28, 0x53	; 83
     70a:	df 4f       	sbci	r29, 0xFF	; 255
     70c:	e8 81       	ld	r30, Y
     70e:	f9 81       	ldd	r31, Y+1	; 0x01
     710:	cd 5a       	subi	r28, 0xAD	; 173
     712:	d0 40       	sbci	r29, 0x00	; 0
     714:	1e 16       	cp	r1, r30
     716:	1f 06       	cpc	r1, r31
     718:	1c f0       	brlt	.+6      	; 0x720 <main+0x218>
     71a:	49 2d       	mov	r20, r9
     71c:	01 c0       	rjmp	.+2      	; 0x720 <main+0x218>
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
     71e:	49 2d       	mov	r20, r9
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
     720:	95 01       	movw	r18, r10
     722:	ad ec       	ldi	r26, 0xCD	; 205
     724:	bc ec       	ldi	r27, 0xCC	; 204
     726:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__umulhisi3>
     72a:	96 95       	lsr	r25
     72c:	87 95       	ror	r24
     72e:	96 95       	lsr	r25
     730:	87 95       	ror	r24
     732:	96 95       	lsr	r25
     734:	87 95       	ror	r24
     736:	9c 01       	movw	r18, r24
     738:	22 0f       	add	r18, r18
     73a:	33 1f       	adc	r19, r19
     73c:	88 0f       	add	r24, r24
     73e:	99 1f       	adc	r25, r25
     740:	88 0f       	add	r24, r24
     742:	99 1f       	adc	r25, r25
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	82 0f       	add	r24, r18
     74a:	93 1f       	adc	r25, r19
     74c:	60 2f       	mov	r22, r16
     74e:	fa 2d       	mov	r31, r10
     750:	f8 1b       	sub	r31, r24
     752:	8f 2f       	mov	r24, r31
     754:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <wololo>
     758:	d6 01       	movw	r26, r12
     75a:	8e 93       	st	-X, r24
     75c:	6d 01       	movw	r12, r26
			dataInt = dataInt/10;
     75e:	95 01       	movw	r18, r10
     760:	ad ec       	ldi	r26, 0xCD	; 205
     762:	bc ec       	ldi	r27, 0xCC	; 204
     764:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__umulhisi3>
     768:	5c 01       	movw	r10, r24
     76a:	b6 94       	lsr	r11
     76c:	a7 94       	ror	r10
     76e:	b6 94       	lsr	r11
     770:	a7 94       	ror	r10
     772:	b6 94       	lsr	r11
     774:	a7 94       	ror	r10
		dataFloat = roundf(dataFloat * 100) / 100;
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     776:	01 50       	subi	r16, 0x01	; 1
     778:	11 09       	sbc	r17, r1
     77a:	08 f0       	brcs	.+2      	; 0x77e <main+0x276>
     77c:	bd cf       	rjmp	.-134    	; 0x6f8 <main+0x1f0>
				hasDecimal = 0;
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
			dataInt = dataInt/10;
		}
		if (4 > displayCount%10 > 0) { dataArray[3] = 15; }
     77e:	c7 55       	subi	r28, 0x57	; 87
     780:	df 4f       	sbci	r29, 0xFF	; 255
     782:	68 81       	ld	r22, Y
     784:	79 81       	ldd	r23, Y+1	; 0x01
     786:	8a 81       	ldd	r24, Y+2	; 0x02
     788:	9b 81       	ldd	r25, Y+3	; 0x03
     78a:	c9 5a       	subi	r28, 0xA9	; 169
     78c:	d0 40       	sbci	r29, 0x00	; 0
     78e:	2a e0       	ldi	r18, 0x0A	; 10
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	0e 94 2e 08 	call	0x105c	; 0x105c <__udivmodsi4>
     79a:	64 30       	cpi	r22, 0x04	; 4
     79c:	71 05       	cpc	r23, r1
     79e:	81 05       	cpc	r24, r1
     7a0:	91 05       	cpc	r25, r1
     7a2:	38 f4       	brcc	.+14     	; 0x7b2 <main+0x2aa>
     7a4:	8f e0       	ldi	r24, 0x0F	; 15
     7a6:	cc 55       	subi	r28, 0x5C	; 92
     7a8:	df 4f       	sbci	r29, 0xFF	; 255
     7aa:	88 83       	st	Y, r24
     7ac:	c4 5a       	subi	r28, 0xA4	; 164
     7ae:	d0 40       	sbci	r29, 0x00	; 0
     7b0:	12 c0       	rjmp	.+36     	; 0x7d6 <main+0x2ce>
		else if (7 > displayCount%10 > 3) { dataArray[3] = 15; }
		else if (displayCount%10 > 7) { dataArray[3] = 15; }
     7b2:	68 30       	cpi	r22, 0x08	; 8
     7b4:	71 05       	cpc	r23, r1
     7b6:	81 05       	cpc	r24, r1
     7b8:	91 05       	cpc	r25, r1
     7ba:	38 f0       	brcs	.+14     	; 0x7ca <main+0x2c2>
     7bc:	8f e0       	ldi	r24, 0x0F	; 15
     7be:	cc 55       	subi	r28, 0x5C	; 92
     7c0:	df 4f       	sbci	r29, 0xFF	; 255
     7c2:	88 83       	st	Y, r24
     7c4:	c4 5a       	subi	r28, 0xA4	; 164
     7c6:	d0 40       	sbci	r29, 0x00	; 0
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <main+0x2ce>
		else { dataArray[3] = 12; }
     7ca:	ec e0       	ldi	r30, 0x0C	; 12
     7cc:	cc 55       	subi	r28, 0x5C	; 92
     7ce:	df 4f       	sbci	r29, 0xFF	; 255
     7d0:	e8 83       	st	Y, r30
     7d2:	c4 5a       	subi	r28, 0xA4	; 164
     7d4:	d0 40       	sbci	r29, 0x00	; 0

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
			uart_transmit(data);
     7d6:	cf 55       	subi	r28, 0x5F	; 95
     7d8:	df 4f       	sbci	r29, 0xFF	; 255
     7da:	88 81       	ld	r24, Y
     7dc:	c1 5a       	subi	r28, 0xA1	; 161
     7de:	d0 40       	sbci	r29, 0x00	; 0
     7e0:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e4:	8f ed       	ldi	r24, 0xDF	; 223
     7e6:	9e e2       	ldi	r25, 0x2E	; 46
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <main+0x2e0>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <main+0x2e6>
     7ee:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
     7f0:	11 e0       	ldi	r17, 0x01	; 1
     7f2:	13 c0       	rjmp	.+38     	; 0x81a <main+0x312>
		else if (displayCount%10 > 7) { dataArray[3] = 15; }
		else { dataArray[3] = 12; }

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
     7f4:	e1 ea       	ldi	r30, 0xA1	; 161
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	ec 0f       	add	r30, r28
     7fa:	fd 1f       	adc	r31, r29
     7fc:	e1 0f       	add	r30, r17
     7fe:	f1 1d       	adc	r31, r1
			uart_transmit(data);
     800:	80 81       	ld	r24, Z
     802:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
     806:	af ed       	ldi	r26, 0xDF	; 223
     808:	be e2       	ldi	r27, 0x2E	; 46
     80a:	11 97       	sbiw	r26, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <main+0x302>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <main+0x308>
     810:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
     812:	1f 5f       	subi	r17, 0xFF	; 255
			//Select next integer to send
			if (index == 4) {
     814:	14 30       	cpi	r17, 0x04	; 4
     816:	09 f4       	brne	.+2      	; 0x81a <main+0x312>
				index = 0;
     818:	19 2d       	mov	r17, r9
			}
			//Polling mechanism
			if(TCNT0>=156) {
     81a:	86 b5       	in	r24, 0x26	; 38
     81c:	8c 39       	cpi	r24, 0x9C	; 156
     81e:	50 f3       	brcs	.-44     	; 0x7f4 <main+0x2ec>
				TCNT0 = 0;
     820:	16 bc       	out	0x26, r1	; 38
				if (counter == 50) {
     822:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     826:	82 33       	cpi	r24, 0x32	; 50
     828:	b1 f4       	brne	.+44     	; 0x856 <main+0x34e>
					counter = 0;
     82a:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <_edata>
				} else {
					counter++;
				}
			}
		}
		displayCount++;
     82e:	c7 55       	subi	r28, 0x57	; 87
     830:	df 4f       	sbci	r29, 0xFF	; 255
     832:	88 81       	ld	r24, Y
     834:	99 81       	ldd	r25, Y+1	; 0x01
     836:	aa 81       	ldd	r26, Y+2	; 0x02
     838:	bb 81       	ldd	r27, Y+3	; 0x03
     83a:	c9 5a       	subi	r28, 0xA9	; 169
     83c:	d0 40       	sbci	r29, 0x00	; 0
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	a1 1d       	adc	r26, r1
     842:	b1 1d       	adc	r27, r1
     844:	c7 55       	subi	r28, 0x57	; 87
     846:	df 4f       	sbci	r29, 0xFF	; 255
     848:	88 83       	st	Y, r24
     84a:	99 83       	std	Y+1, r25	; 0x01
     84c:	aa 83       	std	Y+2, r26	; 0x02
     84e:	bb 83       	std	Y+3, r27	; 0x03
     850:	c9 5a       	subi	r28, 0xA9	; 169
     852:	d0 40       	sbci	r29, 0x00	; 0
	}
     854:	a3 ce       	rjmp	.-698    	; 0x59c <main+0x94>
				TCNT0 = 0;
				if (counter == 50) {
					counter = 0;
					break;
				} else {
					counter++;
     856:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     85a:	8f 5f       	subi	r24, 0xFF	; 255
     85c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     860:	c9 cf       	rjmp	.-110    	; 0x7f4 <main+0x2ec>

00000862 <__subsf3>:
     862:	50 58       	subi	r21, 0x80	; 128

00000864 <__addsf3>:
     864:	bb 27       	eor	r27, r27
     866:	aa 27       	eor	r26, r26
     868:	0e 94 49 04 	call	0x892	; 0x892 <__addsf3x>
     86c:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_round>
     870:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscA>
     874:	38 f0       	brcs	.+14     	; 0x884 <__addsf3+0x20>
     876:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscB>
     87a:	20 f0       	brcs	.+8      	; 0x884 <__addsf3+0x20>
     87c:	39 f4       	brne	.+14     	; 0x88c <__addsf3+0x28>
     87e:	9f 3f       	cpi	r25, 0xFF	; 255
     880:	19 f4       	brne	.+6      	; 0x888 <__addsf3+0x24>
     882:	26 f4       	brtc	.+8      	; 0x88c <__addsf3+0x28>
     884:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>
     888:	0e f4       	brtc	.+2      	; 0x88c <__addsf3+0x28>
     88a:	e0 95       	com	r30
     88c:	e7 fb       	bst	r30, 7
     88e:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>

00000892 <__addsf3x>:
     892:	e9 2f       	mov	r30, r25
     894:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_split3>
     898:	58 f3       	brcs	.-42     	; 0x870 <__addsf3+0xc>
     89a:	ba 17       	cp	r27, r26
     89c:	62 07       	cpc	r22, r18
     89e:	73 07       	cpc	r23, r19
     8a0:	84 07       	cpc	r24, r20
     8a2:	95 07       	cpc	r25, r21
     8a4:	20 f0       	brcs	.+8      	; 0x8ae <__addsf3x+0x1c>
     8a6:	79 f4       	brne	.+30     	; 0x8c6 <__addsf3x+0x34>
     8a8:	a6 f5       	brtc	.+104    	; 0x912 <__stack+0x13>
     8aa:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_zero>
     8ae:	0e f4       	brtc	.+2      	; 0x8b2 <__addsf3x+0x20>
     8b0:	e0 95       	com	r30
     8b2:	0b 2e       	mov	r0, r27
     8b4:	ba 2f       	mov	r27, r26
     8b6:	a0 2d       	mov	r26, r0
     8b8:	0b 01       	movw	r0, r22
     8ba:	b9 01       	movw	r22, r18
     8bc:	90 01       	movw	r18, r0
     8be:	0c 01       	movw	r0, r24
     8c0:	ca 01       	movw	r24, r20
     8c2:	a0 01       	movw	r20, r0
     8c4:	11 24       	eor	r1, r1
     8c6:	ff 27       	eor	r31, r31
     8c8:	59 1b       	sub	r21, r25
     8ca:	99 f0       	breq	.+38     	; 0x8f2 <__addsf3x+0x60>
     8cc:	59 3f       	cpi	r21, 0xF9	; 249
     8ce:	50 f4       	brcc	.+20     	; 0x8e4 <__addsf3x+0x52>
     8d0:	50 3e       	cpi	r21, 0xE0	; 224
     8d2:	68 f1       	brcs	.+90     	; 0x92e <__stack+0x2f>
     8d4:	1a 16       	cp	r1, r26
     8d6:	f0 40       	sbci	r31, 0x00	; 0
     8d8:	a2 2f       	mov	r26, r18
     8da:	23 2f       	mov	r18, r19
     8dc:	34 2f       	mov	r19, r20
     8de:	44 27       	eor	r20, r20
     8e0:	58 5f       	subi	r21, 0xF8	; 248
     8e2:	f3 cf       	rjmp	.-26     	; 0x8ca <__addsf3x+0x38>
     8e4:	46 95       	lsr	r20
     8e6:	37 95       	ror	r19
     8e8:	27 95       	ror	r18
     8ea:	a7 95       	ror	r26
     8ec:	f0 40       	sbci	r31, 0x00	; 0
     8ee:	53 95       	inc	r21
     8f0:	c9 f7       	brne	.-14     	; 0x8e4 <__addsf3x+0x52>
     8f2:	7e f4       	brtc	.+30     	; 0x912 <__stack+0x13>
     8f4:	1f 16       	cp	r1, r31
     8f6:	ba 0b       	sbc	r27, r26
     8f8:	62 0b       	sbc	r22, r18
     8fa:	73 0b       	sbc	r23, r19
     8fc:	84 0b       	sbc	r24, r20
     8fe:	ba f0       	brmi	.+46     	; 0x92e <__stack+0x2f>
     900:	91 50       	subi	r25, 0x01	; 1
     902:	a1 f0       	breq	.+40     	; 0x92c <__stack+0x2d>
     904:	ff 0f       	add	r31, r31
     906:	bb 1f       	adc	r27, r27
     908:	66 1f       	adc	r22, r22
     90a:	77 1f       	adc	r23, r23
     90c:	88 1f       	adc	r24, r24
     90e:	c2 f7       	brpl	.-16     	; 0x900 <__stack+0x1>
     910:	0e c0       	rjmp	.+28     	; 0x92e <__stack+0x2f>
     912:	ba 0f       	add	r27, r26
     914:	62 1f       	adc	r22, r18
     916:	73 1f       	adc	r23, r19
     918:	84 1f       	adc	r24, r20
     91a:	48 f4       	brcc	.+18     	; 0x92e <__stack+0x2f>
     91c:	87 95       	ror	r24
     91e:	77 95       	ror	r23
     920:	67 95       	ror	r22
     922:	b7 95       	ror	r27
     924:	f7 95       	ror	r31
     926:	9e 3f       	cpi	r25, 0xFE	; 254
     928:	08 f0       	brcs	.+2      	; 0x92c <__stack+0x2d>
     92a:	b0 cf       	rjmp	.-160    	; 0x88c <__addsf3+0x28>
     92c:	93 95       	inc	r25
     92e:	88 0f       	add	r24, r24
     930:	08 f0       	brcs	.+2      	; 0x934 <__stack+0x35>
     932:	99 27       	eor	r25, r25
     934:	ee 0f       	add	r30, r30
     936:	97 95       	ror	r25
     938:	87 95       	ror	r24
     93a:	08 95       	ret

0000093c <__cmpsf2>:
     93c:	0e 94 88 05 	call	0xb10	; 0xb10 <__fp_cmp>
     940:	08 f4       	brcc	.+2      	; 0x944 <__cmpsf2+0x8>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	08 95       	ret

00000946 <__divsf3>:
     946:	0e 94 b7 04 	call	0x96e	; 0x96e <__divsf3x>
     94a:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_round>
     94e:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscB>
     952:	58 f0       	brcs	.+22     	; 0x96a <__divsf3+0x24>
     954:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscA>
     958:	40 f0       	brcs	.+16     	; 0x96a <__divsf3+0x24>
     95a:	29 f4       	brne	.+10     	; 0x966 <__divsf3+0x20>
     95c:	5f 3f       	cpi	r21, 0xFF	; 255
     95e:	29 f0       	breq	.+10     	; 0x96a <__divsf3+0x24>
     960:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     964:	51 11       	cpse	r21, r1
     966:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
     96a:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>

0000096e <__divsf3x>:
     96e:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_split3>
     972:	68 f3       	brcs	.-38     	; 0x94e <__divsf3+0x8>

00000974 <__divsf3_pse>:
     974:	99 23       	and	r25, r25
     976:	b1 f3       	breq	.-20     	; 0x964 <__divsf3+0x1e>
     978:	55 23       	and	r21, r21
     97a:	91 f3       	breq	.-28     	; 0x960 <__divsf3+0x1a>
     97c:	95 1b       	sub	r25, r21
     97e:	55 0b       	sbc	r21, r21
     980:	bb 27       	eor	r27, r27
     982:	aa 27       	eor	r26, r26
     984:	62 17       	cp	r22, r18
     986:	73 07       	cpc	r23, r19
     988:	84 07       	cpc	r24, r20
     98a:	38 f0       	brcs	.+14     	; 0x99a <__divsf3_pse+0x26>
     98c:	9f 5f       	subi	r25, 0xFF	; 255
     98e:	5f 4f       	sbci	r21, 0xFF	; 255
     990:	22 0f       	add	r18, r18
     992:	33 1f       	adc	r19, r19
     994:	44 1f       	adc	r20, r20
     996:	aa 1f       	adc	r26, r26
     998:	a9 f3       	breq	.-22     	; 0x984 <__divsf3_pse+0x10>
     99a:	35 d0       	rcall	.+106    	; 0xa06 <__divsf3_pse+0x92>
     99c:	0e 2e       	mov	r0, r30
     99e:	3a f0       	brmi	.+14     	; 0x9ae <__divsf3_pse+0x3a>
     9a0:	e0 e8       	ldi	r30, 0x80	; 128
     9a2:	32 d0       	rcall	.+100    	; 0xa08 <__divsf3_pse+0x94>
     9a4:	91 50       	subi	r25, 0x01	; 1
     9a6:	50 40       	sbci	r21, 0x00	; 0
     9a8:	e6 95       	lsr	r30
     9aa:	00 1c       	adc	r0, r0
     9ac:	ca f7       	brpl	.-14     	; 0x9a0 <__divsf3_pse+0x2c>
     9ae:	2b d0       	rcall	.+86     	; 0xa06 <__divsf3_pse+0x92>
     9b0:	fe 2f       	mov	r31, r30
     9b2:	29 d0       	rcall	.+82     	; 0xa06 <__divsf3_pse+0x92>
     9b4:	66 0f       	add	r22, r22
     9b6:	77 1f       	adc	r23, r23
     9b8:	88 1f       	adc	r24, r24
     9ba:	bb 1f       	adc	r27, r27
     9bc:	26 17       	cp	r18, r22
     9be:	37 07       	cpc	r19, r23
     9c0:	48 07       	cpc	r20, r24
     9c2:	ab 07       	cpc	r26, r27
     9c4:	b0 e8       	ldi	r27, 0x80	; 128
     9c6:	09 f0       	breq	.+2      	; 0x9ca <__divsf3_pse+0x56>
     9c8:	bb 0b       	sbc	r27, r27
     9ca:	80 2d       	mov	r24, r0
     9cc:	bf 01       	movw	r22, r30
     9ce:	ff 27       	eor	r31, r31
     9d0:	93 58       	subi	r25, 0x83	; 131
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	3a f0       	brmi	.+14     	; 0x9e4 <__divsf3_pse+0x70>
     9d6:	9e 3f       	cpi	r25, 0xFE	; 254
     9d8:	51 05       	cpc	r21, r1
     9da:	78 f0       	brcs	.+30     	; 0x9fa <__divsf3_pse+0x86>
     9dc:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     9e0:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
     9e4:	5f 3f       	cpi	r21, 0xFF	; 255
     9e6:	e4 f3       	brlt	.-8      	; 0x9e0 <__divsf3_pse+0x6c>
     9e8:	98 3e       	cpi	r25, 0xE8	; 232
     9ea:	d4 f3       	brlt	.-12     	; 0x9e0 <__divsf3_pse+0x6c>
     9ec:	86 95       	lsr	r24
     9ee:	77 95       	ror	r23
     9f0:	67 95       	ror	r22
     9f2:	b7 95       	ror	r27
     9f4:	f7 95       	ror	r31
     9f6:	9f 5f       	subi	r25, 0xFF	; 255
     9f8:	c9 f7       	brne	.-14     	; 0x9ec <__divsf3_pse+0x78>
     9fa:	88 0f       	add	r24, r24
     9fc:	91 1d       	adc	r25, r1
     9fe:	96 95       	lsr	r25
     a00:	87 95       	ror	r24
     a02:	97 f9       	bld	r25, 7
     a04:	08 95       	ret
     a06:	e1 e0       	ldi	r30, 0x01	; 1
     a08:	66 0f       	add	r22, r22
     a0a:	77 1f       	adc	r23, r23
     a0c:	88 1f       	adc	r24, r24
     a0e:	bb 1f       	adc	r27, r27
     a10:	62 17       	cp	r22, r18
     a12:	73 07       	cpc	r23, r19
     a14:	84 07       	cpc	r24, r20
     a16:	ba 07       	cpc	r27, r26
     a18:	20 f0       	brcs	.+8      	; 0xa22 <__divsf3_pse+0xae>
     a1a:	62 1b       	sub	r22, r18
     a1c:	73 0b       	sbc	r23, r19
     a1e:	84 0b       	sbc	r24, r20
     a20:	ba 0b       	sbc	r27, r26
     a22:	ee 1f       	adc	r30, r30
     a24:	88 f7       	brcc	.-30     	; 0xa08 <__divsf3_pse+0x94>
     a26:	e0 95       	com	r30
     a28:	08 95       	ret

00000a2a <__fixsfsi>:
     a2a:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fixunssfsi>
     a2e:	68 94       	set
     a30:	b1 11       	cpse	r27, r1
     a32:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
     a36:	08 95       	ret

00000a38 <__fixunssfsi>:
     a38:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_splitA>
     a3c:	88 f0       	brcs	.+34     	; 0xa60 <__fixunssfsi+0x28>
     a3e:	9f 57       	subi	r25, 0x7F	; 127
     a40:	98 f0       	brcs	.+38     	; 0xa68 <__fixunssfsi+0x30>
     a42:	b9 2f       	mov	r27, r25
     a44:	99 27       	eor	r25, r25
     a46:	b7 51       	subi	r27, 0x17	; 23
     a48:	b0 f0       	brcs	.+44     	; 0xa76 <__fixunssfsi+0x3e>
     a4a:	e1 f0       	breq	.+56     	; 0xa84 <__fixunssfsi+0x4c>
     a4c:	66 0f       	add	r22, r22
     a4e:	77 1f       	adc	r23, r23
     a50:	88 1f       	adc	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	1a f0       	brmi	.+6      	; 0xa5c <__fixunssfsi+0x24>
     a56:	ba 95       	dec	r27
     a58:	c9 f7       	brne	.-14     	; 0xa4c <__fixunssfsi+0x14>
     a5a:	14 c0       	rjmp	.+40     	; 0xa84 <__fixunssfsi+0x4c>
     a5c:	b1 30       	cpi	r27, 0x01	; 1
     a5e:	91 f0       	breq	.+36     	; 0xa84 <__fixunssfsi+0x4c>
     a60:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_zero>
     a64:	b1 e0       	ldi	r27, 0x01	; 1
     a66:	08 95       	ret
     a68:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_zero>
     a6c:	67 2f       	mov	r22, r23
     a6e:	78 2f       	mov	r23, r24
     a70:	88 27       	eor	r24, r24
     a72:	b8 5f       	subi	r27, 0xF8	; 248
     a74:	39 f0       	breq	.+14     	; 0xa84 <__fixunssfsi+0x4c>
     a76:	b9 3f       	cpi	r27, 0xF9	; 249
     a78:	cc f3       	brlt	.-14     	; 0xa6c <__fixunssfsi+0x34>
     a7a:	86 95       	lsr	r24
     a7c:	77 95       	ror	r23
     a7e:	67 95       	ror	r22
     a80:	b3 95       	inc	r27
     a82:	d9 f7       	brne	.-10     	; 0xa7a <__fixunssfsi+0x42>
     a84:	3e f4       	brtc	.+14     	; 0xa94 <__fixunssfsi+0x5c>
     a86:	90 95       	com	r25
     a88:	80 95       	com	r24
     a8a:	70 95       	com	r23
     a8c:	61 95       	neg	r22
     a8e:	7f 4f       	sbci	r23, 0xFF	; 255
     a90:	8f 4f       	sbci	r24, 0xFF	; 255
     a92:	9f 4f       	sbci	r25, 0xFF	; 255
     a94:	08 95       	ret

00000a96 <__floatunsisf>:
     a96:	e8 94       	clt
     a98:	09 c0       	rjmp	.+18     	; 0xaac <__floatsisf+0x12>

00000a9a <__floatsisf>:
     a9a:	97 fb       	bst	r25, 7
     a9c:	3e f4       	brtc	.+14     	; 0xaac <__floatsisf+0x12>
     a9e:	90 95       	com	r25
     aa0:	80 95       	com	r24
     aa2:	70 95       	com	r23
     aa4:	61 95       	neg	r22
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	8f 4f       	sbci	r24, 0xFF	; 255
     aaa:	9f 4f       	sbci	r25, 0xFF	; 255
     aac:	99 23       	and	r25, r25
     aae:	a9 f0       	breq	.+42     	; 0xada <__floatsisf+0x40>
     ab0:	f9 2f       	mov	r31, r25
     ab2:	96 e9       	ldi	r25, 0x96	; 150
     ab4:	bb 27       	eor	r27, r27
     ab6:	93 95       	inc	r25
     ab8:	f6 95       	lsr	r31
     aba:	87 95       	ror	r24
     abc:	77 95       	ror	r23
     abe:	67 95       	ror	r22
     ac0:	b7 95       	ror	r27
     ac2:	f1 11       	cpse	r31, r1
     ac4:	f8 cf       	rjmp	.-16     	; 0xab6 <__floatsisf+0x1c>
     ac6:	fa f4       	brpl	.+62     	; 0xb06 <__floatsisf+0x6c>
     ac8:	bb 0f       	add	r27, r27
     aca:	11 f4       	brne	.+4      	; 0xad0 <__floatsisf+0x36>
     acc:	60 ff       	sbrs	r22, 0
     ace:	1b c0       	rjmp	.+54     	; 0xb06 <__floatsisf+0x6c>
     ad0:	6f 5f       	subi	r22, 0xFF	; 255
     ad2:	7f 4f       	sbci	r23, 0xFF	; 255
     ad4:	8f 4f       	sbci	r24, 0xFF	; 255
     ad6:	9f 4f       	sbci	r25, 0xFF	; 255
     ad8:	16 c0       	rjmp	.+44     	; 0xb06 <__floatsisf+0x6c>
     ada:	88 23       	and	r24, r24
     adc:	11 f0       	breq	.+4      	; 0xae2 <__floatsisf+0x48>
     ade:	96 e9       	ldi	r25, 0x96	; 150
     ae0:	11 c0       	rjmp	.+34     	; 0xb04 <__floatsisf+0x6a>
     ae2:	77 23       	and	r23, r23
     ae4:	21 f0       	breq	.+8      	; 0xaee <__floatsisf+0x54>
     ae6:	9e e8       	ldi	r25, 0x8E	; 142
     ae8:	87 2f       	mov	r24, r23
     aea:	76 2f       	mov	r23, r22
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <__floatsisf+0x5e>
     aee:	66 23       	and	r22, r22
     af0:	71 f0       	breq	.+28     	; 0xb0e <__floatsisf+0x74>
     af2:	96 e8       	ldi	r25, 0x86	; 134
     af4:	86 2f       	mov	r24, r22
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	2a f0       	brmi	.+10     	; 0xb06 <__floatsisf+0x6c>
     afc:	9a 95       	dec	r25
     afe:	66 0f       	add	r22, r22
     b00:	77 1f       	adc	r23, r23
     b02:	88 1f       	adc	r24, r24
     b04:	da f7       	brpl	.-10     	; 0xafc <__floatsisf+0x62>
     b06:	88 0f       	add	r24, r24
     b08:	96 95       	lsr	r25
     b0a:	87 95       	ror	r24
     b0c:	97 f9       	bld	r25, 7
     b0e:	08 95       	ret

00000b10 <__fp_cmp>:
     b10:	99 0f       	add	r25, r25
     b12:	00 08       	sbc	r0, r0
     b14:	55 0f       	add	r21, r21
     b16:	aa 0b       	sbc	r26, r26
     b18:	e0 e8       	ldi	r30, 0x80	; 128
     b1a:	fe ef       	ldi	r31, 0xFE	; 254
     b1c:	16 16       	cp	r1, r22
     b1e:	17 06       	cpc	r1, r23
     b20:	e8 07       	cpc	r30, r24
     b22:	f9 07       	cpc	r31, r25
     b24:	c0 f0       	brcs	.+48     	; 0xb56 <__fp_cmp+0x46>
     b26:	12 16       	cp	r1, r18
     b28:	13 06       	cpc	r1, r19
     b2a:	e4 07       	cpc	r30, r20
     b2c:	f5 07       	cpc	r31, r21
     b2e:	98 f0       	brcs	.+38     	; 0xb56 <__fp_cmp+0x46>
     b30:	62 1b       	sub	r22, r18
     b32:	73 0b       	sbc	r23, r19
     b34:	84 0b       	sbc	r24, r20
     b36:	95 0b       	sbc	r25, r21
     b38:	39 f4       	brne	.+14     	; 0xb48 <__fp_cmp+0x38>
     b3a:	0a 26       	eor	r0, r26
     b3c:	61 f0       	breq	.+24     	; 0xb56 <__fp_cmp+0x46>
     b3e:	23 2b       	or	r18, r19
     b40:	24 2b       	or	r18, r20
     b42:	25 2b       	or	r18, r21
     b44:	21 f4       	brne	.+8      	; 0xb4e <__fp_cmp+0x3e>
     b46:	08 95       	ret
     b48:	0a 26       	eor	r0, r26
     b4a:	09 f4       	brne	.+2      	; 0xb4e <__fp_cmp+0x3e>
     b4c:	a1 40       	sbci	r26, 0x01	; 1
     b4e:	a6 95       	lsr	r26
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	81 1d       	adc	r24, r1
     b54:	81 1d       	adc	r24, r1
     b56:	08 95       	ret

00000b58 <__fp_inf>:
     b58:	97 f9       	bld	r25, 7
     b5a:	9f 67       	ori	r25, 0x7F	; 127
     b5c:	80 e8       	ldi	r24, 0x80	; 128
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	08 95       	ret

00000b64 <__fp_nan>:
     b64:	9f ef       	ldi	r25, 0xFF	; 255
     b66:	80 ec       	ldi	r24, 0xC0	; 192
     b68:	08 95       	ret

00000b6a <__fp_pscA>:
     b6a:	00 24       	eor	r0, r0
     b6c:	0a 94       	dec	r0
     b6e:	16 16       	cp	r1, r22
     b70:	17 06       	cpc	r1, r23
     b72:	18 06       	cpc	r1, r24
     b74:	09 06       	cpc	r0, r25
     b76:	08 95       	ret

00000b78 <__fp_pscB>:
     b78:	00 24       	eor	r0, r0
     b7a:	0a 94       	dec	r0
     b7c:	12 16       	cp	r1, r18
     b7e:	13 06       	cpc	r1, r19
     b80:	14 06       	cpc	r1, r20
     b82:	05 06       	cpc	r0, r21
     b84:	08 95       	ret

00000b86 <__fp_round>:
     b86:	09 2e       	mov	r0, r25
     b88:	03 94       	inc	r0
     b8a:	00 0c       	add	r0, r0
     b8c:	11 f4       	brne	.+4      	; 0xb92 <__fp_round+0xc>
     b8e:	88 23       	and	r24, r24
     b90:	52 f0       	brmi	.+20     	; 0xba6 <__fp_round+0x20>
     b92:	bb 0f       	add	r27, r27
     b94:	40 f4       	brcc	.+16     	; 0xba6 <__fp_round+0x20>
     b96:	bf 2b       	or	r27, r31
     b98:	11 f4       	brne	.+4      	; 0xb9e <__fp_round+0x18>
     b9a:	60 ff       	sbrs	r22, 0
     b9c:	04 c0       	rjmp	.+8      	; 0xba6 <__fp_round+0x20>
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	8f 4f       	sbci	r24, 0xFF	; 255
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
     ba6:	08 95       	ret

00000ba8 <__fp_split3>:
     ba8:	57 fd       	sbrc	r21, 7
     baa:	90 58       	subi	r25, 0x80	; 128
     bac:	44 0f       	add	r20, r20
     bae:	55 1f       	adc	r21, r21
     bb0:	59 f0       	breq	.+22     	; 0xbc8 <__fp_splitA+0x10>
     bb2:	5f 3f       	cpi	r21, 0xFF	; 255
     bb4:	71 f0       	breq	.+28     	; 0xbd2 <__fp_splitA+0x1a>
     bb6:	47 95       	ror	r20

00000bb8 <__fp_splitA>:
     bb8:	88 0f       	add	r24, r24
     bba:	97 fb       	bst	r25, 7
     bbc:	99 1f       	adc	r25, r25
     bbe:	61 f0       	breq	.+24     	; 0xbd8 <__fp_splitA+0x20>
     bc0:	9f 3f       	cpi	r25, 0xFF	; 255
     bc2:	79 f0       	breq	.+30     	; 0xbe2 <__fp_splitA+0x2a>
     bc4:	87 95       	ror	r24
     bc6:	08 95       	ret
     bc8:	12 16       	cp	r1, r18
     bca:	13 06       	cpc	r1, r19
     bcc:	14 06       	cpc	r1, r20
     bce:	55 1f       	adc	r21, r21
     bd0:	f2 cf       	rjmp	.-28     	; 0xbb6 <__fp_split3+0xe>
     bd2:	46 95       	lsr	r20
     bd4:	f1 df       	rcall	.-30     	; 0xbb8 <__fp_splitA>
     bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <__fp_splitA+0x30>
     bd8:	16 16       	cp	r1, r22
     bda:	17 06       	cpc	r1, r23
     bdc:	18 06       	cpc	r1, r24
     bde:	99 1f       	adc	r25, r25
     be0:	f1 cf       	rjmp	.-30     	; 0xbc4 <__fp_splitA+0xc>
     be2:	86 95       	lsr	r24
     be4:	71 05       	cpc	r23, r1
     be6:	61 05       	cpc	r22, r1
     be8:	08 94       	sec
     bea:	08 95       	ret

00000bec <__fp_zero>:
     bec:	e8 94       	clt

00000bee <__fp_szero>:
     bee:	bb 27       	eor	r27, r27
     bf0:	66 27       	eor	r22, r22
     bf2:	77 27       	eor	r23, r23
     bf4:	cb 01       	movw	r24, r22
     bf6:	97 f9       	bld	r25, 7
     bf8:	08 95       	ret

00000bfa <__mulsf3>:
     bfa:	0e 94 10 06 	call	0xc20	; 0xc20 <__mulsf3x>
     bfe:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_round>
     c02:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscA>
     c06:	38 f0       	brcs	.+14     	; 0xc16 <__mulsf3+0x1c>
     c08:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscB>
     c0c:	20 f0       	brcs	.+8      	; 0xc16 <__mulsf3+0x1c>
     c0e:	95 23       	and	r25, r21
     c10:	11 f0       	breq	.+4      	; 0xc16 <__mulsf3+0x1c>
     c12:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     c16:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>
     c1a:	11 24       	eor	r1, r1
     c1c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>

00000c20 <__mulsf3x>:
     c20:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_split3>
     c24:	70 f3       	brcs	.-36     	; 0xc02 <__mulsf3+0x8>

00000c26 <__mulsf3_pse>:
     c26:	95 9f       	mul	r25, r21
     c28:	c1 f3       	breq	.-16     	; 0xc1a <__mulsf3+0x20>
     c2a:	95 0f       	add	r25, r21
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	55 1f       	adc	r21, r21
     c30:	62 9f       	mul	r22, r18
     c32:	f0 01       	movw	r30, r0
     c34:	72 9f       	mul	r23, r18
     c36:	bb 27       	eor	r27, r27
     c38:	f0 0d       	add	r31, r0
     c3a:	b1 1d       	adc	r27, r1
     c3c:	63 9f       	mul	r22, r19
     c3e:	aa 27       	eor	r26, r26
     c40:	f0 0d       	add	r31, r0
     c42:	b1 1d       	adc	r27, r1
     c44:	aa 1f       	adc	r26, r26
     c46:	64 9f       	mul	r22, r20
     c48:	66 27       	eor	r22, r22
     c4a:	b0 0d       	add	r27, r0
     c4c:	a1 1d       	adc	r26, r1
     c4e:	66 1f       	adc	r22, r22
     c50:	82 9f       	mul	r24, r18
     c52:	22 27       	eor	r18, r18
     c54:	b0 0d       	add	r27, r0
     c56:	a1 1d       	adc	r26, r1
     c58:	62 1f       	adc	r22, r18
     c5a:	73 9f       	mul	r23, r19
     c5c:	b0 0d       	add	r27, r0
     c5e:	a1 1d       	adc	r26, r1
     c60:	62 1f       	adc	r22, r18
     c62:	83 9f       	mul	r24, r19
     c64:	a0 0d       	add	r26, r0
     c66:	61 1d       	adc	r22, r1
     c68:	22 1f       	adc	r18, r18
     c6a:	74 9f       	mul	r23, r20
     c6c:	33 27       	eor	r19, r19
     c6e:	a0 0d       	add	r26, r0
     c70:	61 1d       	adc	r22, r1
     c72:	23 1f       	adc	r18, r19
     c74:	84 9f       	mul	r24, r20
     c76:	60 0d       	add	r22, r0
     c78:	21 1d       	adc	r18, r1
     c7a:	82 2f       	mov	r24, r18
     c7c:	76 2f       	mov	r23, r22
     c7e:	6a 2f       	mov	r22, r26
     c80:	11 24       	eor	r1, r1
     c82:	9f 57       	subi	r25, 0x7F	; 127
     c84:	50 40       	sbci	r21, 0x00	; 0
     c86:	9a f0       	brmi	.+38     	; 0xcae <__mulsf3_pse+0x88>
     c88:	f1 f0       	breq	.+60     	; 0xcc6 <__mulsf3_pse+0xa0>
     c8a:	88 23       	and	r24, r24
     c8c:	4a f0       	brmi	.+18     	; 0xca0 <__mulsf3_pse+0x7a>
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	bb 1f       	adc	r27, r27
     c94:	66 1f       	adc	r22, r22
     c96:	77 1f       	adc	r23, r23
     c98:	88 1f       	adc	r24, r24
     c9a:	91 50       	subi	r25, 0x01	; 1
     c9c:	50 40       	sbci	r21, 0x00	; 0
     c9e:	a9 f7       	brne	.-22     	; 0xc8a <__mulsf3_pse+0x64>
     ca0:	9e 3f       	cpi	r25, 0xFE	; 254
     ca2:	51 05       	cpc	r21, r1
     ca4:	80 f0       	brcs	.+32     	; 0xcc6 <__mulsf3_pse+0xa0>
     ca6:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     caa:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
     cae:	5f 3f       	cpi	r21, 0xFF	; 255
     cb0:	e4 f3       	brlt	.-8      	; 0xcaa <__mulsf3_pse+0x84>
     cb2:	98 3e       	cpi	r25, 0xE8	; 232
     cb4:	d4 f3       	brlt	.-12     	; 0xcaa <__mulsf3_pse+0x84>
     cb6:	86 95       	lsr	r24
     cb8:	77 95       	ror	r23
     cba:	67 95       	ror	r22
     cbc:	b7 95       	ror	r27
     cbe:	f7 95       	ror	r31
     cc0:	e7 95       	ror	r30
     cc2:	9f 5f       	subi	r25, 0xFF	; 255
     cc4:	c1 f7       	brne	.-16     	; 0xcb6 <__mulsf3_pse+0x90>
     cc6:	fe 2b       	or	r31, r30
     cc8:	88 0f       	add	r24, r24
     cca:	91 1d       	adc	r25, r1
     ccc:	96 95       	lsr	r25
     cce:	87 95       	ror	r24
     cd0:	97 f9       	bld	r25, 7
     cd2:	08 95       	ret

00000cd4 <pow>:
     cd4:	fa 01       	movw	r30, r20
     cd6:	ee 0f       	add	r30, r30
     cd8:	ff 1f       	adc	r31, r31
     cda:	30 96       	adiw	r30, 0x00	; 0
     cdc:	21 05       	cpc	r18, r1
     cde:	31 05       	cpc	r19, r1
     ce0:	a1 f1       	breq	.+104    	; 0xd4a <pow+0x76>
     ce2:	61 15       	cp	r22, r1
     ce4:	71 05       	cpc	r23, r1
     ce6:	61 f4       	brne	.+24     	; 0xd00 <pow+0x2c>
     ce8:	80 38       	cpi	r24, 0x80	; 128
     cea:	bf e3       	ldi	r27, 0x3F	; 63
     cec:	9b 07       	cpc	r25, r27
     cee:	49 f1       	breq	.+82     	; 0xd42 <pow+0x6e>
     cf0:	68 94       	set
     cf2:	90 38       	cpi	r25, 0x80	; 128
     cf4:	81 05       	cpc	r24, r1
     cf6:	61 f0       	breq	.+24     	; 0xd10 <pow+0x3c>
     cf8:	80 38       	cpi	r24, 0x80	; 128
     cfa:	bf ef       	ldi	r27, 0xFF	; 255
     cfc:	9b 07       	cpc	r25, r27
     cfe:	41 f0       	breq	.+16     	; 0xd10 <pow+0x3c>
     d00:	99 23       	and	r25, r25
     d02:	4a f5       	brpl	.+82     	; 0xd56 <pow+0x82>
     d04:	ff 3f       	cpi	r31, 0xFF	; 255
     d06:	e1 05       	cpc	r30, r1
     d08:	31 05       	cpc	r19, r1
     d0a:	21 05       	cpc	r18, r1
     d0c:	19 f1       	breq	.+70     	; 0xd54 <pow+0x80>
     d0e:	e8 94       	clt
     d10:	08 94       	sec
     d12:	e7 95       	ror	r30
     d14:	d9 01       	movw	r26, r18
     d16:	aa 23       	and	r26, r26
     d18:	29 f4       	brne	.+10     	; 0xd24 <pow+0x50>
     d1a:	ab 2f       	mov	r26, r27
     d1c:	be 2f       	mov	r27, r30
     d1e:	f8 5f       	subi	r31, 0xF8	; 248
     d20:	d0 f3       	brcs	.-12     	; 0xd16 <pow+0x42>
     d22:	10 c0       	rjmp	.+32     	; 0xd44 <pow+0x70>
     d24:	ff 5f       	subi	r31, 0xFF	; 255
     d26:	70 f4       	brcc	.+28     	; 0xd44 <pow+0x70>
     d28:	a6 95       	lsr	r26
     d2a:	e0 f7       	brcc	.-8      	; 0xd24 <pow+0x50>
     d2c:	f7 39       	cpi	r31, 0x97	; 151
     d2e:	50 f0       	brcs	.+20     	; 0xd44 <pow+0x70>
     d30:	19 f0       	breq	.+6      	; 0xd38 <pow+0x64>
     d32:	ff 3a       	cpi	r31, 0xAF	; 175
     d34:	38 f4       	brcc	.+14     	; 0xd44 <pow+0x70>
     d36:	9f 77       	andi	r25, 0x7F	; 127
     d38:	9f 93       	push	r25
     d3a:	0d d0       	rcall	.+26     	; 0xd56 <pow+0x82>
     d3c:	0f 90       	pop	r0
     d3e:	07 fc       	sbrc	r0, 7
     d40:	90 58       	subi	r25, 0x80	; 128
     d42:	08 95       	ret
     d44:	46 f0       	brts	.+16     	; 0xd56 <pow+0x82>
     d46:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	80 e8       	ldi	r24, 0x80	; 128
     d50:	9f e3       	ldi	r25, 0x3F	; 63
     d52:	08 95       	ret
     d54:	4f e7       	ldi	r20, 0x7F	; 127
     d56:	9f 77       	andi	r25, 0x7F	; 127
     d58:	5f 93       	push	r21
     d5a:	4f 93       	push	r20
     d5c:	3f 93       	push	r19
     d5e:	2f 93       	push	r18
     d60:	0e 94 b2 07 	call	0xf64	; 0xf64 <log>
     d64:	2f 91       	pop	r18
     d66:	3f 91       	pop	r19
     d68:	4f 91       	pop	r20
     d6a:	5f 91       	pop	r21
     d6c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__mulsf3>
     d70:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <exp>

00000d74 <round>:
     d74:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_splitA>
     d78:	e8 f0       	brcs	.+58     	; 0xdb4 <round+0x40>
     d7a:	9e 37       	cpi	r25, 0x7E	; 126
     d7c:	e8 f0       	brcs	.+58     	; 0xdb8 <round+0x44>
     d7e:	96 39       	cpi	r25, 0x96	; 150
     d80:	b8 f4       	brcc	.+46     	; 0xdb0 <round+0x3c>
     d82:	9e 38       	cpi	r25, 0x8E	; 142
     d84:	48 f4       	brcc	.+18     	; 0xd98 <round+0x24>
     d86:	67 2f       	mov	r22, r23
     d88:	78 2f       	mov	r23, r24
     d8a:	88 27       	eor	r24, r24
     d8c:	98 5f       	subi	r25, 0xF8	; 248
     d8e:	f9 cf       	rjmp	.-14     	; 0xd82 <round+0xe>
     d90:	86 95       	lsr	r24
     d92:	77 95       	ror	r23
     d94:	67 95       	ror	r22
     d96:	93 95       	inc	r25
     d98:	95 39       	cpi	r25, 0x95	; 149
     d9a:	d0 f3       	brcs	.-12     	; 0xd90 <round+0x1c>
     d9c:	b6 2f       	mov	r27, r22
     d9e:	b1 70       	andi	r27, 0x01	; 1
     da0:	6b 0f       	add	r22, r27
     da2:	71 1d       	adc	r23, r1
     da4:	81 1d       	adc	r24, r1
     da6:	20 f4       	brcc	.+8      	; 0xdb0 <round+0x3c>
     da8:	87 95       	ror	r24
     daa:	77 95       	ror	r23
     dac:	67 95       	ror	r22
     dae:	93 95       	inc	r25
     db0:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__fp_mintl>
     db4:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_mpack>
     db8:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
     dbc:	29 f4       	brne	.+10     	; 0xdc8 <round+0x54>
     dbe:	16 f0       	brts	.+4      	; 0xdc4 <round+0x50>
     dc0:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     dc4:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_zero>
     dc8:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>

00000dcc <exp>:
     dcc:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_splitA>
     dd0:	a8 f3       	brcs	.-22     	; 0xdbc <round+0x48>
     dd2:	96 38       	cpi	r25, 0x86	; 134
     dd4:	a0 f7       	brcc	.-24     	; 0xdbe <round+0x4a>
     dd6:	07 f8       	bld	r0, 7
     dd8:	0f 92       	push	r0
     dda:	e8 94       	clt
     ddc:	2b e3       	ldi	r18, 0x3B	; 59
     dde:	3a ea       	ldi	r19, 0xAA	; 170
     de0:	48 eb       	ldi	r20, 0xB8	; 184
     de2:	5f e7       	ldi	r21, 0x7F	; 127
     de4:	0e 94 13 06 	call	0xc26	; 0xc26 <__mulsf3_pse>
     de8:	0f 92       	push	r0
     dea:	0f 92       	push	r0
     dec:	0f 92       	push	r0
     dee:	4d b7       	in	r20, 0x3d	; 61
     df0:	5e b7       	in	r21, 0x3e	; 62
     df2:	0f 92       	push	r0
     df4:	0e 94 fa 07 	call	0xff4	; 0xff4 <modf>
     df8:	e8 e6       	ldi	r30, 0x68	; 104
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	0e 94 41 07 	call	0xe82	; 0xe82 <__fp_powser>
     e00:	4f 91       	pop	r20
     e02:	5f 91       	pop	r21
     e04:	ef 91       	pop	r30
     e06:	ff 91       	pop	r31
     e08:	e5 95       	asr	r30
     e0a:	ee 1f       	adc	r30, r30
     e0c:	ff 1f       	adc	r31, r31
     e0e:	49 f0       	breq	.+18     	; 0xe22 <exp+0x56>
     e10:	fe 57       	subi	r31, 0x7E	; 126
     e12:	e0 68       	ori	r30, 0x80	; 128
     e14:	44 27       	eor	r20, r20
     e16:	ee 0f       	add	r30, r30
     e18:	44 1f       	adc	r20, r20
     e1a:	fa 95       	dec	r31
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <exp+0x4a>
     e1e:	41 95       	neg	r20
     e20:	55 0b       	sbc	r21, r21
     e22:	0e 94 74 07 	call	0xee8	; 0xee8 <ldexp>
     e26:	0f 90       	pop	r0
     e28:	07 fe       	sbrs	r0, 7
     e2a:	0c 94 68 07 	jmp	0xed0	; 0xed0 <inverse>
     e2e:	08 95       	ret

00000e30 <__fp_mintl>:
     e30:	88 23       	and	r24, r24
     e32:	71 f4       	brne	.+28     	; 0xe50 <__fp_mintl+0x20>
     e34:	77 23       	and	r23, r23
     e36:	21 f0       	breq	.+8      	; 0xe40 <__fp_mintl+0x10>
     e38:	98 50       	subi	r25, 0x08	; 8
     e3a:	87 2b       	or	r24, r23
     e3c:	76 2f       	mov	r23, r22
     e3e:	07 c0       	rjmp	.+14     	; 0xe4e <__fp_mintl+0x1e>
     e40:	66 23       	and	r22, r22
     e42:	11 f4       	brne	.+4      	; 0xe48 <__fp_mintl+0x18>
     e44:	99 27       	eor	r25, r25
     e46:	0d c0       	rjmp	.+26     	; 0xe62 <__fp_mintl+0x32>
     e48:	90 51       	subi	r25, 0x10	; 16
     e4a:	86 2b       	or	r24, r22
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	2a f0       	brmi	.+10     	; 0xe5c <__fp_mintl+0x2c>
     e52:	9a 95       	dec	r25
     e54:	66 0f       	add	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	88 1f       	adc	r24, r24
     e5a:	da f7       	brpl	.-10     	; 0xe52 <__fp_mintl+0x22>
     e5c:	88 0f       	add	r24, r24
     e5e:	96 95       	lsr	r25
     e60:	87 95       	ror	r24
     e62:	97 f9       	bld	r25, 7
     e64:	08 95       	ret

00000e66 <__fp_mpack>:
     e66:	9f 3f       	cpi	r25, 0xFF	; 255
     e68:	31 f0       	breq	.+12     	; 0xe76 <__fp_mpack_finite+0xc>

00000e6a <__fp_mpack_finite>:
     e6a:	91 50       	subi	r25, 0x01	; 1
     e6c:	20 f4       	brcc	.+8      	; 0xe76 <__fp_mpack_finite+0xc>
     e6e:	87 95       	ror	r24
     e70:	77 95       	ror	r23
     e72:	67 95       	ror	r22
     e74:	b7 95       	ror	r27
     e76:	88 0f       	add	r24, r24
     e78:	91 1d       	adc	r25, r1
     e7a:	96 95       	lsr	r25
     e7c:	87 95       	ror	r24
     e7e:	97 f9       	bld	r25, 7
     e80:	08 95       	ret

00000e82 <__fp_powser>:
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	1f 93       	push	r17
     e88:	0f 93       	push	r16
     e8a:	ff 92       	push	r15
     e8c:	ef 92       	push	r14
     e8e:	df 92       	push	r13
     e90:	7b 01       	movw	r14, r22
     e92:	8c 01       	movw	r16, r24
     e94:	68 94       	set
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <__fp_powser+0x22>
     e98:	da 2e       	mov	r13, r26
     e9a:	ef 01       	movw	r28, r30
     e9c:	0e 94 10 06 	call	0xc20	; 0xc20 <__mulsf3x>
     ea0:	fe 01       	movw	r30, r28
     ea2:	e8 94       	clt
     ea4:	a5 91       	lpm	r26, Z+
     ea6:	25 91       	lpm	r18, Z+
     ea8:	35 91       	lpm	r19, Z+
     eaa:	45 91       	lpm	r20, Z+
     eac:	55 91       	lpm	r21, Z+
     eae:	a6 f3       	brts	.-24     	; 0xe98 <__fp_powser+0x16>
     eb0:	ef 01       	movw	r28, r30
     eb2:	0e 94 49 04 	call	0x892	; 0x892 <__addsf3x>
     eb6:	fe 01       	movw	r30, r28
     eb8:	97 01       	movw	r18, r14
     eba:	a8 01       	movw	r20, r16
     ebc:	da 94       	dec	r13
     ebe:	69 f7       	brne	.-38     	; 0xe9a <__fp_powser+0x18>
     ec0:	df 90       	pop	r13
     ec2:	ef 90       	pop	r14
     ec4:	ff 90       	pop	r15
     ec6:	0f 91       	pop	r16
     ec8:	1f 91       	pop	r17
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <inverse>:
     ed0:	9b 01       	movw	r18, r22
     ed2:	ac 01       	movw	r20, r24
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	80 e8       	ldi	r24, 0x80	; 128
     eda:	9f e3       	ldi	r25, 0x3F	; 63
     edc:	0c 94 a3 04 	jmp	0x946	; 0x946 <__divsf3>
     ee0:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     ee4:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_mpack>

00000ee8 <ldexp>:
     ee8:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_splitA>
     eec:	d8 f3       	brcs	.-10     	; 0xee4 <inverse+0x14>
     eee:	99 23       	and	r25, r25
     ef0:	c9 f3       	breq	.-14     	; 0xee4 <inverse+0x14>
     ef2:	94 0f       	add	r25, r20
     ef4:	51 1d       	adc	r21, r1
     ef6:	a3 f3       	brvs	.-24     	; 0xee0 <inverse+0x10>
     ef8:	91 50       	subi	r25, 0x01	; 1
     efa:	50 40       	sbci	r21, 0x00	; 0
     efc:	94 f0       	brlt	.+36     	; 0xf22 <ldexp+0x3a>
     efe:	59 f0       	breq	.+22     	; 0xf16 <ldexp+0x2e>
     f00:	88 23       	and	r24, r24
     f02:	32 f0       	brmi	.+12     	; 0xf10 <ldexp+0x28>
     f04:	66 0f       	add	r22, r22
     f06:	77 1f       	adc	r23, r23
     f08:	88 1f       	adc	r24, r24
     f0a:	91 50       	subi	r25, 0x01	; 1
     f0c:	50 40       	sbci	r21, 0x00	; 0
     f0e:	c1 f7       	brne	.-16     	; 0xf00 <ldexp+0x18>
     f10:	9e 3f       	cpi	r25, 0xFE	; 254
     f12:	51 05       	cpc	r21, r1
     f14:	2c f7       	brge	.-54     	; 0xee0 <inverse+0x10>
     f16:	88 0f       	add	r24, r24
     f18:	91 1d       	adc	r25, r1
     f1a:	96 95       	lsr	r25
     f1c:	87 95       	ror	r24
     f1e:	97 f9       	bld	r25, 7
     f20:	08 95       	ret
     f22:	5f 3f       	cpi	r21, 0xFF	; 255
     f24:	ac f0       	brlt	.+42     	; 0xf50 <ldexp+0x68>
     f26:	98 3e       	cpi	r25, 0xE8	; 232
     f28:	9c f0       	brlt	.+38     	; 0xf50 <ldexp+0x68>
     f2a:	bb 27       	eor	r27, r27
     f2c:	86 95       	lsr	r24
     f2e:	77 95       	ror	r23
     f30:	67 95       	ror	r22
     f32:	b7 95       	ror	r27
     f34:	08 f4       	brcc	.+2      	; 0xf38 <ldexp+0x50>
     f36:	b1 60       	ori	r27, 0x01	; 1
     f38:	93 95       	inc	r25
     f3a:	c1 f7       	brne	.-16     	; 0xf2c <ldexp+0x44>
     f3c:	bb 0f       	add	r27, r27
     f3e:	58 f7       	brcc	.-42     	; 0xf16 <ldexp+0x2e>
     f40:	11 f4       	brne	.+4      	; 0xf46 <ldexp+0x5e>
     f42:	60 ff       	sbrs	r22, 0
     f44:	e8 cf       	rjmp	.-48     	; 0xf16 <ldexp+0x2e>
     f46:	6f 5f       	subi	r22, 0xFF	; 255
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	8f 4f       	sbci	r24, 0xFF	; 255
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	e3 cf       	rjmp	.-58     	; 0xf16 <ldexp+0x2e>
     f50:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_szero>
     f54:	16 f0       	brts	.+4      	; 0xf5a <ldexp+0x72>
     f56:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_mpack>
     f5a:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_nan>
     f5e:	68 94       	set
     f60:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>

00000f64 <log>:
     f64:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__fp_splitA>
     f68:	a8 f3       	brcs	.-22     	; 0xf54 <ldexp+0x6c>
     f6a:	99 23       	and	r25, r25
     f6c:	c1 f3       	breq	.-16     	; 0xf5e <ldexp+0x76>
     f6e:	ae f3       	brts	.-22     	; 0xf5a <ldexp+0x72>
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	1f 93       	push	r17
     f76:	0f 93       	push	r16
     f78:	ff 92       	push	r15
     f7a:	c9 2f       	mov	r28, r25
     f7c:	dd 27       	eor	r29, r29
     f7e:	88 23       	and	r24, r24
     f80:	2a f0       	brmi	.+10     	; 0xf8c <log+0x28>
     f82:	21 97       	sbiw	r28, 0x01	; 1
     f84:	66 0f       	add	r22, r22
     f86:	77 1f       	adc	r23, r23
     f88:	88 1f       	adc	r24, r24
     f8a:	da f7       	brpl	.-10     	; 0xf82 <log+0x1e>
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e8       	ldi	r20, 0x80	; 128
     f92:	5f eb       	ldi	r21, 0xBF	; 191
     f94:	9f e3       	ldi	r25, 0x3F	; 63
     f96:	88 39       	cpi	r24, 0x98	; 152
     f98:	20 f0       	brcs	.+8      	; 0xfa2 <log+0x3e>
     f9a:	80 3e       	cpi	r24, 0xE0	; 224
     f9c:	38 f0       	brcs	.+14     	; 0xfac <log+0x48>
     f9e:	21 96       	adiw	r28, 0x01	; 1
     fa0:	8f 77       	andi	r24, 0x7F	; 127
     fa2:	0e 94 32 04 	call	0x864	; 0x864 <__addsf3>
     fa6:	e0 e9       	ldi	r30, 0x90	; 144
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <log+0x50>
     fac:	0e 94 32 04 	call	0x864	; 0x864 <__addsf3>
     fb0:	ed eb       	ldi	r30, 0xBD	; 189
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	0e 94 41 07 	call	0xe82	; 0xe82 <__fp_powser>
     fb8:	8b 01       	movw	r16, r22
     fba:	be 01       	movw	r22, r28
     fbc:	ec 01       	movw	r28, r24
     fbe:	fb 2e       	mov	r15, r27
     fc0:	6f 57       	subi	r22, 0x7F	; 127
     fc2:	71 09       	sbc	r23, r1
     fc4:	75 95       	asr	r23
     fc6:	77 1f       	adc	r23, r23
     fc8:	88 0b       	sbc	r24, r24
     fca:	99 0b       	sbc	r25, r25
     fcc:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__floatsisf>
     fd0:	28 e1       	ldi	r18, 0x18	; 24
     fd2:	32 e7       	ldi	r19, 0x72	; 114
     fd4:	41 e3       	ldi	r20, 0x31	; 49
     fd6:	5f e3       	ldi	r21, 0x3F	; 63
     fd8:	0e 94 10 06 	call	0xc20	; 0xc20 <__mulsf3x>
     fdc:	af 2d       	mov	r26, r15
     fde:	98 01       	movw	r18, r16
     fe0:	ae 01       	movw	r20, r28
     fe2:	ff 90       	pop	r15
     fe4:	0f 91       	pop	r16
     fe6:	1f 91       	pop	r17
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	0e 94 49 04 	call	0x892	; 0x892 <__addsf3x>
     ff0:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__fp_round>

00000ff4 <modf>:
     ff4:	fa 01       	movw	r30, r20
     ff6:	dc 01       	movw	r26, r24
     ff8:	aa 0f       	add	r26, r26
     ffa:	bb 1f       	adc	r27, r27
     ffc:	9b 01       	movw	r18, r22
     ffe:	ac 01       	movw	r20, r24
    1000:	bf 57       	subi	r27, 0x7F	; 127
    1002:	28 f4       	brcc	.+10     	; 0x100e <modf+0x1a>
    1004:	22 27       	eor	r18, r18
    1006:	33 27       	eor	r19, r19
    1008:	44 27       	eor	r20, r20
    100a:	50 78       	andi	r21, 0x80	; 128
    100c:	20 c0       	rjmp	.+64     	; 0x104e <modf+0x5a>
    100e:	b7 51       	subi	r27, 0x17	; 23
    1010:	90 f4       	brcc	.+36     	; 0x1036 <modf+0x42>
    1012:	ab 2f       	mov	r26, r27
    1014:	00 24       	eor	r0, r0
    1016:	46 95       	lsr	r20
    1018:	37 95       	ror	r19
    101a:	27 95       	ror	r18
    101c:	01 1c       	adc	r0, r1
    101e:	a3 95       	inc	r26
    1020:	d2 f3       	brmi	.-12     	; 0x1016 <modf+0x22>
    1022:	00 20       	and	r0, r0
    1024:	71 f0       	breq	.+28     	; 0x1042 <modf+0x4e>
    1026:	22 0f       	add	r18, r18
    1028:	33 1f       	adc	r19, r19
    102a:	44 1f       	adc	r20, r20
    102c:	b3 95       	inc	r27
    102e:	da f3       	brmi	.-10     	; 0x1026 <modf+0x32>
    1030:	0e d0       	rcall	.+28     	; 0x104e <modf+0x5a>
    1032:	0c 94 31 04 	jmp	0x862	; 0x862 <__subsf3>
    1036:	61 30       	cpi	r22, 0x01	; 1
    1038:	71 05       	cpc	r23, r1
    103a:	a0 e8       	ldi	r26, 0x80	; 128
    103c:	8a 07       	cpc	r24, r26
    103e:	b9 46       	sbci	r27, 0x69	; 105
    1040:	30 f4       	brcc	.+12     	; 0x104e <modf+0x5a>
    1042:	9b 01       	movw	r18, r22
    1044:	ac 01       	movw	r20, r24
    1046:	66 27       	eor	r22, r22
    1048:	77 27       	eor	r23, r23
    104a:	88 27       	eor	r24, r24
    104c:	90 78       	andi	r25, 0x80	; 128
    104e:	30 96       	adiw	r30, 0x00	; 0
    1050:	21 f0       	breq	.+8      	; 0x105a <modf+0x66>
    1052:	20 83       	st	Z, r18
    1054:	31 83       	std	Z+1, r19	; 0x01
    1056:	42 83       	std	Z+2, r20	; 0x02
    1058:	53 83       	std	Z+3, r21	; 0x03
    105a:	08 95       	ret

0000105c <__udivmodsi4>:
    105c:	a1 e2       	ldi	r26, 0x21	; 33
    105e:	1a 2e       	mov	r1, r26
    1060:	aa 1b       	sub	r26, r26
    1062:	bb 1b       	sub	r27, r27
    1064:	fd 01       	movw	r30, r26
    1066:	0d c0       	rjmp	.+26     	; 0x1082 <__udivmodsi4_ep>

00001068 <__udivmodsi4_loop>:
    1068:	aa 1f       	adc	r26, r26
    106a:	bb 1f       	adc	r27, r27
    106c:	ee 1f       	adc	r30, r30
    106e:	ff 1f       	adc	r31, r31
    1070:	a2 17       	cp	r26, r18
    1072:	b3 07       	cpc	r27, r19
    1074:	e4 07       	cpc	r30, r20
    1076:	f5 07       	cpc	r31, r21
    1078:	20 f0       	brcs	.+8      	; 0x1082 <__udivmodsi4_ep>
    107a:	a2 1b       	sub	r26, r18
    107c:	b3 0b       	sbc	r27, r19
    107e:	e4 0b       	sbc	r30, r20
    1080:	f5 0b       	sbc	r31, r21

00001082 <__udivmodsi4_ep>:
    1082:	66 1f       	adc	r22, r22
    1084:	77 1f       	adc	r23, r23
    1086:	88 1f       	adc	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	1a 94       	dec	r1
    108c:	69 f7       	brne	.-38     	; 0x1068 <__udivmodsi4_loop>
    108e:	60 95       	com	r22
    1090:	70 95       	com	r23
    1092:	80 95       	com	r24
    1094:	90 95       	com	r25
    1096:	9b 01       	movw	r18, r22
    1098:	ac 01       	movw	r20, r24
    109a:	bd 01       	movw	r22, r26
    109c:	cf 01       	movw	r24, r30
    109e:	08 95       	ret

000010a0 <__umulhisi3>:
    10a0:	a2 9f       	mul	r26, r18
    10a2:	b0 01       	movw	r22, r0
    10a4:	b3 9f       	mul	r27, r19
    10a6:	c0 01       	movw	r24, r0
    10a8:	a3 9f       	mul	r26, r19
    10aa:	70 0d       	add	r23, r0
    10ac:	81 1d       	adc	r24, r1
    10ae:	11 24       	eor	r1, r1
    10b0:	91 1d       	adc	r25, r1
    10b2:	b2 9f       	mul	r27, r18
    10b4:	70 0d       	add	r23, r0
    10b6:	81 1d       	adc	r24, r1
    10b8:	11 24       	eor	r1, r1
    10ba:	91 1d       	adc	r25, r1
    10bc:	08 95       	ret

000010be <_exit>:
    10be:	f8 94       	cli

000010c0 <__stop_program>:
    10c0:	ff cf       	rjmp	.-2      	; 0x10c0 <__stop_program>
