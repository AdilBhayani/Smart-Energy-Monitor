
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b24  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000b98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e3  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000393  00000000  00000000  0000137b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c4  00000000  00000000  0000170e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000301  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ab  00000000  00000000  00002045  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <exp+0x3c>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a1 30       	cpi	r26, 0x01	; 1
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
 10a:	0c 94 90 05 	jmp	0xb20	; 0xb20 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <uart_init>:

 //Approximates a data value based on the two nearest data points
 float linearApproximate(float higher, float lower) {
	float approximation = (higher + lower) / 2;
	return approximation;
 }
 112:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 116:	87 e6       	ldi	r24, 0x67	; 103
 118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 11c:	e1 ec       	ldi	r30, 0xC1	; 193
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 60       	ori	r24, 0x08	; 8
 124:	80 83       	st	Z, r24
 126:	e2 ec       	ldi	r30, 0xC2	; 194
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	86 60       	ori	r24, 0x06	; 6
 12e:	80 83       	st	Z, r24
 130:	08 95       	ret

00000132 <uart_transmit>:
 132:	e0 ec       	ldi	r30, 0xC0	; 192
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 81       	ld	r25, Z
 138:	99 23       	and	r25, r25
 13a:	e9 f3       	breq	.-6      	; 0x136 <uart_transmit+0x4>
 13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 140:	08 95       	ret

00000142 <timer0_init>:
 142:	85 b5       	in	r24, 0x25	; 37
 144:	85 60       	ori	r24, 0x05	; 5
 146:	85 bd       	out	0x25, r24	; 37
 148:	16 bc       	out	0x26, r1	; 38
 14a:	08 95       	ret

0000014c <find_decimal>:
 14c:	cf 92       	push	r12
 14e:	df 92       	push	r13
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	6b 01       	movw	r12, r22
 156:	7c 01       	movw	r14, r24
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e2       	ldi	r20, 0x20	; 32
 15e:	51 e4       	ldi	r21, 0x41	; 65
 160:	0e 94 30 02 	call	0x460	; 0x460 <__cmpsf2>
 164:	88 23       	and	r24, r24
 166:	04 f1       	brlt	.+64     	; 0x1a8 <find_decimal+0x5c>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	48 ec       	ldi	r20, 0xC8	; 200
 16e:	52 e4       	ldi	r21, 0x42	; 66
 170:	c7 01       	movw	r24, r14
 172:	b6 01       	movw	r22, r12
 174:	0e 94 30 02 	call	0x460	; 0x460 <__cmpsf2>
 178:	88 23       	and	r24, r24
 17a:	cc f0       	brlt	.+50     	; 0x1ae <find_decimal+0x62>
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	4a e7       	ldi	r20, 0x7A	; 122
 182:	54 e4       	ldi	r21, 0x44	; 68
 184:	c7 01       	movw	r24, r14
 186:	b6 01       	movw	r22, r12
 188:	0e 94 30 02 	call	0x460	; 0x460 <__cmpsf2>
 18c:	08 2e       	mov	r0, r24
 18e:	00 0c       	add	r0, r0
 190:	99 0b       	sbc	r25, r25
 192:	88 27       	eor	r24, r24
 194:	99 0f       	add	r25, r25
 196:	88 1f       	adc	r24, r24
 198:	99 27       	eor	r25, r25
 19a:	23 e0       	ldi	r18, 0x03	; 3
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	a9 01       	movw	r20, r18
 1a0:	48 1b       	sub	r20, r24
 1a2:	59 0b       	sbc	r21, r25
 1a4:	ca 01       	movw	r24, r20
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <find_decimal+0x66>
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <find_decimal+0x66>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <wololo>:
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <wololo+0x8>
 1c2:	40 96       	adiw	r24, 0x10	; 16
 1c4:	61 11       	cpse	r22, r1
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <wololo+0x12>
 1c8:	80 5a       	subi	r24, 0xA0	; 160
 1ca:	9f 4f       	sbci	r25, 0xFF	; 255
 1cc:	08 95       	ret
 1ce:	61 30       	cpi	r22, 0x01	; 1
 1d0:	19 f4       	brne	.+6      	; 0x1d8 <wololo+0x1c>
 1d2:	80 5c       	subi	r24, 0xC0	; 192
 1d4:	9f 4f       	sbci	r25, 0xFF	; 255
 1d6:	08 95       	ret
 1d8:	62 30       	cpi	r22, 0x02	; 2
 1da:	09 f4       	brne	.+2      	; 0x1de <wololo+0x22>
 1dc:	80 96       	adiw	r24, 0x20	; 32
 1de:	08 95       	ret

000001e0 <adc_init>:

 void adc_init() {
 1e0:	08 95       	ret

000001e2 <adc_read_polling>:

 }

 unsigned int adc_read_polling() {
	return 1;
 }
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	08 95       	ret

000001e8 <adc_read_interrupt>:

 unsigned int adc_read_interrupt() {
	return 2;
 }
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	08 95       	ret

000001ee <adc_calculation>:

 float adc_calculation(unsigned int adcValue) {
	return 3;
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	80 e4       	ldi	r24, 0x40	; 64
 1f4:	90 e4       	ldi	r25, 0x40	; 64
 1f6:	08 95       	ret

000001f8 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

volatile uint8_t counter = 0; //Counter for the number of times the TCNT0 compares correctly

int main(void) {
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	29 97       	sbiw	r28, 0x09	; 9
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
	//ADC
	adc_init();
 20c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <adc_init>
	unsigned int adcValue;
	adcValue = adc_read_polling();
 210:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <adc_read_polling>
	adcValue = adc_read_interrupt();
 214:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <adc_read_interrupt>
	float calculated = adc_calculation(adcValue);
 218:	0e 94 f7 00 	call	0x1ee	; 0x1ee <adc_calculation>
 21c:	6d 83       	std	Y+5, r22	; 0x05
 21e:	7e 83       	std	Y+6, r23	; 0x06
 220:	8f 83       	std	Y+7, r24	; 0x07
 222:	98 87       	std	Y+8, r25	; 0x08
	float power = calcPower(&voltage, &current);
	power = roundf(power * 1000) / 1000;
	*/
	//-----------------

	uart_init();	
 224:	0e 94 89 00 	call	0x112	; 0x112 <uart_init>
	timer0_init();
 228:	0e 94 a1 00 	call	0x142	; 0x142 <timer0_init>
	float floatArray[4] = { 1234, 1235, 1236, 1237 }; //Array of values to send
	unsigned int floatIndex = 0;
 22c:	41 2c       	mov	r4, r1
 22e:	51 2c       	mov	r5, r1
		uint8_t dataArray[4];
		uint8_t index = 0;
		uint8_t decimalPos = 0;

		decimalPos = find_decimal(dataFloat); //Find the decimal place
		dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
 230:	0f 2e       	mov	r0, r31
 232:	f3 e0       	ldi	r31, 0x03	; 3
 234:	6f 2e       	mov	r6, r31
 236:	71 2c       	mov	r7, r1
 238:	f0 2d       	mov	r31, r0
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
			if ((decimalPos == i) && ((3-decimalPos) > 0)) {
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
 23a:	21 2c       	mov	r2, r1
 23c:	32 2c       	mov	r3, r2
		decimalPos = find_decimal(dataFloat); //Find the decimal place
		dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
			if ((decimalPos == i) && ((3-decimalPos) > 0)) {
 23e:	21 e0       	ldi	r18, 0x01	; 1
 240:	29 87       	std	Y+9, r18	; 0x09
		uint8_t hasDecimal = 0;
		uint8_t dataArray[4];
		uint8_t index = 0;
		uint8_t decimalPos = 0;

		decimalPos = find_decimal(dataFloat); //Find the decimal place
 242:	6d 81       	ldd	r22, Y+5	; 0x05
 244:	7e 81       	ldd	r23, Y+6	; 0x06
 246:	8f 81       	ldd	r24, Y+7	; 0x07
 248:	98 85       	ldd	r25, Y+8	; 0x08
 24a:	0e 94 a6 00 	call	0x14c	; 0x14c <find_decimal>
 24e:	6c 01       	movw	r12, r24
 250:	dd 24       	eor	r13, r13
		dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
 252:	43 01       	movw	r8, r6
 254:	8c 18       	sub	r8, r12
 256:	9d 08       	sbc	r9, r13
 258:	b4 01       	movw	r22, r8
 25a:	09 2c       	mov	r0, r9
 25c:	00 0c       	add	r0, r0
 25e:	88 0b       	sbc	r24, r24
 260:	99 0b       	sbc	r25, r25
 262:	0e 94 df 02 	call	0x5be	; 0x5be <__floatsisf>
 266:	9b 01       	movw	r18, r22
 268:	ac 01       	movw	r20, r24
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	80 e2       	ldi	r24, 0x20	; 32
 270:	91 e4       	ldi	r25, 0x41	; 65
 272:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <pow>
 276:	9b 01       	movw	r18, r22
 278:	ac 01       	movw	r20, r24
 27a:	6d 81       	ldd	r22, Y+5	; 0x05
 27c:	7e 81       	ldd	r23, Y+6	; 0x06
 27e:	8f 81       	ldd	r24, Y+7	; 0x07
 280:	98 85       	ldd	r25, Y+8	; 0x08
 282:	0e 94 8f 03 	call	0x71e	; 0x71e <__mulsf3>
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	5f e3       	ldi	r21, 0x3F	; 63
 28e:	0e 94 c4 01 	call	0x388	; 0x388 <__addsf3>
 292:	0e 94 a7 02 	call	0x54e	; 0x54e <__fixsfsi>
 296:	7b 01       	movw	r14, r22
 298:	ce 01       	movw	r24, r28
 29a:	05 96       	adiw	r24, 0x05	; 5
 29c:	5c 01       	movw	r10, r24
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
 29e:	83 01       	movw	r16, r6
			if ((decimalPos == i) && ((3-decimalPos) > 0)) {
 2a0:	0c 15       	cp	r16, r12
 2a2:	1d 05       	cpc	r17, r13
 2a4:	31 f4       	brne	.+12     	; 0x2b2 <main+0xba>
 2a6:	49 85       	ldd	r20, Y+9	; 0x09
 2a8:	18 14       	cp	r1, r8
 2aa:	19 04       	cpc	r1, r9
 2ac:	1c f0       	brlt	.+6      	; 0x2b4 <main+0xbc>
 2ae:	43 2d       	mov	r20, r3
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <main+0xbc>
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
 2b2:	43 2d       	mov	r20, r3
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
 2b4:	97 01       	movw	r18, r14
 2b6:	ad ec       	ldi	r26, 0xCD	; 205
 2b8:	bc ec       	ldi	r27, 0xCC	; 204
 2ba:	0e 94 81 05 	call	0xb02	; 0xb02 <__umulhisi3>
 2be:	96 95       	lsr	r25
 2c0:	87 95       	ror	r24
 2c2:	96 95       	lsr	r25
 2c4:	87 95       	ror	r24
 2c6:	96 95       	lsr	r25
 2c8:	87 95       	ror	r24
 2ca:	9c 01       	movw	r18, r24
 2cc:	22 0f       	add	r18, r18
 2ce:	33 1f       	adc	r19, r19
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	82 0f       	add	r24, r18
 2de:	93 1f       	adc	r25, r19
 2e0:	60 2f       	mov	r22, r16
 2e2:	ee 2d       	mov	r30, r14
 2e4:	e8 1b       	sub	r30, r24
 2e6:	8e 2f       	mov	r24, r30
 2e8:	0e 94 de 00 	call	0x1bc	; 0x1bc <wololo>
 2ec:	f5 01       	movw	r30, r10
 2ee:	82 93       	st	-Z, r24
 2f0:	5f 01       	movw	r10, r30
			dataInt = dataInt/10;
 2f2:	97 01       	movw	r18, r14
 2f4:	ad ec       	ldi	r26, 0xCD	; 205
 2f6:	bc ec       	ldi	r27, 0xCC	; 204
 2f8:	0e 94 81 05 	call	0xb02	; 0xb02 <__umulhisi3>
 2fc:	7c 01       	movw	r14, r24
 2fe:	f6 94       	lsr	r15
 300:	e7 94       	ror	r14
 302:	f6 94       	lsr	r15
 304:	e7 94       	ror	r14
 306:	f6 94       	lsr	r15
 308:	e7 94       	ror	r14

		decimalPos = find_decimal(dataFloat); //Find the decimal place
		dataInt = (int)(dataFloat * pow(10, 3-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=3;i>=0;i--) {
 30a:	01 50       	subi	r16, 0x01	; 1
 30c:	11 09       	sbc	r17, r1
 30e:	40 f6       	brcc	.-112    	; 0x2a0 <main+0xa8>
 310:	2f c0       	rjmp	.+94     	; 0x370 <main+0x178>
			dataInt = dataInt/10;
		}

		//Transmits data until we get TCNT0 = 191 twenty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
 312:	e1 e0       	ldi	r30, 0x01	; 1
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	ec 0f       	add	r30, r28
 318:	fd 1f       	adc	r31, r29
 31a:	e1 0f       	add	r30, r17
 31c:	f1 1d       	adc	r31, r1
			uart_transmit(data);
 31e:	80 81       	ld	r24, Z
 320:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 324:	8f ed       	ldi	r24, 0xDF	; 223
 326:	9e e2       	ldi	r25, 0x2E	; 46
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <main+0x130>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x136>
 32e:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
 330:	1f 5f       	subi	r17, 0xFF	; 255
			//Select next integer to send
			if (index == 4) {
 332:	14 30       	cpi	r17, 0x04	; 4
 334:	09 f4       	brne	.+2      	; 0x338 <main+0x140>
				index = 0;
 336:	13 2d       	mov	r17, r3
			}
			//Polling mechanism
			if(TCNT0>=211) {
 338:	86 b5       	in	r24, 0x26	; 38
 33a:	83 3d       	cpi	r24, 0xD3	; 211
 33c:	50 f3       	brcs	.-44     	; 0x312 <main+0x11a>
				TCNT0 = 0;
 33e:	16 bc       	out	0x26, r1	; 38
				if (counter == 50) {
 340:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 344:	82 33       	cpi	r24, 0x32	; 50
 346:	39 f4       	brne	.+14     	; 0x356 <main+0x15e>
					counter = 0;
 348:	20 92 00 01 	sts	0x0100, r2	; 0x800100 <_edata>
					counter++;
				}
			}
		}
		//Select next float to send
		if (floatIndex == 3) { 
 34c:	93 e0       	ldi	r25, 0x03	; 3
 34e:	49 16       	cp	r4, r25
 350:	51 04       	cpc	r5, r1
 352:	39 f4       	brne	.+14     	; 0x362 <main+0x16a>
 354:	0a c0       	rjmp	.+20     	; 0x36a <main+0x172>
				TCNT0 = 0;
				if (counter == 50) {
					counter = 0;
					break;
				} else {
					counter++;
 356:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 35a:	8f 5f       	subi	r24, 0xFF	; 255
 35c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 360:	d8 cf       	rjmp	.-80     	; 0x312 <main+0x11a>
		}
		//Select next float to send
		if (floatIndex == 3) { 
			floatIndex = 0;
		} else {
			floatIndex++;
 362:	ef ef       	ldi	r30, 0xFF	; 255
 364:	4e 1a       	sub	r4, r30
 366:	5e 0a       	sbc	r5, r30
 368:	6c cf       	rjmp	.-296    	; 0x242 <main+0x4a>
				}
			}
		}
		//Select next float to send
		if (floatIndex == 3) { 
			floatIndex = 0;
 36a:	41 2c       	mov	r4, r1
 36c:	51 2c       	mov	r5, r1
		} else {
			floatIndex++;
		}
	}
 36e:	69 cf       	rjmp	.-302    	; 0x242 <main+0x4a>
		}

		//Transmits data until we get TCNT0 = 191 twenty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
			uart_transmit(data);
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
 376:	8f ed       	ldi	r24, 0xDF	; 223
 378:	9e e2       	ldi	r25, 0x2E	; 46
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <main+0x182>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0x188>
 380:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
 382:	11 e0       	ldi	r17, 0x01	; 1
 384:	d9 cf       	rjmp	.-78     	; 0x338 <main+0x140>

00000386 <__subsf3>:
 386:	50 58       	subi	r21, 0x80	; 128

00000388 <__addsf3>:
 388:	bb 27       	eor	r27, r27
 38a:	aa 27       	eor	r26, r26
 38c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__addsf3x>
 390:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_round>
 394:	0e 94 47 03 	call	0x68e	; 0x68e <__fp_pscA>
 398:	38 f0       	brcs	.+14     	; 0x3a8 <__addsf3+0x20>
 39a:	0e 94 4e 03 	call	0x69c	; 0x69c <__fp_pscB>
 39e:	20 f0       	brcs	.+8      	; 0x3a8 <__addsf3+0x20>
 3a0:	39 f4       	brne	.+14     	; 0x3b0 <__addsf3+0x28>
 3a2:	9f 3f       	cpi	r25, 0xFF	; 255
 3a4:	19 f4       	brne	.+6      	; 0x3ac <__addsf3+0x24>
 3a6:	26 f4       	brtc	.+8      	; 0x3b0 <__addsf3+0x28>
 3a8:	0c 94 44 03 	jmp	0x688	; 0x688 <__fp_nan>
 3ac:	0e f4       	brtc	.+2      	; 0x3b0 <__addsf3+0x28>
 3ae:	e0 95       	com	r30
 3b0:	e7 fb       	bst	r30, 7
 3b2:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_inf>

000003b6 <__addsf3x>:
 3b6:	e9 2f       	mov	r30, r25
 3b8:	0e 94 66 03 	call	0x6cc	; 0x6cc <__fp_split3>
 3bc:	58 f3       	brcs	.-42     	; 0x394 <__addsf3+0xc>
 3be:	ba 17       	cp	r27, r26
 3c0:	62 07       	cpc	r22, r18
 3c2:	73 07       	cpc	r23, r19
 3c4:	84 07       	cpc	r24, r20
 3c6:	95 07       	cpc	r25, r21
 3c8:	20 f0       	brcs	.+8      	; 0x3d2 <__addsf3x+0x1c>
 3ca:	79 f4       	brne	.+30     	; 0x3ea <__addsf3x+0x34>
 3cc:	a6 f5       	brtc	.+104    	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 3ce:	0c 94 88 03 	jmp	0x710	; 0x710 <__fp_zero>
 3d2:	0e f4       	brtc	.+2      	; 0x3d6 <__addsf3x+0x20>
 3d4:	e0 95       	com	r30
 3d6:	0b 2e       	mov	r0, r27
 3d8:	ba 2f       	mov	r27, r26
 3da:	a0 2d       	mov	r26, r0
 3dc:	0b 01       	movw	r0, r22
 3de:	b9 01       	movw	r22, r18
 3e0:	90 01       	movw	r18, r0
 3e2:	0c 01       	movw	r0, r24
 3e4:	ca 01       	movw	r24, r20
 3e6:	a0 01       	movw	r20, r0
 3e8:	11 24       	eor	r1, r1
 3ea:	ff 27       	eor	r31, r31
 3ec:	59 1b       	sub	r21, r25
 3ee:	99 f0       	breq	.+38     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
 3f0:	59 3f       	cpi	r21, 0xF9	; 249
 3f2:	50 f4       	brcc	.+20     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 3f4:	50 3e       	cpi	r21, 0xE0	; 224
 3f6:	68 f1       	brcs	.+90     	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
 3f8:	1a 16       	cp	r1, r26
 3fa:	f0 40       	sbci	r31, 0x00	; 0
 3fc:	a2 2f       	mov	r26, r18
 3fe:	23 2f       	mov	r18, r19
 400:	34 2f       	mov	r19, r20
 402:	44 27       	eor	r20, r20
 404:	58 5f       	subi	r21, 0xF8	; 248
 406:	f3 cf       	rjmp	.-26     	; 0x3ee <__addsf3x+0x38>
 408:	46 95       	lsr	r20
 40a:	37 95       	ror	r19
 40c:	27 95       	ror	r18
 40e:	a7 95       	ror	r26
 410:	f0 40       	sbci	r31, 0x00	; 0
 412:	53 95       	inc	r21
 414:	c9 f7       	brne	.-14     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 416:	7e f4       	brtc	.+30     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 418:	1f 16       	cp	r1, r31
 41a:	ba 0b       	sbc	r27, r26
 41c:	62 0b       	sbc	r22, r18
 41e:	73 0b       	sbc	r23, r19
 420:	84 0b       	sbc	r24, r20
 422:	ba f0       	brmi	.+46     	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
 424:	91 50       	subi	r25, 0x01	; 1
 426:	a1 f0       	breq	.+40     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
 428:	ff 0f       	add	r31, r31
 42a:	bb 1f       	adc	r27, r27
 42c:	66 1f       	adc	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	88 1f       	adc	r24, r24
 432:	c2 f7       	brpl	.-16     	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
 434:	0e c0       	rjmp	.+28     	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
 436:	ba 0f       	add	r27, r26
 438:	62 1f       	adc	r22, r18
 43a:	73 1f       	adc	r23, r19
 43c:	84 1f       	adc	r24, r20
 43e:	48 f4       	brcc	.+18     	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
 440:	87 95       	ror	r24
 442:	77 95       	ror	r23
 444:	67 95       	ror	r22
 446:	b7 95       	ror	r27
 448:	f7 95       	ror	r31
 44a:	9e 3f       	cpi	r25, 0xFE	; 254
 44c:	08 f0       	brcs	.+2      	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
 44e:	b0 cf       	rjmp	.-160    	; 0x3b0 <__addsf3+0x28>
 450:	93 95       	inc	r25
 452:	88 0f       	add	r24, r24
 454:	08 f0       	brcs	.+2      	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
 456:	99 27       	eor	r25, r25
 458:	ee 0f       	add	r30, r30
 45a:	97 95       	ror	r25
 45c:	87 95       	ror	r24
 45e:	08 95       	ret

00000460 <__cmpsf2>:
 460:	0e 94 1a 03 	call	0x634	; 0x634 <__fp_cmp>
 464:	08 f4       	brcc	.+2      	; 0x468 <__cmpsf2+0x8>
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	08 95       	ret

0000046a <__divsf3>:
 46a:	0e 94 49 02 	call	0x492	; 0x492 <__divsf3x>
 46e:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_round>
 472:	0e 94 4e 03 	call	0x69c	; 0x69c <__fp_pscB>
 476:	58 f0       	brcs	.+22     	; 0x48e <__divsf3+0x24>
 478:	0e 94 47 03 	call	0x68e	; 0x68e <__fp_pscA>
 47c:	40 f0       	brcs	.+16     	; 0x48e <__divsf3+0x24>
 47e:	29 f4       	brne	.+10     	; 0x48a <__divsf3+0x20>
 480:	5f 3f       	cpi	r21, 0xFF	; 255
 482:	29 f0       	breq	.+10     	; 0x48e <__divsf3+0x24>
 484:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_inf>
 488:	51 11       	cpse	r21, r1
 48a:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_szero>
 48e:	0c 94 44 03 	jmp	0x688	; 0x688 <__fp_nan>

00000492 <__divsf3x>:
 492:	0e 94 66 03 	call	0x6cc	; 0x6cc <__fp_split3>
 496:	68 f3       	brcs	.-38     	; 0x472 <__divsf3+0x8>

00000498 <__divsf3_pse>:
 498:	99 23       	and	r25, r25
 49a:	b1 f3       	breq	.-20     	; 0x488 <__divsf3+0x1e>
 49c:	55 23       	and	r21, r21
 49e:	91 f3       	breq	.-28     	; 0x484 <__divsf3+0x1a>
 4a0:	95 1b       	sub	r25, r21
 4a2:	55 0b       	sbc	r21, r21
 4a4:	bb 27       	eor	r27, r27
 4a6:	aa 27       	eor	r26, r26
 4a8:	62 17       	cp	r22, r18
 4aa:	73 07       	cpc	r23, r19
 4ac:	84 07       	cpc	r24, r20
 4ae:	38 f0       	brcs	.+14     	; 0x4be <__divsf3_pse+0x26>
 4b0:	9f 5f       	subi	r25, 0xFF	; 255
 4b2:	5f 4f       	sbci	r21, 0xFF	; 255
 4b4:	22 0f       	add	r18, r18
 4b6:	33 1f       	adc	r19, r19
 4b8:	44 1f       	adc	r20, r20
 4ba:	aa 1f       	adc	r26, r26
 4bc:	a9 f3       	breq	.-22     	; 0x4a8 <__divsf3_pse+0x10>
 4be:	35 d0       	rcall	.+106    	; 0x52a <__divsf3_pse+0x92>
 4c0:	0e 2e       	mov	r0, r30
 4c2:	3a f0       	brmi	.+14     	; 0x4d2 <__divsf3_pse+0x3a>
 4c4:	e0 e8       	ldi	r30, 0x80	; 128
 4c6:	32 d0       	rcall	.+100    	; 0x52c <__divsf3_pse+0x94>
 4c8:	91 50       	subi	r25, 0x01	; 1
 4ca:	50 40       	sbci	r21, 0x00	; 0
 4cc:	e6 95       	lsr	r30
 4ce:	00 1c       	adc	r0, r0
 4d0:	ca f7       	brpl	.-14     	; 0x4c4 <__divsf3_pse+0x2c>
 4d2:	2b d0       	rcall	.+86     	; 0x52a <__divsf3_pse+0x92>
 4d4:	fe 2f       	mov	r31, r30
 4d6:	29 d0       	rcall	.+82     	; 0x52a <__divsf3_pse+0x92>
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	bb 1f       	adc	r27, r27
 4e0:	26 17       	cp	r18, r22
 4e2:	37 07       	cpc	r19, r23
 4e4:	48 07       	cpc	r20, r24
 4e6:	ab 07       	cpc	r26, r27
 4e8:	b0 e8       	ldi	r27, 0x80	; 128
 4ea:	09 f0       	breq	.+2      	; 0x4ee <__divsf3_pse+0x56>
 4ec:	bb 0b       	sbc	r27, r27
 4ee:	80 2d       	mov	r24, r0
 4f0:	bf 01       	movw	r22, r30
 4f2:	ff 27       	eor	r31, r31
 4f4:	93 58       	subi	r25, 0x83	; 131
 4f6:	5f 4f       	sbci	r21, 0xFF	; 255
 4f8:	3a f0       	brmi	.+14     	; 0x508 <__divsf3_pse+0x70>
 4fa:	9e 3f       	cpi	r25, 0xFE	; 254
 4fc:	51 05       	cpc	r21, r1
 4fe:	78 f0       	brcs	.+30     	; 0x51e <__divsf3_pse+0x86>
 500:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_inf>
 504:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_szero>
 508:	5f 3f       	cpi	r21, 0xFF	; 255
 50a:	e4 f3       	brlt	.-8      	; 0x504 <__divsf3_pse+0x6c>
 50c:	98 3e       	cpi	r25, 0xE8	; 232
 50e:	d4 f3       	brlt	.-12     	; 0x504 <__divsf3_pse+0x6c>
 510:	86 95       	lsr	r24
 512:	77 95       	ror	r23
 514:	67 95       	ror	r22
 516:	b7 95       	ror	r27
 518:	f7 95       	ror	r31
 51a:	9f 5f       	subi	r25, 0xFF	; 255
 51c:	c9 f7       	brne	.-14     	; 0x510 <__divsf3_pse+0x78>
 51e:	88 0f       	add	r24, r24
 520:	91 1d       	adc	r25, r1
 522:	96 95       	lsr	r25
 524:	87 95       	ror	r24
 526:	97 f9       	bld	r25, 7
 528:	08 95       	ret
 52a:	e1 e0       	ldi	r30, 0x01	; 1
 52c:	66 0f       	add	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	88 1f       	adc	r24, r24
 532:	bb 1f       	adc	r27, r27
 534:	62 17       	cp	r22, r18
 536:	73 07       	cpc	r23, r19
 538:	84 07       	cpc	r24, r20
 53a:	ba 07       	cpc	r27, r26
 53c:	20 f0       	brcs	.+8      	; 0x546 <__divsf3_pse+0xae>
 53e:	62 1b       	sub	r22, r18
 540:	73 0b       	sbc	r23, r19
 542:	84 0b       	sbc	r24, r20
 544:	ba 0b       	sbc	r27, r26
 546:	ee 1f       	adc	r30, r30
 548:	88 f7       	brcc	.-30     	; 0x52c <__divsf3_pse+0x94>
 54a:	e0 95       	com	r30
 54c:	08 95       	ret

0000054e <__fixsfsi>:
 54e:	0e 94 ae 02 	call	0x55c	; 0x55c <__fixunssfsi>
 552:	68 94       	set
 554:	b1 11       	cpse	r27, r1
 556:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_szero>
 55a:	08 95       	ret

0000055c <__fixunssfsi>:
 55c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_splitA>
 560:	88 f0       	brcs	.+34     	; 0x584 <__fixunssfsi+0x28>
 562:	9f 57       	subi	r25, 0x7F	; 127
 564:	98 f0       	brcs	.+38     	; 0x58c <__fixunssfsi+0x30>
 566:	b9 2f       	mov	r27, r25
 568:	99 27       	eor	r25, r25
 56a:	b7 51       	subi	r27, 0x17	; 23
 56c:	b0 f0       	brcs	.+44     	; 0x59a <__fixunssfsi+0x3e>
 56e:	e1 f0       	breq	.+56     	; 0x5a8 <__fixunssfsi+0x4c>
 570:	66 0f       	add	r22, r22
 572:	77 1f       	adc	r23, r23
 574:	88 1f       	adc	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	1a f0       	brmi	.+6      	; 0x580 <__fixunssfsi+0x24>
 57a:	ba 95       	dec	r27
 57c:	c9 f7       	brne	.-14     	; 0x570 <__fixunssfsi+0x14>
 57e:	14 c0       	rjmp	.+40     	; 0x5a8 <__fixunssfsi+0x4c>
 580:	b1 30       	cpi	r27, 0x01	; 1
 582:	91 f0       	breq	.+36     	; 0x5a8 <__fixunssfsi+0x4c>
 584:	0e 94 88 03 	call	0x710	; 0x710 <__fp_zero>
 588:	b1 e0       	ldi	r27, 0x01	; 1
 58a:	08 95       	ret
 58c:	0c 94 88 03 	jmp	0x710	; 0x710 <__fp_zero>
 590:	67 2f       	mov	r22, r23
 592:	78 2f       	mov	r23, r24
 594:	88 27       	eor	r24, r24
 596:	b8 5f       	subi	r27, 0xF8	; 248
 598:	39 f0       	breq	.+14     	; 0x5a8 <__fixunssfsi+0x4c>
 59a:	b9 3f       	cpi	r27, 0xF9	; 249
 59c:	cc f3       	brlt	.-14     	; 0x590 <__fixunssfsi+0x34>
 59e:	86 95       	lsr	r24
 5a0:	77 95       	ror	r23
 5a2:	67 95       	ror	r22
 5a4:	b3 95       	inc	r27
 5a6:	d9 f7       	brne	.-10     	; 0x59e <__fixunssfsi+0x42>
 5a8:	3e f4       	brtc	.+14     	; 0x5b8 <__fixunssfsi+0x5c>
 5aa:	90 95       	com	r25
 5ac:	80 95       	com	r24
 5ae:	70 95       	com	r23
 5b0:	61 95       	neg	r22
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	8f 4f       	sbci	r24, 0xFF	; 255
 5b6:	9f 4f       	sbci	r25, 0xFF	; 255
 5b8:	08 95       	ret

000005ba <__floatunsisf>:
 5ba:	e8 94       	clt
 5bc:	09 c0       	rjmp	.+18     	; 0x5d0 <__floatsisf+0x12>

000005be <__floatsisf>:
 5be:	97 fb       	bst	r25, 7
 5c0:	3e f4       	brtc	.+14     	; 0x5d0 <__floatsisf+0x12>
 5c2:	90 95       	com	r25
 5c4:	80 95       	com	r24
 5c6:	70 95       	com	r23
 5c8:	61 95       	neg	r22
 5ca:	7f 4f       	sbci	r23, 0xFF	; 255
 5cc:	8f 4f       	sbci	r24, 0xFF	; 255
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	99 23       	and	r25, r25
 5d2:	a9 f0       	breq	.+42     	; 0x5fe <__floatsisf+0x40>
 5d4:	f9 2f       	mov	r31, r25
 5d6:	96 e9       	ldi	r25, 0x96	; 150
 5d8:	bb 27       	eor	r27, r27
 5da:	93 95       	inc	r25
 5dc:	f6 95       	lsr	r31
 5de:	87 95       	ror	r24
 5e0:	77 95       	ror	r23
 5e2:	67 95       	ror	r22
 5e4:	b7 95       	ror	r27
 5e6:	f1 11       	cpse	r31, r1
 5e8:	f8 cf       	rjmp	.-16     	; 0x5da <__floatsisf+0x1c>
 5ea:	fa f4       	brpl	.+62     	; 0x62a <__floatsisf+0x6c>
 5ec:	bb 0f       	add	r27, r27
 5ee:	11 f4       	brne	.+4      	; 0x5f4 <__floatsisf+0x36>
 5f0:	60 ff       	sbrs	r22, 0
 5f2:	1b c0       	rjmp	.+54     	; 0x62a <__floatsisf+0x6c>
 5f4:	6f 5f       	subi	r22, 0xFF	; 255
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	8f 4f       	sbci	r24, 0xFF	; 255
 5fa:	9f 4f       	sbci	r25, 0xFF	; 255
 5fc:	16 c0       	rjmp	.+44     	; 0x62a <__floatsisf+0x6c>
 5fe:	88 23       	and	r24, r24
 600:	11 f0       	breq	.+4      	; 0x606 <__floatsisf+0x48>
 602:	96 e9       	ldi	r25, 0x96	; 150
 604:	11 c0       	rjmp	.+34     	; 0x628 <__floatsisf+0x6a>
 606:	77 23       	and	r23, r23
 608:	21 f0       	breq	.+8      	; 0x612 <__floatsisf+0x54>
 60a:	9e e8       	ldi	r25, 0x8E	; 142
 60c:	87 2f       	mov	r24, r23
 60e:	76 2f       	mov	r23, r22
 610:	05 c0       	rjmp	.+10     	; 0x61c <__floatsisf+0x5e>
 612:	66 23       	and	r22, r22
 614:	71 f0       	breq	.+28     	; 0x632 <__floatsisf+0x74>
 616:	96 e8       	ldi	r25, 0x86	; 134
 618:	86 2f       	mov	r24, r22
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	2a f0       	brmi	.+10     	; 0x62a <__floatsisf+0x6c>
 620:	9a 95       	dec	r25
 622:	66 0f       	add	r22, r22
 624:	77 1f       	adc	r23, r23
 626:	88 1f       	adc	r24, r24
 628:	da f7       	brpl	.-10     	; 0x620 <__floatsisf+0x62>
 62a:	88 0f       	add	r24, r24
 62c:	96 95       	lsr	r25
 62e:	87 95       	ror	r24
 630:	97 f9       	bld	r25, 7
 632:	08 95       	ret

00000634 <__fp_cmp>:
 634:	99 0f       	add	r25, r25
 636:	00 08       	sbc	r0, r0
 638:	55 0f       	add	r21, r21
 63a:	aa 0b       	sbc	r26, r26
 63c:	e0 e8       	ldi	r30, 0x80	; 128
 63e:	fe ef       	ldi	r31, 0xFE	; 254
 640:	16 16       	cp	r1, r22
 642:	17 06       	cpc	r1, r23
 644:	e8 07       	cpc	r30, r24
 646:	f9 07       	cpc	r31, r25
 648:	c0 f0       	brcs	.+48     	; 0x67a <__fp_cmp+0x46>
 64a:	12 16       	cp	r1, r18
 64c:	13 06       	cpc	r1, r19
 64e:	e4 07       	cpc	r30, r20
 650:	f5 07       	cpc	r31, r21
 652:	98 f0       	brcs	.+38     	; 0x67a <__fp_cmp+0x46>
 654:	62 1b       	sub	r22, r18
 656:	73 0b       	sbc	r23, r19
 658:	84 0b       	sbc	r24, r20
 65a:	95 0b       	sbc	r25, r21
 65c:	39 f4       	brne	.+14     	; 0x66c <__fp_cmp+0x38>
 65e:	0a 26       	eor	r0, r26
 660:	61 f0       	breq	.+24     	; 0x67a <__fp_cmp+0x46>
 662:	23 2b       	or	r18, r19
 664:	24 2b       	or	r18, r20
 666:	25 2b       	or	r18, r21
 668:	21 f4       	brne	.+8      	; 0x672 <__fp_cmp+0x3e>
 66a:	08 95       	ret
 66c:	0a 26       	eor	r0, r26
 66e:	09 f4       	brne	.+2      	; 0x672 <__fp_cmp+0x3e>
 670:	a1 40       	sbci	r26, 0x01	; 1
 672:	a6 95       	lsr	r26
 674:	8f ef       	ldi	r24, 0xFF	; 255
 676:	81 1d       	adc	r24, r1
 678:	81 1d       	adc	r24, r1
 67a:	08 95       	ret

0000067c <__fp_inf>:
 67c:	97 f9       	bld	r25, 7
 67e:	9f 67       	ori	r25, 0x7F	; 127
 680:	80 e8       	ldi	r24, 0x80	; 128
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	08 95       	ret

00000688 <__fp_nan>:
 688:	9f ef       	ldi	r25, 0xFF	; 255
 68a:	80 ec       	ldi	r24, 0xC0	; 192
 68c:	08 95       	ret

0000068e <__fp_pscA>:
 68e:	00 24       	eor	r0, r0
 690:	0a 94       	dec	r0
 692:	16 16       	cp	r1, r22
 694:	17 06       	cpc	r1, r23
 696:	18 06       	cpc	r1, r24
 698:	09 06       	cpc	r0, r25
 69a:	08 95       	ret

0000069c <__fp_pscB>:
 69c:	00 24       	eor	r0, r0
 69e:	0a 94       	dec	r0
 6a0:	12 16       	cp	r1, r18
 6a2:	13 06       	cpc	r1, r19
 6a4:	14 06       	cpc	r1, r20
 6a6:	05 06       	cpc	r0, r21
 6a8:	08 95       	ret

000006aa <__fp_round>:
 6aa:	09 2e       	mov	r0, r25
 6ac:	03 94       	inc	r0
 6ae:	00 0c       	add	r0, r0
 6b0:	11 f4       	brne	.+4      	; 0x6b6 <__fp_round+0xc>
 6b2:	88 23       	and	r24, r24
 6b4:	52 f0       	brmi	.+20     	; 0x6ca <__fp_round+0x20>
 6b6:	bb 0f       	add	r27, r27
 6b8:	40 f4       	brcc	.+16     	; 0x6ca <__fp_round+0x20>
 6ba:	bf 2b       	or	r27, r31
 6bc:	11 f4       	brne	.+4      	; 0x6c2 <__fp_round+0x18>
 6be:	60 ff       	sbrs	r22, 0
 6c0:	04 c0       	rjmp	.+8      	; 0x6ca <__fp_round+0x20>
 6c2:	6f 5f       	subi	r22, 0xFF	; 255
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	08 95       	ret

000006cc <__fp_split3>:
 6cc:	57 fd       	sbrc	r21, 7
 6ce:	90 58       	subi	r25, 0x80	; 128
 6d0:	44 0f       	add	r20, r20
 6d2:	55 1f       	adc	r21, r21
 6d4:	59 f0       	breq	.+22     	; 0x6ec <__fp_splitA+0x10>
 6d6:	5f 3f       	cpi	r21, 0xFF	; 255
 6d8:	71 f0       	breq	.+28     	; 0x6f6 <__fp_splitA+0x1a>
 6da:	47 95       	ror	r20

000006dc <__fp_splitA>:
 6dc:	88 0f       	add	r24, r24
 6de:	97 fb       	bst	r25, 7
 6e0:	99 1f       	adc	r25, r25
 6e2:	61 f0       	breq	.+24     	; 0x6fc <__fp_splitA+0x20>
 6e4:	9f 3f       	cpi	r25, 0xFF	; 255
 6e6:	79 f0       	breq	.+30     	; 0x706 <__fp_splitA+0x2a>
 6e8:	87 95       	ror	r24
 6ea:	08 95       	ret
 6ec:	12 16       	cp	r1, r18
 6ee:	13 06       	cpc	r1, r19
 6f0:	14 06       	cpc	r1, r20
 6f2:	55 1f       	adc	r21, r21
 6f4:	f2 cf       	rjmp	.-28     	; 0x6da <__fp_split3+0xe>
 6f6:	46 95       	lsr	r20
 6f8:	f1 df       	rcall	.-30     	; 0x6dc <__fp_splitA>
 6fa:	08 c0       	rjmp	.+16     	; 0x70c <__fp_splitA+0x30>
 6fc:	16 16       	cp	r1, r22
 6fe:	17 06       	cpc	r1, r23
 700:	18 06       	cpc	r1, r24
 702:	99 1f       	adc	r25, r25
 704:	f1 cf       	rjmp	.-30     	; 0x6e8 <__fp_splitA+0xc>
 706:	86 95       	lsr	r24
 708:	71 05       	cpc	r23, r1
 70a:	61 05       	cpc	r22, r1
 70c:	08 94       	sec
 70e:	08 95       	ret

00000710 <__fp_zero>:
 710:	e8 94       	clt

00000712 <__fp_szero>:
 712:	bb 27       	eor	r27, r27
 714:	66 27       	eor	r22, r22
 716:	77 27       	eor	r23, r23
 718:	cb 01       	movw	r24, r22
 71a:	97 f9       	bld	r25, 7
 71c:	08 95       	ret

0000071e <__mulsf3>:
 71e:	0e 94 a2 03 	call	0x744	; 0x744 <__mulsf3x>
 722:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_round>
 726:	0e 94 47 03 	call	0x68e	; 0x68e <__fp_pscA>
 72a:	38 f0       	brcs	.+14     	; 0x73a <__mulsf3+0x1c>
 72c:	0e 94 4e 03 	call	0x69c	; 0x69c <__fp_pscB>
 730:	20 f0       	brcs	.+8      	; 0x73a <__mulsf3+0x1c>
 732:	95 23       	and	r25, r21
 734:	11 f0       	breq	.+4      	; 0x73a <__mulsf3+0x1c>
 736:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_inf>
 73a:	0c 94 44 03 	jmp	0x688	; 0x688 <__fp_nan>
 73e:	11 24       	eor	r1, r1
 740:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_szero>

00000744 <__mulsf3x>:
 744:	0e 94 66 03 	call	0x6cc	; 0x6cc <__fp_split3>
 748:	70 f3       	brcs	.-36     	; 0x726 <__mulsf3+0x8>

0000074a <__mulsf3_pse>:
 74a:	95 9f       	mul	r25, r21
 74c:	c1 f3       	breq	.-16     	; 0x73e <__mulsf3+0x20>
 74e:	95 0f       	add	r25, r21
 750:	50 e0       	ldi	r21, 0x00	; 0
 752:	55 1f       	adc	r21, r21
 754:	62 9f       	mul	r22, r18
 756:	f0 01       	movw	r30, r0
 758:	72 9f       	mul	r23, r18
 75a:	bb 27       	eor	r27, r27
 75c:	f0 0d       	add	r31, r0
 75e:	b1 1d       	adc	r27, r1
 760:	63 9f       	mul	r22, r19
 762:	aa 27       	eor	r26, r26
 764:	f0 0d       	add	r31, r0
 766:	b1 1d       	adc	r27, r1
 768:	aa 1f       	adc	r26, r26
 76a:	64 9f       	mul	r22, r20
 76c:	66 27       	eor	r22, r22
 76e:	b0 0d       	add	r27, r0
 770:	a1 1d       	adc	r26, r1
 772:	66 1f       	adc	r22, r22
 774:	82 9f       	mul	r24, r18
 776:	22 27       	eor	r18, r18
 778:	b0 0d       	add	r27, r0
 77a:	a1 1d       	adc	r26, r1
 77c:	62 1f       	adc	r22, r18
 77e:	73 9f       	mul	r23, r19
 780:	b0 0d       	add	r27, r0
 782:	a1 1d       	adc	r26, r1
 784:	62 1f       	adc	r22, r18
 786:	83 9f       	mul	r24, r19
 788:	a0 0d       	add	r26, r0
 78a:	61 1d       	adc	r22, r1
 78c:	22 1f       	adc	r18, r18
 78e:	74 9f       	mul	r23, r20
 790:	33 27       	eor	r19, r19
 792:	a0 0d       	add	r26, r0
 794:	61 1d       	adc	r22, r1
 796:	23 1f       	adc	r18, r19
 798:	84 9f       	mul	r24, r20
 79a:	60 0d       	add	r22, r0
 79c:	21 1d       	adc	r18, r1
 79e:	82 2f       	mov	r24, r18
 7a0:	76 2f       	mov	r23, r22
 7a2:	6a 2f       	mov	r22, r26
 7a4:	11 24       	eor	r1, r1
 7a6:	9f 57       	subi	r25, 0x7F	; 127
 7a8:	50 40       	sbci	r21, 0x00	; 0
 7aa:	9a f0       	brmi	.+38     	; 0x7d2 <__mulsf3_pse+0x88>
 7ac:	f1 f0       	breq	.+60     	; 0x7ea <__mulsf3_pse+0xa0>
 7ae:	88 23       	and	r24, r24
 7b0:	4a f0       	brmi	.+18     	; 0x7c4 <__mulsf3_pse+0x7a>
 7b2:	ee 0f       	add	r30, r30
 7b4:	ff 1f       	adc	r31, r31
 7b6:	bb 1f       	adc	r27, r27
 7b8:	66 1f       	adc	r22, r22
 7ba:	77 1f       	adc	r23, r23
 7bc:	88 1f       	adc	r24, r24
 7be:	91 50       	subi	r25, 0x01	; 1
 7c0:	50 40       	sbci	r21, 0x00	; 0
 7c2:	a9 f7       	brne	.-22     	; 0x7ae <__mulsf3_pse+0x64>
 7c4:	9e 3f       	cpi	r25, 0xFE	; 254
 7c6:	51 05       	cpc	r21, r1
 7c8:	80 f0       	brcs	.+32     	; 0x7ea <__mulsf3_pse+0xa0>
 7ca:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_inf>
 7ce:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_szero>
 7d2:	5f 3f       	cpi	r21, 0xFF	; 255
 7d4:	e4 f3       	brlt	.-8      	; 0x7ce <__mulsf3_pse+0x84>
 7d6:	98 3e       	cpi	r25, 0xE8	; 232
 7d8:	d4 f3       	brlt	.-12     	; 0x7ce <__mulsf3_pse+0x84>
 7da:	86 95       	lsr	r24
 7dc:	77 95       	ror	r23
 7de:	67 95       	ror	r22
 7e0:	b7 95       	ror	r27
 7e2:	f7 95       	ror	r31
 7e4:	e7 95       	ror	r30
 7e6:	9f 5f       	subi	r25, 0xFF	; 255
 7e8:	c1 f7       	brne	.-16     	; 0x7da <__mulsf3_pse+0x90>
 7ea:	fe 2b       	or	r31, r30
 7ec:	88 0f       	add	r24, r24
 7ee:	91 1d       	adc	r25, r1
 7f0:	96 95       	lsr	r25
 7f2:	87 95       	ror	r24
 7f4:	97 f9       	bld	r25, 7
 7f6:	08 95       	ret

000007f8 <pow>:
 7f8:	fa 01       	movw	r30, r20
 7fa:	ee 0f       	add	r30, r30
 7fc:	ff 1f       	adc	r31, r31
 7fe:	30 96       	adiw	r30, 0x00	; 0
 800:	21 05       	cpc	r18, r1
 802:	31 05       	cpc	r19, r1
 804:	a1 f1       	breq	.+104    	; 0x86e <pow+0x76>
 806:	61 15       	cp	r22, r1
 808:	71 05       	cpc	r23, r1
 80a:	61 f4       	brne	.+24     	; 0x824 <pow+0x2c>
 80c:	80 38       	cpi	r24, 0x80	; 128
 80e:	bf e3       	ldi	r27, 0x3F	; 63
 810:	9b 07       	cpc	r25, r27
 812:	49 f1       	breq	.+82     	; 0x866 <pow+0x6e>
 814:	68 94       	set
 816:	90 38       	cpi	r25, 0x80	; 128
 818:	81 05       	cpc	r24, r1
 81a:	61 f0       	breq	.+24     	; 0x834 <pow+0x3c>
 81c:	80 38       	cpi	r24, 0x80	; 128
 81e:	bf ef       	ldi	r27, 0xFF	; 255
 820:	9b 07       	cpc	r25, r27
 822:	41 f0       	breq	.+16     	; 0x834 <pow+0x3c>
 824:	99 23       	and	r25, r25
 826:	4a f5       	brpl	.+82     	; 0x87a <pow+0x82>
 828:	ff 3f       	cpi	r31, 0xFF	; 255
 82a:	e1 05       	cpc	r30, r1
 82c:	31 05       	cpc	r19, r1
 82e:	21 05       	cpc	r18, r1
 830:	19 f1       	breq	.+70     	; 0x878 <pow+0x80>
 832:	e8 94       	clt
 834:	08 94       	sec
 836:	e7 95       	ror	r30
 838:	d9 01       	movw	r26, r18
 83a:	aa 23       	and	r26, r26
 83c:	29 f4       	brne	.+10     	; 0x848 <pow+0x50>
 83e:	ab 2f       	mov	r26, r27
 840:	be 2f       	mov	r27, r30
 842:	f8 5f       	subi	r31, 0xF8	; 248
 844:	d0 f3       	brcs	.-12     	; 0x83a <pow+0x42>
 846:	10 c0       	rjmp	.+32     	; 0x868 <pow+0x70>
 848:	ff 5f       	subi	r31, 0xFF	; 255
 84a:	70 f4       	brcc	.+28     	; 0x868 <pow+0x70>
 84c:	a6 95       	lsr	r26
 84e:	e0 f7       	brcc	.-8      	; 0x848 <pow+0x50>
 850:	f7 39       	cpi	r31, 0x97	; 151
 852:	50 f0       	brcs	.+20     	; 0x868 <pow+0x70>
 854:	19 f0       	breq	.+6      	; 0x85c <pow+0x64>
 856:	ff 3a       	cpi	r31, 0xAF	; 175
 858:	38 f4       	brcc	.+14     	; 0x868 <pow+0x70>
 85a:	9f 77       	andi	r25, 0x7F	; 127
 85c:	9f 93       	push	r25
 85e:	0d d0       	rcall	.+26     	; 0x87a <pow+0x82>
 860:	0f 90       	pop	r0
 862:	07 fc       	sbrc	r0, 7
 864:	90 58       	subi	r25, 0x80	; 128
 866:	08 95       	ret
 868:	46 f0       	brts	.+16     	; 0x87a <pow+0x82>
 86a:	0c 94 44 03 	jmp	0x688	; 0x688 <__fp_nan>
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	70 e0       	ldi	r23, 0x00	; 0
 872:	80 e8       	ldi	r24, 0x80	; 128
 874:	9f e3       	ldi	r25, 0x3F	; 63
 876:	08 95       	ret
 878:	4f e7       	ldi	r20, 0x7F	; 127
 87a:	9f 77       	andi	r25, 0x7F	; 127
 87c:	5f 93       	push	r21
 87e:	4f 93       	push	r20
 880:	3f 93       	push	r19
 882:	2f 93       	push	r18
 884:	0e 94 f7 04 	call	0x9ee	; 0x9ee <log>
 888:	2f 91       	pop	r18
 88a:	3f 91       	pop	r19
 88c:	4f 91       	pop	r20
 88e:	5f 91       	pop	r21
 890:	0e 94 8f 03 	call	0x71e	; 0x71e <__mulsf3>
 894:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <exp>
 898:	29 f4       	brne	.+10     	; 0x8a4 <pow+0xac>
 89a:	16 f0       	brts	.+4      	; 0x8a0 <pow+0xa8>
 89c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_inf>
 8a0:	0c 94 88 03 	jmp	0x710	; 0x710 <__fp_zero>
 8a4:	0c 94 44 03 	jmp	0x688	; 0x688 <__fp_nan>

000008a8 <exp>:
 8a8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_splitA>
 8ac:	a8 f3       	brcs	.-22     	; 0x898 <pow+0xa0>
 8ae:	96 38       	cpi	r25, 0x86	; 134
 8b0:	a0 f7       	brcc	.-24     	; 0x89a <pow+0xa2>
 8b2:	07 f8       	bld	r0, 7
 8b4:	0f 92       	push	r0
 8b6:	e8 94       	clt
 8b8:	2b e3       	ldi	r18, 0x3B	; 59
 8ba:	3a ea       	ldi	r19, 0xAA	; 170
 8bc:	48 eb       	ldi	r20, 0xB8	; 184
 8be:	5f e7       	ldi	r21, 0x7F	; 127
 8c0:	0e 94 a5 03 	call	0x74a	; 0x74a <__mulsf3_pse>
 8c4:	0f 92       	push	r0
 8c6:	0f 92       	push	r0
 8c8:	0f 92       	push	r0
 8ca:	4d b7       	in	r20, 0x3d	; 61
 8cc:	5e b7       	in	r21, 0x3e	; 62
 8ce:	0f 92       	push	r0
 8d0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <modf>
 8d4:	e8 e6       	ldi	r30, 0x68	; 104
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	0e 94 86 04 	call	0x90c	; 0x90c <__fp_powser>
 8dc:	4f 91       	pop	r20
 8de:	5f 91       	pop	r21
 8e0:	ef 91       	pop	r30
 8e2:	ff 91       	pop	r31
 8e4:	e5 95       	asr	r30
 8e6:	ee 1f       	adc	r30, r30
 8e8:	ff 1f       	adc	r31, r31
 8ea:	49 f0       	breq	.+18     	; 0x8fe <exp+0x56>
 8ec:	fe 57       	subi	r31, 0x7E	; 126
 8ee:	e0 68       	ori	r30, 0x80	; 128
 8f0:	44 27       	eor	r20, r20
 8f2:	ee 0f       	add	r30, r30
 8f4:	44 1f       	adc	r20, r20
 8f6:	fa 95       	dec	r31
 8f8:	e1 f7       	brne	.-8      	; 0x8f2 <exp+0x4a>
 8fa:	41 95       	neg	r20
 8fc:	55 0b       	sbc	r21, r21
 8fe:	0e 94 b9 04 	call	0x972	; 0x972 <ldexp>
 902:	0f 90       	pop	r0
 904:	07 fe       	sbrs	r0, 7
 906:	0c 94 ad 04 	jmp	0x95a	; 0x95a <inverse>
 90a:	08 95       	ret

0000090c <__fp_powser>:
 90c:	df 93       	push	r29
 90e:	cf 93       	push	r28
 910:	1f 93       	push	r17
 912:	0f 93       	push	r16
 914:	ff 92       	push	r15
 916:	ef 92       	push	r14
 918:	df 92       	push	r13
 91a:	7b 01       	movw	r14, r22
 91c:	8c 01       	movw	r16, r24
 91e:	68 94       	set
 920:	06 c0       	rjmp	.+12     	; 0x92e <__fp_powser+0x22>
 922:	da 2e       	mov	r13, r26
 924:	ef 01       	movw	r28, r30
 926:	0e 94 a2 03 	call	0x744	; 0x744 <__mulsf3x>
 92a:	fe 01       	movw	r30, r28
 92c:	e8 94       	clt
 92e:	a5 91       	lpm	r26, Z+
 930:	25 91       	lpm	r18, Z+
 932:	35 91       	lpm	r19, Z+
 934:	45 91       	lpm	r20, Z+
 936:	55 91       	lpm	r21, Z+
 938:	a6 f3       	brts	.-24     	; 0x922 <__fp_powser+0x16>
 93a:	ef 01       	movw	r28, r30
 93c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__addsf3x>
 940:	fe 01       	movw	r30, r28
 942:	97 01       	movw	r18, r14
 944:	a8 01       	movw	r20, r16
 946:	da 94       	dec	r13
 948:	69 f7       	brne	.-38     	; 0x924 <__fp_powser+0x18>
 94a:	df 90       	pop	r13
 94c:	ef 90       	pop	r14
 94e:	ff 90       	pop	r15
 950:	0f 91       	pop	r16
 952:	1f 91       	pop	r17
 954:	cf 91       	pop	r28
 956:	df 91       	pop	r29
 958:	08 95       	ret

0000095a <inverse>:
 95a:	9b 01       	movw	r18, r22
 95c:	ac 01       	movw	r20, r24
 95e:	60 e0       	ldi	r22, 0x00	; 0
 960:	70 e0       	ldi	r23, 0x00	; 0
 962:	80 e8       	ldi	r24, 0x80	; 128
 964:	9f e3       	ldi	r25, 0x3F	; 63
 966:	0c 94 35 02 	jmp	0x46a	; 0x46a <__divsf3>
 96a:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_inf>
 96e:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_mpack>

00000972 <ldexp>:
 972:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_splitA>
 976:	d8 f3       	brcs	.-10     	; 0x96e <inverse+0x14>
 978:	99 23       	and	r25, r25
 97a:	c9 f3       	breq	.-14     	; 0x96e <inverse+0x14>
 97c:	94 0f       	add	r25, r20
 97e:	51 1d       	adc	r21, r1
 980:	a3 f3       	brvs	.-24     	; 0x96a <inverse+0x10>
 982:	91 50       	subi	r25, 0x01	; 1
 984:	50 40       	sbci	r21, 0x00	; 0
 986:	94 f0       	brlt	.+36     	; 0x9ac <ldexp+0x3a>
 988:	59 f0       	breq	.+22     	; 0x9a0 <ldexp+0x2e>
 98a:	88 23       	and	r24, r24
 98c:	32 f0       	brmi	.+12     	; 0x99a <ldexp+0x28>
 98e:	66 0f       	add	r22, r22
 990:	77 1f       	adc	r23, r23
 992:	88 1f       	adc	r24, r24
 994:	91 50       	subi	r25, 0x01	; 1
 996:	50 40       	sbci	r21, 0x00	; 0
 998:	c1 f7       	brne	.-16     	; 0x98a <ldexp+0x18>
 99a:	9e 3f       	cpi	r25, 0xFE	; 254
 99c:	51 05       	cpc	r21, r1
 99e:	2c f7       	brge	.-54     	; 0x96a <inverse+0x10>
 9a0:	88 0f       	add	r24, r24
 9a2:	91 1d       	adc	r25, r1
 9a4:	96 95       	lsr	r25
 9a6:	87 95       	ror	r24
 9a8:	97 f9       	bld	r25, 7
 9aa:	08 95       	ret
 9ac:	5f 3f       	cpi	r21, 0xFF	; 255
 9ae:	ac f0       	brlt	.+42     	; 0x9da <ldexp+0x68>
 9b0:	98 3e       	cpi	r25, 0xE8	; 232
 9b2:	9c f0       	brlt	.+38     	; 0x9da <ldexp+0x68>
 9b4:	bb 27       	eor	r27, r27
 9b6:	86 95       	lsr	r24
 9b8:	77 95       	ror	r23
 9ba:	67 95       	ror	r22
 9bc:	b7 95       	ror	r27
 9be:	08 f4       	brcc	.+2      	; 0x9c2 <ldexp+0x50>
 9c0:	b1 60       	ori	r27, 0x01	; 1
 9c2:	93 95       	inc	r25
 9c4:	c1 f7       	brne	.-16     	; 0x9b6 <ldexp+0x44>
 9c6:	bb 0f       	add	r27, r27
 9c8:	58 f7       	brcc	.-42     	; 0x9a0 <ldexp+0x2e>
 9ca:	11 f4       	brne	.+4      	; 0x9d0 <ldexp+0x5e>
 9cc:	60 ff       	sbrs	r22, 0
 9ce:	e8 cf       	rjmp	.-48     	; 0x9a0 <ldexp+0x2e>
 9d0:	6f 5f       	subi	r22, 0xFF	; 255
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	e3 cf       	rjmp	.-58     	; 0x9a0 <ldexp+0x2e>
 9da:	0c 94 89 03 	jmp	0x712	; 0x712 <__fp_szero>
 9de:	16 f0       	brts	.+4      	; 0x9e4 <ldexp+0x72>
 9e0:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_mpack>
 9e4:	0c 94 44 03 	jmp	0x688	; 0x688 <__fp_nan>
 9e8:	68 94       	set
 9ea:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_inf>

000009ee <log>:
 9ee:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_splitA>
 9f2:	a8 f3       	brcs	.-22     	; 0x9de <ldexp+0x6c>
 9f4:	99 23       	and	r25, r25
 9f6:	c1 f3       	breq	.-16     	; 0x9e8 <ldexp+0x76>
 9f8:	ae f3       	brts	.-22     	; 0x9e4 <ldexp+0x72>
 9fa:	df 93       	push	r29
 9fc:	cf 93       	push	r28
 9fe:	1f 93       	push	r17
 a00:	0f 93       	push	r16
 a02:	ff 92       	push	r15
 a04:	c9 2f       	mov	r28, r25
 a06:	dd 27       	eor	r29, r29
 a08:	88 23       	and	r24, r24
 a0a:	2a f0       	brmi	.+10     	; 0xa16 <log+0x28>
 a0c:	21 97       	sbiw	r28, 0x01	; 1
 a0e:	66 0f       	add	r22, r22
 a10:	77 1f       	adc	r23, r23
 a12:	88 1f       	adc	r24, r24
 a14:	da f7       	brpl	.-10     	; 0xa0c <log+0x1e>
 a16:	20 e0       	ldi	r18, 0x00	; 0
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	40 e8       	ldi	r20, 0x80	; 128
 a1c:	5f eb       	ldi	r21, 0xBF	; 191
 a1e:	9f e3       	ldi	r25, 0x3F	; 63
 a20:	88 39       	cpi	r24, 0x98	; 152
 a22:	20 f0       	brcs	.+8      	; 0xa2c <log+0x3e>
 a24:	80 3e       	cpi	r24, 0xE0	; 224
 a26:	38 f0       	brcs	.+14     	; 0xa36 <log+0x48>
 a28:	21 96       	adiw	r28, 0x01	; 1
 a2a:	8f 77       	andi	r24, 0x7F	; 127
 a2c:	0e 94 c4 01 	call	0x388	; 0x388 <__addsf3>
 a30:	e0 e9       	ldi	r30, 0x90	; 144
 a32:	f0 e0       	ldi	r31, 0x00	; 0
 a34:	04 c0       	rjmp	.+8      	; 0xa3e <log+0x50>
 a36:	0e 94 c4 01 	call	0x388	; 0x388 <__addsf3>
 a3a:	ed eb       	ldi	r30, 0xBD	; 189
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	0e 94 86 04 	call	0x90c	; 0x90c <__fp_powser>
 a42:	8b 01       	movw	r16, r22
 a44:	be 01       	movw	r22, r28
 a46:	ec 01       	movw	r28, r24
 a48:	fb 2e       	mov	r15, r27
 a4a:	6f 57       	subi	r22, 0x7F	; 127
 a4c:	71 09       	sbc	r23, r1
 a4e:	75 95       	asr	r23
 a50:	77 1f       	adc	r23, r23
 a52:	88 0b       	sbc	r24, r24
 a54:	99 0b       	sbc	r25, r25
 a56:	0e 94 df 02 	call	0x5be	; 0x5be <__floatsisf>
 a5a:	28 e1       	ldi	r18, 0x18	; 24
 a5c:	32 e7       	ldi	r19, 0x72	; 114
 a5e:	41 e3       	ldi	r20, 0x31	; 49
 a60:	5f e3       	ldi	r21, 0x3F	; 63
 a62:	0e 94 a2 03 	call	0x744	; 0x744 <__mulsf3x>
 a66:	af 2d       	mov	r26, r15
 a68:	98 01       	movw	r18, r16
 a6a:	ae 01       	movw	r20, r28
 a6c:	ff 90       	pop	r15
 a6e:	0f 91       	pop	r16
 a70:	1f 91       	pop	r17
 a72:	cf 91       	pop	r28
 a74:	df 91       	pop	r29
 a76:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__addsf3x>
 a7a:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_round>

00000a7e <modf>:
 a7e:	fa 01       	movw	r30, r20
 a80:	dc 01       	movw	r26, r24
 a82:	aa 0f       	add	r26, r26
 a84:	bb 1f       	adc	r27, r27
 a86:	9b 01       	movw	r18, r22
 a88:	ac 01       	movw	r20, r24
 a8a:	bf 57       	subi	r27, 0x7F	; 127
 a8c:	28 f4       	brcc	.+10     	; 0xa98 <modf+0x1a>
 a8e:	22 27       	eor	r18, r18
 a90:	33 27       	eor	r19, r19
 a92:	44 27       	eor	r20, r20
 a94:	50 78       	andi	r21, 0x80	; 128
 a96:	20 c0       	rjmp	.+64     	; 0xad8 <modf+0x5a>
 a98:	b7 51       	subi	r27, 0x17	; 23
 a9a:	90 f4       	brcc	.+36     	; 0xac0 <modf+0x42>
 a9c:	ab 2f       	mov	r26, r27
 a9e:	00 24       	eor	r0, r0
 aa0:	46 95       	lsr	r20
 aa2:	37 95       	ror	r19
 aa4:	27 95       	ror	r18
 aa6:	01 1c       	adc	r0, r1
 aa8:	a3 95       	inc	r26
 aaa:	d2 f3       	brmi	.-12     	; 0xaa0 <modf+0x22>
 aac:	00 20       	and	r0, r0
 aae:	71 f0       	breq	.+28     	; 0xacc <modf+0x4e>
 ab0:	22 0f       	add	r18, r18
 ab2:	33 1f       	adc	r19, r19
 ab4:	44 1f       	adc	r20, r20
 ab6:	b3 95       	inc	r27
 ab8:	da f3       	brmi	.-10     	; 0xab0 <modf+0x32>
 aba:	0e d0       	rcall	.+28     	; 0xad8 <modf+0x5a>
 abc:	0c 94 c3 01 	jmp	0x386	; 0x386 <__subsf3>
 ac0:	61 30       	cpi	r22, 0x01	; 1
 ac2:	71 05       	cpc	r23, r1
 ac4:	a0 e8       	ldi	r26, 0x80	; 128
 ac6:	8a 07       	cpc	r24, r26
 ac8:	b9 46       	sbci	r27, 0x69	; 105
 aca:	30 f4       	brcc	.+12     	; 0xad8 <modf+0x5a>
 acc:	9b 01       	movw	r18, r22
 ace:	ac 01       	movw	r20, r24
 ad0:	66 27       	eor	r22, r22
 ad2:	77 27       	eor	r23, r23
 ad4:	88 27       	eor	r24, r24
 ad6:	90 78       	andi	r25, 0x80	; 128
 ad8:	30 96       	adiw	r30, 0x00	; 0
 ada:	21 f0       	breq	.+8      	; 0xae4 <modf+0x66>
 adc:	20 83       	st	Z, r18
 ade:	31 83       	std	Z+1, r19	; 0x01
 ae0:	42 83       	std	Z+2, r20	; 0x02
 ae2:	53 83       	std	Z+3, r21	; 0x03
 ae4:	08 95       	ret

00000ae6 <__fp_mpack>:
 ae6:	9f 3f       	cpi	r25, 0xFF	; 255
 ae8:	31 f0       	breq	.+12     	; 0xaf6 <__fp_mpack_finite+0xc>

00000aea <__fp_mpack_finite>:
 aea:	91 50       	subi	r25, 0x01	; 1
 aec:	20 f4       	brcc	.+8      	; 0xaf6 <__fp_mpack_finite+0xc>
 aee:	87 95       	ror	r24
 af0:	77 95       	ror	r23
 af2:	67 95       	ror	r22
 af4:	b7 95       	ror	r27
 af6:	88 0f       	add	r24, r24
 af8:	91 1d       	adc	r25, r1
 afa:	96 95       	lsr	r25
 afc:	87 95       	ror	r24
 afe:	97 f9       	bld	r25, 7
 b00:	08 95       	ret

00000b02 <__umulhisi3>:
 b02:	a2 9f       	mul	r26, r18
 b04:	b0 01       	movw	r22, r0
 b06:	b3 9f       	mul	r27, r19
 b08:	c0 01       	movw	r24, r0
 b0a:	a3 9f       	mul	r26, r19
 b0c:	70 0d       	add	r23, r0
 b0e:	81 1d       	adc	r24, r1
 b10:	11 24       	eor	r1, r1
 b12:	91 1d       	adc	r25, r1
 b14:	b2 9f       	mul	r27, r18
 b16:	70 0d       	add	r23, r0
 b18:	81 1d       	adc	r24, r1
 b1a:	11 24       	eor	r1, r1
 b1c:	91 1d       	adc	r25, r1
 b1e:	08 95       	ret

00000b20 <_exit>:
 b20:	f8 94       	cli

00000b22 <__stop_program>:
 b22:	ff cf       	rjmp	.-2      	; 0xb22 <__stop_program>
