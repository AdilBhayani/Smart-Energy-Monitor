
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00001240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000921  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003d8  00000000  00000000  00001c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000653  00000000  00000000  00002051  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  000026a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036c  00000000  00000000  00002848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e8  00000000  00000000  00002bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <main+0x3c8>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_clear_bss>:
      f6:	21 e0       	ldi	r18, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a1 30       	cpi	r26, 0x01	; 1
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 8e 02 	call	0x51c	; 0x51c <main>
     10a:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <uart_init>:

 //Approximates a data value based on the two nearest data points
 float linearApproximate(float higher, float lower) {
	float approximation = (higher + lower) / 2;
	return approximation;
 }
     112:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     116:	87 e6       	ldi	r24, 0x67	; 103
     118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     11c:	e1 ec       	ldi	r30, 0xC1	; 193
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	88 60       	ori	r24, 0x08	; 8
     124:	80 83       	st	Z, r24
     126:	e2 ec       	ldi	r30, 0xC2	; 194
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	86 60       	ori	r24, 0x06	; 6
     12e:	80 83       	st	Z, r24
     130:	08 95       	ret

00000132 <uart_transmit>:
     132:	e0 ec       	ldi	r30, 0xC0	; 192
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	90 81       	ld	r25, Z
     138:	99 23       	and	r25, r25
     13a:	e9 f3       	breq	.-6      	; 0x136 <uart_transmit+0x4>
     13c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     140:	08 95       	ret

00000142 <timer0_init>:
     142:	85 b5       	in	r24, 0x25	; 37
     144:	85 60       	ori	r24, 0x05	; 5
     146:	85 bd       	out	0x25, r24	; 37
     148:	16 bc       	out	0x26, r1	; 38
     14a:	08 95       	ret

0000014c <find_decimal>:
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	6b 01       	movw	r12, r22
     156:	7c 01       	movw	r14, r24
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	40 e2       	ldi	r20, 0x20	; 32
     15e:	51 e4       	ldi	r21, 0x41	; 65
     160:	0e 94 23 05 	call	0xa46	; 0xa46 <__cmpsf2>
     164:	88 23       	and	r24, r24
     166:	b4 f0       	brlt	.+44     	; 0x194 <find_decimal+0x48>
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	48 ec       	ldi	r20, 0xC8	; 200
     16e:	52 e4       	ldi	r21, 0x42	; 66
     170:	c7 01       	movw	r24, r14
     172:	b6 01       	movw	r22, r12
     174:	0e 94 23 05 	call	0xa46	; 0xa46 <__cmpsf2>
     178:	08 2e       	mov	r0, r24
     17a:	00 0c       	add	r0, r0
     17c:	99 0b       	sbc	r25, r25
     17e:	88 27       	eor	r24, r24
     180:	99 0f       	add	r25, r25
     182:	88 1f       	adc	r24, r24
     184:	99 27       	eor	r25, r25
     186:	22 e0       	ldi	r18, 0x02	; 2
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	a9 01       	movw	r20, r18
     18c:	48 1b       	sub	r20, r24
     18e:	59 0b       	sbc	r21, r25
     190:	ca 01       	movw	r24, r20
     192:	02 c0       	rjmp	.+4      	; 0x198 <find_decimal+0x4c>
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	ff 90       	pop	r15
     19a:	ef 90       	pop	r14
     19c:	df 90       	pop	r13
     19e:	cf 90       	pop	r12
     1a0:	08 95       	ret

000001a2 <wololo>:
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	41 30       	cpi	r20, 0x01	; 1
     1a6:	09 f4       	brne	.+2      	; 0x1aa <wololo+0x8>
     1a8:	40 96       	adiw	r24, 0x10	; 16
     1aa:	61 11       	cpse	r22, r1
     1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <wololo+0x12>
     1ae:	80 5a       	subi	r24, 0xA0	; 160
     1b0:	9f 4f       	sbci	r25, 0xFF	; 255
     1b2:	08 95       	ret
     1b4:	61 30       	cpi	r22, 0x01	; 1
     1b6:	19 f4       	brne	.+6      	; 0x1be <wololo+0x1c>
     1b8:	80 5c       	subi	r24, 0xC0	; 192
     1ba:	9f 4f       	sbci	r25, 0xFF	; 255
     1bc:	08 95       	ret
     1be:	62 30       	cpi	r22, 0x02	; 2
     1c0:	09 f4       	brne	.+2      	; 0x1c4 <wololo+0x22>
     1c2:	80 96       	adiw	r24, 0x20	; 32
     1c4:	08 95       	ret

000001c6 <calcPower>:
     1c6:	2f 92       	push	r2
     1c8:	3f 92       	push	r3
     1ca:	4f 92       	push	r4
     1cc:	5f 92       	push	r5
     1ce:	6f 92       	push	r6
     1d0:	7f 92       	push	r7
     1d2:	8f 92       	push	r8
     1d4:	9f 92       	push	r9
     1d6:	af 92       	push	r10
     1d8:	bf 92       	push	r11
     1da:	cf 92       	push	r12
     1dc:	df 92       	push	r13
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	ca 53       	subi	r28, 0x3A	; 58
     1f0:	d1 40       	sbci	r29, 0x01	; 1
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	2c 01       	movw	r4, r24
     1fe:	4b 01       	movw	r8, r22
     200:	1e 01       	movw	r2, r28
     202:	8d e9       	ldi	r24, 0x9D	; 157
     204:	28 0e       	add	r2, r24
     206:	31 1c       	adc	r3, r1
     208:	fe 01       	movw	r30, r28
     20a:	31 96       	adiw	r30, 0x01	; 1
     20c:	3f 01       	movw	r6, r30
     20e:	5f 01       	movw	r10, r30
     210:	61 01       	movw	r12, r2
     212:	ee 24       	eor	r14, r14
     214:	e3 94       	inc	r14
     216:	f1 2c       	mov	r15, r1
     218:	00 e0       	ldi	r16, 0x00	; 0
     21a:	10 e0       	ldi	r17, 0x00	; 0
     21c:	c7 5c       	subi	r28, 0xC7	; 199
     21e:	de 4f       	sbci	r29, 0xFE	; 254
     220:	19 83       	std	Y+1, r17	; 0x01
     222:	08 83       	st	Y, r16
     224:	c9 53       	subi	r28, 0x39	; 57
     226:	d1 40       	sbci	r29, 0x01	; 1
     228:	00 fd       	sbrc	r16, 0
     22a:	53 c0       	rjmp	.+166    	; 0x2d2 <calcPower+0x10c>
     22c:	c8 01       	movw	r24, r16
     22e:	11 23       	and	r17, r17
     230:	0c f4       	brge	.+2      	; 0x234 <calcPower+0x6e>
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	95 95       	asr	r25
     236:	87 95       	ror	r24
     238:	fc 01       	movw	r30, r24
     23a:	ee 0f       	add	r30, r30
     23c:	ff 1f       	adc	r31, r31
     23e:	ee 0f       	add	r30, r30
     240:	ff 1f       	adc	r31, r31
     242:	e4 0d       	add	r30, r4
     244:	f5 1d       	adc	r31, r5
     246:	40 81       	ld	r20, Z
     248:	51 81       	ldd	r21, Z+1	; 0x01
     24a:	62 81       	ldd	r22, Z+2	; 0x02
     24c:	73 81       	ldd	r23, Z+3	; 0x03
     24e:	f5 01       	movw	r30, r10
     250:	40 83       	st	Z, r20
     252:	51 83       	std	Z+1, r21	; 0x01
     254:	62 83       	std	Z+2, r22	; 0x02
     256:	73 83       	std	Z+3, r23	; 0x03
     258:	01 15       	cp	r16, r1
     25a:	11 05       	cpc	r17, r1
     25c:	19 f0       	breq	.+6      	; 0x264 <calcPower+0x9e>
     25e:	06 32       	cpi	r16, 0x26	; 38
     260:	11 05       	cpc	r17, r1
     262:	89 f4       	brne	.+34     	; 0x286 <calcPower+0xc0>
     264:	88 0f       	add	r24, r24
     266:	99 1f       	adc	r25, r25
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	f4 01       	movw	r30, r8
     26e:	e8 0f       	add	r30, r24
     270:	f9 1f       	adc	r31, r25
     272:	80 81       	ld	r24, Z
     274:	91 81       	ldd	r25, Z+1	; 0x01
     276:	a2 81       	ldd	r26, Z+2	; 0x02
     278:	b3 81       	ldd	r27, Z+3	; 0x03
     27a:	f6 01       	movw	r30, r12
     27c:	80 83       	st	Z, r24
     27e:	91 83       	std	Z+1, r25	; 0x01
     280:	a2 83       	std	Z+2, r26	; 0x02
     282:	b3 83       	std	Z+3, r27	; 0x03
     284:	67 c0       	rjmp	.+206    	; 0x354 <calcPower+0x18e>
     286:	c7 01       	movw	r24, r14
     288:	ff 20       	and	r15, r15
     28a:	0c f4       	brge	.+2      	; 0x28e <calcPower+0xc8>
     28c:	01 96       	adiw	r24, 0x01	; 1
     28e:	95 95       	asr	r25
     290:	87 95       	ror	r24
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	88 0d       	add	r24, r8
     29c:	99 1d       	adc	r25, r9
     29e:	fc 01       	movw	r30, r24
     2a0:	38 97       	sbiw	r30, 0x08	; 8
     2a2:	dc 01       	movw	r26, r24
     2a4:	14 97       	sbiw	r26, 0x04	; 4
     2a6:	2d 91       	ld	r18, X+
     2a8:	3d 91       	ld	r19, X+
     2aa:	4d 91       	ld	r20, X+
     2ac:	5c 91       	ld	r21, X
     2ae:	60 81       	ld	r22, Z
     2b0:	71 81       	ldd	r23, Z+1	; 0x01
     2b2:	82 81       	ldd	r24, Z+2	; 0x02
     2b4:	93 81       	ldd	r25, Z+3	; 0x03
     2b6:	0e 94 b7 04 	call	0x96e	; 0x96e <__addsf3>
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	5f e3       	ldi	r21, 0x3F	; 63
     2c2:	0e 94 82 06 	call	0xd04	; 0xd04 <__mulsf3>
     2c6:	f6 01       	movw	r30, r12
     2c8:	60 83       	st	Z, r22
     2ca:	71 83       	std	Z+1, r23	; 0x01
     2cc:	82 83       	std	Z+2, r24	; 0x02
     2ce:	93 83       	std	Z+3, r25	; 0x03
     2d0:	41 c0       	rjmp	.+130    	; 0x354 <calcPower+0x18e>
     2d2:	f7 01       	movw	r30, r14
     2d4:	ff 20       	and	r15, r15
     2d6:	0c f4       	brge	.+2      	; 0x2da <calcPower+0x114>
     2d8:	31 96       	adiw	r30, 0x01	; 1
     2da:	f5 95       	asr	r31
     2dc:	e7 95       	ror	r30
     2de:	ee 0f       	add	r30, r30
     2e0:	ff 1f       	adc	r31, r31
     2e2:	ee 0f       	add	r30, r30
     2e4:	ff 1f       	adc	r31, r31
     2e6:	e4 0d       	add	r30, r4
     2e8:	f5 1d       	adc	r31, r5
     2ea:	df 01       	movw	r26, r30
     2ec:	14 97       	sbiw	r26, 0x04	; 4
     2ee:	20 81       	ld	r18, Z
     2f0:	31 81       	ldd	r19, Z+1	; 0x01
     2f2:	42 81       	ldd	r20, Z+2	; 0x02
     2f4:	53 81       	ldd	r21, Z+3	; 0x03
     2f6:	6d 91       	ld	r22, X+
     2f8:	7d 91       	ld	r23, X+
     2fa:	8d 91       	ld	r24, X+
     2fc:	9c 91       	ld	r25, X
     2fe:	0e 94 b7 04 	call	0x96e	; 0x96e <__addsf3>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	5f e3       	ldi	r21, 0x3F	; 63
     30a:	0e 94 82 06 	call	0xd04	; 0xd04 <__mulsf3>
     30e:	f5 01       	movw	r30, r10
     310:	60 83       	st	Z, r22
     312:	71 83       	std	Z+1, r23	; 0x01
     314:	82 83       	std	Z+2, r24	; 0x02
     316:	93 83       	std	Z+3, r25	; 0x03
     318:	c7 5c       	subi	r28, 0xC7	; 199
     31a:	de 4f       	sbci	r29, 0xFE	; 254
     31c:	28 81       	ld	r18, Y
     31e:	39 81       	ldd	r19, Y+1	; 0x01
     320:	c9 53       	subi	r28, 0x39	; 57
     322:	d1 40       	sbci	r29, 0x01	; 1
     324:	21 50       	subi	r18, 0x01	; 1
     326:	31 09       	sbc	r19, r1
     328:	c9 01       	movw	r24, r18
     32a:	99 23       	and	r25, r25
     32c:	0c f4       	brge	.+2      	; 0x330 <calcPower+0x16a>
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	fc 01       	movw	r30, r24
     332:	f5 95       	asr	r31
     334:	e7 95       	ror	r30
     336:	ee 0f       	add	r30, r30
     338:	ff 1f       	adc	r31, r31
     33a:	ee 0f       	add	r30, r30
     33c:	ff 1f       	adc	r31, r31
     33e:	e8 0d       	add	r30, r8
     340:	f9 1d       	adc	r31, r9
     342:	80 81       	ld	r24, Z
     344:	91 81       	ldd	r25, Z+1	; 0x01
     346:	a2 81       	ldd	r26, Z+2	; 0x02
     348:	b3 81       	ldd	r27, Z+3	; 0x03
     34a:	f6 01       	movw	r30, r12
     34c:	80 83       	st	Z, r24
     34e:	91 83       	std	Z+1, r25	; 0x01
     350:	a2 83       	std	Z+2, r26	; 0x02
     352:	b3 83       	std	Z+3, r27	; 0x03
     354:	0f 5f       	subi	r16, 0xFF	; 255
     356:	1f 4f       	sbci	r17, 0xFF	; 255
     358:	ff ef       	ldi	r31, 0xFF	; 255
     35a:	ef 1a       	sub	r14, r31
     35c:	ff 0a       	sbc	r15, r31
     35e:	84 e0       	ldi	r24, 0x04	; 4
     360:	c8 0e       	add	r12, r24
     362:	d1 1c       	adc	r13, r1
     364:	94 e0       	ldi	r25, 0x04	; 4
     366:	a9 0e       	add	r10, r25
     368:	b1 1c       	adc	r11, r1
     36a:	07 32       	cpi	r16, 0x27	; 39
     36c:	11 05       	cpc	r17, r1
     36e:	09 f0       	breq	.+2      	; 0x372 <calcPower+0x1ac>
     370:	55 cf       	rjmp	.-342    	; 0x21c <calcPower+0x56>
     372:	8e 01       	movw	r16, r28
     374:	03 56       	subi	r16, 0x63	; 99
     376:	1f 4f       	sbci	r17, 0xFF	; 255
     378:	c1 2c       	mov	r12, r1
     37a:	d1 2c       	mov	r13, r1
     37c:	76 01       	movw	r14, r12
     37e:	f3 01       	movw	r30, r6
     380:	61 91       	ld	r22, Z+
     382:	71 91       	ld	r23, Z+
     384:	81 91       	ld	r24, Z+
     386:	91 91       	ld	r25, Z+
     388:	3f 01       	movw	r6, r30
     38a:	f1 01       	movw	r30, r2
     38c:	21 91       	ld	r18, Z+
     38e:	31 91       	ld	r19, Z+
     390:	41 91       	ld	r20, Z+
     392:	51 91       	ld	r21, Z+
     394:	1f 01       	movw	r2, r30
     396:	0e 94 82 06 	call	0xd04	; 0xd04 <__mulsf3>
     39a:	9b 01       	movw	r18, r22
     39c:	ac 01       	movw	r20, r24
     39e:	c7 01       	movw	r24, r14
     3a0:	b6 01       	movw	r22, r12
     3a2:	0e 94 b7 04 	call	0x96e	; 0x96e <__addsf3>
     3a6:	6b 01       	movw	r12, r22
     3a8:	7c 01       	movw	r14, r24
     3aa:	60 16       	cp	r6, r16
     3ac:	71 06       	cpc	r7, r17
     3ae:	39 f7       	brne	.-50     	; 0x37e <calcPower+0x1b8>
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	4c e1       	ldi	r20, 0x1C	; 28
     3b6:	52 e4       	ldi	r21, 0x42	; 66
     3b8:	0e 94 28 05 	call	0xa50	; 0xa50 <__divsf3>
     3bc:	c6 5c       	subi	r28, 0xC6	; 198
     3be:	de 4f       	sbci	r29, 0xFE	; 254
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	1f 91       	pop	r17
     3d0:	0f 91       	pop	r16
     3d2:	ff 90       	pop	r15
     3d4:	ef 90       	pop	r14
     3d6:	df 90       	pop	r13
     3d8:	cf 90       	pop	r12
     3da:	bf 90       	pop	r11
     3dc:	af 90       	pop	r10
     3de:	9f 90       	pop	r9
     3e0:	8f 90       	pop	r8
     3e2:	7f 90       	pop	r7
     3e4:	6f 90       	pop	r6
     3e6:	5f 90       	pop	r5
     3e8:	4f 90       	pop	r4
     3ea:	3f 90       	pop	r3
     3ec:	2f 90       	pop	r2
     3ee:	08 95       	ret

000003f0 <calcVoltageRMS>:
     3f0:	63 e3       	ldi	r22, 0x33	; 51
     3f2:	73 e3       	ldi	r23, 0x33	; 51
     3f4:	8b e8       	ldi	r24, 0x8B	; 139
     3f6:	92 e4       	ldi	r25, 0x42	; 66
     3f8:	08 95       	ret

000003fa <calcCurrentRMS>:
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	88 e2       	ldi	r24, 0x28	; 40
     400:	92 e4       	ldi	r25, 0x42	; 66
     402:	08 95       	ret

00000404 <adc_init>:

 //Initialises the ADC
 void adc_init() {
	DDRC = 0x00; //Set port c as input
     404:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADEN); //Set Prescaler to 128 and enable the ADC 
     406:	ea e7       	ldi	r30, 0x7A	; 122
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	87 68       	ori	r24, 0x87	; 135
     40e:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0); //Set reference voltage to VCC
     410:	ec e7       	ldi	r30, 0x7C	; 124
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	80 64       	ori	r24, 0x40	; 64
     418:	80 83       	st	Z, r24
     41a:	08 95       	ret

0000041c <adc_read_voltage>:
 }

 //Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_voltage() {
	ADMUX &= ~(1<<MUX0);
     41c:	ec e7       	ldi	r30, 0x7C	; 124
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	8e 7f       	andi	r24, 0xFE	; 254
     424:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX1);
     426:	80 81       	ld	r24, Z
     428:	8d 7f       	andi	r24, 0xFD	; 253
     42a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX2);
     42c:	80 81       	ld	r24, Z
     42e:	8b 7f       	andi	r24, 0xFB	; 251
     430:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //Start conversion
     432:	ea e7       	ldi	r30, 0x7A	; 122
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	80 64       	ori	r24, 0x40	; 64
     43a:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
     43c:	80 81       	ld	r24, Z
     43e:	84 ff       	sbrs	r24, 4
     440:	fd cf       	rjmp	.-6      	; 0x43c <adc_read_voltage+0x20>
	unsigned int adcRead = ADC;
     442:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     446:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     44a:	08 95       	ret

0000044c <adc_read_current>:

  //Reads from ADC and returns and integer between 0 and 1023 inclusive
 unsigned int adc_read_current(unsigned int highLow) {
	if (highLow == 1) { //High gain current
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	61 f4       	brne	.+24     	; 0x468 <adc_read_current+0x1c>
		ADMUX |= (1<<MUX0);
     450:	ec e7       	ldi	r30, 0x7C	; 124
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	81 60       	ori	r24, 0x01	; 1
     458:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX1);
     45a:	80 81       	ld	r24, Z
     45c:	8d 7f       	andi	r24, 0xFD	; 253
     45e:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX2);
     460:	80 81       	ld	r24, Z
     462:	84 60       	ori	r24, 0x04	; 4
     464:	80 83       	st	Z, r24
     466:	0b c0       	rjmp	.+22     	; 0x47e <adc_read_current+0x32>
	} else { //Low gain current
		ADMUX &= ~(1<<MUX0);
     468:	ec e7       	ldi	r30, 0x7C	; 124
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	8e 7f       	andi	r24, 0xFE	; 254
     470:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX1);
     472:	80 81       	ld	r24, Z
     474:	8d 7f       	andi	r24, 0xFD	; 253
     476:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX2);
     478:	80 81       	ld	r24, Z
     47a:	8b 7f       	andi	r24, 0xFB	; 251
     47c:	80 83       	st	Z, r24
	}
	ADCSRA |= (1<<ADSC); //Start conversion
     47e:	ea e7       	ldi	r30, 0x7A	; 122
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	80 64       	ori	r24, 0x40	; 64
     486:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADIF)) == 0); //Poll the ADIF bit
     488:	80 81       	ld	r24, Z
     48a:	84 ff       	sbrs	r24, 4
     48c:	fd cf       	rjmp	.-6      	; 0x488 <adc_read_current+0x3c>
	unsigned int adcRead = ADC;
     48e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     492:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return adcRead;
 }
     496:	08 95       	ret

00000498 <adc_calculation>:

 //Converts an ADC integer into the actual voltage measured by the ADC pin
 float adc_calculation(unsigned int adcValue) {
	float calculatedValue;
	calculatedValue = ((float)adcValue / 1023) * 5;
     498:	bc 01       	movw	r22, r24
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 d0 05 	call	0xba0	; 0xba0 <__floatunsisf>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 ec       	ldi	r19, 0xC0	; 192
     4a6:	4f e7       	ldi	r20, 0x7F	; 127
     4a8:	54 e4       	ldi	r21, 0x44	; 68
     4aa:	0e 94 28 05 	call	0xa50	; 0xa50 <__divsf3>
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 ea       	ldi	r20, 0xA0	; 160
     4b4:	50 e4       	ldi	r21, 0x40	; 64
     4b6:	0e 94 82 06 	call	0xd04	; 0xd04 <__mulsf3>
	return calculatedValue; 
 }
     4ba:	08 95       	ret

000004bc <voltage_real>:
 /*
 This function figures out what the actual voltage being measured was based on reversing the process 
 that the signal went through. Option 0 for voltage, 1 for regular current, 2 for high gain current
 */
 float voltage_real(float adcValue, unsigned int option) {
	if (option == 0) {
     4bc:	41 15       	cp	r20, r1
     4be:	51 05       	cpc	r21, r1
     4c0:	71 f4       	brne	.+28     	; 0x4de <voltage_real+0x22>
		return -(adcValue - 1.7) * 98;
     4c2:	2a e9       	ldi	r18, 0x9A	; 154
     4c4:	39 e9       	ldi	r19, 0x99	; 153
     4c6:	49 ed       	ldi	r20, 0xD9	; 217
     4c8:	5f e3       	ldi	r21, 0x3F	; 63
     4ca:	0e 94 b6 04 	call	0x96c	; 0x96c <__subsf3>
     4ce:	90 58       	subi	r25, 0x80	; 128
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	44 ec       	ldi	r20, 0xC4	; 196
     4d6:	52 e4       	ldi	r21, 0x42	; 66
     4d8:	0e 94 82 06 	call	0xd04	; 0xd04 <__mulsf3>
     4dc:	08 95       	ret
	} else if (option == 1) {
     4de:	41 30       	cpi	r20, 0x01	; 1
     4e0:	51 05       	cpc	r21, r1
     4e2:	71 f4       	brne	.+28     	; 0x500 <voltage_real+0x44>
		return -(adcValue - 1.63) / 5.7;
     4e4:	27 ed       	ldi	r18, 0xD7	; 215
     4e6:	33 ea       	ldi	r19, 0xA3	; 163
     4e8:	40 ed       	ldi	r20, 0xD0	; 208
     4ea:	5f e3       	ldi	r21, 0x3F	; 63
     4ec:	0e 94 b6 04 	call	0x96c	; 0x96c <__subsf3>
     4f0:	90 58       	subi	r25, 0x80	; 128
     4f2:	26 e6       	ldi	r18, 0x66	; 102
     4f4:	36 e6       	ldi	r19, 0x66	; 102
     4f6:	46 eb       	ldi	r20, 0xB6	; 182
     4f8:	50 e4       	ldi	r21, 0x40	; 64
     4fa:	0e 94 28 05 	call	0xa50	; 0xa50 <__divsf3>
     4fe:	08 95       	ret
	} else {
		return -(adcValue - 1.64) / 32.93;
     500:	25 e8       	ldi	r18, 0x85	; 133
     502:	3b ee       	ldi	r19, 0xEB	; 235
     504:	41 ed       	ldi	r20, 0xD1	; 209
     506:	5f e3       	ldi	r21, 0x3F	; 63
     508:	0e 94 b6 04 	call	0x96c	; 0x96c <__subsf3>
     50c:	90 58       	subi	r25, 0x80	; 128
     50e:	22 e5       	ldi	r18, 0x52	; 82
     510:	38 eb       	ldi	r19, 0xB8	; 184
     512:	43 e0       	ldi	r20, 0x03	; 3
     514:	52 e4       	ldi	r21, 0x42	; 66
     516:	0e 94 28 05 	call	0xa50	; 0xa50 <__divsf3>
	}
     51a:	08 95       	ret

0000051c <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

volatile uint8_t counter = 0; //Counter for the number of times the TCNT0 compares correctly

int main(void) {
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
     524:	ca 5b       	subi	r28, 0xBA	; 186
     526:	d1 09       	sbc	r29, r1
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
	adc_init();
     532:	0e 94 02 02 	call	0x404	; 0x404 <adc_init>
	uart_init();	
     536:	0e 94 89 00 	call	0x112	; 0x112 <uart_init>
	timer0_init();
     53a:	0e 94 a1 00 	call	0x142	; 0x142 <timer0_init>
	uint32_t displayCount = 0;
     53e:	c2 55       	subi	r28, 0x52	; 82
     540:	df 4f       	sbci	r29, 0xFF	; 255
     542:	18 82       	st	Y, r1
     544:	19 82       	std	Y+1, r1	; 0x01
     546:	1a 82       	std	Y+2, r1	; 0x02
     548:	1b 82       	std	Y+3, r1	; 0x03
     54a:	ce 5a       	subi	r28, 0xAE	; 174
     54c:	d0 40       	sbci	r29, 0x00	; 0
		uint8_t index = 0;
		
		//Reading from the ADC, calculating and converting
		float voltageArray[20];
		float currentArray[20];
		for (int i=0;i<39;i++) {
     54e:	91 2c       	mov	r9, r1
     550:	81 2c       	mov	r8, r1
				voltageArray[i/2] = voltage;
			} else {
				unsigned int adcValue = adc_read_current(0); // Regular Current
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, 1); // Regular Current
				currentArray[(i-1)/2] = current;
     552:	9e 01       	movw	r18, r28
     554:	2f 5f       	subi	r18, 0xFF	; 255
     556:	3f 4f       	sbci	r19, 0xFF	; 255
     558:	59 01       	movw	r10, r18
		for (int i=0;i<39;i++) {
			if (i%2 == 0) {
				unsigned int adcValue = adc_read_voltage();
				float adcVoltage = adc_calculation(adcValue);
				float voltage = voltage_real(adcVoltage, 0);
				voltageArray[i/2] = voltage;
     55a:	1e 01       	movw	r2, r28
     55c:	31 e5       	ldi	r19, 0x51	; 81
     55e:	23 0e       	add	r2, r19
     560:	31 1c       	adc	r3, r1
			} else {
				unsigned int adcValue = adc_read_current(0); // Regular Current
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, 1); // Regular Current
				currentArray[(i-1)/2] = current;
     562:	c8 54       	subi	r28, 0x48	; 72
     564:	df 4f       	sbci	r29, 0xFF	; 255
     566:	a8 82       	st	Y, r10
     568:	c8 5b       	subi	r28, 0xB8	; 184
     56a:	d0 40       	sbci	r29, 0x00	; 0
     56c:	c7 54       	subi	r28, 0x47	; 71
     56e:	df 4f       	sbci	r29, 0xFF	; 255
     570:	b8 82       	st	Y, r11
     572:	c9 5b       	subi	r28, 0xB9	; 185
     574:	d0 40       	sbci	r29, 0x00	; 0
		for (int i=0;i<39;i++) {
			if (i%2 == 0) {
				unsigned int adcValue = adc_read_voltage();
				float adcVoltage = adc_calculation(adcValue);
				float voltage = voltage_real(adcVoltage, 0);
				voltageArray[i/2] = voltage;
     576:	ca 54       	subi	r28, 0x4A	; 74
     578:	df 4f       	sbci	r29, 0xFF	; 255
     57a:	28 82       	st	Y, r2
     57c:	c6 5b       	subi	r28, 0xB6	; 182
     57e:	d0 40       	sbci	r29, 0x00	; 0
     580:	c9 54       	subi	r28, 0x49	; 73
     582:	df 4f       	sbci	r29, 0xFF	; 255
     584:	38 82       	st	Y, r3
     586:	c7 5b       	subi	r28, 0xB7	; 183
     588:	d0 40       	sbci	r29, 0x00	; 0
     58a:	81 ea       	ldi	r24, 0xA1	; 161
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	8c 0f       	add	r24, r28
     590:	9d 1f       	adc	r25, r29
     592:	03 96       	adiw	r24, 0x03	; 3
     594:	cc 54       	subi	r28, 0x4C	; 76
     596:	df 4f       	sbci	r29, 0xFF	; 255
     598:	99 83       	std	Y+1, r25	; 0x01
     59a:	88 83       	st	Y, r24
     59c:	c4 5b       	subi	r28, 0xB4	; 180
     59e:	d0 40       	sbci	r29, 0x00	; 0
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
     5a0:	c7 55       	subi	r28, 0x57	; 87
     5a2:	df 4f       	sbci	r29, 0xFF	; 255
     5a4:	18 82       	st	Y, r1
     5a6:	c9 5a       	subi	r28, 0xA9	; 169
     5a8:	d0 40       	sbci	r29, 0x00	; 0
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	c6 54       	subi	r28, 0x46	; 70
     5ae:	df 4f       	sbci	r29, 0xFF	; 255
     5b0:	98 83       	st	Y, r25
     5b2:	ca 5b       	subi	r28, 0xBA	; 186
     5b4:	d0 40       	sbci	r29, 0x00	; 0
		uint8_t index = 0;
		
		//Reading from the ADC, calculating and converting
		float voltageArray[20];
		float currentArray[20];
		for (int i=0;i<39;i++) {
     5b6:	09 2d       	mov	r16, r9
     5b8:	18 2d       	mov	r17, r8
			if (i%2 == 0) {
     5ba:	00 fd       	sbrc	r16, 0
     5bc:	1b c0       	rjmp	.+54     	; 0x5f4 <main+0xd8>
				unsigned int adcValue = adc_read_voltage();
     5be:	0e 94 0e 02 	call	0x41c	; 0x41c <adc_read_voltage>
				float adcVoltage = adc_calculation(adcValue);
     5c2:	0e 94 4c 02 	call	0x498	; 0x498 <adc_calculation>
				float voltage = voltage_real(adcVoltage, 0);
     5c6:	49 2d       	mov	r20, r9
     5c8:	58 2d       	mov	r21, r8
     5ca:	0e 94 5e 02 	call	0x4bc	; 0x4bc <voltage_real>
				voltageArray[i/2] = voltage;
     5ce:	98 01       	movw	r18, r16
     5d0:	11 23       	and	r17, r17
     5d2:	14 f4       	brge	.+4      	; 0x5d8 <main+0xbc>
     5d4:	2f 5f       	subi	r18, 0xFF	; 255
     5d6:	3f 4f       	sbci	r19, 0xFF	; 255
     5d8:	f9 01       	movw	r30, r18
     5da:	f5 95       	asr	r31
     5dc:	e7 95       	ror	r30
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	e2 0d       	add	r30, r2
     5e8:	f3 1d       	adc	r31, r3
     5ea:	60 83       	st	Z, r22
     5ec:	71 83       	std	Z+1, r23	; 0x01
     5ee:	82 83       	std	Z+2, r24	; 0x02
     5f0:	93 83       	std	Z+3, r25	; 0x03
     5f2:	1e c0       	rjmp	.+60     	; 0x630 <main+0x114>
			} else {
				unsigned int adcValue = adc_read_current(0); // Regular Current
     5f4:	89 2d       	mov	r24, r9
     5f6:	98 2d       	mov	r25, r8
     5f8:	0e 94 26 02 	call	0x44c	; 0x44c <adc_read_current>
				float adcCurrent = adc_calculation(adcValue);
     5fc:	0e 94 4c 02 	call	0x498	; 0x498 <adc_calculation>
				float current = voltage_real(adcCurrent, 1); // Regular Current
     600:	41 e0       	ldi	r20, 0x01	; 1
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	0e 94 5e 02 	call	0x4bc	; 0x4bc <voltage_real>
     608:	98 01       	movw	r18, r16
     60a:	21 50       	subi	r18, 0x01	; 1
     60c:	31 09       	sbc	r19, r1
				currentArray[(i-1)/2] = current;
     60e:	a9 01       	movw	r20, r18
     610:	12 f4       	brpl	.+4      	; 0x616 <main+0xfa>
     612:	4f 5f       	subi	r20, 0xFF	; 255
     614:	5f 4f       	sbci	r21, 0xFF	; 255
     616:	fa 01       	movw	r30, r20
     618:	f5 95       	asr	r31
     61a:	e7 95       	ror	r30
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	ee 0f       	add	r30, r30
     622:	ff 1f       	adc	r31, r31
     624:	ea 0d       	add	r30, r10
     626:	fb 1d       	adc	r31, r11
     628:	60 83       	st	Z, r22
     62a:	71 83       	std	Z+1, r23	; 0x01
     62c:	82 83       	std	Z+2, r24	; 0x02
     62e:	93 83       	std	Z+3, r25	; 0x03
		uint8_t index = 0;
		
		//Reading from the ADC, calculating and converting
		float voltageArray[20];
		float currentArray[20];
		for (int i=0;i<39;i++) {
     630:	0f 5f       	subi	r16, 0xFF	; 255
     632:	1f 4f       	sbci	r17, 0xFF	; 255
     634:	07 32       	cpi	r16, 0x27	; 39
     636:	11 05       	cpc	r17, r1
     638:	09 f0       	breq	.+2      	; 0x63c <main+0x120>
     63a:	bf cf       	rjmp	.-130    	; 0x5ba <main+0x9e>
				currentArray[(i-1)/2] = current;
			}
		}
		float dataFloat = 0;

		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { dataFloat = calcPower(&voltageArray, &currentArray); } 
     63c:	c2 55       	subi	r28, 0x52	; 82
     63e:	df 4f       	sbci	r29, 0xFF	; 255
     640:	68 81       	ld	r22, Y
     642:	79 81       	ldd	r23, Y+1	; 0x01
     644:	8a 81       	ldd	r24, Y+2	; 0x02
     646:	9b 81       	ldd	r25, Y+3	; 0x03
     648:	ce 5a       	subi	r28, 0xAE	; 174
     64a:	d0 40       	sbci	r29, 0x00	; 0
     64c:	2a e0       	ldi	r18, 0x0A	; 10
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	0e 94 b3 08 	call	0x1166	; 0x1166 <__udivmodsi4>
     658:	c6 55       	subi	r28, 0x56	; 86
     65a:	df 4f       	sbci	r29, 0xFF	; 255
     65c:	68 83       	st	Y, r22
     65e:	79 83       	std	Y+1, r23	; 0x01
     660:	8a 83       	std	Y+2, r24	; 0x02
     662:	9b 83       	std	Y+3, r25	; 0x03
     664:	ca 5a       	subi	r28, 0xAA	; 170
     666:	d0 40       	sbci	r29, 0x00	; 0
     668:	2b 01       	movw	r4, r22
     66a:	3c 01       	movw	r6, r24
     66c:	64 30       	cpi	r22, 0x04	; 4
     66e:	71 05       	cpc	r23, r1
     670:	81 05       	cpc	r24, r1
     672:	91 05       	cpc	r25, r1
     674:	d8 f4       	brcc	.+54     	; 0x6ac <main+0x190>
     676:	c8 54       	subi	r28, 0x48	; 72
     678:	df 4f       	sbci	r29, 0xFF	; 255
     67a:	68 81       	ld	r22, Y
     67c:	c8 5b       	subi	r28, 0xB8	; 184
     67e:	d0 40       	sbci	r29, 0x00	; 0
     680:	c7 54       	subi	r28, 0x47	; 71
     682:	df 4f       	sbci	r29, 0xFF	; 255
     684:	78 81       	ld	r23, Y
     686:	c9 5b       	subi	r28, 0xB9	; 185
     688:	d0 40       	sbci	r29, 0x00	; 0
     68a:	ca 54       	subi	r28, 0x4A	; 74
     68c:	df 4f       	sbci	r29, 0xFF	; 255
     68e:	88 81       	ld	r24, Y
     690:	c6 5b       	subi	r28, 0xB6	; 182
     692:	d0 40       	sbci	r29, 0x00	; 0
     694:	c9 54       	subi	r28, 0x49	; 73
     696:	df 4f       	sbci	r29, 0xFF	; 255
     698:	98 81       	ld	r25, Y
     69a:	c7 5b       	subi	r28, 0xB7	; 183
     69c:	d0 40       	sbci	r29, 0x00	; 0
     69e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <calcPower>
     6a2:	f6 2f       	mov	r31, r22
     6a4:	e7 2f       	mov	r30, r23
     6a6:	a8 2f       	mov	r26, r24
     6a8:	b9 2f       	mov	r27, r25
     6aa:	3b c0       	rjmp	.+118    	; 0x722 <main+0x206>
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataFloat = calcVoltageRMS(&voltageArray); }
     6ac:	c6 55       	subi	r28, 0x56	; 86
     6ae:	df 4f       	sbci	r29, 0xFF	; 255
     6b0:	88 81       	ld	r24, Y
     6b2:	99 81       	ldd	r25, Y+1	; 0x01
     6b4:	aa 81       	ldd	r26, Y+2	; 0x02
     6b6:	bb 81       	ldd	r27, Y+3	; 0x03
     6b8:	ca 5a       	subi	r28, 0xAA	; 170
     6ba:	d0 40       	sbci	r29, 0x00	; 0
     6bc:	04 97       	sbiw	r24, 0x04	; 4
     6be:	a1 09       	sbc	r26, r1
     6c0:	b1 09       	sbc	r27, r1
     6c2:	03 97       	sbiw	r24, 0x03	; 3
     6c4:	a1 05       	cpc	r26, r1
     6c6:	b1 05       	cpc	r27, r1
     6c8:	88 f4       	brcc	.+34     	; 0x6ec <main+0x1d0>
     6ca:	ca 54       	subi	r28, 0x4A	; 74
     6cc:	df 4f       	sbci	r29, 0xFF	; 255
     6ce:	88 81       	ld	r24, Y
     6d0:	c6 5b       	subi	r28, 0xB6	; 182
     6d2:	d0 40       	sbci	r29, 0x00	; 0
     6d4:	c9 54       	subi	r28, 0x49	; 73
     6d6:	df 4f       	sbci	r29, 0xFF	; 255
     6d8:	98 81       	ld	r25, Y
     6da:	c7 5b       	subi	r28, 0xB7	; 183
     6dc:	d0 40       	sbci	r29, 0x00	; 0
     6de:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <calcVoltageRMS>
     6e2:	f6 2f       	mov	r31, r22
     6e4:	e7 2f       	mov	r30, r23
     6e6:	a8 2f       	mov	r26, r24
     6e8:	b9 2f       	mov	r27, r25
     6ea:	1b c0       	rjmp	.+54     	; 0x722 <main+0x206>
		else if (displayCount%10 > 6) { dataFloat = calcCurrentRMS(&currentArray); }
     6ec:	b7 e0       	ldi	r27, 0x07	; 7
     6ee:	4b 16       	cp	r4, r27
     6f0:	51 04       	cpc	r5, r1
     6f2:	61 04       	cpc	r6, r1
     6f4:	71 04       	cpc	r7, r1
     6f6:	88 f0       	brcs	.+34     	; 0x71a <main+0x1fe>
     6f8:	c8 54       	subi	r28, 0x48	; 72
     6fa:	df 4f       	sbci	r29, 0xFF	; 255
     6fc:	88 81       	ld	r24, Y
     6fe:	c8 5b       	subi	r28, 0xB8	; 184
     700:	d0 40       	sbci	r29, 0x00	; 0
     702:	c7 54       	subi	r28, 0x47	; 71
     704:	df 4f       	sbci	r29, 0xFF	; 255
     706:	98 81       	ld	r25, Y
     708:	c9 5b       	subi	r28, 0xB9	; 185
     70a:	d0 40       	sbci	r29, 0x00	; 0
     70c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <calcCurrentRMS>
     710:	f6 2f       	mov	r31, r22
     712:	e7 2f       	mov	r30, r23
     714:	a8 2f       	mov	r26, r24
     716:	b9 2f       	mov	r27, r25
     718:	04 c0       	rjmp	.+8      	; 0x722 <main+0x206>
				float adcCurrent = adc_calculation(adcValue);
				float current = voltage_real(adcCurrent, 1); // Regular Current
				currentArray[(i-1)/2] = current;
			}
		}
		float dataFloat = 0;
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	e0 e0       	ldi	r30, 0x00	; 0
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0

		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { dataFloat = calcPower(&voltageArray, &currentArray); } 
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataFloat = calcVoltageRMS(&voltageArray); }
		else if (displayCount%10 > 6) { dataFloat = calcCurrentRMS(&currentArray); }

		dataFloat = roundf(dataFloat * 100) / 100;
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	48 ec       	ldi	r20, 0xC8	; 200
     728:	52 e4       	ldi	r21, 0x42	; 66
     72a:	6f 2f       	mov	r22, r31
     72c:	7e 2f       	mov	r23, r30
     72e:	8a 2f       	mov	r24, r26
     730:	9b 2f       	mov	r25, r27
     732:	0e 94 82 06 	call	0xd04	; 0xd04 <__mulsf3>
     736:	0e 94 3f 07 	call	0xe7e	; 0xe7e <round>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	48 ec       	ldi	r20, 0xC8	; 200
     740:	52 e4       	ldi	r21, 0x42	; 66
     742:	0e 94 28 05 	call	0xa50	; 0xa50 <__divsf3>
     746:	cb 55       	subi	r28, 0x5B	; 91
     748:	df 4f       	sbci	r29, 0xFF	; 255
     74a:	68 83       	st	Y, r22
     74c:	79 83       	std	Y+1, r23	; 0x01
     74e:	8a 83       	std	Y+2, r24	; 0x02
     750:	9b 83       	std	Y+3, r25	; 0x03
     752:	c5 5a       	subi	r28, 0xA5	; 165
     754:	d0 40       	sbci	r29, 0x00	; 0
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
     756:	0e 94 a6 00 	call	0x14c	; 0x14c <find_decimal>
     75a:	6c 01       	movw	r12, r24
     75c:	dd 24       	eor	r13, r13
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
     75e:	e2 e0       	ldi	r30, 0x02	; 2
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	ec 19       	sub	r30, r12
     764:	fd 09       	sbc	r31, r13
     766:	ce 54       	subi	r28, 0x4E	; 78
     768:	df 4f       	sbci	r29, 0xFF	; 255
     76a:	f9 83       	std	Y+1, r31	; 0x01
     76c:	e8 83       	st	Y, r30
     76e:	c2 5b       	subi	r28, 0xB2	; 178
     770:	d0 40       	sbci	r29, 0x00	; 0
     772:	bf 01       	movw	r22, r30
     774:	ff 0f       	add	r31, r31
     776:	88 0b       	sbc	r24, r24
     778:	99 0b       	sbc	r25, r25
     77a:	0e 94 d2 05 	call	0xba4	; 0xba4 <__floatsisf>
     77e:	9b 01       	movw	r18, r22
     780:	ac 01       	movw	r20, r24
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	80 e2       	ldi	r24, 0x20	; 32
     788:	91 e4       	ldi	r25, 0x41	; 65
     78a:	0e 94 ef 06 	call	0xdde	; 0xdde <pow>
     78e:	cb 55       	subi	r28, 0x5B	; 91
     790:	df 4f       	sbci	r29, 0xFF	; 255
     792:	28 81       	ld	r18, Y
     794:	39 81       	ldd	r19, Y+1	; 0x01
     796:	4a 81       	ldd	r20, Y+2	; 0x02
     798:	5b 81       	ldd	r21, Y+3	; 0x03
     79a:	c5 5a       	subi	r28, 0xA5	; 165
     79c:	d0 40       	sbci	r29, 0x00	; 0
     79e:	0e 94 82 06 	call	0xd04	; 0xd04 <__mulsf3>
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	5f e3       	ldi	r21, 0x3F	; 63
     7aa:	0e 94 b7 04 	call	0x96e	; 0x96e <__addsf3>
     7ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__fixsfsi>
     7b2:	7b 01       	movw	r14, r22
     7b4:	cc 54       	subi	r28, 0x4C	; 76
     7b6:	df 4f       	sbci	r29, 0xFF	; 255
     7b8:	28 81       	ld	r18, Y
     7ba:	39 81       	ldd	r19, Y+1	; 0x01
     7bc:	c4 5b       	subi	r28, 0xB4	; 180
     7be:	d0 40       	sbci	r29, 0x00	; 0
     7c0:	cb 55       	subi	r28, 0x5B	; 91
     7c2:	df 4f       	sbci	r29, 0xFF	; 255
     7c4:	39 83       	std	Y+1, r19	; 0x01
     7c6:	28 83       	st	Y, r18
     7c8:	c5 5a       	subi	r28, 0xA5	; 165
     7ca:	d0 40       	sbci	r29, 0x00	; 0
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     7cc:	02 e0       	ldi	r16, 0x02	; 2
     7ce:	10 e0       	ldi	r17, 0x00	; 0
			if ((decimalPos == i) && ((2-decimalPos) > 0)) {
     7d0:	0c 15       	cp	r16, r12
     7d2:	1d 05       	cpc	r17, r13
     7d4:	a1 f4       	brne	.+40     	; 0x7fe <main+0x2e2>
     7d6:	c6 54       	subi	r28, 0x46	; 70
     7d8:	df 4f       	sbci	r29, 0xFF	; 255
     7da:	48 81       	ld	r20, Y
     7dc:	ca 5b       	subi	r28, 0xBA	; 186
     7de:	d0 40       	sbci	r29, 0x00	; 0
     7e0:	ce 54       	subi	r28, 0x4E	; 78
     7e2:	df 4f       	sbci	r29, 0xFF	; 255
     7e4:	88 81       	ld	r24, Y
     7e6:	99 81       	ldd	r25, Y+1	; 0x01
     7e8:	c2 5b       	subi	r28, 0xB2	; 178
     7ea:	d0 40       	sbci	r29, 0x00	; 0
     7ec:	18 16       	cp	r1, r24
     7ee:	19 06       	cpc	r1, r25
     7f0:	5c f0       	brlt	.+22     	; 0x808 <main+0x2ec>
     7f2:	c7 55       	subi	r28, 0x57	; 87
     7f4:	df 4f       	sbci	r29, 0xFF	; 255
     7f6:	48 81       	ld	r20, Y
     7f8:	c9 5a       	subi	r28, 0xA9	; 169
     7fa:	d0 40       	sbci	r29, 0x00	; 0
     7fc:	05 c0       	rjmp	.+10     	; 0x808 <main+0x2ec>
				hasDecimal = 1;
			} else {
				hasDecimal = 0;
     7fe:	c7 55       	subi	r28, 0x57	; 87
     800:	df 4f       	sbci	r29, 0xFF	; 255
     802:	48 81       	ld	r20, Y
     804:	c9 5a       	subi	r28, 0xA9	; 169
     806:	d0 40       	sbci	r29, 0x00	; 0
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
     808:	97 01       	movw	r18, r14
     80a:	ad ec       	ldi	r26, 0xCD	; 205
     80c:	bc ec       	ldi	r27, 0xCC	; 204
     80e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__umulhisi3>
     812:	96 95       	lsr	r25
     814:	87 95       	ror	r24
     816:	96 95       	lsr	r25
     818:	87 95       	ror	r24
     81a:	96 95       	lsr	r25
     81c:	87 95       	ror	r24
     81e:	9c 01       	movw	r18, r24
     820:	22 0f       	add	r18, r18
     822:	33 1f       	adc	r19, r19
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	82 0f       	add	r24, r18
     832:	93 1f       	adc	r25, r19
     834:	60 2f       	mov	r22, r16
     836:	ae 2d       	mov	r26, r14
     838:	a8 1b       	sub	r26, r24
     83a:	8a 2f       	mov	r24, r26
     83c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <wololo>
     840:	cb 55       	subi	r28, 0x5B	; 91
     842:	df 4f       	sbci	r29, 0xFF	; 255
     844:	e8 81       	ld	r30, Y
     846:	f9 81       	ldd	r31, Y+1	; 0x01
     848:	c5 5a       	subi	r28, 0xA5	; 165
     84a:	d0 40       	sbci	r29, 0x00	; 0
     84c:	82 93       	st	-Z, r24
     84e:	cb 55       	subi	r28, 0x5B	; 91
     850:	df 4f       	sbci	r29, 0xFF	; 255
     852:	f9 83       	std	Y+1, r31	; 0x01
     854:	e8 83       	st	Y, r30
     856:	c5 5a       	subi	r28, 0xA5	; 165
     858:	d0 40       	sbci	r29, 0x00	; 0
			dataInt = dataInt/10;
     85a:	97 01       	movw	r18, r14
     85c:	ad ec       	ldi	r26, 0xCD	; 205
     85e:	bc ec       	ldi	r27, 0xCC	; 204
     860:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__umulhisi3>
     864:	7c 01       	movw	r14, r24
     866:	f6 94       	lsr	r15
     868:	e7 94       	ror	r14
     86a:	f6 94       	lsr	r15
     86c:	e7 94       	ror	r14
     86e:	f6 94       	lsr	r15
     870:	e7 94       	ror	r14
		dataFloat = roundf(dataFloat * 100) / 100;
		uint8_t decimalPos = find_decimal(dataFloat); //Find the decimal place
		unsigned int dataInt = (int)(dataFloat * pow(10, 2-decimalPos) + 0.5); //Convert to decimal for array conversion
		
		//Splits the integer into an array of 4 integers, each represents the value of a digit, the position of that digit, and if it has a decimal place
		for (int i=2;i>=0;i--) {
     872:	01 50       	subi	r16, 0x01	; 1
     874:	11 09       	sbc	r17, r1
     876:	08 f0       	brcs	.+2      	; 0x87a <main+0x35e>
     878:	ab cf       	rjmp	.-170    	; 0x7d0 <main+0x2b4>
				hasDecimal = 0;
			}
			dataArray[i] = wololo(dataInt%10, i, hasDecimal);
			dataInt = dataInt/10;
		}
		if ((displayCount%10 < 4) && (displayCount%10 >= 0)) { dataArray[3] = 15; }
     87a:	24 e0       	ldi	r18, 0x04	; 4
     87c:	42 16       	cp	r4, r18
     87e:	51 04       	cpc	r5, r1
     880:	61 04       	cpc	r6, r1
     882:	71 04       	cpc	r7, r1
     884:	38 f4       	brcc	.+14     	; 0x894 <main+0x378>
     886:	8f e0       	ldi	r24, 0x0F	; 15
     888:	cc 55       	subi	r28, 0x5C	; 92
     88a:	df 4f       	sbci	r29, 0xFF	; 255
     88c:	88 83       	st	Y, r24
     88e:	c4 5a       	subi	r28, 0xA4	; 164
     890:	d0 40       	sbci	r29, 0x00	; 0
     892:	22 c0       	rjmp	.+68     	; 0x8d8 <main+0x3bc>
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataArray[3] = 14; }
     894:	c6 55       	subi	r28, 0x56	; 86
     896:	df 4f       	sbci	r29, 0xFF	; 255
     898:	88 81       	ld	r24, Y
     89a:	99 81       	ldd	r25, Y+1	; 0x01
     89c:	aa 81       	ldd	r26, Y+2	; 0x02
     89e:	bb 81       	ldd	r27, Y+3	; 0x03
     8a0:	ca 5a       	subi	r28, 0xAA	; 170
     8a2:	d0 40       	sbci	r29, 0x00	; 0
     8a4:	04 97       	sbiw	r24, 0x04	; 4
     8a6:	a1 09       	sbc	r26, r1
     8a8:	b1 09       	sbc	r27, r1
     8aa:	03 97       	sbiw	r24, 0x03	; 3
     8ac:	a1 05       	cpc	r26, r1
     8ae:	b1 05       	cpc	r27, r1
     8b0:	38 f4       	brcc	.+14     	; 0x8c0 <main+0x3a4>
     8b2:	8e e0       	ldi	r24, 0x0E	; 14
     8b4:	cc 55       	subi	r28, 0x5C	; 92
     8b6:	df 4f       	sbci	r29, 0xFF	; 255
     8b8:	88 83       	st	Y, r24
     8ba:	c4 5a       	subi	r28, 0xA4	; 164
     8bc:	d0 40       	sbci	r29, 0x00	; 0
     8be:	0c c0       	rjmp	.+24     	; 0x8d8 <main+0x3bc>
		else if (displayCount%10 > 6) { dataArray[3] = 13; }
     8c0:	37 e0       	ldi	r19, 0x07	; 7
     8c2:	43 16       	cp	r4, r19
     8c4:	51 04       	cpc	r5, r1
     8c6:	61 04       	cpc	r6, r1
     8c8:	71 04       	cpc	r7, r1
     8ca:	30 f0       	brcs	.+12     	; 0x8d8 <main+0x3bc>
     8cc:	8d e0       	ldi	r24, 0x0D	; 13
     8ce:	cc 55       	subi	r28, 0x5C	; 92
     8d0:	df 4f       	sbci	r29, 0xFF	; 255
     8d2:	88 83       	st	Y, r24
     8d4:	c4 5a       	subi	r28, 0xA4	; 164
     8d6:	d0 40       	sbci	r29, 0x00	; 0

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
			uart_transmit(data);
     8d8:	cf 55       	subi	r28, 0x5F	; 95
     8da:	df 4f       	sbci	r29, 0xFF	; 255
     8dc:	88 81       	ld	r24, Y
     8de:	c1 5a       	subi	r28, 0xA1	; 161
     8e0:	d0 40       	sbci	r29, 0x00	; 0
     8e2:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e6:	8f ed       	ldi	r24, 0xDF	; 223
     8e8:	9e e2       	ldi	r25, 0x2E	; 46
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <main+0x3ce>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <main+0x3d4>
     8f0:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
     8f2:	11 e0       	ldi	r17, 0x01	; 1
     8f4:	17 c0       	rjmp	.+46     	; 0x924 <__stack+0x25>
		else if ((displayCount%10 < 7) && (displayCount%10 > 3)) { dataArray[3] = 14; }
		else if (displayCount%10 > 6) { dataArray[3] = 13; }

		//Transmits data until we get TCNT0 = 191 fifty times 
		while (1) {
			uint8_t data = dataArray[index];	//Get the integer to send	
     8f6:	e1 ea       	ldi	r30, 0xA1	; 161
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	ec 0f       	add	r30, r28
     8fc:	fd 1f       	adc	r31, r29
     8fe:	e1 0f       	add	r30, r17
     900:	f1 1d       	adc	r31, r1
			uart_transmit(data);
     902:	80 81       	ld	r24, Z
     904:	0e 94 99 00 	call	0x132	; 0x132 <uart_transmit>
     908:	af ed       	ldi	r26, 0xDF	; 223
     90a:	be e2       	ldi	r27, 0x2E	; 46
     90c:	11 97       	sbiw	r26, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <__stack+0xd>
     910:	00 c0       	rjmp	.+0      	; 0x912 <__stack+0x13>
     912:	00 00       	nop
			_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
			index++;
     914:	1f 5f       	subi	r17, 0xFF	; 255
			//Select next integer to send
			if (index == 4) {
     916:	14 30       	cpi	r17, 0x04	; 4
     918:	29 f4       	brne	.+10     	; 0x924 <__stack+0x25>
				index = 0;
     91a:	c7 55       	subi	r28, 0x57	; 87
     91c:	df 4f       	sbci	r29, 0xFF	; 255
     91e:	18 81       	ld	r17, Y
     920:	c9 5a       	subi	r28, 0xA9	; 169
     922:	d0 40       	sbci	r29, 0x00	; 0
			}
			//Polling mechanism
			if(TCNT0>=156) {
     924:	86 b5       	in	r24, 0x26	; 38
     926:	8c 39       	cpi	r24, 0x9C	; 156
     928:	30 f3       	brcs	.-52     	; 0x8f6 <main+0x3da>
				TCNT0 = 0;
     92a:	16 bc       	out	0x26, r1	; 38
				if (counter == 50) {
     92c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     930:	82 33       	cpi	r24, 0x32	; 50
     932:	b1 f4       	brne	.+44     	; 0x960 <__stack+0x61>
					counter = 0;
     934:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				} else {
					counter++;
				}
			}
		}
		displayCount++;
     938:	c2 55       	subi	r28, 0x52	; 82
     93a:	df 4f       	sbci	r29, 0xFF	; 255
     93c:	88 81       	ld	r24, Y
     93e:	99 81       	ldd	r25, Y+1	; 0x01
     940:	aa 81       	ldd	r26, Y+2	; 0x02
     942:	bb 81       	ldd	r27, Y+3	; 0x03
     944:	ce 5a       	subi	r28, 0xAE	; 174
     946:	d0 40       	sbci	r29, 0x00	; 0
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	a1 1d       	adc	r26, r1
     94c:	b1 1d       	adc	r27, r1
     94e:	c2 55       	subi	r28, 0x52	; 82
     950:	df 4f       	sbci	r29, 0xFF	; 255
     952:	88 83       	st	Y, r24
     954:	99 83       	std	Y+1, r25	; 0x01
     956:	aa 83       	std	Y+2, r26	; 0x02
     958:	bb 83       	std	Y+3, r27	; 0x03
     95a:	ce 5a       	subi	r28, 0xAE	; 174
     95c:	d0 40       	sbci	r29, 0x00	; 0
	}
     95e:	2b ce       	rjmp	.-938    	; 0x5b6 <main+0x9a>
				TCNT0 = 0;
				if (counter == 50) {
					counter = 0;
					break;
				} else {
					counter++;
     960:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     96a:	c5 cf       	rjmp	.-118    	; 0x8f6 <main+0x3da>

0000096c <__subsf3>:
     96c:	50 58       	subi	r21, 0x80	; 128

0000096e <__addsf3>:
     96e:	bb 27       	eor	r27, r27
     970:	aa 27       	eor	r26, r26
     972:	0e 94 ce 04 	call	0x99c	; 0x99c <__addsf3x>
     976:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_round>
     97a:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fp_pscA>
     97e:	38 f0       	brcs	.+14     	; 0x98e <__addsf3+0x20>
     980:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_pscB>
     984:	20 f0       	brcs	.+8      	; 0x98e <__addsf3+0x20>
     986:	39 f4       	brne	.+14     	; 0x996 <__addsf3+0x28>
     988:	9f 3f       	cpi	r25, 0xFF	; 255
     98a:	19 f4       	brne	.+6      	; 0x992 <__addsf3+0x24>
     98c:	26 f4       	brtc	.+8      	; 0x996 <__addsf3+0x28>
     98e:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_nan>
     992:	0e f4       	brtc	.+2      	; 0x996 <__addsf3+0x28>
     994:	e0 95       	com	r30
     996:	e7 fb       	bst	r30, 7
     998:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_inf>

0000099c <__addsf3x>:
     99c:	e9 2f       	mov	r30, r25
     99e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_split3>
     9a2:	58 f3       	brcs	.-42     	; 0x97a <__addsf3+0xc>
     9a4:	ba 17       	cp	r27, r26
     9a6:	62 07       	cpc	r22, r18
     9a8:	73 07       	cpc	r23, r19
     9aa:	84 07       	cpc	r24, r20
     9ac:	95 07       	cpc	r25, r21
     9ae:	20 f0       	brcs	.+8      	; 0x9b8 <__addsf3x+0x1c>
     9b0:	79 f4       	brne	.+30     	; 0x9d0 <__addsf3x+0x34>
     9b2:	a6 f5       	brtc	.+104    	; 0xa1c <__addsf3x+0x80>
     9b4:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_zero>
     9b8:	0e f4       	brtc	.+2      	; 0x9bc <__addsf3x+0x20>
     9ba:	e0 95       	com	r30
     9bc:	0b 2e       	mov	r0, r27
     9be:	ba 2f       	mov	r27, r26
     9c0:	a0 2d       	mov	r26, r0
     9c2:	0b 01       	movw	r0, r22
     9c4:	b9 01       	movw	r22, r18
     9c6:	90 01       	movw	r18, r0
     9c8:	0c 01       	movw	r0, r24
     9ca:	ca 01       	movw	r24, r20
     9cc:	a0 01       	movw	r20, r0
     9ce:	11 24       	eor	r1, r1
     9d0:	ff 27       	eor	r31, r31
     9d2:	59 1b       	sub	r21, r25
     9d4:	99 f0       	breq	.+38     	; 0x9fc <__addsf3x+0x60>
     9d6:	59 3f       	cpi	r21, 0xF9	; 249
     9d8:	50 f4       	brcc	.+20     	; 0x9ee <__addsf3x+0x52>
     9da:	50 3e       	cpi	r21, 0xE0	; 224
     9dc:	68 f1       	brcs	.+90     	; 0xa38 <__addsf3x+0x9c>
     9de:	1a 16       	cp	r1, r26
     9e0:	f0 40       	sbci	r31, 0x00	; 0
     9e2:	a2 2f       	mov	r26, r18
     9e4:	23 2f       	mov	r18, r19
     9e6:	34 2f       	mov	r19, r20
     9e8:	44 27       	eor	r20, r20
     9ea:	58 5f       	subi	r21, 0xF8	; 248
     9ec:	f3 cf       	rjmp	.-26     	; 0x9d4 <__addsf3x+0x38>
     9ee:	46 95       	lsr	r20
     9f0:	37 95       	ror	r19
     9f2:	27 95       	ror	r18
     9f4:	a7 95       	ror	r26
     9f6:	f0 40       	sbci	r31, 0x00	; 0
     9f8:	53 95       	inc	r21
     9fa:	c9 f7       	brne	.-14     	; 0x9ee <__addsf3x+0x52>
     9fc:	7e f4       	brtc	.+30     	; 0xa1c <__addsf3x+0x80>
     9fe:	1f 16       	cp	r1, r31
     a00:	ba 0b       	sbc	r27, r26
     a02:	62 0b       	sbc	r22, r18
     a04:	73 0b       	sbc	r23, r19
     a06:	84 0b       	sbc	r24, r20
     a08:	ba f0       	brmi	.+46     	; 0xa38 <__addsf3x+0x9c>
     a0a:	91 50       	subi	r25, 0x01	; 1
     a0c:	a1 f0       	breq	.+40     	; 0xa36 <__addsf3x+0x9a>
     a0e:	ff 0f       	add	r31, r31
     a10:	bb 1f       	adc	r27, r27
     a12:	66 1f       	adc	r22, r22
     a14:	77 1f       	adc	r23, r23
     a16:	88 1f       	adc	r24, r24
     a18:	c2 f7       	brpl	.-16     	; 0xa0a <__addsf3x+0x6e>
     a1a:	0e c0       	rjmp	.+28     	; 0xa38 <__addsf3x+0x9c>
     a1c:	ba 0f       	add	r27, r26
     a1e:	62 1f       	adc	r22, r18
     a20:	73 1f       	adc	r23, r19
     a22:	84 1f       	adc	r24, r20
     a24:	48 f4       	brcc	.+18     	; 0xa38 <__addsf3x+0x9c>
     a26:	87 95       	ror	r24
     a28:	77 95       	ror	r23
     a2a:	67 95       	ror	r22
     a2c:	b7 95       	ror	r27
     a2e:	f7 95       	ror	r31
     a30:	9e 3f       	cpi	r25, 0xFE	; 254
     a32:	08 f0       	brcs	.+2      	; 0xa36 <__addsf3x+0x9a>
     a34:	b0 cf       	rjmp	.-160    	; 0x996 <__addsf3+0x28>
     a36:	93 95       	inc	r25
     a38:	88 0f       	add	r24, r24
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <__addsf3x+0xa2>
     a3c:	99 27       	eor	r25, r25
     a3e:	ee 0f       	add	r30, r30
     a40:	97 95       	ror	r25
     a42:	87 95       	ror	r24
     a44:	08 95       	ret

00000a46 <__cmpsf2>:
     a46:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fp_cmp>
     a4a:	08 f4       	brcc	.+2      	; 0xa4e <__cmpsf2+0x8>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	08 95       	ret

00000a50 <__divsf3>:
     a50:	0e 94 3c 05 	call	0xa78	; 0xa78 <__divsf3x>
     a54:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_round>
     a58:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_pscB>
     a5c:	58 f0       	brcs	.+22     	; 0xa74 <__divsf3+0x24>
     a5e:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fp_pscA>
     a62:	40 f0       	brcs	.+16     	; 0xa74 <__divsf3+0x24>
     a64:	29 f4       	brne	.+10     	; 0xa70 <__divsf3+0x20>
     a66:	5f 3f       	cpi	r21, 0xFF	; 255
     a68:	29 f0       	breq	.+10     	; 0xa74 <__divsf3+0x24>
     a6a:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_inf>
     a6e:	51 11       	cpse	r21, r1
     a70:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_szero>
     a74:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_nan>

00000a78 <__divsf3x>:
     a78:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_split3>
     a7c:	68 f3       	brcs	.-38     	; 0xa58 <__divsf3+0x8>

00000a7e <__divsf3_pse>:
     a7e:	99 23       	and	r25, r25
     a80:	b1 f3       	breq	.-20     	; 0xa6e <__divsf3+0x1e>
     a82:	55 23       	and	r21, r21
     a84:	91 f3       	breq	.-28     	; 0xa6a <__divsf3+0x1a>
     a86:	95 1b       	sub	r25, r21
     a88:	55 0b       	sbc	r21, r21
     a8a:	bb 27       	eor	r27, r27
     a8c:	aa 27       	eor	r26, r26
     a8e:	62 17       	cp	r22, r18
     a90:	73 07       	cpc	r23, r19
     a92:	84 07       	cpc	r24, r20
     a94:	38 f0       	brcs	.+14     	; 0xaa4 <__divsf3_pse+0x26>
     a96:	9f 5f       	subi	r25, 0xFF	; 255
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	22 0f       	add	r18, r18
     a9c:	33 1f       	adc	r19, r19
     a9e:	44 1f       	adc	r20, r20
     aa0:	aa 1f       	adc	r26, r26
     aa2:	a9 f3       	breq	.-22     	; 0xa8e <__divsf3_pse+0x10>
     aa4:	35 d0       	rcall	.+106    	; 0xb10 <__divsf3_pse+0x92>
     aa6:	0e 2e       	mov	r0, r30
     aa8:	3a f0       	brmi	.+14     	; 0xab8 <__divsf3_pse+0x3a>
     aaa:	e0 e8       	ldi	r30, 0x80	; 128
     aac:	32 d0       	rcall	.+100    	; 0xb12 <__divsf3_pse+0x94>
     aae:	91 50       	subi	r25, 0x01	; 1
     ab0:	50 40       	sbci	r21, 0x00	; 0
     ab2:	e6 95       	lsr	r30
     ab4:	00 1c       	adc	r0, r0
     ab6:	ca f7       	brpl	.-14     	; 0xaaa <__divsf3_pse+0x2c>
     ab8:	2b d0       	rcall	.+86     	; 0xb10 <__divsf3_pse+0x92>
     aba:	fe 2f       	mov	r31, r30
     abc:	29 d0       	rcall	.+82     	; 0xb10 <__divsf3_pse+0x92>
     abe:	66 0f       	add	r22, r22
     ac0:	77 1f       	adc	r23, r23
     ac2:	88 1f       	adc	r24, r24
     ac4:	bb 1f       	adc	r27, r27
     ac6:	26 17       	cp	r18, r22
     ac8:	37 07       	cpc	r19, r23
     aca:	48 07       	cpc	r20, r24
     acc:	ab 07       	cpc	r26, r27
     ace:	b0 e8       	ldi	r27, 0x80	; 128
     ad0:	09 f0       	breq	.+2      	; 0xad4 <__divsf3_pse+0x56>
     ad2:	bb 0b       	sbc	r27, r27
     ad4:	80 2d       	mov	r24, r0
     ad6:	bf 01       	movw	r22, r30
     ad8:	ff 27       	eor	r31, r31
     ada:	93 58       	subi	r25, 0x83	; 131
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	3a f0       	brmi	.+14     	; 0xaee <__divsf3_pse+0x70>
     ae0:	9e 3f       	cpi	r25, 0xFE	; 254
     ae2:	51 05       	cpc	r21, r1
     ae4:	78 f0       	brcs	.+30     	; 0xb04 <__divsf3_pse+0x86>
     ae6:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_inf>
     aea:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_szero>
     aee:	5f 3f       	cpi	r21, 0xFF	; 255
     af0:	e4 f3       	brlt	.-8      	; 0xaea <__divsf3_pse+0x6c>
     af2:	98 3e       	cpi	r25, 0xE8	; 232
     af4:	d4 f3       	brlt	.-12     	; 0xaea <__divsf3_pse+0x6c>
     af6:	86 95       	lsr	r24
     af8:	77 95       	ror	r23
     afa:	67 95       	ror	r22
     afc:	b7 95       	ror	r27
     afe:	f7 95       	ror	r31
     b00:	9f 5f       	subi	r25, 0xFF	; 255
     b02:	c9 f7       	brne	.-14     	; 0xaf6 <__divsf3_pse+0x78>
     b04:	88 0f       	add	r24, r24
     b06:	91 1d       	adc	r25, r1
     b08:	96 95       	lsr	r25
     b0a:	87 95       	ror	r24
     b0c:	97 f9       	bld	r25, 7
     b0e:	08 95       	ret
     b10:	e1 e0       	ldi	r30, 0x01	; 1
     b12:	66 0f       	add	r22, r22
     b14:	77 1f       	adc	r23, r23
     b16:	88 1f       	adc	r24, r24
     b18:	bb 1f       	adc	r27, r27
     b1a:	62 17       	cp	r22, r18
     b1c:	73 07       	cpc	r23, r19
     b1e:	84 07       	cpc	r24, r20
     b20:	ba 07       	cpc	r27, r26
     b22:	20 f0       	brcs	.+8      	; 0xb2c <__divsf3_pse+0xae>
     b24:	62 1b       	sub	r22, r18
     b26:	73 0b       	sbc	r23, r19
     b28:	84 0b       	sbc	r24, r20
     b2a:	ba 0b       	sbc	r27, r26
     b2c:	ee 1f       	adc	r30, r30
     b2e:	88 f7       	brcc	.-30     	; 0xb12 <__divsf3_pse+0x94>
     b30:	e0 95       	com	r30
     b32:	08 95       	ret

00000b34 <__fixsfsi>:
     b34:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fixunssfsi>
     b38:	68 94       	set
     b3a:	b1 11       	cpse	r27, r1
     b3c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_szero>
     b40:	08 95       	ret

00000b42 <__fixunssfsi>:
     b42:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fp_splitA>
     b46:	88 f0       	brcs	.+34     	; 0xb6a <__fixunssfsi+0x28>
     b48:	9f 57       	subi	r25, 0x7F	; 127
     b4a:	98 f0       	brcs	.+38     	; 0xb72 <__fixunssfsi+0x30>
     b4c:	b9 2f       	mov	r27, r25
     b4e:	99 27       	eor	r25, r25
     b50:	b7 51       	subi	r27, 0x17	; 23
     b52:	b0 f0       	brcs	.+44     	; 0xb80 <__fixunssfsi+0x3e>
     b54:	e1 f0       	breq	.+56     	; 0xb8e <__fixunssfsi+0x4c>
     b56:	66 0f       	add	r22, r22
     b58:	77 1f       	adc	r23, r23
     b5a:	88 1f       	adc	r24, r24
     b5c:	99 1f       	adc	r25, r25
     b5e:	1a f0       	brmi	.+6      	; 0xb66 <__fixunssfsi+0x24>
     b60:	ba 95       	dec	r27
     b62:	c9 f7       	brne	.-14     	; 0xb56 <__fixunssfsi+0x14>
     b64:	14 c0       	rjmp	.+40     	; 0xb8e <__fixunssfsi+0x4c>
     b66:	b1 30       	cpi	r27, 0x01	; 1
     b68:	91 f0       	breq	.+36     	; 0xb8e <__fixunssfsi+0x4c>
     b6a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__fp_zero>
     b6e:	b1 e0       	ldi	r27, 0x01	; 1
     b70:	08 95       	ret
     b72:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_zero>
     b76:	67 2f       	mov	r22, r23
     b78:	78 2f       	mov	r23, r24
     b7a:	88 27       	eor	r24, r24
     b7c:	b8 5f       	subi	r27, 0xF8	; 248
     b7e:	39 f0       	breq	.+14     	; 0xb8e <__fixunssfsi+0x4c>
     b80:	b9 3f       	cpi	r27, 0xF9	; 249
     b82:	cc f3       	brlt	.-14     	; 0xb76 <__fixunssfsi+0x34>
     b84:	86 95       	lsr	r24
     b86:	77 95       	ror	r23
     b88:	67 95       	ror	r22
     b8a:	b3 95       	inc	r27
     b8c:	d9 f7       	brne	.-10     	; 0xb84 <__fixunssfsi+0x42>
     b8e:	3e f4       	brtc	.+14     	; 0xb9e <__fixunssfsi+0x5c>
     b90:	90 95       	com	r25
     b92:	80 95       	com	r24
     b94:	70 95       	com	r23
     b96:	61 95       	neg	r22
     b98:	7f 4f       	sbci	r23, 0xFF	; 255
     b9a:	8f 4f       	sbci	r24, 0xFF	; 255
     b9c:	9f 4f       	sbci	r25, 0xFF	; 255
     b9e:	08 95       	ret

00000ba0 <__floatunsisf>:
     ba0:	e8 94       	clt
     ba2:	09 c0       	rjmp	.+18     	; 0xbb6 <__floatsisf+0x12>

00000ba4 <__floatsisf>:
     ba4:	97 fb       	bst	r25, 7
     ba6:	3e f4       	brtc	.+14     	; 0xbb6 <__floatsisf+0x12>
     ba8:	90 95       	com	r25
     baa:	80 95       	com	r24
     bac:	70 95       	com	r23
     bae:	61 95       	neg	r22
     bb0:	7f 4f       	sbci	r23, 0xFF	; 255
     bb2:	8f 4f       	sbci	r24, 0xFF	; 255
     bb4:	9f 4f       	sbci	r25, 0xFF	; 255
     bb6:	99 23       	and	r25, r25
     bb8:	a9 f0       	breq	.+42     	; 0xbe4 <__floatsisf+0x40>
     bba:	f9 2f       	mov	r31, r25
     bbc:	96 e9       	ldi	r25, 0x96	; 150
     bbe:	bb 27       	eor	r27, r27
     bc0:	93 95       	inc	r25
     bc2:	f6 95       	lsr	r31
     bc4:	87 95       	ror	r24
     bc6:	77 95       	ror	r23
     bc8:	67 95       	ror	r22
     bca:	b7 95       	ror	r27
     bcc:	f1 11       	cpse	r31, r1
     bce:	f8 cf       	rjmp	.-16     	; 0xbc0 <__floatsisf+0x1c>
     bd0:	fa f4       	brpl	.+62     	; 0xc10 <__floatsisf+0x6c>
     bd2:	bb 0f       	add	r27, r27
     bd4:	11 f4       	brne	.+4      	; 0xbda <__floatsisf+0x36>
     bd6:	60 ff       	sbrs	r22, 0
     bd8:	1b c0       	rjmp	.+54     	; 0xc10 <__floatsisf+0x6c>
     bda:	6f 5f       	subi	r22, 0xFF	; 255
     bdc:	7f 4f       	sbci	r23, 0xFF	; 255
     bde:	8f 4f       	sbci	r24, 0xFF	; 255
     be0:	9f 4f       	sbci	r25, 0xFF	; 255
     be2:	16 c0       	rjmp	.+44     	; 0xc10 <__floatsisf+0x6c>
     be4:	88 23       	and	r24, r24
     be6:	11 f0       	breq	.+4      	; 0xbec <__floatsisf+0x48>
     be8:	96 e9       	ldi	r25, 0x96	; 150
     bea:	11 c0       	rjmp	.+34     	; 0xc0e <__floatsisf+0x6a>
     bec:	77 23       	and	r23, r23
     bee:	21 f0       	breq	.+8      	; 0xbf8 <__floatsisf+0x54>
     bf0:	9e e8       	ldi	r25, 0x8E	; 142
     bf2:	87 2f       	mov	r24, r23
     bf4:	76 2f       	mov	r23, r22
     bf6:	05 c0       	rjmp	.+10     	; 0xc02 <__floatsisf+0x5e>
     bf8:	66 23       	and	r22, r22
     bfa:	71 f0       	breq	.+28     	; 0xc18 <__floatsisf+0x74>
     bfc:	96 e8       	ldi	r25, 0x86	; 134
     bfe:	86 2f       	mov	r24, r22
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	2a f0       	brmi	.+10     	; 0xc10 <__floatsisf+0x6c>
     c06:	9a 95       	dec	r25
     c08:	66 0f       	add	r22, r22
     c0a:	77 1f       	adc	r23, r23
     c0c:	88 1f       	adc	r24, r24
     c0e:	da f7       	brpl	.-10     	; 0xc06 <__floatsisf+0x62>
     c10:	88 0f       	add	r24, r24
     c12:	96 95       	lsr	r25
     c14:	87 95       	ror	r24
     c16:	97 f9       	bld	r25, 7
     c18:	08 95       	ret

00000c1a <__fp_cmp>:
     c1a:	99 0f       	add	r25, r25
     c1c:	00 08       	sbc	r0, r0
     c1e:	55 0f       	add	r21, r21
     c20:	aa 0b       	sbc	r26, r26
     c22:	e0 e8       	ldi	r30, 0x80	; 128
     c24:	fe ef       	ldi	r31, 0xFE	; 254
     c26:	16 16       	cp	r1, r22
     c28:	17 06       	cpc	r1, r23
     c2a:	e8 07       	cpc	r30, r24
     c2c:	f9 07       	cpc	r31, r25
     c2e:	c0 f0       	brcs	.+48     	; 0xc60 <__fp_cmp+0x46>
     c30:	12 16       	cp	r1, r18
     c32:	13 06       	cpc	r1, r19
     c34:	e4 07       	cpc	r30, r20
     c36:	f5 07       	cpc	r31, r21
     c38:	98 f0       	brcs	.+38     	; 0xc60 <__fp_cmp+0x46>
     c3a:	62 1b       	sub	r22, r18
     c3c:	73 0b       	sbc	r23, r19
     c3e:	84 0b       	sbc	r24, r20
     c40:	95 0b       	sbc	r25, r21
     c42:	39 f4       	brne	.+14     	; 0xc52 <__fp_cmp+0x38>
     c44:	0a 26       	eor	r0, r26
     c46:	61 f0       	breq	.+24     	; 0xc60 <__fp_cmp+0x46>
     c48:	23 2b       	or	r18, r19
     c4a:	24 2b       	or	r18, r20
     c4c:	25 2b       	or	r18, r21
     c4e:	21 f4       	brne	.+8      	; 0xc58 <__fp_cmp+0x3e>
     c50:	08 95       	ret
     c52:	0a 26       	eor	r0, r26
     c54:	09 f4       	brne	.+2      	; 0xc58 <__fp_cmp+0x3e>
     c56:	a1 40       	sbci	r26, 0x01	; 1
     c58:	a6 95       	lsr	r26
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	81 1d       	adc	r24, r1
     c5e:	81 1d       	adc	r24, r1
     c60:	08 95       	ret

00000c62 <__fp_inf>:
     c62:	97 f9       	bld	r25, 7
     c64:	9f 67       	ori	r25, 0x7F	; 127
     c66:	80 e8       	ldi	r24, 0x80	; 128
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	08 95       	ret

00000c6e <__fp_nan>:
     c6e:	9f ef       	ldi	r25, 0xFF	; 255
     c70:	80 ec       	ldi	r24, 0xC0	; 192
     c72:	08 95       	ret

00000c74 <__fp_pscA>:
     c74:	00 24       	eor	r0, r0
     c76:	0a 94       	dec	r0
     c78:	16 16       	cp	r1, r22
     c7a:	17 06       	cpc	r1, r23
     c7c:	18 06       	cpc	r1, r24
     c7e:	09 06       	cpc	r0, r25
     c80:	08 95       	ret

00000c82 <__fp_pscB>:
     c82:	00 24       	eor	r0, r0
     c84:	0a 94       	dec	r0
     c86:	12 16       	cp	r1, r18
     c88:	13 06       	cpc	r1, r19
     c8a:	14 06       	cpc	r1, r20
     c8c:	05 06       	cpc	r0, r21
     c8e:	08 95       	ret

00000c90 <__fp_round>:
     c90:	09 2e       	mov	r0, r25
     c92:	03 94       	inc	r0
     c94:	00 0c       	add	r0, r0
     c96:	11 f4       	brne	.+4      	; 0xc9c <__fp_round+0xc>
     c98:	88 23       	and	r24, r24
     c9a:	52 f0       	brmi	.+20     	; 0xcb0 <__fp_round+0x20>
     c9c:	bb 0f       	add	r27, r27
     c9e:	40 f4       	brcc	.+16     	; 0xcb0 <__fp_round+0x20>
     ca0:	bf 2b       	or	r27, r31
     ca2:	11 f4       	brne	.+4      	; 0xca8 <__fp_round+0x18>
     ca4:	60 ff       	sbrs	r22, 0
     ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <__fp_round+0x20>
     ca8:	6f 5f       	subi	r22, 0xFF	; 255
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	8f 4f       	sbci	r24, 0xFF	; 255
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	08 95       	ret

00000cb2 <__fp_split3>:
     cb2:	57 fd       	sbrc	r21, 7
     cb4:	90 58       	subi	r25, 0x80	; 128
     cb6:	44 0f       	add	r20, r20
     cb8:	55 1f       	adc	r21, r21
     cba:	59 f0       	breq	.+22     	; 0xcd2 <__fp_splitA+0x10>
     cbc:	5f 3f       	cpi	r21, 0xFF	; 255
     cbe:	71 f0       	breq	.+28     	; 0xcdc <__fp_splitA+0x1a>
     cc0:	47 95       	ror	r20

00000cc2 <__fp_splitA>:
     cc2:	88 0f       	add	r24, r24
     cc4:	97 fb       	bst	r25, 7
     cc6:	99 1f       	adc	r25, r25
     cc8:	61 f0       	breq	.+24     	; 0xce2 <__fp_splitA+0x20>
     cca:	9f 3f       	cpi	r25, 0xFF	; 255
     ccc:	79 f0       	breq	.+30     	; 0xcec <__fp_splitA+0x2a>
     cce:	87 95       	ror	r24
     cd0:	08 95       	ret
     cd2:	12 16       	cp	r1, r18
     cd4:	13 06       	cpc	r1, r19
     cd6:	14 06       	cpc	r1, r20
     cd8:	55 1f       	adc	r21, r21
     cda:	f2 cf       	rjmp	.-28     	; 0xcc0 <__fp_split3+0xe>
     cdc:	46 95       	lsr	r20
     cde:	f1 df       	rcall	.-30     	; 0xcc2 <__fp_splitA>
     ce0:	08 c0       	rjmp	.+16     	; 0xcf2 <__fp_splitA+0x30>
     ce2:	16 16       	cp	r1, r22
     ce4:	17 06       	cpc	r1, r23
     ce6:	18 06       	cpc	r1, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	f1 cf       	rjmp	.-30     	; 0xcce <__fp_splitA+0xc>
     cec:	86 95       	lsr	r24
     cee:	71 05       	cpc	r23, r1
     cf0:	61 05       	cpc	r22, r1
     cf2:	08 94       	sec
     cf4:	08 95       	ret

00000cf6 <__fp_zero>:
     cf6:	e8 94       	clt

00000cf8 <__fp_szero>:
     cf8:	bb 27       	eor	r27, r27
     cfa:	66 27       	eor	r22, r22
     cfc:	77 27       	eor	r23, r23
     cfe:	cb 01       	movw	r24, r22
     d00:	97 f9       	bld	r25, 7
     d02:	08 95       	ret

00000d04 <__mulsf3>:
     d04:	0e 94 95 06 	call	0xd2a	; 0xd2a <__mulsf3x>
     d08:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_round>
     d0c:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fp_pscA>
     d10:	38 f0       	brcs	.+14     	; 0xd20 <__mulsf3+0x1c>
     d12:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_pscB>
     d16:	20 f0       	brcs	.+8      	; 0xd20 <__mulsf3+0x1c>
     d18:	95 23       	and	r25, r21
     d1a:	11 f0       	breq	.+4      	; 0xd20 <__mulsf3+0x1c>
     d1c:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_inf>
     d20:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_nan>
     d24:	11 24       	eor	r1, r1
     d26:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_szero>

00000d2a <__mulsf3x>:
     d2a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_split3>
     d2e:	70 f3       	brcs	.-36     	; 0xd0c <__mulsf3+0x8>

00000d30 <__mulsf3_pse>:
     d30:	95 9f       	mul	r25, r21
     d32:	c1 f3       	breq	.-16     	; 0xd24 <__mulsf3+0x20>
     d34:	95 0f       	add	r25, r21
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	55 1f       	adc	r21, r21
     d3a:	62 9f       	mul	r22, r18
     d3c:	f0 01       	movw	r30, r0
     d3e:	72 9f       	mul	r23, r18
     d40:	bb 27       	eor	r27, r27
     d42:	f0 0d       	add	r31, r0
     d44:	b1 1d       	adc	r27, r1
     d46:	63 9f       	mul	r22, r19
     d48:	aa 27       	eor	r26, r26
     d4a:	f0 0d       	add	r31, r0
     d4c:	b1 1d       	adc	r27, r1
     d4e:	aa 1f       	adc	r26, r26
     d50:	64 9f       	mul	r22, r20
     d52:	66 27       	eor	r22, r22
     d54:	b0 0d       	add	r27, r0
     d56:	a1 1d       	adc	r26, r1
     d58:	66 1f       	adc	r22, r22
     d5a:	82 9f       	mul	r24, r18
     d5c:	22 27       	eor	r18, r18
     d5e:	b0 0d       	add	r27, r0
     d60:	a1 1d       	adc	r26, r1
     d62:	62 1f       	adc	r22, r18
     d64:	73 9f       	mul	r23, r19
     d66:	b0 0d       	add	r27, r0
     d68:	a1 1d       	adc	r26, r1
     d6a:	62 1f       	adc	r22, r18
     d6c:	83 9f       	mul	r24, r19
     d6e:	a0 0d       	add	r26, r0
     d70:	61 1d       	adc	r22, r1
     d72:	22 1f       	adc	r18, r18
     d74:	74 9f       	mul	r23, r20
     d76:	33 27       	eor	r19, r19
     d78:	a0 0d       	add	r26, r0
     d7a:	61 1d       	adc	r22, r1
     d7c:	23 1f       	adc	r18, r19
     d7e:	84 9f       	mul	r24, r20
     d80:	60 0d       	add	r22, r0
     d82:	21 1d       	adc	r18, r1
     d84:	82 2f       	mov	r24, r18
     d86:	76 2f       	mov	r23, r22
     d88:	6a 2f       	mov	r22, r26
     d8a:	11 24       	eor	r1, r1
     d8c:	9f 57       	subi	r25, 0x7F	; 127
     d8e:	50 40       	sbci	r21, 0x00	; 0
     d90:	9a f0       	brmi	.+38     	; 0xdb8 <__mulsf3_pse+0x88>
     d92:	f1 f0       	breq	.+60     	; 0xdd0 <__mulsf3_pse+0xa0>
     d94:	88 23       	and	r24, r24
     d96:	4a f0       	brmi	.+18     	; 0xdaa <__mulsf3_pse+0x7a>
     d98:	ee 0f       	add	r30, r30
     d9a:	ff 1f       	adc	r31, r31
     d9c:	bb 1f       	adc	r27, r27
     d9e:	66 1f       	adc	r22, r22
     da0:	77 1f       	adc	r23, r23
     da2:	88 1f       	adc	r24, r24
     da4:	91 50       	subi	r25, 0x01	; 1
     da6:	50 40       	sbci	r21, 0x00	; 0
     da8:	a9 f7       	brne	.-22     	; 0xd94 <__mulsf3_pse+0x64>
     daa:	9e 3f       	cpi	r25, 0xFE	; 254
     dac:	51 05       	cpc	r21, r1
     dae:	80 f0       	brcs	.+32     	; 0xdd0 <__mulsf3_pse+0xa0>
     db0:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_inf>
     db4:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_szero>
     db8:	5f 3f       	cpi	r21, 0xFF	; 255
     dba:	e4 f3       	brlt	.-8      	; 0xdb4 <__mulsf3_pse+0x84>
     dbc:	98 3e       	cpi	r25, 0xE8	; 232
     dbe:	d4 f3       	brlt	.-12     	; 0xdb4 <__mulsf3_pse+0x84>
     dc0:	86 95       	lsr	r24
     dc2:	77 95       	ror	r23
     dc4:	67 95       	ror	r22
     dc6:	b7 95       	ror	r27
     dc8:	f7 95       	ror	r31
     dca:	e7 95       	ror	r30
     dcc:	9f 5f       	subi	r25, 0xFF	; 255
     dce:	c1 f7       	brne	.-16     	; 0xdc0 <__mulsf3_pse+0x90>
     dd0:	fe 2b       	or	r31, r30
     dd2:	88 0f       	add	r24, r24
     dd4:	91 1d       	adc	r25, r1
     dd6:	96 95       	lsr	r25
     dd8:	87 95       	ror	r24
     dda:	97 f9       	bld	r25, 7
     ddc:	08 95       	ret

00000dde <pow>:
     dde:	fa 01       	movw	r30, r20
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	30 96       	adiw	r30, 0x00	; 0
     de6:	21 05       	cpc	r18, r1
     de8:	31 05       	cpc	r19, r1
     dea:	a1 f1       	breq	.+104    	; 0xe54 <pow+0x76>
     dec:	61 15       	cp	r22, r1
     dee:	71 05       	cpc	r23, r1
     df0:	61 f4       	brne	.+24     	; 0xe0a <pow+0x2c>
     df2:	80 38       	cpi	r24, 0x80	; 128
     df4:	bf e3       	ldi	r27, 0x3F	; 63
     df6:	9b 07       	cpc	r25, r27
     df8:	49 f1       	breq	.+82     	; 0xe4c <pow+0x6e>
     dfa:	68 94       	set
     dfc:	90 38       	cpi	r25, 0x80	; 128
     dfe:	81 05       	cpc	r24, r1
     e00:	61 f0       	breq	.+24     	; 0xe1a <pow+0x3c>
     e02:	80 38       	cpi	r24, 0x80	; 128
     e04:	bf ef       	ldi	r27, 0xFF	; 255
     e06:	9b 07       	cpc	r25, r27
     e08:	41 f0       	breq	.+16     	; 0xe1a <pow+0x3c>
     e0a:	99 23       	and	r25, r25
     e0c:	4a f5       	brpl	.+82     	; 0xe60 <pow+0x82>
     e0e:	ff 3f       	cpi	r31, 0xFF	; 255
     e10:	e1 05       	cpc	r30, r1
     e12:	31 05       	cpc	r19, r1
     e14:	21 05       	cpc	r18, r1
     e16:	19 f1       	breq	.+70     	; 0xe5e <pow+0x80>
     e18:	e8 94       	clt
     e1a:	08 94       	sec
     e1c:	e7 95       	ror	r30
     e1e:	d9 01       	movw	r26, r18
     e20:	aa 23       	and	r26, r26
     e22:	29 f4       	brne	.+10     	; 0xe2e <pow+0x50>
     e24:	ab 2f       	mov	r26, r27
     e26:	be 2f       	mov	r27, r30
     e28:	f8 5f       	subi	r31, 0xF8	; 248
     e2a:	d0 f3       	brcs	.-12     	; 0xe20 <pow+0x42>
     e2c:	10 c0       	rjmp	.+32     	; 0xe4e <pow+0x70>
     e2e:	ff 5f       	subi	r31, 0xFF	; 255
     e30:	70 f4       	brcc	.+28     	; 0xe4e <pow+0x70>
     e32:	a6 95       	lsr	r26
     e34:	e0 f7       	brcc	.-8      	; 0xe2e <pow+0x50>
     e36:	f7 39       	cpi	r31, 0x97	; 151
     e38:	50 f0       	brcs	.+20     	; 0xe4e <pow+0x70>
     e3a:	19 f0       	breq	.+6      	; 0xe42 <pow+0x64>
     e3c:	ff 3a       	cpi	r31, 0xAF	; 175
     e3e:	38 f4       	brcc	.+14     	; 0xe4e <pow+0x70>
     e40:	9f 77       	andi	r25, 0x7F	; 127
     e42:	9f 93       	push	r25
     e44:	0d d0       	rcall	.+26     	; 0xe60 <pow+0x82>
     e46:	0f 90       	pop	r0
     e48:	07 fc       	sbrc	r0, 7
     e4a:	90 58       	subi	r25, 0x80	; 128
     e4c:	08 95       	ret
     e4e:	46 f0       	brts	.+16     	; 0xe60 <pow+0x82>
     e50:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_nan>
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	80 e8       	ldi	r24, 0x80	; 128
     e5a:	9f e3       	ldi	r25, 0x3F	; 63
     e5c:	08 95       	ret
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	9f 77       	andi	r25, 0x7F	; 127
     e62:	5f 93       	push	r21
     e64:	4f 93       	push	r20
     e66:	3f 93       	push	r19
     e68:	2f 93       	push	r18
     e6a:	0e 94 37 08 	call	0x106e	; 0x106e <log>
     e6e:	2f 91       	pop	r18
     e70:	3f 91       	pop	r19
     e72:	4f 91       	pop	r20
     e74:	5f 91       	pop	r21
     e76:	0e 94 82 06 	call	0xd04	; 0xd04 <__mulsf3>
     e7a:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <exp>

00000e7e <round>:
     e7e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fp_splitA>
     e82:	e8 f0       	brcs	.+58     	; 0xebe <round+0x40>
     e84:	9e 37       	cpi	r25, 0x7E	; 126
     e86:	e8 f0       	brcs	.+58     	; 0xec2 <round+0x44>
     e88:	96 39       	cpi	r25, 0x96	; 150
     e8a:	b8 f4       	brcc	.+46     	; 0xeba <round+0x3c>
     e8c:	9e 38       	cpi	r25, 0x8E	; 142
     e8e:	48 f4       	brcc	.+18     	; 0xea2 <round+0x24>
     e90:	67 2f       	mov	r22, r23
     e92:	78 2f       	mov	r23, r24
     e94:	88 27       	eor	r24, r24
     e96:	98 5f       	subi	r25, 0xF8	; 248
     e98:	f9 cf       	rjmp	.-14     	; 0xe8c <round+0xe>
     e9a:	86 95       	lsr	r24
     e9c:	77 95       	ror	r23
     e9e:	67 95       	ror	r22
     ea0:	93 95       	inc	r25
     ea2:	95 39       	cpi	r25, 0x95	; 149
     ea4:	d0 f3       	brcs	.-12     	; 0xe9a <round+0x1c>
     ea6:	b6 2f       	mov	r27, r22
     ea8:	b1 70       	andi	r27, 0x01	; 1
     eaa:	6b 0f       	add	r22, r27
     eac:	71 1d       	adc	r23, r1
     eae:	81 1d       	adc	r24, r1
     eb0:	20 f4       	brcc	.+8      	; 0xeba <round+0x3c>
     eb2:	87 95       	ror	r24
     eb4:	77 95       	ror	r23
     eb6:	67 95       	ror	r22
     eb8:	93 95       	inc	r25
     eba:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_mintl>
     ebe:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_mpack>
     ec2:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_szero>
     ec6:	29 f4       	brne	.+10     	; 0xed2 <round+0x54>
     ec8:	16 f0       	brts	.+4      	; 0xece <round+0x50>
     eca:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_inf>
     ece:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_zero>
     ed2:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_nan>

00000ed6 <exp>:
     ed6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fp_splitA>
     eda:	a8 f3       	brcs	.-22     	; 0xec6 <round+0x48>
     edc:	96 38       	cpi	r25, 0x86	; 134
     ede:	a0 f7       	brcc	.-24     	; 0xec8 <round+0x4a>
     ee0:	07 f8       	bld	r0, 7
     ee2:	0f 92       	push	r0
     ee4:	e8 94       	clt
     ee6:	2b e3       	ldi	r18, 0x3B	; 59
     ee8:	3a ea       	ldi	r19, 0xAA	; 170
     eea:	48 eb       	ldi	r20, 0xB8	; 184
     eec:	5f e7       	ldi	r21, 0x7F	; 127
     eee:	0e 94 98 06 	call	0xd30	; 0xd30 <__mulsf3_pse>
     ef2:	0f 92       	push	r0
     ef4:	0f 92       	push	r0
     ef6:	0f 92       	push	r0
     ef8:	4d b7       	in	r20, 0x3d	; 61
     efa:	5e b7       	in	r21, 0x3e	; 62
     efc:	0f 92       	push	r0
     efe:	0e 94 7f 08 	call	0x10fe	; 0x10fe <modf>
     f02:	e8 e6       	ldi	r30, 0x68	; 104
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_powser>
     f0a:	4f 91       	pop	r20
     f0c:	5f 91       	pop	r21
     f0e:	ef 91       	pop	r30
     f10:	ff 91       	pop	r31
     f12:	e5 95       	asr	r30
     f14:	ee 1f       	adc	r30, r30
     f16:	ff 1f       	adc	r31, r31
     f18:	49 f0       	breq	.+18     	; 0xf2c <exp+0x56>
     f1a:	fe 57       	subi	r31, 0x7E	; 126
     f1c:	e0 68       	ori	r30, 0x80	; 128
     f1e:	44 27       	eor	r20, r20
     f20:	ee 0f       	add	r30, r30
     f22:	44 1f       	adc	r20, r20
     f24:	fa 95       	dec	r31
     f26:	e1 f7       	brne	.-8      	; 0xf20 <exp+0x4a>
     f28:	41 95       	neg	r20
     f2a:	55 0b       	sbc	r21, r21
     f2c:	0e 94 f9 07 	call	0xff2	; 0xff2 <ldexp>
     f30:	0f 90       	pop	r0
     f32:	07 fe       	sbrs	r0, 7
     f34:	0c 94 ed 07 	jmp	0xfda	; 0xfda <inverse>
     f38:	08 95       	ret

00000f3a <__fp_mintl>:
     f3a:	88 23       	and	r24, r24
     f3c:	71 f4       	brne	.+28     	; 0xf5a <__fp_mintl+0x20>
     f3e:	77 23       	and	r23, r23
     f40:	21 f0       	breq	.+8      	; 0xf4a <__fp_mintl+0x10>
     f42:	98 50       	subi	r25, 0x08	; 8
     f44:	87 2b       	or	r24, r23
     f46:	76 2f       	mov	r23, r22
     f48:	07 c0       	rjmp	.+14     	; 0xf58 <__fp_mintl+0x1e>
     f4a:	66 23       	and	r22, r22
     f4c:	11 f4       	brne	.+4      	; 0xf52 <__fp_mintl+0x18>
     f4e:	99 27       	eor	r25, r25
     f50:	0d c0       	rjmp	.+26     	; 0xf6c <__fp_mintl+0x32>
     f52:	90 51       	subi	r25, 0x10	; 16
     f54:	86 2b       	or	r24, r22
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	2a f0       	brmi	.+10     	; 0xf66 <__fp_mintl+0x2c>
     f5c:	9a 95       	dec	r25
     f5e:	66 0f       	add	r22, r22
     f60:	77 1f       	adc	r23, r23
     f62:	88 1f       	adc	r24, r24
     f64:	da f7       	brpl	.-10     	; 0xf5c <__fp_mintl+0x22>
     f66:	88 0f       	add	r24, r24
     f68:	96 95       	lsr	r25
     f6a:	87 95       	ror	r24
     f6c:	97 f9       	bld	r25, 7
     f6e:	08 95       	ret

00000f70 <__fp_mpack>:
     f70:	9f 3f       	cpi	r25, 0xFF	; 255
     f72:	31 f0       	breq	.+12     	; 0xf80 <__fp_mpack_finite+0xc>

00000f74 <__fp_mpack_finite>:
     f74:	91 50       	subi	r25, 0x01	; 1
     f76:	20 f4       	brcc	.+8      	; 0xf80 <__fp_mpack_finite+0xc>
     f78:	87 95       	ror	r24
     f7a:	77 95       	ror	r23
     f7c:	67 95       	ror	r22
     f7e:	b7 95       	ror	r27
     f80:	88 0f       	add	r24, r24
     f82:	91 1d       	adc	r25, r1
     f84:	96 95       	lsr	r25
     f86:	87 95       	ror	r24
     f88:	97 f9       	bld	r25, 7
     f8a:	08 95       	ret

00000f8c <__fp_powser>:
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	1f 93       	push	r17
     f92:	0f 93       	push	r16
     f94:	ff 92       	push	r15
     f96:	ef 92       	push	r14
     f98:	df 92       	push	r13
     f9a:	7b 01       	movw	r14, r22
     f9c:	8c 01       	movw	r16, r24
     f9e:	68 94       	set
     fa0:	06 c0       	rjmp	.+12     	; 0xfae <__fp_powser+0x22>
     fa2:	da 2e       	mov	r13, r26
     fa4:	ef 01       	movw	r28, r30
     fa6:	0e 94 95 06 	call	0xd2a	; 0xd2a <__mulsf3x>
     faa:	fe 01       	movw	r30, r28
     fac:	e8 94       	clt
     fae:	a5 91       	lpm	r26, Z+
     fb0:	25 91       	lpm	r18, Z+
     fb2:	35 91       	lpm	r19, Z+
     fb4:	45 91       	lpm	r20, Z+
     fb6:	55 91       	lpm	r21, Z+
     fb8:	a6 f3       	brts	.-24     	; 0xfa2 <__fp_powser+0x16>
     fba:	ef 01       	movw	r28, r30
     fbc:	0e 94 ce 04 	call	0x99c	; 0x99c <__addsf3x>
     fc0:	fe 01       	movw	r30, r28
     fc2:	97 01       	movw	r18, r14
     fc4:	a8 01       	movw	r20, r16
     fc6:	da 94       	dec	r13
     fc8:	69 f7       	brne	.-38     	; 0xfa4 <__fp_powser+0x18>
     fca:	df 90       	pop	r13
     fcc:	ef 90       	pop	r14
     fce:	ff 90       	pop	r15
     fd0:	0f 91       	pop	r16
     fd2:	1f 91       	pop	r17
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <inverse>:
     fda:	9b 01       	movw	r18, r22
     fdc:	ac 01       	movw	r20, r24
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	80 e8       	ldi	r24, 0x80	; 128
     fe4:	9f e3       	ldi	r25, 0x3F	; 63
     fe6:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__divsf3>
     fea:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_inf>
     fee:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_mpack>

00000ff2 <ldexp>:
     ff2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fp_splitA>
     ff6:	d8 f3       	brcs	.-10     	; 0xfee <inverse+0x14>
     ff8:	99 23       	and	r25, r25
     ffa:	c9 f3       	breq	.-14     	; 0xfee <inverse+0x14>
     ffc:	94 0f       	add	r25, r20
     ffe:	51 1d       	adc	r21, r1
    1000:	a3 f3       	brvs	.-24     	; 0xfea <inverse+0x10>
    1002:	91 50       	subi	r25, 0x01	; 1
    1004:	50 40       	sbci	r21, 0x00	; 0
    1006:	94 f0       	brlt	.+36     	; 0x102c <ldexp+0x3a>
    1008:	59 f0       	breq	.+22     	; 0x1020 <ldexp+0x2e>
    100a:	88 23       	and	r24, r24
    100c:	32 f0       	brmi	.+12     	; 0x101a <ldexp+0x28>
    100e:	66 0f       	add	r22, r22
    1010:	77 1f       	adc	r23, r23
    1012:	88 1f       	adc	r24, r24
    1014:	91 50       	subi	r25, 0x01	; 1
    1016:	50 40       	sbci	r21, 0x00	; 0
    1018:	c1 f7       	brne	.-16     	; 0x100a <ldexp+0x18>
    101a:	9e 3f       	cpi	r25, 0xFE	; 254
    101c:	51 05       	cpc	r21, r1
    101e:	2c f7       	brge	.-54     	; 0xfea <inverse+0x10>
    1020:	88 0f       	add	r24, r24
    1022:	91 1d       	adc	r25, r1
    1024:	96 95       	lsr	r25
    1026:	87 95       	ror	r24
    1028:	97 f9       	bld	r25, 7
    102a:	08 95       	ret
    102c:	5f 3f       	cpi	r21, 0xFF	; 255
    102e:	ac f0       	brlt	.+42     	; 0x105a <ldexp+0x68>
    1030:	98 3e       	cpi	r25, 0xE8	; 232
    1032:	9c f0       	brlt	.+38     	; 0x105a <ldexp+0x68>
    1034:	bb 27       	eor	r27, r27
    1036:	86 95       	lsr	r24
    1038:	77 95       	ror	r23
    103a:	67 95       	ror	r22
    103c:	b7 95       	ror	r27
    103e:	08 f4       	brcc	.+2      	; 0x1042 <ldexp+0x50>
    1040:	b1 60       	ori	r27, 0x01	; 1
    1042:	93 95       	inc	r25
    1044:	c1 f7       	brne	.-16     	; 0x1036 <ldexp+0x44>
    1046:	bb 0f       	add	r27, r27
    1048:	58 f7       	brcc	.-42     	; 0x1020 <ldexp+0x2e>
    104a:	11 f4       	brne	.+4      	; 0x1050 <ldexp+0x5e>
    104c:	60 ff       	sbrs	r22, 0
    104e:	e8 cf       	rjmp	.-48     	; 0x1020 <ldexp+0x2e>
    1050:	6f 5f       	subi	r22, 0xFF	; 255
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	8f 4f       	sbci	r24, 0xFF	; 255
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	e3 cf       	rjmp	.-58     	; 0x1020 <ldexp+0x2e>
    105a:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_szero>
    105e:	16 f0       	brts	.+4      	; 0x1064 <ldexp+0x72>
    1060:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_mpack>
    1064:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_nan>
    1068:	68 94       	set
    106a:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__fp_inf>

0000106e <log>:
    106e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fp_splitA>
    1072:	a8 f3       	brcs	.-22     	; 0x105e <ldexp+0x6c>
    1074:	99 23       	and	r25, r25
    1076:	c1 f3       	breq	.-16     	; 0x1068 <ldexp+0x76>
    1078:	ae f3       	brts	.-22     	; 0x1064 <ldexp+0x72>
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	1f 93       	push	r17
    1080:	0f 93       	push	r16
    1082:	ff 92       	push	r15
    1084:	c9 2f       	mov	r28, r25
    1086:	dd 27       	eor	r29, r29
    1088:	88 23       	and	r24, r24
    108a:	2a f0       	brmi	.+10     	; 0x1096 <log+0x28>
    108c:	21 97       	sbiw	r28, 0x01	; 1
    108e:	66 0f       	add	r22, r22
    1090:	77 1f       	adc	r23, r23
    1092:	88 1f       	adc	r24, r24
    1094:	da f7       	brpl	.-10     	; 0x108c <log+0x1e>
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e8       	ldi	r20, 0x80	; 128
    109c:	5f eb       	ldi	r21, 0xBF	; 191
    109e:	9f e3       	ldi	r25, 0x3F	; 63
    10a0:	88 39       	cpi	r24, 0x98	; 152
    10a2:	20 f0       	brcs	.+8      	; 0x10ac <log+0x3e>
    10a4:	80 3e       	cpi	r24, 0xE0	; 224
    10a6:	38 f0       	brcs	.+14     	; 0x10b6 <log+0x48>
    10a8:	21 96       	adiw	r28, 0x01	; 1
    10aa:	8f 77       	andi	r24, 0x7F	; 127
    10ac:	0e 94 b7 04 	call	0x96e	; 0x96e <__addsf3>
    10b0:	e0 e9       	ldi	r30, 0x90	; 144
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <log+0x50>
    10b6:	0e 94 b7 04 	call	0x96e	; 0x96e <__addsf3>
    10ba:	ed eb       	ldi	r30, 0xBD	; 189
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_powser>
    10c2:	8b 01       	movw	r16, r22
    10c4:	be 01       	movw	r22, r28
    10c6:	ec 01       	movw	r28, r24
    10c8:	fb 2e       	mov	r15, r27
    10ca:	6f 57       	subi	r22, 0x7F	; 127
    10cc:	71 09       	sbc	r23, r1
    10ce:	75 95       	asr	r23
    10d0:	77 1f       	adc	r23, r23
    10d2:	88 0b       	sbc	r24, r24
    10d4:	99 0b       	sbc	r25, r25
    10d6:	0e 94 d2 05 	call	0xba4	; 0xba4 <__floatsisf>
    10da:	28 e1       	ldi	r18, 0x18	; 24
    10dc:	32 e7       	ldi	r19, 0x72	; 114
    10de:	41 e3       	ldi	r20, 0x31	; 49
    10e0:	5f e3       	ldi	r21, 0x3F	; 63
    10e2:	0e 94 95 06 	call	0xd2a	; 0xd2a <__mulsf3x>
    10e6:	af 2d       	mov	r26, r15
    10e8:	98 01       	movw	r18, r16
    10ea:	ae 01       	movw	r20, r28
    10ec:	ff 90       	pop	r15
    10ee:	0f 91       	pop	r16
    10f0:	1f 91       	pop	r17
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	0e 94 ce 04 	call	0x99c	; 0x99c <__addsf3x>
    10fa:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_round>

000010fe <modf>:
    10fe:	fa 01       	movw	r30, r20
    1100:	dc 01       	movw	r26, r24
    1102:	aa 0f       	add	r26, r26
    1104:	bb 1f       	adc	r27, r27
    1106:	9b 01       	movw	r18, r22
    1108:	ac 01       	movw	r20, r24
    110a:	bf 57       	subi	r27, 0x7F	; 127
    110c:	28 f4       	brcc	.+10     	; 0x1118 <modf+0x1a>
    110e:	22 27       	eor	r18, r18
    1110:	33 27       	eor	r19, r19
    1112:	44 27       	eor	r20, r20
    1114:	50 78       	andi	r21, 0x80	; 128
    1116:	20 c0       	rjmp	.+64     	; 0x1158 <modf+0x5a>
    1118:	b7 51       	subi	r27, 0x17	; 23
    111a:	90 f4       	brcc	.+36     	; 0x1140 <modf+0x42>
    111c:	ab 2f       	mov	r26, r27
    111e:	00 24       	eor	r0, r0
    1120:	46 95       	lsr	r20
    1122:	37 95       	ror	r19
    1124:	27 95       	ror	r18
    1126:	01 1c       	adc	r0, r1
    1128:	a3 95       	inc	r26
    112a:	d2 f3       	brmi	.-12     	; 0x1120 <modf+0x22>
    112c:	00 20       	and	r0, r0
    112e:	71 f0       	breq	.+28     	; 0x114c <modf+0x4e>
    1130:	22 0f       	add	r18, r18
    1132:	33 1f       	adc	r19, r19
    1134:	44 1f       	adc	r20, r20
    1136:	b3 95       	inc	r27
    1138:	da f3       	brmi	.-10     	; 0x1130 <modf+0x32>
    113a:	0e d0       	rcall	.+28     	; 0x1158 <modf+0x5a>
    113c:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__subsf3>
    1140:	61 30       	cpi	r22, 0x01	; 1
    1142:	71 05       	cpc	r23, r1
    1144:	a0 e8       	ldi	r26, 0x80	; 128
    1146:	8a 07       	cpc	r24, r26
    1148:	b9 46       	sbci	r27, 0x69	; 105
    114a:	30 f4       	brcc	.+12     	; 0x1158 <modf+0x5a>
    114c:	9b 01       	movw	r18, r22
    114e:	ac 01       	movw	r20, r24
    1150:	66 27       	eor	r22, r22
    1152:	77 27       	eor	r23, r23
    1154:	88 27       	eor	r24, r24
    1156:	90 78       	andi	r25, 0x80	; 128
    1158:	30 96       	adiw	r30, 0x00	; 0
    115a:	21 f0       	breq	.+8      	; 0x1164 <modf+0x66>
    115c:	20 83       	st	Z, r18
    115e:	31 83       	std	Z+1, r19	; 0x01
    1160:	42 83       	std	Z+2, r20	; 0x02
    1162:	53 83       	std	Z+3, r21	; 0x03
    1164:	08 95       	ret

00001166 <__udivmodsi4>:
    1166:	a1 e2       	ldi	r26, 0x21	; 33
    1168:	1a 2e       	mov	r1, r26
    116a:	aa 1b       	sub	r26, r26
    116c:	bb 1b       	sub	r27, r27
    116e:	fd 01       	movw	r30, r26
    1170:	0d c0       	rjmp	.+26     	; 0x118c <__udivmodsi4_ep>

00001172 <__udivmodsi4_loop>:
    1172:	aa 1f       	adc	r26, r26
    1174:	bb 1f       	adc	r27, r27
    1176:	ee 1f       	adc	r30, r30
    1178:	ff 1f       	adc	r31, r31
    117a:	a2 17       	cp	r26, r18
    117c:	b3 07       	cpc	r27, r19
    117e:	e4 07       	cpc	r30, r20
    1180:	f5 07       	cpc	r31, r21
    1182:	20 f0       	brcs	.+8      	; 0x118c <__udivmodsi4_ep>
    1184:	a2 1b       	sub	r26, r18
    1186:	b3 0b       	sbc	r27, r19
    1188:	e4 0b       	sbc	r30, r20
    118a:	f5 0b       	sbc	r31, r21

0000118c <__udivmodsi4_ep>:
    118c:	66 1f       	adc	r22, r22
    118e:	77 1f       	adc	r23, r23
    1190:	88 1f       	adc	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	1a 94       	dec	r1
    1196:	69 f7       	brne	.-38     	; 0x1172 <__udivmodsi4_loop>
    1198:	60 95       	com	r22
    119a:	70 95       	com	r23
    119c:	80 95       	com	r24
    119e:	90 95       	com	r25
    11a0:	9b 01       	movw	r18, r22
    11a2:	ac 01       	movw	r20, r24
    11a4:	bd 01       	movw	r22, r26
    11a6:	cf 01       	movw	r24, r30
    11a8:	08 95       	ret

000011aa <__umulhisi3>:
    11aa:	a2 9f       	mul	r26, r18
    11ac:	b0 01       	movw	r22, r0
    11ae:	b3 9f       	mul	r27, r19
    11b0:	c0 01       	movw	r24, r0
    11b2:	a3 9f       	mul	r26, r19
    11b4:	70 0d       	add	r23, r0
    11b6:	81 1d       	adc	r24, r1
    11b8:	11 24       	eor	r1, r1
    11ba:	91 1d       	adc	r25, r1
    11bc:	b2 9f       	mul	r27, r18
    11be:	70 0d       	add	r23, r0
    11c0:	81 1d       	adc	r24, r1
    11c2:	11 24       	eor	r1, r1
    11c4:	91 1d       	adc	r25, r1
    11c6:	08 95       	ret

000011c8 <_exit>:
    11c8:	f8 94       	cli

000011ca <__stop_program>:
    11ca:	ff cf       	rjmp	.-2      	; 0x11ca <__stop_program>
