
group37.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000033b  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000227  00000000  00000000  000005e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c9  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00000ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023f  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000154  00000000  00000000  00000d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000ecf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  78:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <uart_init>:
 #define F_CPU 16000000UL
 #include <util/delay.h>

 //Initializes the UART
 void uart_init() {
	UBRR0H = 0;
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 103;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B|= (1<<TXEN0);	//Sets the Transmit Enable to 1
  8a:	e1 ec       	ldi	r30, 0xC1	; 193
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 60       	ori	r24, 0x08	; 8
  92:	80 83       	st	Z, r24
	UCSR0C|= (1<<UCSZ00)|(1<<UCSZ01);	//Sets an 8-bit character
  94:	e2 ec       	ldi	r30, 0xC2	; 194
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	86 60       	ori	r24, 0x06	; 6
  9c:	80 83       	st	Z, r24
  9e:	08 95       	ret

000000a0 <uart_transmit>:
 }

 //Transmits the data
 void uart_transmit(uint8_t data) {
	while(!((1<<UDRE0) && UCSR0A));	//When UDRE0 is empty, put data value into buffer to be sent
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	99 23       	and	r25, r25
  a8:	e9 f3       	breq	.-6      	; 0xa4 <uart_transmit+0x4>
		UDR0 = data;
  aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ae:	08 95       	ret

000000b0 <wololo>:
 }

 //Converts our parameters into the value to send
 unsigned int wololo(uint8_t input, uint8_t position, uint8_t decimal) {
	unsigned int output = input;
  b0:	90 e0       	ldi	r25, 0x00	; 0
	if (decimal == 1) { output += 16; }
  b2:	41 30       	cpi	r20, 0x01	; 1
  b4:	09 f4       	brne	.+2      	; 0xb8 <wololo+0x8>
  b6:	40 96       	adiw	r24, 0x10	; 16
	if (position == 0) { output += 96; }
  b8:	61 11       	cpse	r22, r1
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <wololo+0x12>
  bc:	80 5a       	subi	r24, 0xA0	; 160
  be:	9f 4f       	sbci	r25, 0xFF	; 255
  c0:	08 95       	ret
	if (position == 1) { output += 64; }
  c2:	61 30       	cpi	r22, 0x01	; 1
  c4:	19 f4       	brne	.+6      	; 0xcc <wololo+0x1c>
  c6:	80 5c       	subi	r24, 0xC0	; 192
  c8:	9f 4f       	sbci	r25, 0xFF	; 255
  ca:	08 95       	ret
	if (position == 2) { output += 32; }
  cc:	62 30       	cpi	r22, 0x02	; 2
  ce:	09 f4       	brne	.+2      	; 0xd2 <wololo+0x22>
  d0:	80 96       	adiw	r24, 0x20	; 32
	return output;
  d2:	08 95       	ret

000000d4 <main>:
#include "prototypes37.h"
#define F_CPU 16000000UL
#include <util/delay.h>

int main(void) {
	uart_init();	//Tells me the position of the data to send
  d4:	0e 94 40 00 	call	0x80	; 0x80 <uart_init>
  d8:	d3 e0       	ldi	r29, 0x03	; 3
	int dataInt = 6969;
  da:	89 e3       	ldi	r24, 0x39	; 57
  dc:	9b e1       	ldi	r25, 0x1B	; 27
	uint8_t hasDecimal = 0;
	uint8_t dataArray[4];
	uint8_t index = 0;
	
	for (int i=3;i>=0;i--) {
		dataArray[i] = wololo(dataInt%10, i, hasDecimal);
  de:	0a e0       	ldi	r16, 0x0A	; 10
  e0:	10 e0       	ldi	r17, 0x00	; 0
  e2:	b8 01       	movw	r22, r16
  e4:	0e 94 a0 00 	call	0x140	; 0x140 <__divmodhi4>
  e8:	f6 2e       	mov	r15, r22
  ea:	c7 2f       	mov	r28, r23
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	6d 2f       	mov	r22, r29
  f0:	0e 94 58 00 	call	0xb0	; 0xb0 <wololo>
		dataInt = dataInt/10;
  f4:	8f 2d       	mov	r24, r15
  f6:	9c 2f       	mov	r25, r28
  f8:	d1 50       	subi	r29, 0x01	; 1
  fa:	98 f7       	brcc	.-26     	; 0xe2 <main+0xe>
  fc:	12 c0       	rjmp	.+36     	; 0x122 <main+0x4e>
	}

    while (1) {
		//uint8_t data = dataArray[index];	//Get the data to send	
		uint8_t data = wololo(4, 0, 0);
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	0e 94 58 00 	call	0xb0	; 0xb0 <wololo>
		uart_transmit(data);
 108:	0e 94 50 00 	call	0xa0	; 0xa0 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	8f ed       	ldi	r24, 0xDF	; 223
 10e:	9e e2       	ldi	r25, 0x2E	; 46
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x3c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x42>
 116:	00 00       	nop
		_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
		index++;
 118:	cf 5f       	subi	r28, 0xFF	; 255
		if (index == 4) {
 11a:	c4 30       	cpi	r28, 0x04	; 4
 11c:	81 f7       	brne	.-32     	; 0xfe <main+0x2a>
			index = 0;
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	ee cf       	rjmp	.-36     	; 0xfe <main+0x2a>
		dataInt = dataInt/10;
	}

    while (1) {
		//uint8_t data = dataArray[index];	//Get the data to send	
		uint8_t data = wololo(4, 0, 0);
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	0e 94 58 00 	call	0xb0	; 0xb0 <wololo>
		uart_transmit(data);
 12c:	0e 94 50 00 	call	0xa0	; 0xa0 <uart_transmit>
 130:	8f ed       	ldi	r24, 0xDF	; 223
 132:	9e e2       	ldi	r25, 0x2E	; 46
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x60>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x66>
 13a:	00 00       	nop
		_delay_ms(3);	//Small time delay so that no apparent flicker on seven segment displays
		index++;
 13c:	c1 e0       	ldi	r28, 0x01	; 1
 13e:	df cf       	rjmp	.-66     	; 0xfe <main+0x2a>

00000140 <__divmodhi4>:
 140:	97 fb       	bst	r25, 7
 142:	07 2e       	mov	r0, r23
 144:	16 f4       	brtc	.+4      	; 0x14a <__divmodhi4+0xa>
 146:	00 94       	com	r0
 148:	07 d0       	rcall	.+14     	; 0x158 <__divmodhi4_neg1>
 14a:	77 fd       	sbrc	r23, 7
 14c:	09 d0       	rcall	.+18     	; 0x160 <__divmodhi4_neg2>
 14e:	0e 94 b4 00 	call	0x168	; 0x168 <__udivmodhi4>
 152:	07 fc       	sbrc	r0, 7
 154:	05 d0       	rcall	.+10     	; 0x160 <__divmodhi4_neg2>
 156:	3e f4       	brtc	.+14     	; 0x166 <__divmodhi4_exit>

00000158 <__divmodhi4_neg1>:
 158:	90 95       	com	r25
 15a:	81 95       	neg	r24
 15c:	9f 4f       	sbci	r25, 0xFF	; 255
 15e:	08 95       	ret

00000160 <__divmodhi4_neg2>:
 160:	70 95       	com	r23
 162:	61 95       	neg	r22
 164:	7f 4f       	sbci	r23, 0xFF	; 255

00000166 <__divmodhi4_exit>:
 166:	08 95       	ret

00000168 <__udivmodhi4>:
 168:	aa 1b       	sub	r26, r26
 16a:	bb 1b       	sub	r27, r27
 16c:	51 e1       	ldi	r21, 0x11	; 17
 16e:	07 c0       	rjmp	.+14     	; 0x17e <__udivmodhi4_ep>

00000170 <__udivmodhi4_loop>:
 170:	aa 1f       	adc	r26, r26
 172:	bb 1f       	adc	r27, r27
 174:	a6 17       	cp	r26, r22
 176:	b7 07       	cpc	r27, r23
 178:	10 f0       	brcs	.+4      	; 0x17e <__udivmodhi4_ep>
 17a:	a6 1b       	sub	r26, r22
 17c:	b7 0b       	sbc	r27, r23

0000017e <__udivmodhi4_ep>:
 17e:	88 1f       	adc	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	5a 95       	dec	r21
 184:	a9 f7       	brne	.-22     	; 0x170 <__udivmodhi4_loop>
 186:	80 95       	com	r24
 188:	90 95       	com	r25
 18a:	bc 01       	movw	r22, r24
 18c:	cd 01       	movw	r24, r26
 18e:	08 95       	ret

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
